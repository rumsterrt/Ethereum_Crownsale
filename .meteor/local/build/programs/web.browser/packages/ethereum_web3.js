//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;

/* Package-scope variables */
var require, XMLHttpRequest, Web3, BigNumber;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/ethereum_web3/dist/web3.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports=[                                                                                                       // 2
  {                                                                                                                    // 3
    "constant": true,                                                                                                  // 4
    "inputs": [                                                                                                        // 5
      {                                                                                                                // 6
        "name": "_owner",                                                                                              // 7
        "type": "address"                                                                                              // 8
      }                                                                                                                // 9
    ],                                                                                                                 // 10
    "name": "name",                                                                                                    // 11
    "outputs": [                                                                                                       // 12
      {                                                                                                                // 13
        "name": "o_name",                                                                                              // 14
        "type": "bytes32"                                                                                              // 15
      }                                                                                                                // 16
    ],                                                                                                                 // 17
    "type": "function"                                                                                                 // 18
  },                                                                                                                   // 19
  {                                                                                                                    // 20
    "constant": true,                                                                                                  // 21
    "inputs": [                                                                                                        // 22
      {                                                                                                                // 23
        "name": "_name",                                                                                               // 24
        "type": "bytes32"                                                                                              // 25
      }                                                                                                                // 26
    ],                                                                                                                 // 27
    "name": "owner",                                                                                                   // 28
    "outputs": [                                                                                                       // 29
      {                                                                                                                // 30
        "name": "",                                                                                                    // 31
        "type": "address"                                                                                              // 32
      }                                                                                                                // 33
    ],                                                                                                                 // 34
    "type": "function"                                                                                                 // 35
  },                                                                                                                   // 36
  {                                                                                                                    // 37
    "constant": true,                                                                                                  // 38
    "inputs": [                                                                                                        // 39
      {                                                                                                                // 40
        "name": "_name",                                                                                               // 41
        "type": "bytes32"                                                                                              // 42
      }                                                                                                                // 43
    ],                                                                                                                 // 44
    "name": "content",                                                                                                 // 45
    "outputs": [                                                                                                       // 46
      {                                                                                                                // 47
        "name": "",                                                                                                    // 48
        "type": "bytes32"                                                                                              // 49
      }                                                                                                                // 50
    ],                                                                                                                 // 51
    "type": "function"                                                                                                 // 52
  },                                                                                                                   // 53
  {                                                                                                                    // 54
    "constant": true,                                                                                                  // 55
    "inputs": [                                                                                                        // 56
      {                                                                                                                // 57
        "name": "_name",                                                                                               // 58
        "type": "bytes32"                                                                                              // 59
      }                                                                                                                // 60
    ],                                                                                                                 // 61
    "name": "addr",                                                                                                    // 62
    "outputs": [                                                                                                       // 63
      {                                                                                                                // 64
        "name": "",                                                                                                    // 65
        "type": "address"                                                                                              // 66
      }                                                                                                                // 67
    ],                                                                                                                 // 68
    "type": "function"                                                                                                 // 69
  },                                                                                                                   // 70
  {                                                                                                                    // 71
    "constant": false,                                                                                                 // 72
    "inputs": [                                                                                                        // 73
      {                                                                                                                // 74
        "name": "_name",                                                                                               // 75
        "type": "bytes32"                                                                                              // 76
      }                                                                                                                // 77
    ],                                                                                                                 // 78
    "name": "reserve",                                                                                                 // 79
    "outputs": [],                                                                                                     // 80
    "type": "function"                                                                                                 // 81
  },                                                                                                                   // 82
  {                                                                                                                    // 83
    "constant": true,                                                                                                  // 84
    "inputs": [                                                                                                        // 85
      {                                                                                                                // 86
        "name": "_name",                                                                                               // 87
        "type": "bytes32"                                                                                              // 88
      }                                                                                                                // 89
    ],                                                                                                                 // 90
    "name": "subRegistrar",                                                                                            // 91
    "outputs": [                                                                                                       // 92
      {                                                                                                                // 93
        "name": "",                                                                                                    // 94
        "type": "address"                                                                                              // 95
      }                                                                                                                // 96
    ],                                                                                                                 // 97
    "type": "function"                                                                                                 // 98
  },                                                                                                                   // 99
  {                                                                                                                    // 100
    "constant": false,                                                                                                 // 101
    "inputs": [                                                                                                        // 102
      {                                                                                                                // 103
        "name": "_name",                                                                                               // 104
        "type": "bytes32"                                                                                              // 105
      },                                                                                                               // 106
      {                                                                                                                // 107
        "name": "_newOwner",                                                                                           // 108
        "type": "address"                                                                                              // 109
      }                                                                                                                // 110
    ],                                                                                                                 // 111
    "name": "transfer",                                                                                                // 112
    "outputs": [],                                                                                                     // 113
    "type": "function"                                                                                                 // 114
  },                                                                                                                   // 115
  {                                                                                                                    // 116
    "constant": false,                                                                                                 // 117
    "inputs": [                                                                                                        // 118
      {                                                                                                                // 119
        "name": "_name",                                                                                               // 120
        "type": "bytes32"                                                                                              // 121
      },                                                                                                               // 122
      {                                                                                                                // 123
        "name": "_registrar",                                                                                          // 124
        "type": "address"                                                                                              // 125
      }                                                                                                                // 126
    ],                                                                                                                 // 127
    "name": "setSubRegistrar",                                                                                         // 128
    "outputs": [],                                                                                                     // 129
    "type": "function"                                                                                                 // 130
  },                                                                                                                   // 131
  {                                                                                                                    // 132
    "constant": false,                                                                                                 // 133
    "inputs": [],                                                                                                      // 134
    "name": "Registrar",                                                                                               // 135
    "outputs": [],                                                                                                     // 136
    "type": "function"                                                                                                 // 137
  },                                                                                                                   // 138
  {                                                                                                                    // 139
    "constant": false,                                                                                                 // 140
    "inputs": [                                                                                                        // 141
      {                                                                                                                // 142
        "name": "_name",                                                                                               // 143
        "type": "bytes32"                                                                                              // 144
      },                                                                                                               // 145
      {                                                                                                                // 146
        "name": "_a",                                                                                                  // 147
        "type": "address"                                                                                              // 148
      },                                                                                                               // 149
      {                                                                                                                // 150
        "name": "_primary",                                                                                            // 151
        "type": "bool"                                                                                                 // 152
      }                                                                                                                // 153
    ],                                                                                                                 // 154
    "name": "setAddress",                                                                                              // 155
    "outputs": [],                                                                                                     // 156
    "type": "function"                                                                                                 // 157
  },                                                                                                                   // 158
  {                                                                                                                    // 159
    "constant": false,                                                                                                 // 160
    "inputs": [                                                                                                        // 161
      {                                                                                                                // 162
        "name": "_name",                                                                                               // 163
        "type": "bytes32"                                                                                              // 164
      },                                                                                                               // 165
      {                                                                                                                // 166
        "name": "_content",                                                                                            // 167
        "type": "bytes32"                                                                                              // 168
      }                                                                                                                // 169
    ],                                                                                                                 // 170
    "name": "setContent",                                                                                              // 171
    "outputs": [],                                                                                                     // 172
    "type": "function"                                                                                                 // 173
  },                                                                                                                   // 174
  {                                                                                                                    // 175
    "constant": false,                                                                                                 // 176
    "inputs": [                                                                                                        // 177
      {                                                                                                                // 178
        "name": "_name",                                                                                               // 179
        "type": "bytes32"                                                                                              // 180
      }                                                                                                                // 181
    ],                                                                                                                 // 182
    "name": "disown",                                                                                                  // 183
    "outputs": [],                                                                                                     // 184
    "type": "function"                                                                                                 // 185
  },                                                                                                                   // 186
  {                                                                                                                    // 187
    "anonymous": false,                                                                                                // 188
    "inputs": [                                                                                                        // 189
      {                                                                                                                // 190
        "indexed": true,                                                                                               // 191
        "name": "_name",                                                                                               // 192
        "type": "bytes32"                                                                                              // 193
      },                                                                                                               // 194
      {                                                                                                                // 195
        "indexed": false,                                                                                              // 196
        "name": "_winner",                                                                                             // 197
        "type": "address"                                                                                              // 198
      }                                                                                                                // 199
    ],                                                                                                                 // 200
    "name": "AuctionEnded",                                                                                            // 201
    "type": "event"                                                                                                    // 202
  },                                                                                                                   // 203
  {                                                                                                                    // 204
    "anonymous": false,                                                                                                // 205
    "inputs": [                                                                                                        // 206
      {                                                                                                                // 207
        "indexed": true,                                                                                               // 208
        "name": "_name",                                                                                               // 209
        "type": "bytes32"                                                                                              // 210
      },                                                                                                               // 211
      {                                                                                                                // 212
        "indexed": false,                                                                                              // 213
        "name": "_bidder",                                                                                             // 214
        "type": "address"                                                                                              // 215
      },                                                                                                               // 216
      {                                                                                                                // 217
        "indexed": false,                                                                                              // 218
        "name": "_value",                                                                                              // 219
        "type": "uint256"                                                                                              // 220
      }                                                                                                                // 221
    ],                                                                                                                 // 222
    "name": "NewBid",                                                                                                  // 223
    "type": "event"                                                                                                    // 224
  },                                                                                                                   // 225
  {                                                                                                                    // 226
    "anonymous": false,                                                                                                // 227
    "inputs": [                                                                                                        // 228
      {                                                                                                                // 229
        "indexed": true,                                                                                               // 230
        "name": "name",                                                                                                // 231
        "type": "bytes32"                                                                                              // 232
      }                                                                                                                // 233
    ],                                                                                                                 // 234
    "name": "Changed",                                                                                                 // 235
    "type": "event"                                                                                                    // 236
  },                                                                                                                   // 237
  {                                                                                                                    // 238
    "anonymous": false,                                                                                                // 239
    "inputs": [                                                                                                        // 240
      {                                                                                                                // 241
        "indexed": true,                                                                                               // 242
        "name": "name",                                                                                                // 243
        "type": "bytes32"                                                                                              // 244
      },                                                                                                               // 245
      {                                                                                                                // 246
        "indexed": true,                                                                                               // 247
        "name": "addr",                                                                                                // 248
        "type": "address"                                                                                              // 249
      }                                                                                                                // 250
    ],                                                                                                                 // 251
    "name": "PrimaryChanged",                                                                                          // 252
    "type": "event"                                                                                                    // 253
  }                                                                                                                    // 254
]                                                                                                                      // 255
                                                                                                                       // 256
},{}],2:[function(require,module,exports){                                                                             // 257
module.exports=[                                                                                                       // 258
  {                                                                                                                    // 259
    "constant": true,                                                                                                  // 260
    "inputs": [                                                                                                        // 261
      {                                                                                                                // 262
        "name": "_name",                                                                                               // 263
        "type": "bytes32"                                                                                              // 264
      }                                                                                                                // 265
    ],                                                                                                                 // 266
    "name": "owner",                                                                                                   // 267
    "outputs": [                                                                                                       // 268
      {                                                                                                                // 269
        "name": "",                                                                                                    // 270
        "type": "address"                                                                                              // 271
      }                                                                                                                // 272
    ],                                                                                                                 // 273
    "type": "function"                                                                                                 // 274
  },                                                                                                                   // 275
  {                                                                                                                    // 276
    "constant": false,                                                                                                 // 277
    "inputs": [                                                                                                        // 278
      {                                                                                                                // 279
        "name": "_name",                                                                                               // 280
        "type": "bytes32"                                                                                              // 281
      },                                                                                                               // 282
      {                                                                                                                // 283
        "name": "_refund",                                                                                             // 284
        "type": "address"                                                                                              // 285
      }                                                                                                                // 286
    ],                                                                                                                 // 287
    "name": "disown",                                                                                                  // 288
    "outputs": [],                                                                                                     // 289
    "type": "function"                                                                                                 // 290
  },                                                                                                                   // 291
  {                                                                                                                    // 292
    "constant": true,                                                                                                  // 293
    "inputs": [                                                                                                        // 294
      {                                                                                                                // 295
        "name": "_name",                                                                                               // 296
        "type": "bytes32"                                                                                              // 297
      }                                                                                                                // 298
    ],                                                                                                                 // 299
    "name": "addr",                                                                                                    // 300
    "outputs": [                                                                                                       // 301
      {                                                                                                                // 302
        "name": "",                                                                                                    // 303
        "type": "address"                                                                                              // 304
      }                                                                                                                // 305
    ],                                                                                                                 // 306
    "type": "function"                                                                                                 // 307
  },                                                                                                                   // 308
  {                                                                                                                    // 309
    "constant": false,                                                                                                 // 310
    "inputs": [                                                                                                        // 311
      {                                                                                                                // 312
        "name": "_name",                                                                                               // 313
        "type": "bytes32"                                                                                              // 314
      }                                                                                                                // 315
    ],                                                                                                                 // 316
    "name": "reserve",                                                                                                 // 317
    "outputs": [],                                                                                                     // 318
    "type": "function"                                                                                                 // 319
  },                                                                                                                   // 320
  {                                                                                                                    // 321
    "constant": false,                                                                                                 // 322
    "inputs": [                                                                                                        // 323
      {                                                                                                                // 324
        "name": "_name",                                                                                               // 325
        "type": "bytes32"                                                                                              // 326
      },                                                                                                               // 327
      {                                                                                                                // 328
        "name": "_newOwner",                                                                                           // 329
        "type": "address"                                                                                              // 330
      }                                                                                                                // 331
    ],                                                                                                                 // 332
    "name": "transfer",                                                                                                // 333
    "outputs": [],                                                                                                     // 334
    "type": "function"                                                                                                 // 335
  },                                                                                                                   // 336
  {                                                                                                                    // 337
    "constant": false,                                                                                                 // 338
    "inputs": [                                                                                                        // 339
      {                                                                                                                // 340
        "name": "_name",                                                                                               // 341
        "type": "bytes32"                                                                                              // 342
      },                                                                                                               // 343
      {                                                                                                                // 344
        "name": "_a",                                                                                                  // 345
        "type": "address"                                                                                              // 346
      }                                                                                                                // 347
    ],                                                                                                                 // 348
    "name": "setAddr",                                                                                                 // 349
    "outputs": [],                                                                                                     // 350
    "type": "function"                                                                                                 // 351
  },                                                                                                                   // 352
  {                                                                                                                    // 353
    "anonymous": false,                                                                                                // 354
    "inputs": [                                                                                                        // 355
      {                                                                                                                // 356
        "indexed": true,                                                                                               // 357
        "name": "name",                                                                                                // 358
        "type": "bytes32"                                                                                              // 359
      }                                                                                                                // 360
    ],                                                                                                                 // 361
    "name": "Changed",                                                                                                 // 362
    "type": "event"                                                                                                    // 363
  }                                                                                                                    // 364
]                                                                                                                      // 365
                                                                                                                       // 366
},{}],3:[function(require,module,exports){                                                                             // 367
module.exports=[                                                                                                       // 368
  {                                                                                                                    // 369
    "constant": false,                                                                                                 // 370
    "inputs": [                                                                                                        // 371
      {                                                                                                                // 372
        "name": "from",                                                                                                // 373
        "type": "bytes32"                                                                                              // 374
      },                                                                                                               // 375
      {                                                                                                                // 376
        "name": "to",                                                                                                  // 377
        "type": "address"                                                                                              // 378
      },                                                                                                               // 379
      {                                                                                                                // 380
        "name": "value",                                                                                               // 381
        "type": "uint256"                                                                                              // 382
      }                                                                                                                // 383
    ],                                                                                                                 // 384
    "name": "transfer",                                                                                                // 385
    "outputs": [],                                                                                                     // 386
    "type": "function"                                                                                                 // 387
  },                                                                                                                   // 388
  {                                                                                                                    // 389
    "constant": false,                                                                                                 // 390
    "inputs": [                                                                                                        // 391
      {                                                                                                                // 392
        "name": "from",                                                                                                // 393
        "type": "bytes32"                                                                                              // 394
      },                                                                                                               // 395
      {                                                                                                                // 396
        "name": "to",                                                                                                  // 397
        "type": "address"                                                                                              // 398
      },                                                                                                               // 399
      {                                                                                                                // 400
        "name": "indirectId",                                                                                          // 401
        "type": "bytes32"                                                                                              // 402
      },                                                                                                               // 403
      {                                                                                                                // 404
        "name": "value",                                                                                               // 405
        "type": "uint256"                                                                                              // 406
      }                                                                                                                // 407
    ],                                                                                                                 // 408
    "name": "icapTransfer",                                                                                            // 409
    "outputs": [],                                                                                                     // 410
    "type": "function"                                                                                                 // 411
  },                                                                                                                   // 412
  {                                                                                                                    // 413
    "constant": false,                                                                                                 // 414
    "inputs": [                                                                                                        // 415
      {                                                                                                                // 416
        "name": "to",                                                                                                  // 417
        "type": "bytes32"                                                                                              // 418
      }                                                                                                                // 419
    ],                                                                                                                 // 420
    "name": "deposit",                                                                                                 // 421
    "outputs": [],                                                                                                     // 422
    "payable": true,                                                                                                   // 423
    "type": "function"                                                                                                 // 424
  },                                                                                                                   // 425
  {                                                                                                                    // 426
    "anonymous": false,                                                                                                // 427
    "inputs": [                                                                                                        // 428
      {                                                                                                                // 429
        "indexed": true,                                                                                               // 430
        "name": "from",                                                                                                // 431
        "type": "address"                                                                                              // 432
      },                                                                                                               // 433
      {                                                                                                                // 434
        "indexed": false,                                                                                              // 435
        "name": "value",                                                                                               // 436
        "type": "uint256"                                                                                              // 437
      }                                                                                                                // 438
    ],                                                                                                                 // 439
    "name": "AnonymousDeposit",                                                                                        // 440
    "type": "event"                                                                                                    // 441
  },                                                                                                                   // 442
  {                                                                                                                    // 443
    "anonymous": false,                                                                                                // 444
    "inputs": [                                                                                                        // 445
      {                                                                                                                // 446
        "indexed": true,                                                                                               // 447
        "name": "from",                                                                                                // 448
        "type": "address"                                                                                              // 449
      },                                                                                                               // 450
      {                                                                                                                // 451
        "indexed": true,                                                                                               // 452
        "name": "to",                                                                                                  // 453
        "type": "bytes32"                                                                                              // 454
      },                                                                                                               // 455
      {                                                                                                                // 456
        "indexed": false,                                                                                              // 457
        "name": "value",                                                                                               // 458
        "type": "uint256"                                                                                              // 459
      }                                                                                                                // 460
    ],                                                                                                                 // 461
    "name": "Deposit",                                                                                                 // 462
    "type": "event"                                                                                                    // 463
  },                                                                                                                   // 464
  {                                                                                                                    // 465
    "anonymous": false,                                                                                                // 466
    "inputs": [                                                                                                        // 467
      {                                                                                                                // 468
        "indexed": true,                                                                                               // 469
        "name": "from",                                                                                                // 470
        "type": "bytes32"                                                                                              // 471
      },                                                                                                               // 472
      {                                                                                                                // 473
        "indexed": true,                                                                                               // 474
        "name": "to",                                                                                                  // 475
        "type": "address"                                                                                              // 476
      },                                                                                                               // 477
      {                                                                                                                // 478
        "indexed": false,                                                                                              // 479
        "name": "value",                                                                                               // 480
        "type": "uint256"                                                                                              // 481
      }                                                                                                                // 482
    ],                                                                                                                 // 483
    "name": "Transfer",                                                                                                // 484
    "type": "event"                                                                                                    // 485
  },                                                                                                                   // 486
  {                                                                                                                    // 487
    "anonymous": false,                                                                                                // 488
    "inputs": [                                                                                                        // 489
      {                                                                                                                // 490
        "indexed": true,                                                                                               // 491
        "name": "from",                                                                                                // 492
        "type": "bytes32"                                                                                              // 493
      },                                                                                                               // 494
      {                                                                                                                // 495
        "indexed": true,                                                                                               // 496
        "name": "to",                                                                                                  // 497
        "type": "address"                                                                                              // 498
      },                                                                                                               // 499
      {                                                                                                                // 500
        "indexed": false,                                                                                              // 501
        "name": "indirectId",                                                                                          // 502
        "type": "bytes32"                                                                                              // 503
      },                                                                                                               // 504
      {                                                                                                                // 505
        "indexed": false,                                                                                              // 506
        "name": "value",                                                                                               // 507
        "type": "uint256"                                                                                              // 508
      }                                                                                                                // 509
    ],                                                                                                                 // 510
    "name": "IcapTransfer",                                                                                            // 511
    "type": "event"                                                                                                    // 512
  }                                                                                                                    // 513
]                                                                                                                      // 514
                                                                                                                       // 515
},{}],4:[function(require,module,exports){                                                                             // 516
var f = require('./formatters');                                                                                       // 517
var SolidityType = require('./type');                                                                                  // 518
                                                                                                                       // 519
/**                                                                                                                    // 520
 * SolidityTypeAddress is a prootype that represents address type                                                      // 521
 * It matches:                                                                                                         // 522
 * address                                                                                                             // 523
 * address[]                                                                                                           // 524
 * address[4]                                                                                                          // 525
 * address[][]                                                                                                         // 526
 * address[3][]                                                                                                        // 527
 * address[][6][], ...                                                                                                 // 528
 */                                                                                                                    // 529
var SolidityTypeAddress = function () {                                                                                // 530
    this._inputFormatter = f.formatInputInt;                                                                           // 531
    this._outputFormatter = f.formatOutputAddress;                                                                     // 532
};                                                                                                                     // 533
                                                                                                                       // 534
SolidityTypeAddress.prototype = new SolidityType({});                                                                  // 535
SolidityTypeAddress.prototype.constructor = SolidityTypeAddress;                                                       // 536
                                                                                                                       // 537
SolidityTypeAddress.prototype.isType = function (name) {                                                               // 538
    return !!name.match(/address(\[([0-9]*)\])?/);                                                                     // 539
};                                                                                                                     // 540
                                                                                                                       // 541
module.exports = SolidityTypeAddress;                                                                                  // 542
                                                                                                                       // 543
},{"./formatters":9,"./type":14}],5:[function(require,module,exports){                                                 // 544
var f = require('./formatters');                                                                                       // 545
var SolidityType = require('./type');                                                                                  // 546
                                                                                                                       // 547
/**                                                                                                                    // 548
 * SolidityTypeBool is a prootype that represents bool type                                                            // 549
 * It matches:                                                                                                         // 550
 * bool                                                                                                                // 551
 * bool[]                                                                                                              // 552
 * bool[4]                                                                                                             // 553
 * bool[][]                                                                                                            // 554
 * bool[3][]                                                                                                           // 555
 * bool[][6][], ...                                                                                                    // 556
 */                                                                                                                    // 557
var SolidityTypeBool = function () {                                                                                   // 558
    this._inputFormatter = f.formatInputBool;                                                                          // 559
    this._outputFormatter = f.formatOutputBool;                                                                        // 560
};                                                                                                                     // 561
                                                                                                                       // 562
SolidityTypeBool.prototype = new SolidityType({});                                                                     // 563
SolidityTypeBool.prototype.constructor = SolidityTypeBool;                                                             // 564
                                                                                                                       // 565
SolidityTypeBool.prototype.isType = function (name) {                                                                  // 566
    return !!name.match(/^bool(\[([0-9]*)\])*$/);                                                                      // 567
};                                                                                                                     // 568
                                                                                                                       // 569
module.exports = SolidityTypeBool;                                                                                     // 570
                                                                                                                       // 571
},{"./formatters":9,"./type":14}],6:[function(require,module,exports){                                                 // 572
var f = require('./formatters');                                                                                       // 573
var SolidityType = require('./type');                                                                                  // 574
                                                                                                                       // 575
/**                                                                                                                    // 576
 * SolidityTypeBytes is a prototype that represents the bytes type.                                                    // 577
 * It matches:                                                                                                         // 578
 * bytes                                                                                                               // 579
 * bytes[]                                                                                                             // 580
 * bytes[4]                                                                                                            // 581
 * bytes[][]                                                                                                           // 582
 * bytes[3][]                                                                                                          // 583
 * bytes[][6][], ...                                                                                                   // 584
 * bytes32                                                                                                             // 585
 * bytes8[4]                                                                                                           // 586
 * bytes[3][]                                                                                                          // 587
 */                                                                                                                    // 588
var SolidityTypeBytes = function () {                                                                                  // 589
    this._inputFormatter = f.formatInputBytes;                                                                         // 590
    this._outputFormatter = f.formatOutputBytes;                                                                       // 591
};                                                                                                                     // 592
                                                                                                                       // 593
SolidityTypeBytes.prototype = new SolidityType({});                                                                    // 594
SolidityTypeBytes.prototype.constructor = SolidityTypeBytes;                                                           // 595
                                                                                                                       // 596
SolidityTypeBytes.prototype.isType = function (name) {                                                                 // 597
    return !!name.match(/^bytes([0-9]{1,})(\[([0-9]*)\])*$/);                                                          // 598
};                                                                                                                     // 599
                                                                                                                       // 600
module.exports = SolidityTypeBytes;                                                                                    // 601
                                                                                                                       // 602
},{"./formatters":9,"./type":14}],7:[function(require,module,exports){                                                 // 603
/*                                                                                                                     // 604
    This file is part of web3.js.                                                                                      // 605
                                                                                                                       // 606
    web3.js is free software: you can redistribute it and/or modify                                                    // 607
    it under the terms of the GNU Lesser General Public License as published by                                        // 608
    the Free Software Foundation, either version 3 of the License, or                                                  // 609
    (at your option) any later version.                                                                                // 610
                                                                                                                       // 611
    web3.js is distributed in the hope that it will be useful,                                                         // 612
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 613
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 614
    GNU Lesser General Public License for more details.                                                                // 615
                                                                                                                       // 616
    You should have received a copy of the GNU Lesser General Public License                                           // 617
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 618
*/                                                                                                                     // 619
/**                                                                                                                    // 620
 * @file coder.js                                                                                                      // 621
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 622
 * @date 2015                                                                                                          // 623
 */                                                                                                                    // 624
                                                                                                                       // 625
var f = require('./formatters');                                                                                       // 626
                                                                                                                       // 627
var SolidityTypeAddress = require('./address');                                                                        // 628
var SolidityTypeBool = require('./bool');                                                                              // 629
var SolidityTypeInt = require('./int');                                                                                // 630
var SolidityTypeUInt = require('./uint');                                                                              // 631
var SolidityTypeDynamicBytes = require('./dynamicbytes');                                                              // 632
var SolidityTypeString = require('./string');                                                                          // 633
var SolidityTypeReal = require('./real');                                                                              // 634
var SolidityTypeUReal = require('./ureal');                                                                            // 635
var SolidityTypeBytes = require('./bytes');                                                                            // 636
                                                                                                                       // 637
var isDynamic = function (solidityType, type) {                                                                        // 638
   return solidityType.isDynamicType(type) ||                                                                          // 639
          solidityType.isDynamicArray(type);                                                                           // 640
};                                                                                                                     // 641
                                                                                                                       // 642
/**                                                                                                                    // 643
 * SolidityCoder prototype should be used to encode/decode solidity params of any type                                 // 644
 */                                                                                                                    // 645
var SolidityCoder = function (types) {                                                                                 // 646
    this._types = types;                                                                                               // 647
};                                                                                                                     // 648
                                                                                                                       // 649
/**                                                                                                                    // 650
 * This method should be used to transform type to SolidityType                                                        // 651
 *                                                                                                                     // 652
 * @method _requireType                                                                                                // 653
 * @param {String} type                                                                                                // 654
 * @returns {SolidityType}                                                                                             // 655
 * @throws {Error} throws if no matching type is found                                                                 // 656
 */                                                                                                                    // 657
SolidityCoder.prototype._requireType = function (type) {                                                               // 658
    var solidityType = this._types.filter(function (t) {                                                               // 659
        return t.isType(type);                                                                                         // 660
    })[0];                                                                                                             // 661
                                                                                                                       // 662
    if (!solidityType) {                                                                                               // 663
        throw Error('invalid solidity type!: ' + type);                                                                // 664
    }                                                                                                                  // 665
                                                                                                                       // 666
    return solidityType;                                                                                               // 667
};                                                                                                                     // 668
                                                                                                                       // 669
/**                                                                                                                    // 670
 * Should be used to encode plain param                                                                                // 671
 *                                                                                                                     // 672
 * @method encodeParam                                                                                                 // 673
 * @param {String} type                                                                                                // 674
 * @param {Object} plain param                                                                                         // 675
 * @return {String} encoded plain param                                                                                // 676
 */                                                                                                                    // 677
SolidityCoder.prototype.encodeParam = function (type, param) {                                                         // 678
    return this.encodeParams([type], [param]);                                                                         // 679
};                                                                                                                     // 680
                                                                                                                       // 681
/**                                                                                                                    // 682
 * Should be used to encode list of params                                                                             // 683
 *                                                                                                                     // 684
 * @method encodeParams                                                                                                // 685
 * @param {Array} types                                                                                                // 686
 * @param {Array} params                                                                                               // 687
 * @return {String} encoded list of params                                                                             // 688
 */                                                                                                                    // 689
SolidityCoder.prototype.encodeParams = function (types, params) {                                                      // 690
    var solidityTypes = this.getSolidityTypes(types);                                                                  // 691
                                                                                                                       // 692
    var encodeds = solidityTypes.map(function (solidityType, index) {                                                  // 693
        return solidityType.encode(params[index], types[index]);                                                       // 694
    });                                                                                                                // 695
                                                                                                                       // 696
    var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {                                     // 697
        var staticPartLength = solidityType.staticPartLength(types[index]);                                            // 698
        var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;                                   // 699
                                                                                                                       // 700
        return acc + (isDynamic(solidityTypes[index], types[index]) ?                                                  // 701
            32 :                                                                                                       // 702
            roundedStaticPartLength);                                                                                  // 703
    }, 0);                                                                                                             // 704
                                                                                                                       // 705
    var result = this.encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset);                            // 706
                                                                                                                       // 707
    return result;                                                                                                     // 708
};                                                                                                                     // 709
                                                                                                                       // 710
SolidityCoder.prototype.encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {             // 711
    var result = "";                                                                                                   // 712
    var self = this;                                                                                                   // 713
                                                                                                                       // 714
    types.forEach(function (type, i) {                                                                                 // 715
        if (isDynamic(solidityTypes[i], types[i])) {                                                                   // 716
            result += f.formatInputInt(dynamicOffset).encode();                                                        // 717
            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);                     // 718
            dynamicOffset += e.length / 2;                                                                             // 719
        } else {                                                                                                       // 720
            // don't add length to dynamicOffset. it's already counted                                                 // 721
            result += self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);                   // 722
        }                                                                                                              // 723
                                                                                                                       // 724
        // TODO: figure out nested arrays                                                                              // 725
    });                                                                                                                // 726
                                                                                                                       // 727
    types.forEach(function (type, i) {                                                                                 // 728
        if (isDynamic(solidityTypes[i], types[i])) {                                                                   // 729
            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);                     // 730
            dynamicOffset += e.length / 2;                                                                             // 731
            result += e;                                                                                               // 732
        }                                                                                                              // 733
    });                                                                                                                // 734
    return result;                                                                                                     // 735
};                                                                                                                     // 736
                                                                                                                       // 737
SolidityCoder.prototype.encodeWithOffset = function (type, solidityType, encoded, offset) {                            // 738
    /* jshint maxcomplexity: 17 */                                                                                     // 739
    /* jshint maxdepth: 5 */                                                                                           // 740
                                                                                                                       // 741
    var self = this;                                                                                                   // 742
    var encodingMode={dynamic:1,static:2,other:3};                                                                     // 743
                                                                                                                       // 744
    var mode=(solidityType.isDynamicArray(type)?encodingMode.dynamic:(solidityType.isStaticArray(type)?encodingMode.static:encodingMode.other));
                                                                                                                       // 746
    if(mode !== encodingMode.other){                                                                                   // 747
        var nestedName = solidityType.nestedName(type);                                                                // 748
        var nestedStaticPartLength = solidityType.staticPartLength(nestedName);                                        // 749
        var result = (mode === encodingMode.dynamic ? encoded[0] : '');                                                // 750
                                                                                                                       // 751
        if (solidityType.isDynamicArray(nestedName)) {                                                                 // 752
            var previousLength = (mode === encodingMode.dynamic ? 2 : 0);                                              // 753
                                                                                                                       // 754
            for (var i = 0; i < encoded.length; i++) {                                                                 // 755
                // calculate length of previous item                                                                   // 756
                if(mode === encodingMode.dynamic){                                                                     // 757
                    previousLength += +(encoded[i - 1])[0] || 0;                                                       // 758
                }                                                                                                      // 759
                else if(mode === encodingMode.static){                                                                 // 760
                    previousLength += +(encoded[i - 1] || [])[0] || 0;                                                 // 761
                }                                                                                                      // 762
                result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();        // 763
            }                                                                                                          // 764
        }                                                                                                              // 765
                                                                                                                       // 766
        var len= (mode === encodingMode.dynamic ? encoded.length-1 : encoded.length);                                  // 767
        for (var c = 0; c < len; c++) {                                                                                // 768
            var additionalOffset = result / 2;                                                                         // 769
            if(mode === encodingMode.dynamic){                                                                         // 770
                result += self.encodeWithOffset(nestedName, solidityType, encoded[c + 1], offset +  additionalOffset);
            }                                                                                                          // 772
            else if(mode === encodingMode.static){                                                                     // 773
                result += self.encodeWithOffset(nestedName, solidityType, encoded[c], offset + additionalOffset);      // 774
            }                                                                                                          // 775
        }                                                                                                              // 776
                                                                                                                       // 777
        return result;                                                                                                 // 778
    }                                                                                                                  // 779
                                                                                                                       // 780
    return encoded;                                                                                                    // 781
};                                                                                                                     // 782
                                                                                                                       // 783
                                                                                                                       // 784
/**                                                                                                                    // 785
 * Should be used to decode bytes to plain param                                                                       // 786
 *                                                                                                                     // 787
 * @method decodeParam                                                                                                 // 788
 * @param {String} type                                                                                                // 789
 * @param {String} bytes                                                                                               // 790
 * @return {Object} plain param                                                                                        // 791
 */                                                                                                                    // 792
SolidityCoder.prototype.decodeParam = function (type, bytes) {                                                         // 793
    return this.decodeParams([type], bytes)[0];                                                                        // 794
};                                                                                                                     // 795
                                                                                                                       // 796
/**                                                                                                                    // 797
 * Should be used to decode list of params                                                                             // 798
 *                                                                                                                     // 799
 * @method decodeParam                                                                                                 // 800
 * @param {Array} types                                                                                                // 801
 * @param {String} bytes                                                                                               // 802
 * @return {Array} array of plain params                                                                               // 803
 */                                                                                                                    // 804
SolidityCoder.prototype.decodeParams = function (types, bytes) {                                                       // 805
    var solidityTypes = this.getSolidityTypes(types);                                                                  // 806
    var offsets = this.getOffsets(types, solidityTypes);                                                               // 807
                                                                                                                       // 808
    return solidityTypes.map(function (solidityType, index) {                                                          // 809
        return solidityType.decode(bytes, offsets[index],  types[index], index);                                       // 810
    });                                                                                                                // 811
};                                                                                                                     // 812
                                                                                                                       // 813
SolidityCoder.prototype.getOffsets = function (types, solidityTypes) {                                                 // 814
    var lengths =  solidityTypes.map(function (solidityType, index) {                                                  // 815
        return solidityType.staticPartLength(types[index]);                                                            // 816
    });                                                                                                                // 817
                                                                                                                       // 818
    for (var i = 1; i < lengths.length; i++) {                                                                         // 819
         // sum with length of previous element                                                                        // 820
        lengths[i] += lengths[i - 1];                                                                                  // 821
    }                                                                                                                  // 822
                                                                                                                       // 823
    return lengths.map(function (length, index) {                                                                      // 824
        // remove the current length, so the length is sum of previous elements                                        // 825
        var staticPartLength = solidityTypes[index].staticPartLength(types[index]);                                    // 826
        return length - staticPartLength;                                                                              // 827
    });                                                                                                                // 828
};                                                                                                                     // 829
                                                                                                                       // 830
SolidityCoder.prototype.getSolidityTypes = function (types) {                                                          // 831
    var self = this;                                                                                                   // 832
    return types.map(function (type) {                                                                                 // 833
        return self._requireType(type);                                                                                // 834
    });                                                                                                                // 835
};                                                                                                                     // 836
                                                                                                                       // 837
var coder = new SolidityCoder([                                                                                        // 838
    new SolidityTypeAddress(),                                                                                         // 839
    new SolidityTypeBool(),                                                                                            // 840
    new SolidityTypeInt(),                                                                                             // 841
    new SolidityTypeUInt(),                                                                                            // 842
    new SolidityTypeDynamicBytes(),                                                                                    // 843
    new SolidityTypeBytes(),                                                                                           // 844
    new SolidityTypeString(),                                                                                          // 845
    new SolidityTypeReal(),                                                                                            // 846
    new SolidityTypeUReal()                                                                                            // 847
]);                                                                                                                    // 848
                                                                                                                       // 849
module.exports = coder;                                                                                                // 850
                                                                                                                       // 851
},{"./address":4,"./bool":5,"./bytes":6,"./dynamicbytes":8,"./formatters":9,"./int":10,"./real":12,"./string":13,"./uint":15,"./ureal":16}],8:[function(require,module,exports){
var f = require('./formatters');                                                                                       // 853
var SolidityType = require('./type');                                                                                  // 854
                                                                                                                       // 855
var SolidityTypeDynamicBytes = function () {                                                                           // 856
    this._inputFormatter = f.formatInputDynamicBytes;                                                                  // 857
    this._outputFormatter = f.formatOutputDynamicBytes;                                                                // 858
};                                                                                                                     // 859
                                                                                                                       // 860
SolidityTypeDynamicBytes.prototype = new SolidityType({});                                                             // 861
SolidityTypeDynamicBytes.prototype.constructor = SolidityTypeDynamicBytes;                                             // 862
                                                                                                                       // 863
SolidityTypeDynamicBytes.prototype.isType = function (name) {                                                          // 864
    return !!name.match(/^bytes(\[([0-9]*)\])*$/);                                                                     // 865
};                                                                                                                     // 866
                                                                                                                       // 867
SolidityTypeDynamicBytes.prototype.isDynamicType = function () {                                                       // 868
    return true;                                                                                                       // 869
};                                                                                                                     // 870
                                                                                                                       // 871
module.exports = SolidityTypeDynamicBytes;                                                                             // 872
                                                                                                                       // 873
},{"./formatters":9,"./type":14}],9:[function(require,module,exports){                                                 // 874
/*                                                                                                                     // 875
    This file is part of web3.js.                                                                                      // 876
                                                                                                                       // 877
    web3.js is free software: you can redistribute it and/or modify                                                    // 878
    it under the terms of the GNU Lesser General Public License as published by                                        // 879
    the Free Software Foundation, either version 3 of the License, or                                                  // 880
    (at your option) any later version.                                                                                // 881
                                                                                                                       // 882
    web3.js is distributed in the hope that it will be useful,                                                         // 883
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 884
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 885
    GNU Lesser General Public License for more details.                                                                // 886
                                                                                                                       // 887
    You should have received a copy of the GNU Lesser General Public License                                           // 888
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 889
*/                                                                                                                     // 890
/**                                                                                                                    // 891
 * @file formatters.js                                                                                                 // 892
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 893
 * @date 2015                                                                                                          // 894
 */                                                                                                                    // 895
                                                                                                                       // 896
var BigNumber = require('bignumber.js');                                                                               // 897
var utils = require('../utils/utils');                                                                                 // 898
var c = require('../utils/config');                                                                                    // 899
var SolidityParam = require('./param');                                                                                // 900
                                                                                                                       // 901
                                                                                                                       // 902
/**                                                                                                                    // 903
 * Formats input value to byte representation of int                                                                   // 904
 * If value is negative, return it's two's complement                                                                  // 905
 * If the value is floating point, round it down                                                                       // 906
 *                                                                                                                     // 907
 * @method formatInputInt                                                                                              // 908
 * @param {String|Number|BigNumber} value that needs to be formatted                                                   // 909
 * @returns {SolidityParam}                                                                                            // 910
 */                                                                                                                    // 911
var formatInputInt = function (value) {                                                                                // 912
    BigNumber.config(c.ETH_BIGNUMBER_ROUNDING_MODE);                                                                   // 913
    var result = utils.padLeft(utils.toTwosComplement(value).toString(16), 64);                                        // 914
    return new SolidityParam(result);                                                                                  // 915
};                                                                                                                     // 916
                                                                                                                       // 917
/**                                                                                                                    // 918
 * Formats input bytes                                                                                                 // 919
 *                                                                                                                     // 920
 * @method formatInputBytes                                                                                            // 921
 * @param {String}                                                                                                     // 922
 * @returns {SolidityParam}                                                                                            // 923
 */                                                                                                                    // 924
var formatInputBytes = function (value) {                                                                              // 925
    var result = utils.toHex(value).substr(2);                                                                         // 926
    var l = Math.floor((result.length + 63) / 64);                                                                     // 927
    result = utils.padRight(result, l * 64);                                                                           // 928
    return new SolidityParam(result);                                                                                  // 929
};                                                                                                                     // 930
                                                                                                                       // 931
/**                                                                                                                    // 932
 * Formats input bytes                                                                                                 // 933
 *                                                                                                                     // 934
 * @method formatDynamicInputBytes                                                                                     // 935
 * @param {String}                                                                                                     // 936
 * @returns {SolidityParam}                                                                                            // 937
 */                                                                                                                    // 938
var formatInputDynamicBytes = function (value) {                                                                       // 939
    var result = utils.toHex(value).substr(2);                                                                         // 940
    var length = result.length / 2;                                                                                    // 941
    var l = Math.floor((result.length + 63) / 64);                                                                     // 942
    result = utils.padRight(result, l * 64);                                                                           // 943
    return new SolidityParam(formatInputInt(length).value + result);                                                   // 944
};                                                                                                                     // 945
                                                                                                                       // 946
/**                                                                                                                    // 947
 * Formats input value to byte representation of string                                                                // 948
 *                                                                                                                     // 949
 * @method formatInputString                                                                                           // 950
 * @param {String}                                                                                                     // 951
 * @returns {SolidityParam}                                                                                            // 952
 */                                                                                                                    // 953
var formatInputString = function (value) {                                                                             // 954
    var result = utils.fromUtf8(value).substr(2);                                                                      // 955
    var length = result.length / 2;                                                                                    // 956
    var l = Math.floor((result.length + 63) / 64);                                                                     // 957
    result = utils.padRight(result, l * 64);                                                                           // 958
    return new SolidityParam(formatInputInt(length).value + result);                                                   // 959
};                                                                                                                     // 960
                                                                                                                       // 961
/**                                                                                                                    // 962
 * Formats input value to byte representation of bool                                                                  // 963
 *                                                                                                                     // 964
 * @method formatInputBool                                                                                             // 965
 * @param {Boolean}                                                                                                    // 966
 * @returns {SolidityParam}                                                                                            // 967
 */                                                                                                                    // 968
var formatInputBool = function (value) {                                                                               // 969
    var result = '000000000000000000000000000000000000000000000000000000000000000' + (value ?  '1' : '0');             // 970
    return new SolidityParam(result);                                                                                  // 971
};                                                                                                                     // 972
                                                                                                                       // 973
/**                                                                                                                    // 974
 * Formats input value to byte representation of real                                                                  // 975
 * Values are multiplied by 2^m and encoded as integers                                                                // 976
 *                                                                                                                     // 977
 * @method formatInputReal                                                                                             // 978
 * @param {String|Number|BigNumber}                                                                                    // 979
 * @returns {SolidityParam}                                                                                            // 980
 */                                                                                                                    // 981
var formatInputReal = function (value) {                                                                               // 982
    return formatInputInt(new BigNumber(value).times(new BigNumber(2).pow(128)));                                      // 983
};                                                                                                                     // 984
                                                                                                                       // 985
/**                                                                                                                    // 986
 * Check if input value is negative                                                                                    // 987
 *                                                                                                                     // 988
 * @method signedIsNegative                                                                                            // 989
 * @param {String} value is hex format                                                                                 // 990
 * @returns {Boolean} true if it is negative, otherwise false                                                          // 991
 */                                                                                                                    // 992
var signedIsNegative = function (value) {                                                                              // 993
    return (new BigNumber(value.substr(0, 1), 16).toString(2).substr(0, 1)) === '1';                                   // 994
};                                                                                                                     // 995
                                                                                                                       // 996
/**                                                                                                                    // 997
 * Formats right-aligned output bytes to int                                                                           // 998
 *                                                                                                                     // 999
 * @method formatOutputInt                                                                                             // 1000
 * @param {SolidityParam} param                                                                                        // 1001
 * @returns {BigNumber} right-aligned output bytes formatted to big number                                             // 1002
 */                                                                                                                    // 1003
var formatOutputInt = function (param) {                                                                               // 1004
    var value = param.staticPart() || "0";                                                                             // 1005
                                                                                                                       // 1006
    // check if it's negative number                                                                                   // 1007
    // it it is, return two's complement                                                                               // 1008
    if (signedIsNegative(value)) {                                                                                     // 1009
        return new BigNumber(value, 16).minus(new BigNumber('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)).minus(1);
    }                                                                                                                  // 1011
    return new BigNumber(value, 16);                                                                                   // 1012
};                                                                                                                     // 1013
                                                                                                                       // 1014
/**                                                                                                                    // 1015
 * Formats right-aligned output bytes to uint                                                                          // 1016
 *                                                                                                                     // 1017
 * @method formatOutputUInt                                                                                            // 1018
 * @param {SolidityParam}                                                                                              // 1019
 * @returns {BigNumeber} right-aligned output bytes formatted to uint                                                  // 1020
 */                                                                                                                    // 1021
var formatOutputUInt = function (param) {                                                                              // 1022
    var value = param.staticPart() || "0";                                                                             // 1023
    return new BigNumber(value, 16);                                                                                   // 1024
};                                                                                                                     // 1025
                                                                                                                       // 1026
/**                                                                                                                    // 1027
 * Formats right-aligned output bytes to real                                                                          // 1028
 *                                                                                                                     // 1029
 * @method formatOutputReal                                                                                            // 1030
 * @param {SolidityParam}                                                                                              // 1031
 * @returns {BigNumber} input bytes formatted to real                                                                  // 1032
 */                                                                                                                    // 1033
var formatOutputReal = function (param) {                                                                              // 1034
    return formatOutputInt(param).dividedBy(new BigNumber(2).pow(128));                                                // 1035
};                                                                                                                     // 1036
                                                                                                                       // 1037
/**                                                                                                                    // 1038
 * Formats right-aligned output bytes to ureal                                                                         // 1039
 *                                                                                                                     // 1040
 * @method formatOutputUReal                                                                                           // 1041
 * @param {SolidityParam}                                                                                              // 1042
 * @returns {BigNumber} input bytes formatted to ureal                                                                 // 1043
 */                                                                                                                    // 1044
var formatOutputUReal = function (param) {                                                                             // 1045
    return formatOutputUInt(param).dividedBy(new BigNumber(2).pow(128));                                               // 1046
};                                                                                                                     // 1047
                                                                                                                       // 1048
/**                                                                                                                    // 1049
 * Should be used to format output bool                                                                                // 1050
 *                                                                                                                     // 1051
 * @method formatOutputBool                                                                                            // 1052
 * @param {SolidityParam}                                                                                              // 1053
 * @returns {Boolean} right-aligned input bytes formatted to bool                                                      // 1054
 */                                                                                                                    // 1055
var formatOutputBool = function (param) {                                                                              // 1056
    return param.staticPart() === '0000000000000000000000000000000000000000000000000000000000000001' ? true : false;   // 1057
};                                                                                                                     // 1058
                                                                                                                       // 1059
/**                                                                                                                    // 1060
 * Should be used to format output bytes                                                                               // 1061
 *                                                                                                                     // 1062
 * @method formatOutputBytes                                                                                           // 1063
 * @param {SolidityParam} left-aligned hex representation of string                                                    // 1064
 * @param {String} name type name                                                                                      // 1065
 * @returns {String} hex string                                                                                        // 1066
 */                                                                                                                    // 1067
var formatOutputBytes = function (param, name) {                                                                       // 1068
    var matches = name.match(/^bytes([0-9]*)/);                                                                        // 1069
    var size = parseInt(matches[1]);                                                                                   // 1070
    return '0x' + param.staticPart().slice(0, 2 * size);                                                               // 1071
};                                                                                                                     // 1072
                                                                                                                       // 1073
/**                                                                                                                    // 1074
 * Should be used to format output bytes                                                                               // 1075
 *                                                                                                                     // 1076
 * @method formatOutputDynamicBytes                                                                                    // 1077
 * @param {SolidityParam} left-aligned hex representation of string                                                    // 1078
 * @returns {String} hex string                                                                                        // 1079
 */                                                                                                                    // 1080
var formatOutputDynamicBytes = function (param) {                                                                      // 1081
    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;                                 // 1082
    return '0x' + param.dynamicPart().substr(64, length);                                                              // 1083
};                                                                                                                     // 1084
                                                                                                                       // 1085
/**                                                                                                                    // 1086
 * Should be used to format output string                                                                              // 1087
 *                                                                                                                     // 1088
 * @method formatOutputString                                                                                          // 1089
 * @param {SolidityParam} left-aligned hex representation of string                                                    // 1090
 * @returns {String} ascii string                                                                                      // 1091
 */                                                                                                                    // 1092
var formatOutputString = function (param) {                                                                            // 1093
    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;                                 // 1094
    return utils.toUtf8(param.dynamicPart().substr(64, length));                                                       // 1095
};                                                                                                                     // 1096
                                                                                                                       // 1097
/**                                                                                                                    // 1098
 * Should be used to format output address                                                                             // 1099
 *                                                                                                                     // 1100
 * @method formatOutputAddress                                                                                         // 1101
 * @param {SolidityParam} right-aligned input bytes                                                                    // 1102
 * @returns {String} address                                                                                           // 1103
 */                                                                                                                    // 1104
var formatOutputAddress = function (param) {                                                                           // 1105
    var value = param.staticPart();                                                                                    // 1106
    return "0x" + value.slice(value.length - 40, value.length);                                                        // 1107
};                                                                                                                     // 1108
                                                                                                                       // 1109
module.exports = {                                                                                                     // 1110
    formatInputInt: formatInputInt,                                                                                    // 1111
    formatInputBytes: formatInputBytes,                                                                                // 1112
    formatInputDynamicBytes: formatInputDynamicBytes,                                                                  // 1113
    formatInputString: formatInputString,                                                                              // 1114
    formatInputBool: formatInputBool,                                                                                  // 1115
    formatInputReal: formatInputReal,                                                                                  // 1116
    formatOutputInt: formatOutputInt,                                                                                  // 1117
    formatOutputUInt: formatOutputUInt,                                                                                // 1118
    formatOutputReal: formatOutputReal,                                                                                // 1119
    formatOutputUReal: formatOutputUReal,                                                                              // 1120
    formatOutputBool: formatOutputBool,                                                                                // 1121
    formatOutputBytes: formatOutputBytes,                                                                              // 1122
    formatOutputDynamicBytes: formatOutputDynamicBytes,                                                                // 1123
    formatOutputString: formatOutputString,                                                                            // 1124
    formatOutputAddress: formatOutputAddress                                                                           // 1125
};                                                                                                                     // 1126
                                                                                                                       // 1127
},{"../utils/config":18,"../utils/utils":20,"./param":11,"bignumber.js":"bignumber.js"}],10:[function(require,module,exports){
var f = require('./formatters');                                                                                       // 1129
var SolidityType = require('./type');                                                                                  // 1130
                                                                                                                       // 1131
/**                                                                                                                    // 1132
 * SolidityTypeInt is a prootype that represents int type                                                              // 1133
 * It matches:                                                                                                         // 1134
 * int                                                                                                                 // 1135
 * int[]                                                                                                               // 1136
 * int[4]                                                                                                              // 1137
 * int[][]                                                                                                             // 1138
 * int[3][]                                                                                                            // 1139
 * int[][6][], ...                                                                                                     // 1140
 * int32                                                                                                               // 1141
 * int64[]                                                                                                             // 1142
 * int8[4]                                                                                                             // 1143
 * int256[][]                                                                                                          // 1144
 * int[3][]                                                                                                            // 1145
 * int64[][6][], ...                                                                                                   // 1146
 */                                                                                                                    // 1147
var SolidityTypeInt = function () {                                                                                    // 1148
    this._inputFormatter = f.formatInputInt;                                                                           // 1149
    this._outputFormatter = f.formatOutputInt;                                                                         // 1150
};                                                                                                                     // 1151
                                                                                                                       // 1152
SolidityTypeInt.prototype = new SolidityType({});                                                                      // 1153
SolidityTypeInt.prototype.constructor = SolidityTypeInt;                                                               // 1154
                                                                                                                       // 1155
SolidityTypeInt.prototype.isType = function (name) {                                                                   // 1156
    return !!name.match(/^int([0-9]*)?(\[([0-9]*)\])*$/);                                                              // 1157
};                                                                                                                     // 1158
                                                                                                                       // 1159
module.exports = SolidityTypeInt;                                                                                      // 1160
                                                                                                                       // 1161
},{"./formatters":9,"./type":14}],11:[function(require,module,exports){                                                // 1162
/*                                                                                                                     // 1163
    This file is part of web3.js.                                                                                      // 1164
                                                                                                                       // 1165
    web3.js is free software: you can redistribute it and/or modify                                                    // 1166
    it under the terms of the GNU Lesser General Public License as published by                                        // 1167
    the Free Software Foundation, either version 3 of the License, or                                                  // 1168
    (at your option) any later version.                                                                                // 1169
                                                                                                                       // 1170
    web3.js is distributed in the hope that it will be useful,                                                         // 1171
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 1172
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 1173
    GNU Lesser General Public License for more details.                                                                // 1174
                                                                                                                       // 1175
    You should have received a copy of the GNU Lesser General Public License                                           // 1176
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 1177
*/                                                                                                                     // 1178
/**                                                                                                                    // 1179
 * @file param.js                                                                                                      // 1180
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 1181
 * @date 2015                                                                                                          // 1182
 */                                                                                                                    // 1183
                                                                                                                       // 1184
var utils = require('../utils/utils');                                                                                 // 1185
                                                                                                                       // 1186
/**                                                                                                                    // 1187
 * SolidityParam object prototype.                                                                                     // 1188
 * Should be used when encoding, decoding solidity bytes                                                               // 1189
 */                                                                                                                    // 1190
var SolidityParam = function (value, offset) {                                                                         // 1191
    this.value = value || '';                                                                                          // 1192
    this.offset = offset; // offset in bytes                                                                           // 1193
};                                                                                                                     // 1194
                                                                                                                       // 1195
/**                                                                                                                    // 1196
 * This method should be used to get length of params's dynamic part                                                   // 1197
 *                                                                                                                     // 1198
 * @method dynamicPartLength                                                                                           // 1199
 * @returns {Number} length of dynamic part (in bytes)                                                                 // 1200
 */                                                                                                                    // 1201
SolidityParam.prototype.dynamicPartLength = function () {                                                              // 1202
    return this.dynamicPart().length / 2;                                                                              // 1203
};                                                                                                                     // 1204
                                                                                                                       // 1205
/**                                                                                                                    // 1206
 * This method should be used to create copy of solidity param with different offset                                   // 1207
 *                                                                                                                     // 1208
 * @method withOffset                                                                                                  // 1209
 * @param {Number} offset length in bytes                                                                              // 1210
 * @returns {SolidityParam} new solidity param with applied offset                                                     // 1211
 */                                                                                                                    // 1212
SolidityParam.prototype.withOffset = function (offset) {                                                               // 1213
    return new SolidityParam(this.value, offset);                                                                      // 1214
};                                                                                                                     // 1215
                                                                                                                       // 1216
/**                                                                                                                    // 1217
 * This method should be used to combine solidity params together                                                      // 1218
 * eg. when appending an array                                                                                         // 1219
 *                                                                                                                     // 1220
 * @method combine                                                                                                     // 1221
 * @param {SolidityParam} param with which we should combine                                                           // 1222
 * @param {SolidityParam} result of combination                                                                        // 1223
 */                                                                                                                    // 1224
SolidityParam.prototype.combine = function (param) {                                                                   // 1225
    return new SolidityParam(this.value + param.value);                                                                // 1226
};                                                                                                                     // 1227
                                                                                                                       // 1228
/**                                                                                                                    // 1229
 * This method should be called to check if param has dynamic size.                                                    // 1230
 * If it has, it returns true, otherwise false                                                                         // 1231
 *                                                                                                                     // 1232
 * @method isDynamic                                                                                                   // 1233
 * @returns {Boolean}                                                                                                  // 1234
 */                                                                                                                    // 1235
SolidityParam.prototype.isDynamic = function () {                                                                      // 1236
    return this.offset !== undefined;                                                                                  // 1237
};                                                                                                                     // 1238
                                                                                                                       // 1239
/**                                                                                                                    // 1240
 * This method should be called to transform offset to bytes                                                           // 1241
 *                                                                                                                     // 1242
 * @method offsetAsBytes                                                                                               // 1243
 * @returns {String} bytes representation of offset                                                                    // 1244
 */                                                                                                                    // 1245
SolidityParam.prototype.offsetAsBytes = function () {                                                                  // 1246
    return !this.isDynamic() ? '' : utils.padLeft(utils.toTwosComplement(this.offset).toString(16), 64);               // 1247
};                                                                                                                     // 1248
                                                                                                                       // 1249
/**                                                                                                                    // 1250
 * This method should be called to get static part of param                                                            // 1251
 *                                                                                                                     // 1252
 * @method staticPart                                                                                                  // 1253
 * @returns {String} offset if it is a dynamic param, otherwise value                                                  // 1254
 */                                                                                                                    // 1255
SolidityParam.prototype.staticPart = function () {                                                                     // 1256
    if (!this.isDynamic()) {                                                                                           // 1257
        return this.value;                                                                                             // 1258
    }                                                                                                                  // 1259
    return this.offsetAsBytes();                                                                                       // 1260
};                                                                                                                     // 1261
                                                                                                                       // 1262
/**                                                                                                                    // 1263
 * This method should be called to get dynamic part of param                                                           // 1264
 *                                                                                                                     // 1265
 * @method dynamicPart                                                                                                 // 1266
 * @returns {String} returns a value if it is a dynamic param, otherwise empty string                                  // 1267
 */                                                                                                                    // 1268
SolidityParam.prototype.dynamicPart = function () {                                                                    // 1269
    return this.isDynamic() ? this.value : '';                                                                         // 1270
};                                                                                                                     // 1271
                                                                                                                       // 1272
/**                                                                                                                    // 1273
 * This method should be called to encode param                                                                        // 1274
 *                                                                                                                     // 1275
 * @method encode                                                                                                      // 1276
 * @returns {String}                                                                                                   // 1277
 */                                                                                                                    // 1278
SolidityParam.prototype.encode = function () {                                                                         // 1279
    return this.staticPart() + this.dynamicPart();                                                                     // 1280
};                                                                                                                     // 1281
                                                                                                                       // 1282
/**                                                                                                                    // 1283
 * This method should be called to encode array of params                                                              // 1284
 *                                                                                                                     // 1285
 * @method encodeList                                                                                                  // 1286
 * @param {Array[SolidityParam]} params                                                                                // 1287
 * @returns {String}                                                                                                   // 1288
 */                                                                                                                    // 1289
SolidityParam.encodeList = function (params) {                                                                         // 1290
                                                                                                                       // 1291
    // updating offsets                                                                                                // 1292
    var totalOffset = params.length * 32;                                                                              // 1293
    var offsetParams = params.map(function (param) {                                                                   // 1294
        if (!param.isDynamic()) {                                                                                      // 1295
            return param;                                                                                              // 1296
        }                                                                                                              // 1297
        var offset = totalOffset;                                                                                      // 1298
        totalOffset += param.dynamicPartLength();                                                                      // 1299
        return param.withOffset(offset);                                                                               // 1300
    });                                                                                                                // 1301
                                                                                                                       // 1302
    // encode everything!                                                                                              // 1303
    return offsetParams.reduce(function (result, param) {                                                              // 1304
        return result + param.dynamicPart();                                                                           // 1305
    }, offsetParams.reduce(function (result, param) {                                                                  // 1306
        return result + param.staticPart();                                                                            // 1307
    }, ''));                                                                                                           // 1308
};                                                                                                                     // 1309
                                                                                                                       // 1310
                                                                                                                       // 1311
                                                                                                                       // 1312
module.exports = SolidityParam;                                                                                        // 1313
                                                                                                                       // 1314
                                                                                                                       // 1315
},{"../utils/utils":20}],12:[function(require,module,exports){                                                         // 1316
var f = require('./formatters');                                                                                       // 1317
var SolidityType = require('./type');                                                                                  // 1318
                                                                                                                       // 1319
/**                                                                                                                    // 1320
 * SolidityTypeReal is a prootype that represents real type                                                            // 1321
 * It matches:                                                                                                         // 1322
 * real                                                                                                                // 1323
 * real[]                                                                                                              // 1324
 * real[4]                                                                                                             // 1325
 * real[][]                                                                                                            // 1326
 * real[3][]                                                                                                           // 1327
 * real[][6][], ...                                                                                                    // 1328
 * real32                                                                                                              // 1329
 * real64[]                                                                                                            // 1330
 * real8[4]                                                                                                            // 1331
 * real256[][]                                                                                                         // 1332
 * real[3][]                                                                                                           // 1333
 * real64[][6][], ...                                                                                                  // 1334
 */                                                                                                                    // 1335
var SolidityTypeReal = function () {                                                                                   // 1336
    this._inputFormatter = f.formatInputReal;                                                                          // 1337
    this._outputFormatter = f.formatOutputReal;                                                                        // 1338
};                                                                                                                     // 1339
                                                                                                                       // 1340
SolidityTypeReal.prototype = new SolidityType({});                                                                     // 1341
SolidityTypeReal.prototype.constructor = SolidityTypeReal;                                                             // 1342
                                                                                                                       // 1343
SolidityTypeReal.prototype.isType = function (name) {                                                                  // 1344
    return !!name.match(/real([0-9]*)?(\[([0-9]*)\])?/);                                                               // 1345
};                                                                                                                     // 1346
                                                                                                                       // 1347
module.exports = SolidityTypeReal;                                                                                     // 1348
                                                                                                                       // 1349
},{"./formatters":9,"./type":14}],13:[function(require,module,exports){                                                // 1350
var f = require('./formatters');                                                                                       // 1351
var SolidityType = require('./type');                                                                                  // 1352
                                                                                                                       // 1353
var SolidityTypeString = function () {                                                                                 // 1354
    this._inputFormatter = f.formatInputString;                                                                        // 1355
    this._outputFormatter = f.formatOutputString;                                                                      // 1356
};                                                                                                                     // 1357
                                                                                                                       // 1358
SolidityTypeString.prototype = new SolidityType({});                                                                   // 1359
SolidityTypeString.prototype.constructor = SolidityTypeString;                                                         // 1360
                                                                                                                       // 1361
SolidityTypeString.prototype.isType = function (name) {                                                                // 1362
    return !!name.match(/^string(\[([0-9]*)\])*$/);                                                                    // 1363
};                                                                                                                     // 1364
                                                                                                                       // 1365
SolidityTypeString.prototype.isDynamicType = function () {                                                             // 1366
    return true;                                                                                                       // 1367
};                                                                                                                     // 1368
                                                                                                                       // 1369
module.exports = SolidityTypeString;                                                                                   // 1370
                                                                                                                       // 1371
},{"./formatters":9,"./type":14}],14:[function(require,module,exports){                                                // 1372
var f = require('./formatters');                                                                                       // 1373
var SolidityParam = require('./param');                                                                                // 1374
                                                                                                                       // 1375
/**                                                                                                                    // 1376
 * SolidityType prototype is used to encode/decode solidity params of certain type                                     // 1377
 */                                                                                                                    // 1378
var SolidityType = function (config) {                                                                                 // 1379
    this._inputFormatter = config.inputFormatter;                                                                      // 1380
    this._outputFormatter = config.outputFormatter;                                                                    // 1381
};                                                                                                                     // 1382
                                                                                                                       // 1383
/**                                                                                                                    // 1384
 * Should be used to determine if this SolidityType do match given name                                                // 1385
 *                                                                                                                     // 1386
 * @method isType                                                                                                      // 1387
 * @param {String} name                                                                                                // 1388
 * @return {Bool} true if type match this SolidityType, otherwise false                                                // 1389
 */                                                                                                                    // 1390
SolidityType.prototype.isType = function (name) {                                                                      // 1391
    throw "this method should be overrwritten for type " + name;                                                       // 1392
};                                                                                                                     // 1393
                                                                                                                       // 1394
/**                                                                                                                    // 1395
 * Should be used to determine what is the length of static part in given type                                         // 1396
 *                                                                                                                     // 1397
 * @method staticPartLength                                                                                            // 1398
 * @param {String} name                                                                                                // 1399
 * @return {Number} length of static part in bytes                                                                     // 1400
 */                                                                                                                    // 1401
SolidityType.prototype.staticPartLength = function (name) {                                                            // 1402
    // If name isn't an array then treat it like a single element array.                                               // 1403
    return (this.nestedTypes(name) || ['[1]'])                                                                         // 1404
        .map(function (type) {                                                                                         // 1405
            // the length of the nested array                                                                          // 1406
            return parseInt(type.slice(1, -1), 10) || 1;                                                               // 1407
        })                                                                                                             // 1408
        .reduce(function (previous, current) {                                                                         // 1409
            return previous * current;                                                                                 // 1410
        // all basic types are 32 bytes long                                                                           // 1411
        }, 32);                                                                                                        // 1412
};                                                                                                                     // 1413
                                                                                                                       // 1414
/**                                                                                                                    // 1415
 * Should be used to determine if type is dynamic array                                                                // 1416
 * eg:                                                                                                                 // 1417
 * "type[]" => true                                                                                                    // 1418
 * "type[4]" => false                                                                                                  // 1419
 *                                                                                                                     // 1420
 * @method isDynamicArray                                                                                              // 1421
 * @param {String} name                                                                                                // 1422
 * @return {Bool} true if the type is dynamic array                                                                    // 1423
 */                                                                                                                    // 1424
SolidityType.prototype.isDynamicArray = function (name) {                                                              // 1425
    var nestedTypes = this.nestedTypes(name);                                                                          // 1426
    return !!nestedTypes && !nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);                                  // 1427
};                                                                                                                     // 1428
                                                                                                                       // 1429
/**                                                                                                                    // 1430
 * Should be used to determine if type is static array                                                                 // 1431
 * eg:                                                                                                                 // 1432
 * "type[]" => false                                                                                                   // 1433
 * "type[4]" => true                                                                                                   // 1434
 *                                                                                                                     // 1435
 * @method isStaticArray                                                                                               // 1436
 * @param {String} name                                                                                                // 1437
 * @return {Bool} true if the type is static array                                                                     // 1438
 */                                                                                                                    // 1439
SolidityType.prototype.isStaticArray = function (name) {                                                               // 1440
    var nestedTypes = this.nestedTypes(name);                                                                          // 1441
    return !!nestedTypes && !!nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);                                 // 1442
};                                                                                                                     // 1443
                                                                                                                       // 1444
/**                                                                                                                    // 1445
 * Should return length of static array                                                                                // 1446
 * eg.                                                                                                                 // 1447
 * "int[32]" => 32                                                                                                     // 1448
 * "int256[14]" => 14                                                                                                  // 1449
 * "int[2][3]" => 3                                                                                                    // 1450
 * "int" => 1                                                                                                          // 1451
 * "int[1]" => 1                                                                                                       // 1452
 * "int[]" => 1                                                                                                        // 1453
 *                                                                                                                     // 1454
 * @method staticArrayLength                                                                                           // 1455
 * @param {String} name                                                                                                // 1456
 * @return {Number} static array length                                                                                // 1457
 */                                                                                                                    // 1458
SolidityType.prototype.staticArrayLength = function (name) {                                                           // 1459
    var nestedTypes = this.nestedTypes(name);                                                                          // 1460
    if (nestedTypes) {                                                                                                 // 1461
       return parseInt(nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g) || 1);                                  // 1462
    }                                                                                                                  // 1463
    return 1;                                                                                                          // 1464
};                                                                                                                     // 1465
                                                                                                                       // 1466
/**                                                                                                                    // 1467
 * Should return nested type                                                                                           // 1468
 * eg.                                                                                                                 // 1469
 * "int[32]" => "int"                                                                                                  // 1470
 * "int256[14]" => "int256"                                                                                            // 1471
 * "int[2][3]" => "int[2]"                                                                                             // 1472
 * "int" => "int"                                                                                                      // 1473
 * "int[]" => "int"                                                                                                    // 1474
 *                                                                                                                     // 1475
 * @method nestedName                                                                                                  // 1476
 * @param {String} name                                                                                                // 1477
 * @return {String} nested name                                                                                        // 1478
 */                                                                                                                    // 1479
SolidityType.prototype.nestedName = function (name) {                                                                  // 1480
    // remove last [] in name                                                                                          // 1481
    var nestedTypes = this.nestedTypes(name);                                                                          // 1482
    if (!nestedTypes) {                                                                                                // 1483
        return name;                                                                                                   // 1484
    }                                                                                                                  // 1485
                                                                                                                       // 1486
    return name.substr(0, name.length - nestedTypes[nestedTypes.length - 1].length);                                   // 1487
};                                                                                                                     // 1488
                                                                                                                       // 1489
/**                                                                                                                    // 1490
 * Should return true if type has dynamic size by default                                                              // 1491
 * such types are "string", "bytes"                                                                                    // 1492
 *                                                                                                                     // 1493
 * @method isDynamicType                                                                                               // 1494
 * @param {String} name                                                                                                // 1495
 * @return {Bool} true if is dynamic, otherwise false                                                                  // 1496
 */                                                                                                                    // 1497
SolidityType.prototype.isDynamicType = function () {                                                                   // 1498
    return false;                                                                                                      // 1499
};                                                                                                                     // 1500
                                                                                                                       // 1501
/**                                                                                                                    // 1502
 * Should return array of nested types                                                                                 // 1503
 * eg.                                                                                                                 // 1504
 * "int[2][3][]" => ["[2]", "[3]", "[]"]                                                                               // 1505
 * "int[] => ["[]"]                                                                                                    // 1506
 * "int" => null                                                                                                       // 1507
 *                                                                                                                     // 1508
 * @method nestedTypes                                                                                                 // 1509
 * @param {String} name                                                                                                // 1510
 * @return {Array} array of nested types                                                                               // 1511
 */                                                                                                                    // 1512
SolidityType.prototype.nestedTypes = function (name) {                                                                 // 1513
    // return list of strings eg. "[]", "[3]", "[]", "[2]"                                                             // 1514
    return name.match(/(\[[0-9]*\])/g);                                                                                // 1515
};                                                                                                                     // 1516
                                                                                                                       // 1517
/**                                                                                                                    // 1518
 * Should be used to encode the value                                                                                  // 1519
 *                                                                                                                     // 1520
 * @method encode                                                                                                      // 1521
 * @param {Object} value                                                                                               // 1522
 * @param {String} name                                                                                                // 1523
 * @return {String} encoded value                                                                                      // 1524
 */                                                                                                                    // 1525
SolidityType.prototype.encode = function (value, name) {                                                               // 1526
    var self = this;                                                                                                   // 1527
    if (this.isDynamicArray(name)) {                                                                                   // 1528
                                                                                                                       // 1529
        return (function () {                                                                                          // 1530
            var length = value.length;                          // in int                                              // 1531
            var nestedName = self.nestedName(name);                                                                    // 1532
                                                                                                                       // 1533
            var result = [];                                                                                           // 1534
            result.push(f.formatInputInt(length).encode());                                                            // 1535
                                                                                                                       // 1536
            value.forEach(function (v) {                                                                               // 1537
                result.push(self.encode(v, nestedName));                                                               // 1538
            });                                                                                                        // 1539
                                                                                                                       // 1540
            return result;                                                                                             // 1541
        })();                                                                                                          // 1542
                                                                                                                       // 1543
    } else if (this.isStaticArray(name)) {                                                                             // 1544
                                                                                                                       // 1545
        return (function () {                                                                                          // 1546
            var length = self.staticArrayLength(name);          // in int                                              // 1547
            var nestedName = self.nestedName(name);                                                                    // 1548
                                                                                                                       // 1549
            var result = [];                                                                                           // 1550
            for (var i = 0; i < length; i++) {                                                                         // 1551
                result.push(self.encode(value[i], nestedName));                                                        // 1552
            }                                                                                                          // 1553
                                                                                                                       // 1554
            return result;                                                                                             // 1555
        })();                                                                                                          // 1556
                                                                                                                       // 1557
    }                                                                                                                  // 1558
                                                                                                                       // 1559
    return this._inputFormatter(value, name).encode();                                                                 // 1560
};                                                                                                                     // 1561
                                                                                                                       // 1562
/**                                                                                                                    // 1563
 * Should be used to decode value from bytes                                                                           // 1564
 *                                                                                                                     // 1565
 * @method decode                                                                                                      // 1566
 * @param {String} bytes                                                                                               // 1567
 * @param {Number} offset in bytes                                                                                     // 1568
 * @param {String} name type name                                                                                      // 1569
 * @returns {Object} decoded value                                                                                     // 1570
 */                                                                                                                    // 1571
SolidityType.prototype.decode = function (bytes, offset, name) {                                                       // 1572
    var self = this;                                                                                                   // 1573
                                                                                                                       // 1574
    if (this.isDynamicArray(name)) {                                                                                   // 1575
                                                                                                                       // 1576
        return (function () {                                                                                          // 1577
            var arrayOffset = parseInt('0x' + bytes.substr(offset * 2, 64)); // in bytes                               // 1578
            var length = parseInt('0x' + bytes.substr(arrayOffset * 2, 64)); // in int                                 // 1579
            var arrayStart = arrayOffset + 32; // array starts after length; // in bytes                               // 1580
                                                                                                                       // 1581
            var nestedName = self.nestedName(name);                                                                    // 1582
            var nestedStaticPartLength = self.staticPartLength(nestedName);  // in bytes                               // 1583
            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;                   // 1584
            var result = [];                                                                                           // 1585
                                                                                                                       // 1586
            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {          // 1587
                result.push(self.decode(bytes, arrayStart + i, nestedName));                                           // 1588
            }                                                                                                          // 1589
                                                                                                                       // 1590
            return result;                                                                                             // 1591
        })();                                                                                                          // 1592
                                                                                                                       // 1593
    } else if (this.isStaticArray(name)) {                                                                             // 1594
                                                                                                                       // 1595
        return (function () {                                                                                          // 1596
            var length = self.staticArrayLength(name);                      // in int                                  // 1597
            var arrayStart = offset;                                        // in bytes                                // 1598
                                                                                                                       // 1599
            var nestedName = self.nestedName(name);                                                                    // 1600
            var nestedStaticPartLength = self.staticPartLength(nestedName); // in bytes                                // 1601
            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;                   // 1602
            var result = [];                                                                                           // 1603
                                                                                                                       // 1604
            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {          // 1605
                result.push(self.decode(bytes, arrayStart + i, nestedName));                                           // 1606
            }                                                                                                          // 1607
                                                                                                                       // 1608
            return result;                                                                                             // 1609
        })();                                                                                                          // 1610
    } else if (this.isDynamicType(name)) {                                                                             // 1611
                                                                                                                       // 1612
        return (function () {                                                                                          // 1613
            var dynamicOffset = parseInt('0x' + bytes.substr(offset * 2, 64));      // in bytes                        // 1614
            var length = parseInt('0x' + bytes.substr(dynamicOffset * 2, 64));      // in bytes                        // 1615
            var roundedLength = Math.floor((length + 31) / 32);                     // in int                          // 1616
            var param = new SolidityParam(bytes.substr(dynamicOffset * 2, ( 1 + roundedLength) * 64), 0);              // 1617
            return self._outputFormatter(param, name);                                                                 // 1618
        })();                                                                                                          // 1619
    }                                                                                                                  // 1620
                                                                                                                       // 1621
    var length = this.staticPartLength(name);                                                                          // 1622
    var param = new SolidityParam(bytes.substr(offset * 2, length * 2));                                               // 1623
    return this._outputFormatter(param, name);                                                                         // 1624
};                                                                                                                     // 1625
                                                                                                                       // 1626
module.exports = SolidityType;                                                                                         // 1627
                                                                                                                       // 1628
},{"./formatters":9,"./param":11}],15:[function(require,module,exports){                                               // 1629
var f = require('./formatters');                                                                                       // 1630
var SolidityType = require('./type');                                                                                  // 1631
                                                                                                                       // 1632
/**                                                                                                                    // 1633
 * SolidityTypeUInt is a prootype that represents uint type                                                            // 1634
 * It matches:                                                                                                         // 1635
 * uint                                                                                                                // 1636
 * uint[]                                                                                                              // 1637
 * uint[4]                                                                                                             // 1638
 * uint[][]                                                                                                            // 1639
 * uint[3][]                                                                                                           // 1640
 * uint[][6][], ...                                                                                                    // 1641
 * uint32                                                                                                              // 1642
 * uint64[]                                                                                                            // 1643
 * uint8[4]                                                                                                            // 1644
 * uint256[][]                                                                                                         // 1645
 * uint[3][]                                                                                                           // 1646
 * uint64[][6][], ...                                                                                                  // 1647
 */                                                                                                                    // 1648
var SolidityTypeUInt = function () {                                                                                   // 1649
    this._inputFormatter = f.formatInputInt;                                                                           // 1650
    this._outputFormatter = f.formatOutputUInt;                                                                        // 1651
};                                                                                                                     // 1652
                                                                                                                       // 1653
SolidityTypeUInt.prototype = new SolidityType({});                                                                     // 1654
SolidityTypeUInt.prototype.constructor = SolidityTypeUInt;                                                             // 1655
                                                                                                                       // 1656
SolidityTypeUInt.prototype.isType = function (name) {                                                                  // 1657
    return !!name.match(/^uint([0-9]*)?(\[([0-9]*)\])*$/);                                                             // 1658
};                                                                                                                     // 1659
                                                                                                                       // 1660
module.exports = SolidityTypeUInt;                                                                                     // 1661
                                                                                                                       // 1662
},{"./formatters":9,"./type":14}],16:[function(require,module,exports){                                                // 1663
var f = require('./formatters');                                                                                       // 1664
var SolidityType = require('./type');                                                                                  // 1665
                                                                                                                       // 1666
/**                                                                                                                    // 1667
 * SolidityTypeUReal is a prootype that represents ureal type                                                          // 1668
 * It matches:                                                                                                         // 1669
 * ureal                                                                                                               // 1670
 * ureal[]                                                                                                             // 1671
 * ureal[4]                                                                                                            // 1672
 * ureal[][]                                                                                                           // 1673
 * ureal[3][]                                                                                                          // 1674
 * ureal[][6][], ...                                                                                                   // 1675
 * ureal32                                                                                                             // 1676
 * ureal64[]                                                                                                           // 1677
 * ureal8[4]                                                                                                           // 1678
 * ureal256[][]                                                                                                        // 1679
 * ureal[3][]                                                                                                          // 1680
 * ureal64[][6][], ...                                                                                                 // 1681
 */                                                                                                                    // 1682
var SolidityTypeUReal = function () {                                                                                  // 1683
    this._inputFormatter = f.formatInputReal;                                                                          // 1684
    this._outputFormatter = f.formatOutputUReal;                                                                       // 1685
};                                                                                                                     // 1686
                                                                                                                       // 1687
SolidityTypeUReal.prototype = new SolidityType({});                                                                    // 1688
SolidityTypeUReal.prototype.constructor = SolidityTypeUReal;                                                           // 1689
                                                                                                                       // 1690
SolidityTypeUReal.prototype.isType = function (name) {                                                                 // 1691
    return !!name.match(/^ureal([0-9]*)?(\[([0-9]*)\])*$/);                                                            // 1692
};                                                                                                                     // 1693
                                                                                                                       // 1694
module.exports = SolidityTypeUReal;                                                                                    // 1695
                                                                                                                       // 1696
},{"./formatters":9,"./type":14}],17:[function(require,module,exports){                                                // 1697
'use strict';                                                                                                          // 1698
                                                                                                                       // 1699
// go env doesn't have and need XMLHttpRequest                                                                         // 1700
if (typeof XMLHttpRequest === 'undefined') {                                                                           // 1701
    exports.XMLHttpRequest = {};                                                                                       // 1702
} else {                                                                                                               // 1703
    exports.XMLHttpRequest = XMLHttpRequest; // jshint ignore:line                                                     // 1704
}                                                                                                                      // 1705
                                                                                                                       // 1706
                                                                                                                       // 1707
},{}],18:[function(require,module,exports){                                                                            // 1708
/*                                                                                                                     // 1709
    This file is part of web3.js.                                                                                      // 1710
                                                                                                                       // 1711
    web3.js is free software: you can redistribute it and/or modify                                                    // 1712
    it under the terms of the GNU Lesser General Public License as published by                                        // 1713
    the Free Software Foundation, either version 3 of the License, or                                                  // 1714
    (at your option) any later version.                                                                                // 1715
                                                                                                                       // 1716
    web3.js is distributed in the hope that it will be useful,                                                         // 1717
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 1718
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 1719
    GNU Lesser General Public License for more details.                                                                // 1720
                                                                                                                       // 1721
    You should have received a copy of the GNU Lesser General Public License                                           // 1722
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 1723
*/                                                                                                                     // 1724
/** @file config.js                                                                                                    // 1725
 * @authors:                                                                                                           // 1726
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 1727
 * @date 2015                                                                                                          // 1728
 */                                                                                                                    // 1729
                                                                                                                       // 1730
/**                                                                                                                    // 1731
 * Utils                                                                                                               // 1732
 *                                                                                                                     // 1733
 * @module utils                                                                                                       // 1734
 */                                                                                                                    // 1735
                                                                                                                       // 1736
/**                                                                                                                    // 1737
 * Utility functions                                                                                                   // 1738
 *                                                                                                                     // 1739
 * @class [utils] config                                                                                               // 1740
 * @constructor                                                                                                        // 1741
 */                                                                                                                    // 1742
                                                                                                                       // 1743
                                                                                                                       // 1744
/// required to define ETH_BIGNUMBER_ROUNDING_MODE                                                                     // 1745
var BigNumber = require('bignumber.js');                                                                               // 1746
                                                                                                                       // 1747
var ETH_UNITS = [                                                                                                      // 1748
    'wei',                                                                                                             // 1749
    'kwei',                                                                                                            // 1750
    'Mwei',                                                                                                            // 1751
    'Gwei',                                                                                                            // 1752
    'szabo',                                                                                                           // 1753
    'finney',                                                                                                          // 1754
    'femtoether',                                                                                                      // 1755
    'picoether',                                                                                                       // 1756
    'nanoether',                                                                                                       // 1757
    'microether',                                                                                                      // 1758
    'milliether',                                                                                                      // 1759
    'nano',                                                                                                            // 1760
    'micro',                                                                                                           // 1761
    'milli',                                                                                                           // 1762
    'ether',                                                                                                           // 1763
    'grand',                                                                                                           // 1764
    'Mether',                                                                                                          // 1765
    'Gether',                                                                                                          // 1766
    'Tether',                                                                                                          // 1767
    'Pether',                                                                                                          // 1768
    'Eether',                                                                                                          // 1769
    'Zether',                                                                                                          // 1770
    'Yether',                                                                                                          // 1771
    'Nether',                                                                                                          // 1772
    'Dether',                                                                                                          // 1773
    'Vether',                                                                                                          // 1774
    'Uether'                                                                                                           // 1775
];                                                                                                                     // 1776
                                                                                                                       // 1777
module.exports = {                                                                                                     // 1778
    ETH_PADDING: 32,                                                                                                   // 1779
    ETH_SIGNATURE_LENGTH: 4,                                                                                           // 1780
    ETH_UNITS: ETH_UNITS,                                                                                              // 1781
    ETH_BIGNUMBER_ROUNDING_MODE: { ROUNDING_MODE: BigNumber.ROUND_DOWN },                                              // 1782
    ETH_POLLING_TIMEOUT: 1000/2,                                                                                       // 1783
    defaultBlock: 'latest',                                                                                            // 1784
    defaultAccount: undefined                                                                                          // 1785
};                                                                                                                     // 1786
                                                                                                                       // 1787
                                                                                                                       // 1788
},{"bignumber.js":"bignumber.js"}],19:[function(require,module,exports){                                               // 1789
/*                                                                                                                     // 1790
    This file is part of web3.js.                                                                                      // 1791
                                                                                                                       // 1792
    web3.js is free software: you can redistribute it and/or modify                                                    // 1793
    it under the terms of the GNU Lesser General Public License as published by                                        // 1794
    the Free Software Foundation, either version 3 of the License, or                                                  // 1795
    (at your option) any later version.                                                                                // 1796
                                                                                                                       // 1797
    web3.js is distributed in the hope that it will be useful,                                                         // 1798
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 1799
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 1800
    GNU Lesser General Public License for more details.                                                                // 1801
                                                                                                                       // 1802
    You should have received a copy of the GNU Lesser General Public License                                           // 1803
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 1804
*/                                                                                                                     // 1805
/**                                                                                                                    // 1806
 * @file sha3.js                                                                                                       // 1807
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 1808
 * @date 2015                                                                                                          // 1809
 */                                                                                                                    // 1810
                                                                                                                       // 1811
var CryptoJS = require('crypto-js');                                                                                   // 1812
var sha3 = require('crypto-js/sha3');                                                                                  // 1813
                                                                                                                       // 1814
module.exports = function (value, options) {                                                                           // 1815
    if (options && options.encoding === 'hex') {                                                                       // 1816
        if (value.length > 2 && value.substr(0, 2) === '0x') {                                                         // 1817
            value = value.substr(2);                                                                                   // 1818
        }                                                                                                              // 1819
        value = CryptoJS.enc.Hex.parse(value);                                                                         // 1820
    }                                                                                                                  // 1821
                                                                                                                       // 1822
    return sha3(value, {                                                                                               // 1823
        outputLength: 256                                                                                              // 1824
    }).toString();                                                                                                     // 1825
};                                                                                                                     // 1826
                                                                                                                       // 1827
                                                                                                                       // 1828
},{"crypto-js":58,"crypto-js/sha3":79}],20:[function(require,module,exports){                                          // 1829
/*                                                                                                                     // 1830
    This file is part of web3.js.                                                                                      // 1831
                                                                                                                       // 1832
    web3.js is free software: you can redistribute it and/or modify                                                    // 1833
    it under the terms of the GNU Lesser General Public License as published by                                        // 1834
    the Free Software Foundation, either version 3 of the License, or                                                  // 1835
    (at your option) any later version.                                                                                // 1836
                                                                                                                       // 1837
    web3.js is distributed in the hope that it will be useful,                                                         // 1838
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 1839
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 1840
    GNU Lesser General Public License for more details.                                                                // 1841
                                                                                                                       // 1842
    You should have received a copy of the GNU Lesser General Public License                                           // 1843
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 1844
*/                                                                                                                     // 1845
/**                                                                                                                    // 1846
 * @file utils.js                                                                                                      // 1847
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 1848
 * @date 2015                                                                                                          // 1849
 */                                                                                                                    // 1850
                                                                                                                       // 1851
/**                                                                                                                    // 1852
 * Utils                                                                                                               // 1853
 *                                                                                                                     // 1854
 * @module utils                                                                                                       // 1855
 */                                                                                                                    // 1856
                                                                                                                       // 1857
/**                                                                                                                    // 1858
 * Utility functions                                                                                                   // 1859
 *                                                                                                                     // 1860
 * @class [utils] utils                                                                                                // 1861
 * @constructor                                                                                                        // 1862
 */                                                                                                                    // 1863
                                                                                                                       // 1864
                                                                                                                       // 1865
var BigNumber = require('bignumber.js');                                                                               // 1866
var sha3 = require('./sha3.js');                                                                                       // 1867
var utf8 = require('utf8');                                                                                            // 1868
                                                                                                                       // 1869
var unitMap = {                                                                                                        // 1870
    'noether':      '0',                                                                                               // 1871
    'wei':          '1',                                                                                               // 1872
    'kwei':         '1000',                                                                                            // 1873
    'Kwei':         '1000',                                                                                            // 1874
    'babbage':      '1000',                                                                                            // 1875
    'femtoether':   '1000',                                                                                            // 1876
    'mwei':         '1000000',                                                                                         // 1877
    'Mwei':         '1000000',                                                                                         // 1878
    'lovelace':     '1000000',                                                                                         // 1879
    'picoether':    '1000000',                                                                                         // 1880
    'gwei':         '1000000000',                                                                                      // 1881
    'Gwei':         '1000000000',                                                                                      // 1882
    'shannon':      '1000000000',                                                                                      // 1883
    'nanoether':    '1000000000',                                                                                      // 1884
    'nano':         '1000000000',                                                                                      // 1885
    'szabo':        '1000000000000',                                                                                   // 1886
    'microether':   '1000000000000',                                                                                   // 1887
    'micro':        '1000000000000',                                                                                   // 1888
    'finney':       '1000000000000000',                                                                                // 1889
    'milliether':    '1000000000000000',                                                                               // 1890
    'milli':         '1000000000000000',                                                                               // 1891
    'ether':        '1000000000000000000',                                                                             // 1892
    'kether':       '1000000000000000000000',                                                                          // 1893
    'grand':        '1000000000000000000000',                                                                          // 1894
    'mether':       '1000000000000000000000000',                                                                       // 1895
    'gether':       '1000000000000000000000000000',                                                                    // 1896
    'tether':       '1000000000000000000000000000000'                                                                  // 1897
};                                                                                                                     // 1898
                                                                                                                       // 1899
/**                                                                                                                    // 1900
 * Should be called to pad string to expected length                                                                   // 1901
 *                                                                                                                     // 1902
 * @method padLeft                                                                                                     // 1903
 * @param {String} string to be padded                                                                                 // 1904
 * @param {Number} characters that result string should have                                                           // 1905
 * @param {String} sign, by default 0                                                                                  // 1906
 * @returns {String} right aligned string                                                                              // 1907
 */                                                                                                                    // 1908
var padLeft = function (string, chars, sign) {                                                                         // 1909
    return new Array(chars - string.length + 1).join(sign ? sign : "0") + string;                                      // 1910
};                                                                                                                     // 1911
                                                                                                                       // 1912
/**                                                                                                                    // 1913
 * Should be called to pad string to expected length                                                                   // 1914
 *                                                                                                                     // 1915
 * @method padRight                                                                                                    // 1916
 * @param {String} string to be padded                                                                                 // 1917
 * @param {Number} characters that result string should have                                                           // 1918
 * @param {String} sign, by default 0                                                                                  // 1919
 * @returns {String} right aligned string                                                                              // 1920
 */                                                                                                                    // 1921
var padRight = function (string, chars, sign) {                                                                        // 1922
    return string + (new Array(chars - string.length + 1).join(sign ? sign : "0"));                                    // 1923
};                                                                                                                     // 1924
                                                                                                                       // 1925
/**                                                                                                                    // 1926
 * Should be called to get utf8 from it's hex representation                                                           // 1927
 *                                                                                                                     // 1928
 * @method toUtf8                                                                                                      // 1929
 * @param {String} string in hex                                                                                       // 1930
 * @returns {String} ascii string representation of hex value                                                          // 1931
 */                                                                                                                    // 1932
var toUtf8 = function(hex) {                                                                                           // 1933
// Find termination                                                                                                    // 1934
    var str = "";                                                                                                      // 1935
    var i = 0, l = hex.length;                                                                                         // 1936
    if (hex.substring(0, 2) === '0x') {                                                                                // 1937
        i = 2;                                                                                                         // 1938
    }                                                                                                                  // 1939
    for (; i < l; i+=2) {                                                                                              // 1940
        var code = parseInt(hex.substr(i, 2), 16);                                                                     // 1941
        if (code === 0)                                                                                                // 1942
            break;                                                                                                     // 1943
        str += String.fromCharCode(code);                                                                              // 1944
    }                                                                                                                  // 1945
                                                                                                                       // 1946
    return utf8.decode(str);                                                                                           // 1947
};                                                                                                                     // 1948
                                                                                                                       // 1949
/**                                                                                                                    // 1950
 * Should be called to get ascii from it's hex representation                                                          // 1951
 *                                                                                                                     // 1952
 * @method toAscii                                                                                                     // 1953
 * @param {String} string in hex                                                                                       // 1954
 * @returns {String} ascii string representation of hex value                                                          // 1955
 */                                                                                                                    // 1956
var toAscii = function(hex) {                                                                                          // 1957
// Find termination                                                                                                    // 1958
    var str = "";                                                                                                      // 1959
    var i = 0, l = hex.length;                                                                                         // 1960
    if (hex.substring(0, 2) === '0x') {                                                                                // 1961
        i = 2;                                                                                                         // 1962
    }                                                                                                                  // 1963
    for (; i < l; i+=2) {                                                                                              // 1964
        var code = parseInt(hex.substr(i, 2), 16);                                                                     // 1965
        str += String.fromCharCode(code);                                                                              // 1966
    }                                                                                                                  // 1967
                                                                                                                       // 1968
    return str;                                                                                                        // 1969
};                                                                                                                     // 1970
                                                                                                                       // 1971
/**                                                                                                                    // 1972
 * Should be called to get hex representation (prefixed by 0x) of utf8 string                                          // 1973
 *                                                                                                                     // 1974
 * @method fromUtf8                                                                                                    // 1975
 * @param {String} string                                                                                              // 1976
 * @param {Number} optional padding                                                                                    // 1977
 * @returns {String} hex representation of input string                                                                // 1978
 */                                                                                                                    // 1979
var fromUtf8 = function(str) {                                                                                         // 1980
    str = utf8.encode(str);                                                                                            // 1981
    var hex = "";                                                                                                      // 1982
    for(var i = 0; i < str.length; i++) {                                                                              // 1983
        var code = str.charCodeAt(i);                                                                                  // 1984
        if (code === 0)                                                                                                // 1985
            break;                                                                                                     // 1986
        var n = code.toString(16);                                                                                     // 1987
        hex += n.length < 2 ? '0' + n : n;                                                                             // 1988
    }                                                                                                                  // 1989
                                                                                                                       // 1990
    return "0x" + hex;                                                                                                 // 1991
};                                                                                                                     // 1992
                                                                                                                       // 1993
/**                                                                                                                    // 1994
 * Should be called to get hex representation (prefixed by 0x) of ascii string                                         // 1995
 *                                                                                                                     // 1996
 * @method fromAscii                                                                                                   // 1997
 * @param {String} string                                                                                              // 1998
 * @param {Number} optional padding                                                                                    // 1999
 * @returns {String} hex representation of input string                                                                // 2000
 */                                                                                                                    // 2001
var fromAscii = function(str) {                                                                                        // 2002
    var hex = "";                                                                                                      // 2003
    for(var i = 0; i < str.length; i++) {                                                                              // 2004
        var code = str.charCodeAt(i);                                                                                  // 2005
        var n = code.toString(16);                                                                                     // 2006
        hex += n.length < 2 ? '0' + n : n;                                                                             // 2007
    }                                                                                                                  // 2008
                                                                                                                       // 2009
    return "0x" + hex;                                                                                                 // 2010
};                                                                                                                     // 2011
                                                                                                                       // 2012
/**                                                                                                                    // 2013
 * Should be used to create full function/event name from json abi                                                     // 2014
 *                                                                                                                     // 2015
 * @method transformToFullName                                                                                         // 2016
 * @param {Object} json-abi                                                                                            // 2017
 * @return {String} full fnction/event name                                                                            // 2018
 */                                                                                                                    // 2019
var transformToFullName = function (json) {                                                                            // 2020
    if (json.name.indexOf('(') !== -1) {                                                                               // 2021
        return json.name;                                                                                              // 2022
    }                                                                                                                  // 2023
                                                                                                                       // 2024
    var typeName = json.inputs.map(function(i){return i.type; }).join();                                               // 2025
    return json.name + '(' + typeName + ')';                                                                           // 2026
};                                                                                                                     // 2027
                                                                                                                       // 2028
/**                                                                                                                    // 2029
 * Should be called to get display name of contract function                                                           // 2030
 *                                                                                                                     // 2031
 * @method extractDisplayName                                                                                          // 2032
 * @param {String} name of function/event                                                                              // 2033
 * @returns {String} display name for function/event eg. multiply(uint256) -> multiply                                 // 2034
 */                                                                                                                    // 2035
var extractDisplayName = function (name) {                                                                             // 2036
    var length = name.indexOf('(');                                                                                    // 2037
    return length !== -1 ? name.substr(0, length) : name;                                                              // 2038
};                                                                                                                     // 2039
                                                                                                                       // 2040
/// @returns overloaded part of function/event name                                                                    // 2041
var extractTypeName = function (name) {                                                                                // 2042
    /// TODO: make it invulnerable                                                                                     // 2043
    var length = name.indexOf('(');                                                                                    // 2044
    return length !== -1 ? name.substr(length + 1, name.length - 1 - (length + 1)).replace(' ', '') : "";              // 2045
};                                                                                                                     // 2046
                                                                                                                       // 2047
/**                                                                                                                    // 2048
 * Converts value to it's decimal representation in string                                                             // 2049
 *                                                                                                                     // 2050
 * @method toDecimal                                                                                                   // 2051
 * @param {String|Number|BigNumber}                                                                                    // 2052
 * @return {String}                                                                                                    // 2053
 */                                                                                                                    // 2054
var toDecimal = function (value) {                                                                                     // 2055
    return toBigNumber(value).toNumber();                                                                              // 2056
};                                                                                                                     // 2057
                                                                                                                       // 2058
/**                                                                                                                    // 2059
 * Converts value to it's hex representation                                                                           // 2060
 *                                                                                                                     // 2061
 * @method fromDecimal                                                                                                 // 2062
 * @param {String|Number|BigNumber}                                                                                    // 2063
 * @return {String}                                                                                                    // 2064
 */                                                                                                                    // 2065
var fromDecimal = function (value) {                                                                                   // 2066
    var number = toBigNumber(value);                                                                                   // 2067
    var result = number.toString(16);                                                                                  // 2068
                                                                                                                       // 2069
    return number.lessThan(0) ? '-0x' + result.substr(1) : '0x' + result;                                              // 2070
};                                                                                                                     // 2071
                                                                                                                       // 2072
/**                                                                                                                    // 2073
 * Auto converts any given value into it's hex representation.                                                         // 2074
 *                                                                                                                     // 2075
 * And even stringifys objects before.                                                                                 // 2076
 *                                                                                                                     // 2077
 * @method toHex                                                                                                       // 2078
 * @param {String|Number|BigNumber|Object}                                                                             // 2079
 * @return {String}                                                                                                    // 2080
 */                                                                                                                    // 2081
var toHex = function (val) {                                                                                           // 2082
    /*jshint maxcomplexity: 8 */                                                                                       // 2083
                                                                                                                       // 2084
    if (isBoolean(val))                                                                                                // 2085
        return fromDecimal(+val);                                                                                      // 2086
                                                                                                                       // 2087
    if (isBigNumber(val))                                                                                              // 2088
        return fromDecimal(val);                                                                                       // 2089
                                                                                                                       // 2090
    if (typeof val === 'object')                                                                                       // 2091
        return fromUtf8(JSON.stringify(val));                                                                          // 2092
                                                                                                                       // 2093
    // if its a negative number, pass it through fromDecimal                                                           // 2094
    if (isString(val)) {                                                                                               // 2095
        if (val.indexOf('-0x') === 0)                                                                                  // 2096
            return fromDecimal(val);                                                                                   // 2097
        else if(val.indexOf('0x') === 0)                                                                               // 2098
            return val;                                                                                                // 2099
        else if (!isFinite(val))                                                                                       // 2100
            return fromAscii(val);                                                                                     // 2101
    }                                                                                                                  // 2102
                                                                                                                       // 2103
    return fromDecimal(val);                                                                                           // 2104
};                                                                                                                     // 2105
                                                                                                                       // 2106
/**                                                                                                                    // 2107
 * Returns value of unit in Wei                                                                                        // 2108
 *                                                                                                                     // 2109
 * @method getValueOfUnit                                                                                              // 2110
 * @param {String} unit the unit to convert to, default ether                                                          // 2111
 * @returns {BigNumber} value of the unit (in Wei)                                                                     // 2112
 * @throws error if the unit is not correct:w                                                                          // 2113
 */                                                                                                                    // 2114
var getValueOfUnit = function (unit) {                                                                                 // 2115
    unit = unit ? unit.toLowerCase() : 'ether';                                                                        // 2116
    var unitValue = unitMap[unit];                                                                                     // 2117
    if (unitValue === undefined) {                                                                                     // 2118
        throw new Error('This unit doesn\'t exists, please use the one of the following units' + JSON.stringify(unitMap, null, 2));
    }                                                                                                                  // 2120
    return new BigNumber(unitValue, 10);                                                                               // 2121
};                                                                                                                     // 2122
                                                                                                                       // 2123
/**                                                                                                                    // 2124
 * Takes a number of wei and converts it to any other ether unit.                                                      // 2125
 *                                                                                                                     // 2126
 * Possible units are:                                                                                                 // 2127
 *   SI Short   SI Full        Effigy       Other                                                                      // 2128
 * - kwei       femtoether     babbage                                                                                 // 2129
 * - mwei       picoether      lovelace                                                                                // 2130
 * - gwei       nanoether      shannon      nano                                                                       // 2131
 * - --         microether     szabo        micro                                                                      // 2132
 * - --         milliether     finney       milli                                                                      // 2133
 * - ether      --             --                                                                                      // 2134
 * - kether                    --           grand                                                                      // 2135
 * - mether                                                                                                            // 2136
 * - gether                                                                                                            // 2137
 * - tether                                                                                                            // 2138
 *                                                                                                                     // 2139
 * @method fromWei                                                                                                     // 2140
 * @param {Number|String} number can be a number, number string or a HEX of a decimal                                  // 2141
 * @param {String} unit the unit to convert to, default ether                                                          // 2142
 * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number                    // 2143
*/                                                                                                                     // 2144
var fromWei = function(number, unit) {                                                                                 // 2145
    var returnValue = toBigNumber(number).dividedBy(getValueOfUnit(unit));                                             // 2146
                                                                                                                       // 2147
    return isBigNumber(number) ? returnValue : returnValue.toString(10);                                               // 2148
};                                                                                                                     // 2149
                                                                                                                       // 2150
/**                                                                                                                    // 2151
 * Takes a number of a unit and converts it to wei.                                                                    // 2152
 *                                                                                                                     // 2153
 * Possible units are:                                                                                                 // 2154
 *   SI Short   SI Full        Effigy       Other                                                                      // 2155
 * - kwei       femtoether     babbage                                                                                 // 2156
 * - mwei       picoether      lovelace                                                                                // 2157
 * - gwei       nanoether      shannon      nano                                                                       // 2158
 * - --         microether     szabo        micro                                                                      // 2159
 * - --         microether     szabo        micro                                                                      // 2160
 * - --         milliether     finney       milli                                                                      // 2161
 * - ether      --             --                                                                                      // 2162
 * - kether                    --           grand                                                                      // 2163
 * - mether                                                                                                            // 2164
 * - gether                                                                                                            // 2165
 * - tether                                                                                                            // 2166
 *                                                                                                                     // 2167
 * @method toWei                                                                                                       // 2168
 * @param {Number|String|BigNumber} number can be a number, number string or a HEX of a decimal                        // 2169
 * @param {String} unit the unit to convert from, default ether                                                        // 2170
 * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number                    // 2171
*/                                                                                                                     // 2172
var toWei = function(number, unit) {                                                                                   // 2173
    var returnValue = toBigNumber(number).times(getValueOfUnit(unit));                                                 // 2174
                                                                                                                       // 2175
    return isBigNumber(number) ? returnValue : returnValue.toString(10);                                               // 2176
};                                                                                                                     // 2177
                                                                                                                       // 2178
/**                                                                                                                    // 2179
 * Takes an input and transforms it into an bignumber                                                                  // 2180
 *                                                                                                                     // 2181
 * @method toBigNumber                                                                                                 // 2182
 * @param {Number|String|BigNumber} a number, string, HEX string or BigNumber                                          // 2183
 * @return {BigNumber} BigNumber                                                                                       // 2184
*/                                                                                                                     // 2185
var toBigNumber = function(number) {                                                                                   // 2186
    /*jshint maxcomplexity:5 */                                                                                        // 2187
    number = number || 0;                                                                                              // 2188
    if (isBigNumber(number))                                                                                           // 2189
        return number;                                                                                                 // 2190
                                                                                                                       // 2191
    if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {                             // 2192
        return new BigNumber(number.replace('0x',''), 16);                                                             // 2193
    }                                                                                                                  // 2194
                                                                                                                       // 2195
    return new BigNumber(number.toString(10), 10);                                                                     // 2196
};                                                                                                                     // 2197
                                                                                                                       // 2198
/**                                                                                                                    // 2199
 * Takes and input transforms it into bignumber and if it is negative value, into two's complement                     // 2200
 *                                                                                                                     // 2201
 * @method toTwosComplement                                                                                            // 2202
 * @param {Number|String|BigNumber}                                                                                    // 2203
 * @return {BigNumber}                                                                                                 // 2204
 */                                                                                                                    // 2205
var toTwosComplement = function (number) {                                                                             // 2206
    var bigNumber = toBigNumber(number).round();                                                                       // 2207
    if (bigNumber.lessThan(0)) {                                                                                       // 2208
        return new BigNumber("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16).plus(bigNumber).plus(1);
    }                                                                                                                  // 2210
    return bigNumber;                                                                                                  // 2211
};                                                                                                                     // 2212
                                                                                                                       // 2213
/**                                                                                                                    // 2214
 * Checks if the given string is strictly an address                                                                   // 2215
 *                                                                                                                     // 2216
 * @method isStrictAddress                                                                                             // 2217
 * @param {String} address the given HEX adress                                                                        // 2218
 * @return {Boolean}                                                                                                   // 2219
*/                                                                                                                     // 2220
var isStrictAddress = function (address) {                                                                             // 2221
    return /^0x[0-9a-f]{40}$/i.test(address);                                                                          // 2222
};                                                                                                                     // 2223
                                                                                                                       // 2224
/**                                                                                                                    // 2225
 * Checks if the given string is an address                                                                            // 2226
 *                                                                                                                     // 2227
 * @method isAddress                                                                                                   // 2228
 * @param {String} address the given HEX adress                                                                        // 2229
 * @return {Boolean}                                                                                                   // 2230
*/                                                                                                                     // 2231
var isAddress = function (address) {                                                                                   // 2232
    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {                                                                       // 2233
        // check if it has the basic requirements of an address                                                        // 2234
        return false;                                                                                                  // 2235
    } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {                           // 2236
        // If it's all small caps or all all caps, return true                                                         // 2237
        return true;                                                                                                   // 2238
    } else {                                                                                                           // 2239
        // Otherwise check each case                                                                                   // 2240
        return isChecksumAddress(address);                                                                             // 2241
    }                                                                                                                  // 2242
};                                                                                                                     // 2243
                                                                                                                       // 2244
/**                                                                                                                    // 2245
 * Checks if the given string is a checksummed address                                                                 // 2246
 *                                                                                                                     // 2247
 * @method isChecksumAddress                                                                                           // 2248
 * @param {String} address the given HEX adress                                                                        // 2249
 * @return {Boolean}                                                                                                   // 2250
*/                                                                                                                     // 2251
var isChecksumAddress = function (address) {                                                                           // 2252
    // Check each case                                                                                                 // 2253
    address = address.replace('0x','');                                                                                // 2254
    var addressHash = sha3(address.toLowerCase());                                                                     // 2255
                                                                                                                       // 2256
    for (var i = 0; i < 40; i++ ) {                                                                                    // 2257
        // the nth letter should be uppercase if the nth digit of casemap is 1                                         // 2258
        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {
            return false;                                                                                              // 2260
        }                                                                                                              // 2261
    }                                                                                                                  // 2262
    return true;                                                                                                       // 2263
};                                                                                                                     // 2264
                                                                                                                       // 2265
                                                                                                                       // 2266
                                                                                                                       // 2267
/**                                                                                                                    // 2268
 * Makes a checksum address                                                                                            // 2269
 *                                                                                                                     // 2270
 * @method toChecksumAddress                                                                                           // 2271
 * @param {String} address the given HEX adress                                                                        // 2272
 * @return {String}                                                                                                    // 2273
*/                                                                                                                     // 2274
var toChecksumAddress = function (address) {                                                                           // 2275
    if (typeof address === 'undefined') return '';                                                                     // 2276
                                                                                                                       // 2277
    address = address.toLowerCase().replace('0x','');                                                                  // 2278
    var addressHash = sha3(address);                                                                                   // 2279
    var checksumAddress = '0x';                                                                                        // 2280
                                                                                                                       // 2281
    for (var i = 0; i < address.length; i++ ) {                                                                        // 2282
        // If ith character is 9 to f then make it uppercase                                                           // 2283
        if (parseInt(addressHash[i], 16) > 7) {                                                                        // 2284
          checksumAddress += address[i].toUpperCase();                                                                 // 2285
        } else {                                                                                                       // 2286
            checksumAddress += address[i];                                                                             // 2287
        }                                                                                                              // 2288
    }                                                                                                                  // 2289
    return checksumAddress;                                                                                            // 2290
};                                                                                                                     // 2291
                                                                                                                       // 2292
/**                                                                                                                    // 2293
 * Transforms given string to valid 20 bytes-length addres with 0x prefix                                              // 2294
 *                                                                                                                     // 2295
 * @method toAddress                                                                                                   // 2296
 * @param {String} address                                                                                             // 2297
 * @return {String} formatted address                                                                                  // 2298
 */                                                                                                                    // 2299
var toAddress = function (address) {                                                                                   // 2300
    if (isStrictAddress(address)) {                                                                                    // 2301
        return address;                                                                                                // 2302
    }                                                                                                                  // 2303
                                                                                                                       // 2304
    if (/^[0-9a-f]{40}$/.test(address)) {                                                                              // 2305
        return '0x' + address;                                                                                         // 2306
    }                                                                                                                  // 2307
                                                                                                                       // 2308
    return '0x' + padLeft(toHex(address).substr(2), 40);                                                               // 2309
};                                                                                                                     // 2310
                                                                                                                       // 2311
/**                                                                                                                    // 2312
 * Returns true if object is BigNumber, otherwise false                                                                // 2313
 *                                                                                                                     // 2314
 * @method isBigNumber                                                                                                 // 2315
 * @param {Object}                                                                                                     // 2316
 * @return {Boolean}                                                                                                   // 2317
 */                                                                                                                    // 2318
var isBigNumber = function (object) {                                                                                  // 2319
    return object instanceof BigNumber ||                                                                              // 2320
        (object && object.constructor && object.constructor.name === 'BigNumber');                                     // 2321
};                                                                                                                     // 2322
                                                                                                                       // 2323
/**                                                                                                                    // 2324
 * Returns true if object is string, otherwise false                                                                   // 2325
 *                                                                                                                     // 2326
 * @method isString                                                                                                    // 2327
 * @param {Object}                                                                                                     // 2328
 * @return {Boolean}                                                                                                   // 2329
 */                                                                                                                    // 2330
var isString = function (object) {                                                                                     // 2331
    return typeof object === 'string' ||                                                                               // 2332
        (object && object.constructor && object.constructor.name === 'String');                                        // 2333
};                                                                                                                     // 2334
                                                                                                                       // 2335
/**                                                                                                                    // 2336
 * Returns true if object is function, otherwise false                                                                 // 2337
 *                                                                                                                     // 2338
 * @method isFunction                                                                                                  // 2339
 * @param {Object}                                                                                                     // 2340
 * @return {Boolean}                                                                                                   // 2341
 */                                                                                                                    // 2342
var isFunction = function (object) {                                                                                   // 2343
    return typeof object === 'function';                                                                               // 2344
};                                                                                                                     // 2345
                                                                                                                       // 2346
/**                                                                                                                    // 2347
 * Returns true if object is Objet, otherwise false                                                                    // 2348
 *                                                                                                                     // 2349
 * @method isObject                                                                                                    // 2350
 * @param {Object}                                                                                                     // 2351
 * @return {Boolean}                                                                                                   // 2352
 */                                                                                                                    // 2353
var isObject = function (object) {                                                                                     // 2354
    return object !== null && !(Array.isArray(object)) && typeof object === 'object';                                  // 2355
};                                                                                                                     // 2356
                                                                                                                       // 2357
/**                                                                                                                    // 2358
 * Returns true if object is boolean, otherwise false                                                                  // 2359
 *                                                                                                                     // 2360
 * @method isBoolean                                                                                                   // 2361
 * @param {Object}                                                                                                     // 2362
 * @return {Boolean}                                                                                                   // 2363
 */                                                                                                                    // 2364
var isBoolean = function (object) {                                                                                    // 2365
    return typeof object === 'boolean';                                                                                // 2366
};                                                                                                                     // 2367
                                                                                                                       // 2368
/**                                                                                                                    // 2369
 * Returns true if object is array, otherwise false                                                                    // 2370
 *                                                                                                                     // 2371
 * @method isArray                                                                                                     // 2372
 * @param {Object}                                                                                                     // 2373
 * @return {Boolean}                                                                                                   // 2374
 */                                                                                                                    // 2375
var isArray = function (object) {                                                                                      // 2376
    return Array.isArray(object);                                                                                      // 2377
};                                                                                                                     // 2378
                                                                                                                       // 2379
/**                                                                                                                    // 2380
 * Returns true if given string is valid json object                                                                   // 2381
 *                                                                                                                     // 2382
 * @method isJson                                                                                                      // 2383
 * @param {String}                                                                                                     // 2384
 * @return {Boolean}                                                                                                   // 2385
 */                                                                                                                    // 2386
var isJson = function (str) {                                                                                          // 2387
    try {                                                                                                              // 2388
        return !!JSON.parse(str);                                                                                      // 2389
    } catch (e) {                                                                                                      // 2390
        return false;                                                                                                  // 2391
    }                                                                                                                  // 2392
};                                                                                                                     // 2393
                                                                                                                       // 2394
/**                                                                                                                    // 2395
 * Returns true if given string is a valid Ethereum block header bloom.                                                // 2396
 *                                                                                                                     // 2397
 * @method isBloom                                                                                                     // 2398
 * @param {String} hex encoded bloom filter                                                                            // 2399
 * @return {Boolean}                                                                                                   // 2400
 */                                                                                                                    // 2401
var isBloom = function (bloom) {                                                                                       // 2402
    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {                                                                        // 2403
        return false;                                                                                                  // 2404
    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {                             // 2405
        return true;                                                                                                   // 2406
    }                                                                                                                  // 2407
    return false;                                                                                                      // 2408
};                                                                                                                     // 2409
                                                                                                                       // 2410
/**                                                                                                                    // 2411
 * Returns true if given string is a valid log topic.                                                                  // 2412
 *                                                                                                                     // 2413
 * @method isTopic                                                                                                     // 2414
 * @param {String} hex encoded topic                                                                                   // 2415
 * @return {Boolean}                                                                                                   // 2416
 */                                                                                                                    // 2417
var isTopic = function (topic) {                                                                                       // 2418
    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {                                                                         // 2419
        return false;                                                                                                  // 2420
    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {                               // 2421
        return true;                                                                                                   // 2422
    }                                                                                                                  // 2423
    return false;                                                                                                      // 2424
};                                                                                                                     // 2425
                                                                                                                       // 2426
module.exports = {                                                                                                     // 2427
    padLeft: padLeft,                                                                                                  // 2428
    padRight: padRight,                                                                                                // 2429
    toHex: toHex,                                                                                                      // 2430
    toDecimal: toDecimal,                                                                                              // 2431
    fromDecimal: fromDecimal,                                                                                          // 2432
    toUtf8: toUtf8,                                                                                                    // 2433
    toAscii: toAscii,                                                                                                  // 2434
    fromUtf8: fromUtf8,                                                                                                // 2435
    fromAscii: fromAscii,                                                                                              // 2436
    transformToFullName: transformToFullName,                                                                          // 2437
    extractDisplayName: extractDisplayName,                                                                            // 2438
    extractTypeName: extractTypeName,                                                                                  // 2439
    toWei: toWei,                                                                                                      // 2440
    fromWei: fromWei,                                                                                                  // 2441
    toBigNumber: toBigNumber,                                                                                          // 2442
    toTwosComplement: toTwosComplement,                                                                                // 2443
    toAddress: toAddress,                                                                                              // 2444
    isBigNumber: isBigNumber,                                                                                          // 2445
    isStrictAddress: isStrictAddress,                                                                                  // 2446
    isAddress: isAddress,                                                                                              // 2447
    isChecksumAddress: isChecksumAddress,                                                                              // 2448
    toChecksumAddress: toChecksumAddress,                                                                              // 2449
    isFunction: isFunction,                                                                                            // 2450
    isString: isString,                                                                                                // 2451
    isObject: isObject,                                                                                                // 2452
    isBoolean: isBoolean,                                                                                              // 2453
    isArray: isArray,                                                                                                  // 2454
    isJson: isJson,                                                                                                    // 2455
    isBloom: isBloom,                                                                                                  // 2456
    isTopic: isTopic,                                                                                                  // 2457
};                                                                                                                     // 2458
                                                                                                                       // 2459
},{"./sha3.js":19,"bignumber.js":"bignumber.js","utf8":84}],21:[function(require,module,exports){                      // 2460
module.exports={                                                                                                       // 2461
    "version": "0.20.2"                                                                                                // 2462
}                                                                                                                      // 2463
                                                                                                                       // 2464
},{}],22:[function(require,module,exports){                                                                            // 2465
/*                                                                                                                     // 2466
    This file is part of web3.js.                                                                                      // 2467
                                                                                                                       // 2468
    web3.js is free software: you can redistribute it and/or modify                                                    // 2469
    it under the terms of the GNU Lesser General Public License as published by                                        // 2470
    the Free Software Foundation, either version 3 of the License, or                                                  // 2471
    (at your option) any later version.                                                                                // 2472
                                                                                                                       // 2473
    web3.js is distributed in the hope that it will be useful,                                                         // 2474
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 2475
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 2476
    GNU Lesser General Public License for more details.                                                                // 2477
                                                                                                                       // 2478
    You should have received a copy of the GNU Lesser General Public License                                           // 2479
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 2480
*/                                                                                                                     // 2481
/**                                                                                                                    // 2482
 * @file web3.js                                                                                                       // 2483
 * @authors:                                                                                                           // 2484
 *   Jeffrey Wilcke <jeff@ethdev.com>                                                                                  // 2485
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 2486
 *   Marian Oancea <marian@ethdev.com>                                                                                 // 2487
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 2488
 *   Gav Wood <g@ethdev.com>                                                                                           // 2489
 * @date 2014                                                                                                          // 2490
 */                                                                                                                    // 2491
                                                                                                                       // 2492
var RequestManager = require('./web3/requestmanager');                                                                 // 2493
var Iban = require('./web3/iban');                                                                                     // 2494
var Eth = require('./web3/methods/eth');                                                                               // 2495
var DB = require('./web3/methods/db');                                                                                 // 2496
var Shh = require('./web3/methods/shh');                                                                               // 2497
var Net = require('./web3/methods/net');                                                                               // 2498
var Personal = require('./web3/methods/personal');                                                                     // 2499
var Swarm = require('./web3/methods/swarm');                                                                           // 2500
var Settings = require('./web3/settings');                                                                             // 2501
var version = require('./version.json');                                                                               // 2502
var utils = require('./utils/utils');                                                                                  // 2503
var sha3 = require('./utils/sha3');                                                                                    // 2504
var extend = require('./web3/extend');                                                                                 // 2505
var Batch = require('./web3/batch');                                                                                   // 2506
var Property = require('./web3/property');                                                                             // 2507
var HttpProvider = require('./web3/httpprovider');                                                                     // 2508
var IpcProvider = require('./web3/ipcprovider');                                                                       // 2509
var BigNumber = require('bignumber.js');                                                                               // 2510
                                                                                                                       // 2511
                                                                                                                       // 2512
                                                                                                                       // 2513
function Web3 (provider) {                                                                                             // 2514
    this._requestManager = new RequestManager(provider);                                                               // 2515
    this.currentProvider = provider;                                                                                   // 2516
    this.eth = new Eth(this);                                                                                          // 2517
    this.db = new DB(this);                                                                                            // 2518
    this.shh = new Shh(this);                                                                                          // 2519
    this.net = new Net(this);                                                                                          // 2520
    this.personal = new Personal(this);                                                                                // 2521
    this.bzz = new Swarm(this);                                                                                        // 2522
    this.settings = new Settings();                                                                                    // 2523
    this.version = {                                                                                                   // 2524
        api: version.version                                                                                           // 2525
    };                                                                                                                 // 2526
    this.providers = {                                                                                                 // 2527
        HttpProvider: HttpProvider,                                                                                    // 2528
        IpcProvider: IpcProvider                                                                                       // 2529
    };                                                                                                                 // 2530
    this._extend = extend(this);                                                                                       // 2531
    this._extend({                                                                                                     // 2532
        properties: properties()                                                                                       // 2533
    });                                                                                                                // 2534
}                                                                                                                      // 2535
                                                                                                                       // 2536
// expose providers on the class                                                                                       // 2537
Web3.providers = {                                                                                                     // 2538
    HttpProvider: HttpProvider,                                                                                        // 2539
    IpcProvider: IpcProvider                                                                                           // 2540
};                                                                                                                     // 2541
                                                                                                                       // 2542
Web3.prototype.setProvider = function (provider) {                                                                     // 2543
    this._requestManager.setProvider(provider);                                                                        // 2544
    this.currentProvider = provider;                                                                                   // 2545
};                                                                                                                     // 2546
                                                                                                                       // 2547
Web3.prototype.reset = function (keepIsSyncing) {                                                                      // 2548
    this._requestManager.reset(keepIsSyncing);                                                                         // 2549
    this.settings = new Settings();                                                                                    // 2550
};                                                                                                                     // 2551
                                                                                                                       // 2552
Web3.prototype.BigNumber = BigNumber;                                                                                  // 2553
Web3.prototype.toHex = utils.toHex;                                                                                    // 2554
Web3.prototype.toAscii = utils.toAscii;                                                                                // 2555
Web3.prototype.toUtf8 = utils.toUtf8;                                                                                  // 2556
Web3.prototype.fromAscii = utils.fromAscii;                                                                            // 2557
Web3.prototype.fromUtf8 = utils.fromUtf8;                                                                              // 2558
Web3.prototype.toDecimal = utils.toDecimal;                                                                            // 2559
Web3.prototype.fromDecimal = utils.fromDecimal;                                                                        // 2560
Web3.prototype.toBigNumber = utils.toBigNumber;                                                                        // 2561
Web3.prototype.toWei = utils.toWei;                                                                                    // 2562
Web3.prototype.fromWei = utils.fromWei;                                                                                // 2563
Web3.prototype.isAddress = utils.isAddress;                                                                            // 2564
Web3.prototype.isChecksumAddress = utils.isChecksumAddress;                                                            // 2565
Web3.prototype.toChecksumAddress = utils.toChecksumAddress;                                                            // 2566
Web3.prototype.isIBAN = utils.isIBAN;                                                                                  // 2567
Web3.prototype.padLeft = utils.padLeft;                                                                                // 2568
Web3.prototype.padRight = utils.padRight;                                                                              // 2569
                                                                                                                       // 2570
                                                                                                                       // 2571
Web3.prototype.sha3 = function(string, options) {                                                                      // 2572
    return '0x' + sha3(string, options);                                                                               // 2573
};                                                                                                                     // 2574
                                                                                                                       // 2575
/**                                                                                                                    // 2576
 * Transforms direct icap to address                                                                                   // 2577
 */                                                                                                                    // 2578
Web3.prototype.fromICAP = function (icap) {                                                                            // 2579
    var iban = new Iban(icap);                                                                                         // 2580
    return iban.address();                                                                                             // 2581
};                                                                                                                     // 2582
                                                                                                                       // 2583
var properties = function () {                                                                                         // 2584
    return [                                                                                                           // 2585
        new Property({                                                                                                 // 2586
            name: 'version.node',                                                                                      // 2587
            getter: 'web3_clientVersion'                                                                               // 2588
        }),                                                                                                            // 2589
        new Property({                                                                                                 // 2590
            name: 'version.network',                                                                                   // 2591
            getter: 'net_version',                                                                                     // 2592
            inputFormatter: utils.toDecimal                                                                            // 2593
        }),                                                                                                            // 2594
        new Property({                                                                                                 // 2595
            name: 'version.ethereum',                                                                                  // 2596
            getter: 'eth_protocolVersion',                                                                             // 2597
            inputFormatter: utils.toDecimal                                                                            // 2598
        }),                                                                                                            // 2599
        new Property({                                                                                                 // 2600
            name: 'version.whisper',                                                                                   // 2601
            getter: 'shh_version',                                                                                     // 2602
            inputFormatter: utils.toDecimal                                                                            // 2603
        })                                                                                                             // 2604
    ];                                                                                                                 // 2605
};                                                                                                                     // 2606
                                                                                                                       // 2607
Web3.prototype.isConnected = function(){                                                                               // 2608
    return (this.currentProvider && this.currentProvider.isConnected());                                               // 2609
};                                                                                                                     // 2610
                                                                                                                       // 2611
Web3.prototype.createBatch = function () {                                                                             // 2612
    return new Batch(this);                                                                                            // 2613
};                                                                                                                     // 2614
                                                                                                                       // 2615
module.exports = Web3;                                                                                                 // 2616
                                                                                                                       // 2617
                                                                                                                       // 2618
},{"./utils/sha3":19,"./utils/utils":20,"./version.json":21,"./web3/batch":24,"./web3/extend":28,"./web3/httpprovider":32,"./web3/iban":33,"./web3/ipcprovider":34,"./web3/methods/db":37,"./web3/methods/eth":38,"./web3/methods/net":39,"./web3/methods/personal":40,"./web3/methods/shh":41,"./web3/methods/swarm":42,"./web3/property":45,"./web3/requestmanager":46,"./web3/settings":47,"bignumber.js":"bignumber.js"}],23:[function(require,module,exports){
/*                                                                                                                     // 2620
    This file is part of web3.js.                                                                                      // 2621
                                                                                                                       // 2622
    web3.js is free software: you can redistribute it and/or modify                                                    // 2623
    it under the terms of the GNU Lesser General Public License as published by                                        // 2624
    the Free Software Foundation, either version 3 of the License, or                                                  // 2625
    (at your option) any later version.                                                                                // 2626
                                                                                                                       // 2627
    web3.js is distributed in the hope that it will be useful,                                                         // 2628
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 2629
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 2630
    GNU Lesser General Public License for more details.                                                                // 2631
                                                                                                                       // 2632
    You should have received a copy of the GNU Lesser General Public License                                           // 2633
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 2634
*/                                                                                                                     // 2635
/**                                                                                                                    // 2636
 * @file allevents.js                                                                                                  // 2637
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 2638
 * @date 2014                                                                                                          // 2639
 */                                                                                                                    // 2640
                                                                                                                       // 2641
var sha3 = require('../utils/sha3');                                                                                   // 2642
var SolidityEvent = require('./event');                                                                                // 2643
var formatters = require('./formatters');                                                                              // 2644
var utils = require('../utils/utils');                                                                                 // 2645
var Filter = require('./filter');                                                                                      // 2646
var watches = require('./methods/watches');                                                                            // 2647
                                                                                                                       // 2648
var AllSolidityEvents = function (requestManager, json, address) {                                                     // 2649
    this._requestManager = requestManager;                                                                             // 2650
    this._json = json;                                                                                                 // 2651
    this._address = address;                                                                                           // 2652
};                                                                                                                     // 2653
                                                                                                                       // 2654
AllSolidityEvents.prototype.encode = function (options) {                                                              // 2655
    options = options || {};                                                                                           // 2656
    var result = {};                                                                                                   // 2657
                                                                                                                       // 2658
    ['fromBlock', 'toBlock'].filter(function (f) {                                                                     // 2659
        return options[f] !== undefined;                                                                               // 2660
    }).forEach(function (f) {                                                                                          // 2661
        result[f] = formatters.inputBlockNumberFormatter(options[f]);                                                  // 2662
    });                                                                                                                // 2663
                                                                                                                       // 2664
    result.address = this._address;                                                                                    // 2665
                                                                                                                       // 2666
    return result;                                                                                                     // 2667
};                                                                                                                     // 2668
                                                                                                                       // 2669
AllSolidityEvents.prototype.decode = function (data) {                                                                 // 2670
    data.data = data.data || '';                                                                                       // 2671
    data.topics = data.topics || [];                                                                                   // 2672
                                                                                                                       // 2673
    var eventTopic = data.topics[0].slice(2);                                                                          // 2674
    var match = this._json.filter(function (j) {                                                                       // 2675
        return eventTopic === sha3(utils.transformToFullName(j));                                                      // 2676
    })[0];                                                                                                             // 2677
                                                                                                                       // 2678
    if (!match) { // cannot find matching event?                                                                       // 2679
        console.warn('cannot find event for log');                                                                     // 2680
        return data;                                                                                                   // 2681
    }                                                                                                                  // 2682
                                                                                                                       // 2683
    var event = new SolidityEvent(this._requestManager, match, this._address);                                         // 2684
    return event.decode(data);                                                                                         // 2685
};                                                                                                                     // 2686
                                                                                                                       // 2687
AllSolidityEvents.prototype.execute = function (options, callback) {                                                   // 2688
                                                                                                                       // 2689
    if (utils.isFunction(arguments[arguments.length - 1])) {                                                           // 2690
        callback = arguments[arguments.length - 1];                                                                    // 2691
        if(arguments.length === 1)                                                                                     // 2692
            options = null;                                                                                            // 2693
    }                                                                                                                  // 2694
                                                                                                                       // 2695
    var o = this.encode(options);                                                                                      // 2696
    var formatter = this.decode.bind(this);                                                                            // 2697
    return new Filter(o, 'eth', this._requestManager, watches.eth(), formatter, callback);                             // 2698
};                                                                                                                     // 2699
                                                                                                                       // 2700
AllSolidityEvents.prototype.attachToContract = function (contract) {                                                   // 2701
    var execute = this.execute.bind(this);                                                                             // 2702
    contract.allEvents = execute;                                                                                      // 2703
};                                                                                                                     // 2704
                                                                                                                       // 2705
module.exports = AllSolidityEvents;                                                                                    // 2706
                                                                                                                       // 2707
                                                                                                                       // 2708
},{"../utils/sha3":19,"../utils/utils":20,"./event":27,"./filter":29,"./formatters":30,"./methods/watches":43}],24:[function(require,module,exports){
/*                                                                                                                     // 2710
    This file is part of web3.js.                                                                                      // 2711
                                                                                                                       // 2712
    web3.js is free software: you can redistribute it and/or modify                                                    // 2713
    it under the terms of the GNU Lesser General Public License as published by                                        // 2714
    the Free Software Foundation, either version 3 of the License, or                                                  // 2715
    (at your option) any later version.                                                                                // 2716
                                                                                                                       // 2717
    web3.js is distributed in the hope that it will be useful,                                                         // 2718
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 2719
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 2720
    GNU Lesser General Public License for more details.                                                                // 2721
                                                                                                                       // 2722
    You should have received a copy of the GNU Lesser General Public License                                           // 2723
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 2724
*/                                                                                                                     // 2725
/**                                                                                                                    // 2726
 * @file batch.js                                                                                                      // 2727
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 2728
 * @date 2015                                                                                                          // 2729
 */                                                                                                                    // 2730
                                                                                                                       // 2731
var Jsonrpc = require('./jsonrpc');                                                                                    // 2732
var errors = require('./errors');                                                                                      // 2733
                                                                                                                       // 2734
var Batch = function (web3) {                                                                                          // 2735
    this.requestManager = web3._requestManager;                                                                        // 2736
    this.requests = [];                                                                                                // 2737
};                                                                                                                     // 2738
                                                                                                                       // 2739
/**                                                                                                                    // 2740
 * Should be called to add create new request to batch request                                                         // 2741
 *                                                                                                                     // 2742
 * @method add                                                                                                         // 2743
 * @param {Object} jsonrpc requet object                                                                               // 2744
 */                                                                                                                    // 2745
Batch.prototype.add = function (request) {                                                                             // 2746
    this.requests.push(request);                                                                                       // 2747
};                                                                                                                     // 2748
                                                                                                                       // 2749
/**                                                                                                                    // 2750
 * Should be called to execute batch request                                                                           // 2751
 *                                                                                                                     // 2752
 * @method execute                                                                                                     // 2753
 */                                                                                                                    // 2754
Batch.prototype.execute = function () {                                                                                // 2755
    var requests = this.requests;                                                                                      // 2756
    this.requestManager.sendBatch(requests, function (err, results) {                                                  // 2757
        results = results || [];                                                                                       // 2758
        requests.map(function (request, index) {                                                                       // 2759
            return results[index] || {};                                                                               // 2760
        }).forEach(function (result, index) {                                                                          // 2761
            if (requests[index].callback) {                                                                            // 2762
                                                                                                                       // 2763
                if (!Jsonrpc.isValidResponse(result)) {                                                                // 2764
                    return requests[index].callback(errors.InvalidResponse(result));                                   // 2765
                }                                                                                                      // 2766
                                                                                                                       // 2767
                requests[index].callback(null, (requests[index].format ? requests[index].format(result.result) : result.result));
            }                                                                                                          // 2769
        });                                                                                                            // 2770
    });                                                                                                                // 2771
};                                                                                                                     // 2772
                                                                                                                       // 2773
module.exports = Batch;                                                                                                // 2774
                                                                                                                       // 2775
                                                                                                                       // 2776
},{"./errors":26,"./jsonrpc":35}],25:[function(require,module,exports){                                                // 2777
/*                                                                                                                     // 2778
    This file is part of web3.js.                                                                                      // 2779
                                                                                                                       // 2780
    web3.js is free software: you can redistribute it and/or modify                                                    // 2781
    it under the terms of the GNU Lesser General Public License as published by                                        // 2782
    the Free Software Foundation, either version 3 of the License, or                                                  // 2783
    (at your option) any later version.                                                                                // 2784
                                                                                                                       // 2785
    web3.js is distributed in the hope that it will be useful,                                                         // 2786
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 2787
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 2788
    GNU Lesser General Public License for more details.                                                                // 2789
                                                                                                                       // 2790
    You should have received a copy of the GNU Lesser General Public License                                           // 2791
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 2792
*/                                                                                                                     // 2793
/**                                                                                                                    // 2794
 * @file contract.js                                                                                                   // 2795
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 2796
 * @date 2014                                                                                                          // 2797
 */                                                                                                                    // 2798
                                                                                                                       // 2799
var utils = require('../utils/utils');                                                                                 // 2800
var coder = require('../solidity/coder');                                                                              // 2801
var SolidityEvent = require('./event');                                                                                // 2802
var SolidityFunction = require('./function');                                                                          // 2803
var AllEvents = require('./allevents');                                                                                // 2804
                                                                                                                       // 2805
/**                                                                                                                    // 2806
 * Should be called to encode constructor params                                                                       // 2807
 *                                                                                                                     // 2808
 * @method encodeConstructorParams                                                                                     // 2809
 * @param {Array} abi                                                                                                  // 2810
 * @param {Array} constructor params                                                                                   // 2811
 */                                                                                                                    // 2812
var encodeConstructorParams = function (abi, params) {                                                                 // 2813
    return abi.filter(function (json) {                                                                                // 2814
        return json.type === 'constructor' && json.inputs.length === params.length;                                    // 2815
    }).map(function (json) {                                                                                           // 2816
        return json.inputs.map(function (input) {                                                                      // 2817
            return input.type;                                                                                         // 2818
        });                                                                                                            // 2819
    }).map(function (types) {                                                                                          // 2820
        return coder.encodeParams(types, params);                                                                      // 2821
    })[0] || '';                                                                                                       // 2822
};                                                                                                                     // 2823
                                                                                                                       // 2824
/**                                                                                                                    // 2825
 * Should be called to add functions to contract object                                                                // 2826
 *                                                                                                                     // 2827
 * @method addFunctionsToContract                                                                                      // 2828
 * @param {Contract} contract                                                                                          // 2829
 * @param {Array} abi                                                                                                  // 2830
 */                                                                                                                    // 2831
var addFunctionsToContract = function (contract) {                                                                     // 2832
    contract.abi.filter(function (json) {                                                                              // 2833
        return json.type === 'function';                                                                               // 2834
    }).map(function (json) {                                                                                           // 2835
        return new SolidityFunction(contract._eth, json, contract.address);                                            // 2836
    }).forEach(function (f) {                                                                                          // 2837
        f.attachToContract(contract);                                                                                  // 2838
    });                                                                                                                // 2839
};                                                                                                                     // 2840
                                                                                                                       // 2841
/**                                                                                                                    // 2842
 * Should be called to add events to contract object                                                                   // 2843
 *                                                                                                                     // 2844
 * @method addEventsToContract                                                                                         // 2845
 * @param {Contract} contract                                                                                          // 2846
 * @param {Array} abi                                                                                                  // 2847
 */                                                                                                                    // 2848
var addEventsToContract = function (contract) {                                                                        // 2849
    var events = contract.abi.filter(function (json) {                                                                 // 2850
        return json.type === 'event';                                                                                  // 2851
    });                                                                                                                // 2852
                                                                                                                       // 2853
    var All = new AllEvents(contract._eth._requestManager, events, contract.address);                                  // 2854
    All.attachToContract(contract);                                                                                    // 2855
                                                                                                                       // 2856
    events.map(function (json) {                                                                                       // 2857
        return new SolidityEvent(contract._eth._requestManager, json, contract.address);                               // 2858
    }).forEach(function (e) {                                                                                          // 2859
        e.attachToContract(contract);                                                                                  // 2860
    });                                                                                                                // 2861
};                                                                                                                     // 2862
                                                                                                                       // 2863
                                                                                                                       // 2864
/**                                                                                                                    // 2865
 * Should be called to check if the contract gets properly deployed on the blockchain.                                 // 2866
 *                                                                                                                     // 2867
 * @method checkForContractAddress                                                                                     // 2868
 * @param {Object} contract                                                                                            // 2869
 * @param {Function} callback                                                                                          // 2870
 * @returns {Undefined}                                                                                                // 2871
 */                                                                                                                    // 2872
var checkForContractAddress = function(contract, callback){                                                            // 2873
    var count = 0,                                                                                                     // 2874
        callbackFired = false;                                                                                         // 2875
                                                                                                                       // 2876
    // wait for receipt                                                                                                // 2877
    var filter = contract._eth.filter('latest', function(e){                                                           // 2878
        if (!e && !callbackFired) {                                                                                    // 2879
            count++;                                                                                                   // 2880
                                                                                                                       // 2881
            // stop watching after 50 blocks (timeout)                                                                 // 2882
            if (count > 50) {                                                                                          // 2883
                                                                                                                       // 2884
                filter.stopWatching(function() {});                                                                    // 2885
                callbackFired = true;                                                                                  // 2886
                                                                                                                       // 2887
                if (callback)                                                                                          // 2888
                    callback(new Error('Contract transaction couldn\'t be found after 50 blocks'));                    // 2889
                else                                                                                                   // 2890
                    throw new Error('Contract transaction couldn\'t be found after 50 blocks');                        // 2891
                                                                                                                       // 2892
                                                                                                                       // 2893
            } else {                                                                                                   // 2894
                                                                                                                       // 2895
                contract._eth.getTransactionReceipt(contract.transactionHash, function(e, receipt){                    // 2896
                    if(receipt && !callbackFired) {                                                                    // 2897
                                                                                                                       // 2898
                        contract._eth.getCode(receipt.contractAddress, function(e, code){                              // 2899
                            /*jshint maxcomplexity: 6 */                                                               // 2900
                                                                                                                       // 2901
                            if(callbackFired || !code)                                                                 // 2902
                                return;                                                                                // 2903
                                                                                                                       // 2904
                            filter.stopWatching(function() {});                                                        // 2905
                            callbackFired = true;                                                                      // 2906
                                                                                                                       // 2907
                            if(code.length > 3) {                                                                      // 2908
                                                                                                                       // 2909
                                // console.log('Contract code deployed!');                                             // 2910
                                                                                                                       // 2911
                                contract.address = receipt.contractAddress;                                            // 2912
                                                                                                                       // 2913
                                // attach events and methods again after we have                                       // 2914
                                addFunctionsToContract(contract);                                                      // 2915
                                addEventsToContract(contract);                                                         // 2916
                                                                                                                       // 2917
                                // call callback for the second time                                                   // 2918
                                if(callback)                                                                           // 2919
                                    callback(null, contract);                                                          // 2920
                                                                                                                       // 2921
                            } else {                                                                                   // 2922
                                if(callback)                                                                           // 2923
                                    callback(new Error('The contract code couldn\'t be stored, please check your gas amount.'));
                                else                                                                                   // 2925
                                    throw new Error('The contract code couldn\'t be stored, please check your gas amount.');
                            }                                                                                          // 2927
                        });                                                                                            // 2928
                    }                                                                                                  // 2929
                });                                                                                                    // 2930
            }                                                                                                          // 2931
        }                                                                                                              // 2932
    });                                                                                                                // 2933
};                                                                                                                     // 2934
                                                                                                                       // 2935
/**                                                                                                                    // 2936
 * Should be called to create new ContractFactory instance                                                             // 2937
 *                                                                                                                     // 2938
 * @method ContractFactory                                                                                             // 2939
 * @param {Array} abi                                                                                                  // 2940
 */                                                                                                                    // 2941
var ContractFactory = function (eth, abi) {                                                                            // 2942
    this.eth = eth;                                                                                                    // 2943
    this.abi = abi;                                                                                                    // 2944
                                                                                                                       // 2945
    /**                                                                                                                // 2946
     * Should be called to create new contract on a blockchain                                                         // 2947
     *                                                                                                                 // 2948
     * @method new                                                                                                     // 2949
     * @param {Any} contract constructor param1 (optional)                                                             // 2950
     * @param {Any} contract constructor param2 (optional)                                                             // 2951
     * @param {Object} contract transaction object (required)                                                          // 2952
     * @param {Function} callback                                                                                      // 2953
     * @returns {Contract} returns contract instance                                                                   // 2954
     */                                                                                                                // 2955
    this.new = function () {                                                                                           // 2956
        /*jshint maxcomplexity: 7 */                                                                                   // 2957
                                                                                                                       // 2958
        var contract = new Contract(this.eth, this.abi);                                                               // 2959
                                                                                                                       // 2960
        // parse arguments                                                                                             // 2961
        var options = {}; // required!                                                                                 // 2962
        var callback;                                                                                                  // 2963
                                                                                                                       // 2964
        var args = Array.prototype.slice.call(arguments);                                                              // 2965
        if (utils.isFunction(args[args.length - 1])) {                                                                 // 2966
            callback = args.pop();                                                                                     // 2967
        }                                                                                                              // 2968
                                                                                                                       // 2969
        var last = args[args.length - 1];                                                                              // 2970
        if (utils.isObject(last) && !utils.isArray(last)) {                                                            // 2971
            options = args.pop();                                                                                      // 2972
        }                                                                                                              // 2973
                                                                                                                       // 2974
        if (options.value > 0) {                                                                                       // 2975
            var constructorAbi = abi.filter(function (json) {                                                          // 2976
                return json.type === 'constructor' && json.inputs.length === args.length;                              // 2977
            })[0] || {};                                                                                               // 2978
                                                                                                                       // 2979
            if (!constructorAbi.payable) {                                                                             // 2980
                throw new Error('Cannot send value to non-payable constructor');                                       // 2981
            }                                                                                                          // 2982
        }                                                                                                              // 2983
                                                                                                                       // 2984
        var bytes = encodeConstructorParams(this.abi, args);                                                           // 2985
        options.data += bytes;                                                                                         // 2986
                                                                                                                       // 2987
        if (callback) {                                                                                                // 2988
                                                                                                                       // 2989
            // wait for the contract address adn check if the code was deployed                                        // 2990
            this.eth.sendTransaction(options, function (err, hash) {                                                   // 2991
                if (err) {                                                                                             // 2992
                    callback(err);                                                                                     // 2993
                } else {                                                                                               // 2994
                    // add the transaction hash                                                                        // 2995
                    contract.transactionHash = hash;                                                                   // 2996
                                                                                                                       // 2997
                    // call callback for the first time                                                                // 2998
                    callback(null, contract);                                                                          // 2999
                                                                                                                       // 3000
                    checkForContractAddress(contract, callback);                                                       // 3001
                }                                                                                                      // 3002
            });                                                                                                        // 3003
        } else {                                                                                                       // 3004
            var hash = this.eth.sendTransaction(options);                                                              // 3005
            // add the transaction hash                                                                                // 3006
            contract.transactionHash = hash;                                                                           // 3007
            checkForContractAddress(contract);                                                                         // 3008
        }                                                                                                              // 3009
                                                                                                                       // 3010
        return contract;                                                                                               // 3011
    };                                                                                                                 // 3012
                                                                                                                       // 3013
    this.new.getData = this.getData.bind(this);                                                                        // 3014
};                                                                                                                     // 3015
                                                                                                                       // 3016
/**                                                                                                                    // 3017
 * Should be called to create new ContractFactory                                                                      // 3018
 *                                                                                                                     // 3019
 * @method contract                                                                                                    // 3020
 * @param {Array} abi                                                                                                  // 3021
 * @returns {ContractFactory} new contract factory                                                                     // 3022
 */                                                                                                                    // 3023
//var contract = function (abi) {                                                                                      // 3024
    //return new ContractFactory(abi);                                                                                 // 3025
//};                                                                                                                   // 3026
                                                                                                                       // 3027
                                                                                                                       // 3028
                                                                                                                       // 3029
/**                                                                                                                    // 3030
 * Should be called to get access to existing contract on a blockchain                                                 // 3031
 *                                                                                                                     // 3032
 * @method at                                                                                                          // 3033
 * @param {Address} contract address (required)                                                                        // 3034
 * @param {Function} callback {optional)                                                                               // 3035
 * @returns {Contract} returns contract if no callback was passed,                                                     // 3036
 * otherwise calls callback function (err, contract)                                                                   // 3037
 */                                                                                                                    // 3038
ContractFactory.prototype.at = function (address, callback) {                                                          // 3039
    var contract = new Contract(this.eth, this.abi, address);                                                          // 3040
                                                                                                                       // 3041
    // this functions are not part of prototype,                                                                       // 3042
    // because we dont want to spoil the interface                                                                     // 3043
    addFunctionsToContract(contract);                                                                                  // 3044
    addEventsToContract(contract);                                                                                     // 3045
                                                                                                                       // 3046
    if (callback) {                                                                                                    // 3047
        callback(null, contract);                                                                                      // 3048
    }                                                                                                                  // 3049
    return contract;                                                                                                   // 3050
};                                                                                                                     // 3051
                                                                                                                       // 3052
/**                                                                                                                    // 3053
 * Gets the data, which is data to deploy plus constructor params                                                      // 3054
 *                                                                                                                     // 3055
 * @method getData                                                                                                     // 3056
 */                                                                                                                    // 3057
ContractFactory.prototype.getData = function () {                                                                      // 3058
    var options = {}; // required!                                                                                     // 3059
    var args = Array.prototype.slice.call(arguments);                                                                  // 3060
                                                                                                                       // 3061
    var last = args[args.length - 1];                                                                                  // 3062
    if (utils.isObject(last) && !utils.isArray(last)) {                                                                // 3063
        options = args.pop();                                                                                          // 3064
    }                                                                                                                  // 3065
                                                                                                                       // 3066
    var bytes = encodeConstructorParams(this.abi, args);                                                               // 3067
    options.data += bytes;                                                                                             // 3068
                                                                                                                       // 3069
    return options.data;                                                                                               // 3070
};                                                                                                                     // 3071
                                                                                                                       // 3072
/**                                                                                                                    // 3073
 * Should be called to create new contract instance                                                                    // 3074
 *                                                                                                                     // 3075
 * @method Contract                                                                                                    // 3076
 * @param {Array} abi                                                                                                  // 3077
 * @param {Address} contract address                                                                                   // 3078
 */                                                                                                                    // 3079
var Contract = function (eth, abi, address) {                                                                          // 3080
    this._eth = eth;                                                                                                   // 3081
    this.transactionHash = null;                                                                                       // 3082
    this.address = address;                                                                                            // 3083
    this.abi = abi;                                                                                                    // 3084
};                                                                                                                     // 3085
                                                                                                                       // 3086
module.exports = ContractFactory;                                                                                      // 3087
                                                                                                                       // 3088
},{"../solidity/coder":7,"../utils/utils":20,"./allevents":23,"./event":27,"./function":31}],26:[function(require,module,exports){
/*                                                                                                                     // 3090
    This file is part of web3.js.                                                                                      // 3091
                                                                                                                       // 3092
    web3.js is free software: you can redistribute it and/or modify                                                    // 3093
    it under the terms of the GNU Lesser General Public License as published by                                        // 3094
    the Free Software Foundation, either version 3 of the License, or                                                  // 3095
    (at your option) any later version.                                                                                // 3096
                                                                                                                       // 3097
    web3.js is distributed in the hope that it will be useful,                                                         // 3098
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3099
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3100
    GNU Lesser General Public License for more details.                                                                // 3101
                                                                                                                       // 3102
    You should have received a copy of the GNU Lesser General Public License                                           // 3103
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3104
*/                                                                                                                     // 3105
/**                                                                                                                    // 3106
 * @file errors.js                                                                                                     // 3107
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 3108
 * @date 2015                                                                                                          // 3109
 */                                                                                                                    // 3110
                                                                                                                       // 3111
module.exports = {                                                                                                     // 3112
    InvalidNumberOfSolidityArgs: function () {                                                                         // 3113
        return new Error('Invalid number of arguments to Solidity function');                                          // 3114
    },                                                                                                                 // 3115
    InvalidNumberOfRPCParams: function () {                                                                            // 3116
        return new Error('Invalid number of input parameters to RPC method');                                          // 3117
    },                                                                                                                 // 3118
    InvalidConnection: function (host){                                                                                // 3119
        return new Error('CONNECTION ERROR: Couldn\'t connect to node '+ host +'.');                                   // 3120
    },                                                                                                                 // 3121
    InvalidProvider: function () {                                                                                     // 3122
        return new Error('Provider not set or invalid');                                                               // 3123
    },                                                                                                                 // 3124
    InvalidResponse: function (result){                                                                                // 3125
        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);
        return new Error(message);                                                                                     // 3127
    },                                                                                                                 // 3128
    ConnectionTimeout: function (ms){                                                                                  // 3129
        return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');                                      // 3130
    }                                                                                                                  // 3131
};                                                                                                                     // 3132
                                                                                                                       // 3133
},{}],27:[function(require,module,exports){                                                                            // 3134
/*                                                                                                                     // 3135
    This file is part of web3.js.                                                                                      // 3136
                                                                                                                       // 3137
    web3.js is free software: you can redistribute it and/or modify                                                    // 3138
    it under the terms of the GNU Lesser General Public License as published by                                        // 3139
    the Free Software Foundation, either version 3 of the License, or                                                  // 3140
    (at your option) any later version.                                                                                // 3141
                                                                                                                       // 3142
    web3.js is distributed in the hope that it will be useful,                                                         // 3143
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3144
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3145
    GNU Lesser General Public License for more details.                                                                // 3146
                                                                                                                       // 3147
    You should have received a copy of the GNU Lesser General Public License                                           // 3148
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3149
*/                                                                                                                     // 3150
/**                                                                                                                    // 3151
 * @file event.js                                                                                                      // 3152
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 3153
 * @date 2014                                                                                                          // 3154
 */                                                                                                                    // 3155
                                                                                                                       // 3156
var utils = require('../utils/utils');                                                                                 // 3157
var coder = require('../solidity/coder');                                                                              // 3158
var formatters = require('./formatters');                                                                              // 3159
var sha3 = require('../utils/sha3');                                                                                   // 3160
var Filter = require('./filter');                                                                                      // 3161
var watches = require('./methods/watches');                                                                            // 3162
                                                                                                                       // 3163
/**                                                                                                                    // 3164
 * This prototype should be used to create event filters                                                               // 3165
 */                                                                                                                    // 3166
var SolidityEvent = function (requestManager, json, address) {                                                         // 3167
    this._requestManager = requestManager;                                                                             // 3168
    this._params = json.inputs;                                                                                        // 3169
    this._name = utils.transformToFullName(json);                                                                      // 3170
    this._address = address;                                                                                           // 3171
    this._anonymous = json.anonymous;                                                                                  // 3172
};                                                                                                                     // 3173
                                                                                                                       // 3174
/**                                                                                                                    // 3175
 * Should be used to get filtered param types                                                                          // 3176
 *                                                                                                                     // 3177
 * @method types                                                                                                       // 3178
 * @param {Bool} decide if returned typed should be indexed                                                            // 3179
 * @return {Array} array of types                                                                                      // 3180
 */                                                                                                                    // 3181
SolidityEvent.prototype.types = function (indexed) {                                                                   // 3182
    return this._params.filter(function (i) {                                                                          // 3183
        return i.indexed === indexed;                                                                                  // 3184
    }).map(function (i) {                                                                                              // 3185
        return i.type;                                                                                                 // 3186
    });                                                                                                                // 3187
};                                                                                                                     // 3188
                                                                                                                       // 3189
/**                                                                                                                    // 3190
 * Should be used to get event display name                                                                            // 3191
 *                                                                                                                     // 3192
 * @method displayName                                                                                                 // 3193
 * @return {String} event display name                                                                                 // 3194
 */                                                                                                                    // 3195
SolidityEvent.prototype.displayName = function () {                                                                    // 3196
    return utils.extractDisplayName(this._name);                                                                       // 3197
};                                                                                                                     // 3198
                                                                                                                       // 3199
/**                                                                                                                    // 3200
 * Should be used to get event type name                                                                               // 3201
 *                                                                                                                     // 3202
 * @method typeName                                                                                                    // 3203
 * @return {String} event type name                                                                                    // 3204
 */                                                                                                                    // 3205
SolidityEvent.prototype.typeName = function () {                                                                       // 3206
    return utils.extractTypeName(this._name);                                                                          // 3207
};                                                                                                                     // 3208
                                                                                                                       // 3209
/**                                                                                                                    // 3210
 * Should be used to get event signature                                                                               // 3211
 *                                                                                                                     // 3212
 * @method signature                                                                                                   // 3213
 * @return {String} event signature                                                                                    // 3214
 */                                                                                                                    // 3215
SolidityEvent.prototype.signature = function () {                                                                      // 3216
    return sha3(this._name);                                                                                           // 3217
};                                                                                                                     // 3218
                                                                                                                       // 3219
/**                                                                                                                    // 3220
 * Should be used to encode indexed params and options to one final object                                             // 3221
 *                                                                                                                     // 3222
 * @method encode                                                                                                      // 3223
 * @param {Object} indexed                                                                                             // 3224
 * @param {Object} options                                                                                             // 3225
 * @return {Object} everything combined together and encoded                                                           // 3226
 */                                                                                                                    // 3227
SolidityEvent.prototype.encode = function (indexed, options) {                                                         // 3228
    indexed = indexed || {};                                                                                           // 3229
    options = options || {};                                                                                           // 3230
    var result = {};                                                                                                   // 3231
                                                                                                                       // 3232
    ['fromBlock', 'toBlock'].filter(function (f) {                                                                     // 3233
        return options[f] !== undefined;                                                                               // 3234
    }).forEach(function (f) {                                                                                          // 3235
        result[f] = formatters.inputBlockNumberFormatter(options[f]);                                                  // 3236
    });                                                                                                                // 3237
                                                                                                                       // 3238
    result.topics = [];                                                                                                // 3239
                                                                                                                       // 3240
    result.address = this._address;                                                                                    // 3241
    if (!this._anonymous) {                                                                                            // 3242
        result.topics.push('0x' + this.signature());                                                                   // 3243
    }                                                                                                                  // 3244
                                                                                                                       // 3245
    var indexedTopics = this._params.filter(function (i) {                                                             // 3246
        return i.indexed === true;                                                                                     // 3247
    }).map(function (i) {                                                                                              // 3248
        var value = indexed[i.name];                                                                                   // 3249
        if (value === undefined || value === null) {                                                                   // 3250
            return null;                                                                                               // 3251
        }                                                                                                              // 3252
                                                                                                                       // 3253
        if (utils.isArray(value)) {                                                                                    // 3254
            return value.map(function (v) {                                                                            // 3255
                return '0x' + coder.encodeParam(i.type, v);                                                            // 3256
            });                                                                                                        // 3257
        }                                                                                                              // 3258
        return '0x' + coder.encodeParam(i.type, value);                                                                // 3259
    });                                                                                                                // 3260
                                                                                                                       // 3261
    result.topics = result.topics.concat(indexedTopics);                                                               // 3262
                                                                                                                       // 3263
    return result;                                                                                                     // 3264
};                                                                                                                     // 3265
                                                                                                                       // 3266
/**                                                                                                                    // 3267
 * Should be used to decode indexed params and options                                                                 // 3268
 *                                                                                                                     // 3269
 * @method decode                                                                                                      // 3270
 * @param {Object} data                                                                                                // 3271
 * @return {Object} result object with decoded indexed && not indexed params                                           // 3272
 */                                                                                                                    // 3273
SolidityEvent.prototype.decode = function (data) {                                                                     // 3274
                                                                                                                       // 3275
    data.data = data.data || '';                                                                                       // 3276
    data.topics = data.topics || [];                                                                                   // 3277
                                                                                                                       // 3278
    var argTopics = this._anonymous ? data.topics : data.topics.slice(1);                                              // 3279
    var indexedData = argTopics.map(function (topics) { return topics.slice(2); }).join("");                           // 3280
    var indexedParams = coder.decodeParams(this.types(true), indexedData);                                             // 3281
                                                                                                                       // 3282
    var notIndexedData = data.data.slice(2);                                                                           // 3283
    var notIndexedParams = coder.decodeParams(this.types(false), notIndexedData);                                      // 3284
                                                                                                                       // 3285
    var result = formatters.outputLogFormatter(data);                                                                  // 3286
    result.event = this.displayName();                                                                                 // 3287
    result.address = data.address;                                                                                     // 3288
                                                                                                                       // 3289
    result.args = this._params.reduce(function (acc, current) {                                                        // 3290
        acc[current.name] = current.indexed ? indexedParams.shift() : notIndexedParams.shift();                        // 3291
        return acc;                                                                                                    // 3292
    }, {});                                                                                                            // 3293
                                                                                                                       // 3294
    delete result.data;                                                                                                // 3295
    delete result.topics;                                                                                              // 3296
                                                                                                                       // 3297
    return result;                                                                                                     // 3298
};                                                                                                                     // 3299
                                                                                                                       // 3300
/**                                                                                                                    // 3301
 * Should be used to create new filter object from event                                                               // 3302
 *                                                                                                                     // 3303
 * @method execute                                                                                                     // 3304
 * @param {Object} indexed                                                                                             // 3305
 * @param {Object} options                                                                                             // 3306
 * @return {Object} filter object                                                                                      // 3307
 */                                                                                                                    // 3308
SolidityEvent.prototype.execute = function (indexed, options, callback) {                                              // 3309
                                                                                                                       // 3310
    if (utils.isFunction(arguments[arguments.length - 1])) {                                                           // 3311
        callback = arguments[arguments.length - 1];                                                                    // 3312
        if(arguments.length === 2)                                                                                     // 3313
            options = null;                                                                                            // 3314
        if(arguments.length === 1) {                                                                                   // 3315
            options = null;                                                                                            // 3316
            indexed = {};                                                                                              // 3317
        }                                                                                                              // 3318
    }                                                                                                                  // 3319
                                                                                                                       // 3320
    var o = this.encode(indexed, options);                                                                             // 3321
    var formatter = this.decode.bind(this);                                                                            // 3322
    return new Filter(o, 'eth', this._requestManager, watches.eth(), formatter, callback);                             // 3323
};                                                                                                                     // 3324
                                                                                                                       // 3325
/**                                                                                                                    // 3326
 * Should be used to attach event to contract object                                                                   // 3327
 *                                                                                                                     // 3328
 * @method attachToContract                                                                                            // 3329
 * @param {Contract}                                                                                                   // 3330
 */                                                                                                                    // 3331
SolidityEvent.prototype.attachToContract = function (contract) {                                                       // 3332
    var execute = this.execute.bind(this);                                                                             // 3333
    var displayName = this.displayName();                                                                              // 3334
    if (!contract[displayName]) {                                                                                      // 3335
        contract[displayName] = execute;                                                                               // 3336
    }                                                                                                                  // 3337
    contract[displayName][this.typeName()] = this.execute.bind(this, contract);                                        // 3338
};                                                                                                                     // 3339
                                                                                                                       // 3340
module.exports = SolidityEvent;                                                                                        // 3341
                                                                                                                       // 3342
                                                                                                                       // 3343
},{"../solidity/coder":7,"../utils/sha3":19,"../utils/utils":20,"./filter":29,"./formatters":30,"./methods/watches":43}],28:[function(require,module,exports){
var formatters = require('./formatters');                                                                              // 3345
var utils = require('./../utils/utils');                                                                               // 3346
var Method = require('./method');                                                                                      // 3347
var Property = require('./property');                                                                                  // 3348
                                                                                                                       // 3349
// TODO: refactor, so the input params are not altered.                                                                // 3350
// it's necessary to make same 'extension' work with multiple providers                                                // 3351
var extend = function (web3) {                                                                                         // 3352
    /* jshint maxcomplexity:5 */                                                                                       // 3353
    var ex = function (extension) {                                                                                    // 3354
                                                                                                                       // 3355
        var extendedObject;                                                                                            // 3356
        if (extension.property) {                                                                                      // 3357
            if (!web3[extension.property]) {                                                                           // 3358
                web3[extension.property] = {};                                                                         // 3359
            }                                                                                                          // 3360
            extendedObject = web3[extension.property];                                                                 // 3361
        } else {                                                                                                       // 3362
            extendedObject = web3;                                                                                     // 3363
        }                                                                                                              // 3364
                                                                                                                       // 3365
        if (extension.methods) {                                                                                       // 3366
            extension.methods.forEach(function (method) {                                                              // 3367
                method.attachToObject(extendedObject);                                                                 // 3368
                method.setRequestManager(web3._requestManager);                                                        // 3369
            });                                                                                                        // 3370
        }                                                                                                              // 3371
                                                                                                                       // 3372
        if (extension.properties) {                                                                                    // 3373
            extension.properties.forEach(function (property) {                                                         // 3374
                property.attachToObject(extendedObject);                                                               // 3375
                property.setRequestManager(web3._requestManager);                                                      // 3376
            });                                                                                                        // 3377
        }                                                                                                              // 3378
    };                                                                                                                 // 3379
                                                                                                                       // 3380
    ex.formatters = formatters;                                                                                        // 3381
    ex.utils = utils;                                                                                                  // 3382
    ex.Method = Method;                                                                                                // 3383
    ex.Property = Property;                                                                                            // 3384
                                                                                                                       // 3385
    return ex;                                                                                                         // 3386
};                                                                                                                     // 3387
                                                                                                                       // 3388
                                                                                                                       // 3389
                                                                                                                       // 3390
module.exports = extend;                                                                                               // 3391
                                                                                                                       // 3392
                                                                                                                       // 3393
},{"./../utils/utils":20,"./formatters":30,"./method":36,"./property":45}],29:[function(require,module,exports){       // 3394
/*                                                                                                                     // 3395
    This file is part of web3.js.                                                                                      // 3396
                                                                                                                       // 3397
    web3.js is free software: you can redistribute it and/or modify                                                    // 3398
    it under the terms of the GNU Lesser General Public License as published by                                        // 3399
    the Free Software Foundation, either version 3 of the License, or                                                  // 3400
    (at your option) any later version.                                                                                // 3401
                                                                                                                       // 3402
    web3.js is distributed in the hope that it will be useful,                                                         // 3403
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3404
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3405
    GNU Lesser General Public License for more details.                                                                // 3406
                                                                                                                       // 3407
    You should have received a copy of the GNU Lesser General Public License                                           // 3408
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3409
*/                                                                                                                     // 3410
/** @file filter.js                                                                                                    // 3411
 * @authors:                                                                                                           // 3412
 *   Jeffrey Wilcke <jeff@ethdev.com>                                                                                  // 3413
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 3414
 *   Marian Oancea <marian@ethdev.com>                                                                                 // 3415
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 3416
 *   Gav Wood <g@ethdev.com>                                                                                           // 3417
 * @date 2014                                                                                                          // 3418
 */                                                                                                                    // 3419
                                                                                                                       // 3420
var formatters = require('./formatters');                                                                              // 3421
var utils = require('../utils/utils');                                                                                 // 3422
                                                                                                                       // 3423
/**                                                                                                                    // 3424
* Converts a given topic to a hex string, but also allows null values.                                                 // 3425
*                                                                                                                      // 3426
* @param {Mixed} value                                                                                                 // 3427
* @return {String}                                                                                                     // 3428
*/                                                                                                                     // 3429
var toTopic = function(value){                                                                                         // 3430
                                                                                                                       // 3431
    if(value === null || typeof value === 'undefined')                                                                 // 3432
        return null;                                                                                                   // 3433
                                                                                                                       // 3434
    value = String(value);                                                                                             // 3435
                                                                                                                       // 3436
    if(value.indexOf('0x') === 0)                                                                                      // 3437
        return value;                                                                                                  // 3438
    else                                                                                                               // 3439
        return utils.fromUtf8(value);                                                                                  // 3440
};                                                                                                                     // 3441
                                                                                                                       // 3442
/// This method should be called on options object, to verify deprecated properties && lazy load dynamic ones          // 3443
/// @param should be string or object                                                                                  // 3444
/// @returns options string or object                                                                                  // 3445
var getOptions = function (options, type) {                                                                            // 3446
    /*jshint maxcomplexity: 6 */                                                                                       // 3447
                                                                                                                       // 3448
    if (utils.isString(options)) {                                                                                     // 3449
        return options;                                                                                                // 3450
    }                                                                                                                  // 3451
                                                                                                                       // 3452
    options = options || {};                                                                                           // 3453
                                                                                                                       // 3454
                                                                                                                       // 3455
    switch(type) {                                                                                                     // 3456
        case 'eth':                                                                                                    // 3457
                                                                                                                       // 3458
            // make sure topics, get converted to hex                                                                  // 3459
            options.topics = options.topics || [];                                                                     // 3460
            options.topics = options.topics.map(function(topic){                                                       // 3461
                return (utils.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);                                   // 3462
            });                                                                                                        // 3463
                                                                                                                       // 3464
            return {                                                                                                   // 3465
                topics: options.topics,                                                                                // 3466
                from: options.from,                                                                                    // 3467
                to: options.to,                                                                                        // 3468
                address: options.address,                                                                              // 3469
                fromBlock: formatters.inputBlockNumberFormatter(options.fromBlock),                                    // 3470
                toBlock: formatters.inputBlockNumberFormatter(options.toBlock)                                         // 3471
            };                                                                                                         // 3472
        case 'shh':                                                                                                    // 3473
            return options;                                                                                            // 3474
    }                                                                                                                  // 3475
};                                                                                                                     // 3476
                                                                                                                       // 3477
/**                                                                                                                    // 3478
Adds the callback and sets up the methods, to iterate over the results.                                                // 3479
                                                                                                                       // 3480
@method getLogsAtStart                                                                                                 // 3481
@param {Object} self                                                                                                   // 3482
@param {function} callback                                                                                             // 3483
*/                                                                                                                     // 3484
var getLogsAtStart = function(self, callback){                                                                         // 3485
    // call getFilterLogs for the first watch callback start                                                           // 3486
    if (!utils.isString(self.options)) {                                                                               // 3487
        self.get(function (err, messages) {                                                                            // 3488
            // don't send all the responses to all the watches again... just to self one                               // 3489
            if (err) {                                                                                                 // 3490
                callback(err);                                                                                         // 3491
            }                                                                                                          // 3492
                                                                                                                       // 3493
            if(utils.isArray(messages)) {                                                                              // 3494
                messages.forEach(function (message) {                                                                  // 3495
                    callback(null, message);                                                                           // 3496
                });                                                                                                    // 3497
            }                                                                                                          // 3498
        });                                                                                                            // 3499
    }                                                                                                                  // 3500
};                                                                                                                     // 3501
                                                                                                                       // 3502
/**                                                                                                                    // 3503
Adds the callback and sets up the methods, to iterate over the results.                                                // 3504
                                                                                                                       // 3505
@method pollFilter                                                                                                     // 3506
@param {Object} self                                                                                                   // 3507
*/                                                                                                                     // 3508
var pollFilter = function(self) {                                                                                      // 3509
                                                                                                                       // 3510
    var onMessage = function (error, messages) {                                                                       // 3511
        if (error) {                                                                                                   // 3512
            return self.callbacks.forEach(function (callback) {                                                        // 3513
                callback(error);                                                                                       // 3514
            });                                                                                                        // 3515
        }                                                                                                              // 3516
                                                                                                                       // 3517
        if(utils.isArray(messages)) {                                                                                  // 3518
            messages.forEach(function (message) {                                                                      // 3519
                message = self.formatter ? self.formatter(message) : message;                                          // 3520
                self.callbacks.forEach(function (callback) {                                                           // 3521
                    callback(null, message);                                                                           // 3522
                });                                                                                                    // 3523
            });                                                                                                        // 3524
        }                                                                                                              // 3525
    };                                                                                                                 // 3526
                                                                                                                       // 3527
    self.requestManager.startPolling({                                                                                 // 3528
        method: self.implementation.poll.call,                                                                         // 3529
        params: [self.filterId],                                                                                       // 3530
    }, self.filterId, onMessage, self.stopWatching.bind(self));                                                        // 3531
                                                                                                                       // 3532
};                                                                                                                     // 3533
                                                                                                                       // 3534
var Filter = function (options, type, requestManager, methods, formatter, callback, filterCreationErrorCallback) {     // 3535
    var self = this;                                                                                                   // 3536
    var implementation = {};                                                                                           // 3537
    methods.forEach(function (method) {                                                                                // 3538
        method.setRequestManager(requestManager);                                                                      // 3539
        method.attachToObject(implementation);                                                                         // 3540
    });                                                                                                                // 3541
    this.requestManager = requestManager;                                                                              // 3542
    this.options = getOptions(options, type);                                                                          // 3543
    this.implementation = implementation;                                                                              // 3544
    this.filterId = null;                                                                                              // 3545
    this.callbacks = [];                                                                                               // 3546
    this.getLogsCallbacks = [];                                                                                        // 3547
    this.pollFilters = [];                                                                                             // 3548
    this.formatter = formatter;                                                                                        // 3549
    this.implementation.newFilter(this.options, function(error, id){                                                   // 3550
        if(error) {                                                                                                    // 3551
            self.callbacks.forEach(function(cb){                                                                       // 3552
                cb(error);                                                                                             // 3553
            });                                                                                                        // 3554
            if (typeof filterCreationErrorCallback === 'function') {                                                   // 3555
              filterCreationErrorCallback(error);                                                                      // 3556
            }                                                                                                          // 3557
        } else {                                                                                                       // 3558
            self.filterId = id;                                                                                        // 3559
                                                                                                                       // 3560
            // check if there are get pending callbacks as a consequence                                               // 3561
            // of calling get() with filterId unassigned.                                                              // 3562
            self.getLogsCallbacks.forEach(function (cb){                                                               // 3563
                self.get(cb);                                                                                          // 3564
            });                                                                                                        // 3565
            self.getLogsCallbacks = [];                                                                                // 3566
                                                                                                                       // 3567
            // get filter logs for the already existing watch calls                                                    // 3568
            self.callbacks.forEach(function(cb){                                                                       // 3569
                getLogsAtStart(self, cb);                                                                              // 3570
            });                                                                                                        // 3571
            if(self.callbacks.length > 0)                                                                              // 3572
                pollFilter(self);                                                                                      // 3573
                                                                                                                       // 3574
            // start to watch immediately                                                                              // 3575
            if(typeof callback === 'function') {                                                                       // 3576
                return self.watch(callback);                                                                           // 3577
            }                                                                                                          // 3578
        }                                                                                                              // 3579
    });                                                                                                                // 3580
                                                                                                                       // 3581
    return this;                                                                                                       // 3582
};                                                                                                                     // 3583
                                                                                                                       // 3584
Filter.prototype.watch = function (callback) {                                                                         // 3585
    this.callbacks.push(callback);                                                                                     // 3586
                                                                                                                       // 3587
    if(this.filterId) {                                                                                                // 3588
        getLogsAtStart(this, callback);                                                                                // 3589
        pollFilter(this);                                                                                              // 3590
    }                                                                                                                  // 3591
                                                                                                                       // 3592
    return this;                                                                                                       // 3593
};                                                                                                                     // 3594
                                                                                                                       // 3595
Filter.prototype.stopWatching = function (callback) {                                                                  // 3596
    this.requestManager.stopPolling(this.filterId);                                                                    // 3597
    this.callbacks = [];                                                                                               // 3598
    // remove filter async                                                                                             // 3599
    if (callback) {                                                                                                    // 3600
        this.implementation.uninstallFilter(this.filterId, callback);                                                  // 3601
    } else {                                                                                                           // 3602
        return this.implementation.uninstallFilter(this.filterId);                                                     // 3603
    }                                                                                                                  // 3604
};                                                                                                                     // 3605
                                                                                                                       // 3606
Filter.prototype.get = function (callback) {                                                                           // 3607
    var self = this;                                                                                                   // 3608
    if (utils.isFunction(callback)) {                                                                                  // 3609
        if (this.filterId === null) {                                                                                  // 3610
            // If filterId is not set yet, call it back                                                                // 3611
            // when newFilter() assigns it.                                                                            // 3612
            this.getLogsCallbacks.push(callback);                                                                      // 3613
        } else {                                                                                                       // 3614
            this.implementation.getLogs(this.filterId, function(err, res){                                             // 3615
                if (err) {                                                                                             // 3616
                    callback(err);                                                                                     // 3617
                } else {                                                                                               // 3618
                    callback(null, res.map(function (log) {                                                            // 3619
                        return self.formatter ? self.formatter(log) : log;                                             // 3620
                    }));                                                                                               // 3621
                }                                                                                                      // 3622
            });                                                                                                        // 3623
        }                                                                                                              // 3624
    } else {                                                                                                           // 3625
        if (this.filterId === null) {                                                                                  // 3626
            throw new Error('Filter ID Error: filter().get() can\'t be chained synchronous, please provide a callback for the get() method.');
        }                                                                                                              // 3628
        var logs = this.implementation.getLogs(this.filterId);                                                         // 3629
        return logs.map(function (log) {                                                                               // 3630
            return self.formatter ? self.formatter(log) : log;                                                         // 3631
        });                                                                                                            // 3632
    }                                                                                                                  // 3633
                                                                                                                       // 3634
    return this;                                                                                                       // 3635
};                                                                                                                     // 3636
                                                                                                                       // 3637
module.exports = Filter;                                                                                               // 3638
                                                                                                                       // 3639
                                                                                                                       // 3640
},{"../utils/utils":20,"./formatters":30}],30:[function(require,module,exports){                                       // 3641
/*                                                                                                                     // 3642
    This file is part of web3.js.                                                                                      // 3643
                                                                                                                       // 3644
    web3.js is free software: you can redistribute it and/or modify                                                    // 3645
    it under the terms of the GNU Lesser General Public License as published by                                        // 3646
    the Free Software Foundation, either version 3 of the License, or                                                  // 3647
    (at your option) any later version.                                                                                // 3648
                                                                                                                       // 3649
    web3.js is distributed in the hope that it will be useful,                                                         // 3650
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3651
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3652
    GNU Lesser General Public License for more details.                                                                // 3653
                                                                                                                       // 3654
    You should have received a copy of the GNU Lesser General Public License                                           // 3655
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3656
*/                                                                                                                     // 3657
/**                                                                                                                    // 3658
 * @file formatters.js                                                                                                 // 3659
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 3660
 * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 3661
 * @date 2015                                                                                                          // 3662
 */                                                                                                                    // 3663
                                                                                                                       // 3664
'use strict';                                                                                                          // 3665
                                                                                                                       // 3666
                                                                                                                       // 3667
var utils = require('../utils/utils');                                                                                 // 3668
var config = require('../utils/config');                                                                               // 3669
var Iban = require('./iban');                                                                                          // 3670
                                                                                                                       // 3671
/**                                                                                                                    // 3672
 * Should the format output to a big number                                                                            // 3673
 *                                                                                                                     // 3674
 * @method outputBigNumberFormatter                                                                                    // 3675
 * @param {String|Number|BigNumber}                                                                                    // 3676
 * @returns {BigNumber} object                                                                                         // 3677
 */                                                                                                                    // 3678
var outputBigNumberFormatter = function (number) {                                                                     // 3679
    return utils.toBigNumber(number);                                                                                  // 3680
};                                                                                                                     // 3681
                                                                                                                       // 3682
var isPredefinedBlockNumber = function (blockNumber) {                                                                 // 3683
    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';                        // 3684
};                                                                                                                     // 3685
                                                                                                                       // 3686
var inputDefaultBlockNumberFormatter = function (blockNumber) {                                                        // 3687
    if (blockNumber === undefined) {                                                                                   // 3688
        return config.defaultBlock;                                                                                    // 3689
    }                                                                                                                  // 3690
    return inputBlockNumberFormatter(blockNumber);                                                                     // 3691
};                                                                                                                     // 3692
                                                                                                                       // 3693
var inputBlockNumberFormatter = function (blockNumber) {                                                               // 3694
    if (blockNumber === undefined) {                                                                                   // 3695
        return undefined;                                                                                              // 3696
    } else if (isPredefinedBlockNumber(blockNumber)) {                                                                 // 3697
        return blockNumber;                                                                                            // 3698
    }                                                                                                                  // 3699
    return utils.toHex(blockNumber);                                                                                   // 3700
};                                                                                                                     // 3701
                                                                                                                       // 3702
/**                                                                                                                    // 3703
 * Formats the input of a transaction and converts all values to HEX                                                   // 3704
 *                                                                                                                     // 3705
 * @method inputCallFormatter                                                                                          // 3706
 * @param {Object} transaction options                                                                                 // 3707
 * @returns object                                                                                                     // 3708
*/                                                                                                                     // 3709
var inputCallFormatter = function (options){                                                                           // 3710
                                                                                                                       // 3711
    options.from = options.from || config.defaultAccount;                                                              // 3712
                                                                                                                       // 3713
    if (options.from) {                                                                                                // 3714
        options.from = inputAddressFormatter(options.from);                                                            // 3715
    }                                                                                                                  // 3716
                                                                                                                       // 3717
    if (options.to) { // it might be contract creation                                                                 // 3718
        options.to = inputAddressFormatter(options.to);                                                                // 3719
    }                                                                                                                  // 3720
                                                                                                                       // 3721
    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {                                                      // 3722
        return options[key] !== undefined;                                                                             // 3723
    }).forEach(function(key){                                                                                          // 3724
        options[key] = utils.fromDecimal(options[key]);                                                                // 3725
    });                                                                                                                // 3726
                                                                                                                       // 3727
    return options;                                                                                                    // 3728
};                                                                                                                     // 3729
                                                                                                                       // 3730
/**                                                                                                                    // 3731
 * Formats the input of a transaction and converts all values to HEX                                                   // 3732
 *                                                                                                                     // 3733
 * @method inputTransactionFormatter                                                                                   // 3734
 * @param {Object} transaction options                                                                                 // 3735
 * @returns object                                                                                                     // 3736
*/                                                                                                                     // 3737
var inputTransactionFormatter = function (options){                                                                    // 3738
                                                                                                                       // 3739
    options.from = options.from || config.defaultAccount;                                                              // 3740
    options.from = inputAddressFormatter(options.from);                                                                // 3741
                                                                                                                       // 3742
    if (options.to) { // it might be contract creation                                                                 // 3743
        options.to = inputAddressFormatter(options.to);                                                                // 3744
    }                                                                                                                  // 3745
                                                                                                                       // 3746
    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {                                                      // 3747
        return options[key] !== undefined;                                                                             // 3748
    }).forEach(function(key){                                                                                          // 3749
        options[key] = utils.fromDecimal(options[key]);                                                                // 3750
    });                                                                                                                // 3751
                                                                                                                       // 3752
    return options;                                                                                                    // 3753
};                                                                                                                     // 3754
                                                                                                                       // 3755
/**                                                                                                                    // 3756
 * Formats the output of a transaction to its proper values                                                            // 3757
 *                                                                                                                     // 3758
 * @method outputTransactionFormatter                                                                                  // 3759
 * @param {Object} tx                                                                                                  // 3760
 * @returns {Object}                                                                                                   // 3761
*/                                                                                                                     // 3762
var outputTransactionFormatter = function (tx){                                                                        // 3763
    if(tx.blockNumber !== null)                                                                                        // 3764
        tx.blockNumber = utils.toDecimal(tx.blockNumber);                                                              // 3765
    if(tx.transactionIndex !== null)                                                                                   // 3766
        tx.transactionIndex = utils.toDecimal(tx.transactionIndex);                                                    // 3767
    tx.nonce = utils.toDecimal(tx.nonce);                                                                              // 3768
    tx.gas = utils.toDecimal(tx.gas);                                                                                  // 3769
    tx.gasPrice = utils.toBigNumber(tx.gasPrice);                                                                      // 3770
    tx.value = utils.toBigNumber(tx.value);                                                                            // 3771
    return tx;                                                                                                         // 3772
};                                                                                                                     // 3773
                                                                                                                       // 3774
/**                                                                                                                    // 3775
 * Formats the output of a transaction receipt to its proper values                                                    // 3776
 *                                                                                                                     // 3777
 * @method outputTransactionReceiptFormatter                                                                           // 3778
 * @param {Object} receipt                                                                                             // 3779
 * @returns {Object}                                                                                                   // 3780
*/                                                                                                                     // 3781
var outputTransactionReceiptFormatter = function (receipt){                                                            // 3782
    if(receipt.blockNumber !== null)                                                                                   // 3783
        receipt.blockNumber = utils.toDecimal(receipt.blockNumber);                                                    // 3784
    if(receipt.transactionIndex !== null)                                                                              // 3785
        receipt.transactionIndex = utils.toDecimal(receipt.transactionIndex);                                          // 3786
    receipt.cumulativeGasUsed = utils.toDecimal(receipt.cumulativeGasUsed);                                            // 3787
    receipt.gasUsed = utils.toDecimal(receipt.gasUsed);                                                                // 3788
                                                                                                                       // 3789
    if(utils.isArray(receipt.logs)) {                                                                                  // 3790
        receipt.logs = receipt.logs.map(function(log){                                                                 // 3791
            return outputLogFormatter(log);                                                                            // 3792
        });                                                                                                            // 3793
    }                                                                                                                  // 3794
                                                                                                                       // 3795
    return receipt;                                                                                                    // 3796
};                                                                                                                     // 3797
                                                                                                                       // 3798
/**                                                                                                                    // 3799
 * Formats the output of a block to its proper values                                                                  // 3800
 *                                                                                                                     // 3801
 * @method outputBlockFormatter                                                                                        // 3802
 * @param {Object} block                                                                                               // 3803
 * @returns {Object}                                                                                                   // 3804
*/                                                                                                                     // 3805
var outputBlockFormatter = function(block) {                                                                           // 3806
                                                                                                                       // 3807
    // transform to number                                                                                             // 3808
    block.gasLimit = utils.toDecimal(block.gasLimit);                                                                  // 3809
    block.gasUsed = utils.toDecimal(block.gasUsed);                                                                    // 3810
    block.size = utils.toDecimal(block.size);                                                                          // 3811
    block.timestamp = utils.toDecimal(block.timestamp);                                                                // 3812
    if(block.number !== null)                                                                                          // 3813
        block.number = utils.toDecimal(block.number);                                                                  // 3814
                                                                                                                       // 3815
    block.difficulty = utils.toBigNumber(block.difficulty);                                                            // 3816
    block.totalDifficulty = utils.toBigNumber(block.totalDifficulty);                                                  // 3817
                                                                                                                       // 3818
    if (utils.isArray(block.transactions)) {                                                                           // 3819
        block.transactions.forEach(function(item){                                                                     // 3820
            if(!utils.isString(item))                                                                                  // 3821
                return outputTransactionFormatter(item);                                                               // 3822
        });                                                                                                            // 3823
    }                                                                                                                  // 3824
                                                                                                                       // 3825
    return block;                                                                                                      // 3826
};                                                                                                                     // 3827
                                                                                                                       // 3828
/**                                                                                                                    // 3829
 * Formats the output of a log                                                                                         // 3830
 *                                                                                                                     // 3831
 * @method outputLogFormatter                                                                                          // 3832
 * @param {Object} log object                                                                                          // 3833
 * @returns {Object} log                                                                                               // 3834
*/                                                                                                                     // 3835
var outputLogFormatter = function(log) {                                                                               // 3836
    if(log.blockNumber)                                                                                                // 3837
        log.blockNumber = utils.toDecimal(log.blockNumber);                                                            // 3838
    if(log.transactionIndex)                                                                                           // 3839
        log.transactionIndex = utils.toDecimal(log.transactionIndex);                                                  // 3840
    if(log.logIndex)                                                                                                   // 3841
        log.logIndex = utils.toDecimal(log.logIndex);                                                                  // 3842
                                                                                                                       // 3843
    return log;                                                                                                        // 3844
};                                                                                                                     // 3845
                                                                                                                       // 3846
/**                                                                                                                    // 3847
 * Formats the input of a whisper post and converts all values to HEX                                                  // 3848
 *                                                                                                                     // 3849
 * @method inputPostFormatter                                                                                          // 3850
 * @param {Object} transaction object                                                                                  // 3851
 * @returns {Object}                                                                                                   // 3852
*/                                                                                                                     // 3853
var inputPostFormatter = function(post) {                                                                              // 3854
                                                                                                                       // 3855
    // post.payload = utils.toHex(post.payload);                                                                       // 3856
    post.ttl = utils.fromDecimal(post.ttl);                                                                            // 3857
    post.workToProve = utils.fromDecimal(post.workToProve);                                                            // 3858
    post.priority = utils.fromDecimal(post.priority);                                                                  // 3859
                                                                                                                       // 3860
    // fallback                                                                                                        // 3861
    if (!utils.isArray(post.topics)) {                                                                                 // 3862
        post.topics = post.topics ? [post.topics] : [];                                                                // 3863
    }                                                                                                                  // 3864
                                                                                                                       // 3865
    // format the following options                                                                                    // 3866
    post.topics = post.topics.map(function(topic){                                                                     // 3867
        // convert only if not hex                                                                                     // 3868
        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);                                            // 3869
    });                                                                                                                // 3870
                                                                                                                       // 3871
    return post;                                                                                                       // 3872
};                                                                                                                     // 3873
                                                                                                                       // 3874
/**                                                                                                                    // 3875
 * Formats the output of a received post message                                                                       // 3876
 *                                                                                                                     // 3877
 * @method outputPostFormatter                                                                                         // 3878
 * @param {Object}                                                                                                     // 3879
 * @returns {Object}                                                                                                   // 3880
 */                                                                                                                    // 3881
var outputPostFormatter = function(post){                                                                              // 3882
                                                                                                                       // 3883
    post.expiry = utils.toDecimal(post.expiry);                                                                        // 3884
    post.sent = utils.toDecimal(post.sent);                                                                            // 3885
    post.ttl = utils.toDecimal(post.ttl);                                                                              // 3886
    post.workProved = utils.toDecimal(post.workProved);                                                                // 3887
    // post.payloadRaw = post.payload;                                                                                 // 3888
    // post.payload = utils.toAscii(post.payload);                                                                     // 3889
                                                                                                                       // 3890
    // if (utils.isJson(post.payload)) {                                                                               // 3891
    //     post.payload = JSON.parse(post.payload);                                                                    // 3892
    // }                                                                                                               // 3893
                                                                                                                       // 3894
    // format the following options                                                                                    // 3895
    if (!post.topics) {                                                                                                // 3896
        post.topics = [];                                                                                              // 3897
    }                                                                                                                  // 3898
    post.topics = post.topics.map(function(topic){                                                                     // 3899
        return utils.toAscii(topic);                                                                                   // 3900
    });                                                                                                                // 3901
                                                                                                                       // 3902
    return post;                                                                                                       // 3903
};                                                                                                                     // 3904
                                                                                                                       // 3905
var inputAddressFormatter = function (address) {                                                                       // 3906
    var iban = new Iban(address);                                                                                      // 3907
    if (iban.isValid() && iban.isDirect()) {                                                                           // 3908
        return '0x' + iban.address();                                                                                  // 3909
    } else if (utils.isStrictAddress(address)) {                                                                       // 3910
        return address;                                                                                                // 3911
    } else if (utils.isAddress(address)) {                                                                             // 3912
        return '0x' + address;                                                                                         // 3913
    }                                                                                                                  // 3914
    throw new Error('invalid address');                                                                                // 3915
};                                                                                                                     // 3916
                                                                                                                       // 3917
                                                                                                                       // 3918
var outputSyncingFormatter = function(result) {                                                                        // 3919
    if (!result) {                                                                                                     // 3920
        return result;                                                                                                 // 3921
    }                                                                                                                  // 3922
                                                                                                                       // 3923
    result.startingBlock = utils.toDecimal(result.startingBlock);                                                      // 3924
    result.currentBlock = utils.toDecimal(result.currentBlock);                                                        // 3925
    result.highestBlock = utils.toDecimal(result.highestBlock);                                                        // 3926
    if (result.knownStates) {                                                                                          // 3927
        result.knownStates = utils.toDecimal(result.knownStates);                                                      // 3928
        result.pulledStates = utils.toDecimal(result.pulledStates);                                                    // 3929
    }                                                                                                                  // 3930
                                                                                                                       // 3931
    return result;                                                                                                     // 3932
};                                                                                                                     // 3933
                                                                                                                       // 3934
module.exports = {                                                                                                     // 3935
    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,                                                // 3936
    inputBlockNumberFormatter: inputBlockNumberFormatter,                                                              // 3937
    inputCallFormatter: inputCallFormatter,                                                                            // 3938
    inputTransactionFormatter: inputTransactionFormatter,                                                              // 3939
    inputAddressFormatter: inputAddressFormatter,                                                                      // 3940
    inputPostFormatter: inputPostFormatter,                                                                            // 3941
    outputBigNumberFormatter: outputBigNumberFormatter,                                                                // 3942
    outputTransactionFormatter: outputTransactionFormatter,                                                            // 3943
    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,                                              // 3944
    outputBlockFormatter: outputBlockFormatter,                                                                        // 3945
    outputLogFormatter: outputLogFormatter,                                                                            // 3946
    outputPostFormatter: outputPostFormatter,                                                                          // 3947
    outputSyncingFormatter: outputSyncingFormatter                                                                     // 3948
};                                                                                                                     // 3949
                                                                                                                       // 3950
                                                                                                                       // 3951
},{"../utils/config":18,"../utils/utils":20,"./iban":33}],31:[function(require,module,exports){                        // 3952
/*                                                                                                                     // 3953
    This file is part of web3.js.                                                                                      // 3954
                                                                                                                       // 3955
    web3.js is free software: you can redistribute it and/or modify                                                    // 3956
    it under the terms of the GNU Lesser General Public License as published by                                        // 3957
    the Free Software Foundation, either version 3 of the License, or                                                  // 3958
    (at your option) any later version.                                                                                // 3959
                                                                                                                       // 3960
    web3.js is distributed in the hope that it will be useful,                                                         // 3961
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3962
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3963
    GNU Lesser General Public License for more details.                                                                // 3964
                                                                                                                       // 3965
    You should have received a copy of the GNU Lesser General Public License                                           // 3966
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3967
*/                                                                                                                     // 3968
/**                                                                                                                    // 3969
 * @file function.js                                                                                                   // 3970
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 3971
 * @date 2015                                                                                                          // 3972
 */                                                                                                                    // 3973
                                                                                                                       // 3974
var coder = require('../solidity/coder');                                                                              // 3975
var utils = require('../utils/utils');                                                                                 // 3976
var errors = require('./errors');                                                                                      // 3977
var formatters = require('./formatters');                                                                              // 3978
var sha3 = require('../utils/sha3');                                                                                   // 3979
                                                                                                                       // 3980
/**                                                                                                                    // 3981
 * This prototype should be used to call/sendTransaction to solidity functions                                         // 3982
 */                                                                                                                    // 3983
var SolidityFunction = function (eth, json, address) {                                                                 // 3984
    this._eth = eth;                                                                                                   // 3985
    this._inputTypes = json.inputs.map(function (i) {                                                                  // 3986
        return i.type;                                                                                                 // 3987
    });                                                                                                                // 3988
    this._outputTypes = json.outputs.map(function (i) {                                                                // 3989
        return i.type;                                                                                                 // 3990
    });                                                                                                                // 3991
    this._constant = json.constant;                                                                                    // 3992
    this._payable = json.payable;                                                                                      // 3993
    this._name = utils.transformToFullName(json);                                                                      // 3994
    this._address = address;                                                                                           // 3995
};                                                                                                                     // 3996
                                                                                                                       // 3997
SolidityFunction.prototype.extractCallback = function (args) {                                                         // 3998
    if (utils.isFunction(args[args.length - 1])) {                                                                     // 3999
        return args.pop(); // modify the args array!                                                                   // 4000
    }                                                                                                                  // 4001
};                                                                                                                     // 4002
                                                                                                                       // 4003
SolidityFunction.prototype.extractDefaultBlock = function (args) {                                                     // 4004
    if (args.length > this._inputTypes.length && !utils.isObject(args[args.length -1])) {                              // 4005
        return formatters.inputDefaultBlockNumberFormatter(args.pop()); // modify the args array!                      // 4006
    }                                                                                                                  // 4007
};                                                                                                                     // 4008
                                                                                                                       // 4009
/**                                                                                                                    // 4010
 * Should be called to check if the number of arguments is correct                                                     // 4011
 *                                                                                                                     // 4012
 * @method validateArgs                                                                                                // 4013
 * @param {Array} arguments                                                                                            // 4014
 * @throws {Error} if it is not                                                                                        // 4015
 */                                                                                                                    // 4016
SolidityFunction.prototype.validateArgs = function (args) {                                                            // 4017
    var inputArgs = args.filter(function (a) {                                                                         // 4018
      // filter the options object but not arguments that are arrays                                                   // 4019
      return !( (utils.isObject(a) === true) &&                                                                        // 4020
                (utils.isArray(a) === false) &&                                                                        // 4021
                (utils.isBigNumber(a) === false)                                                                       // 4022
              );                                                                                                       // 4023
    });                                                                                                                // 4024
    if (inputArgs.length !== this._inputTypes.length) {                                                                // 4025
        throw errors.InvalidNumberOfSolidityArgs();                                                                    // 4026
    }                                                                                                                  // 4027
};                                                                                                                     // 4028
                                                                                                                       // 4029
/**                                                                                                                    // 4030
 * Should be used to create payload from arguments                                                                     // 4031
 *                                                                                                                     // 4032
 * @method toPayload                                                                                                   // 4033
 * @param {Array} solidity function params                                                                             // 4034
 * @param {Object} optional payload options                                                                            // 4035
 */                                                                                                                    // 4036
SolidityFunction.prototype.toPayload = function (args) {                                                               // 4037
    var options = {};                                                                                                  // 4038
    if (args.length > this._inputTypes.length && utils.isObject(args[args.length -1])) {                               // 4039
        options = args[args.length - 1];                                                                               // 4040
    }                                                                                                                  // 4041
    this.validateArgs(args);                                                                                           // 4042
    options.to = this._address;                                                                                        // 4043
    options.data = '0x' + this.signature() + coder.encodeParams(this._inputTypes, args);                               // 4044
    return options;                                                                                                    // 4045
};                                                                                                                     // 4046
                                                                                                                       // 4047
/**                                                                                                                    // 4048
 * Should be used to get function signature                                                                            // 4049
 *                                                                                                                     // 4050
 * @method signature                                                                                                   // 4051
 * @return {String} function signature                                                                                 // 4052
 */                                                                                                                    // 4053
SolidityFunction.prototype.signature = function () {                                                                   // 4054
    return sha3(this._name).slice(0, 8);                                                                               // 4055
};                                                                                                                     // 4056
                                                                                                                       // 4057
                                                                                                                       // 4058
SolidityFunction.prototype.unpackOutput = function (output) {                                                          // 4059
    if (!output) {                                                                                                     // 4060
        return;                                                                                                        // 4061
    }                                                                                                                  // 4062
                                                                                                                       // 4063
    output = output.length >= 2 ? output.slice(2) : output;                                                            // 4064
    var result = coder.decodeParams(this._outputTypes, output);                                                        // 4065
    return result.length === 1 ? result[0] : result;                                                                   // 4066
};                                                                                                                     // 4067
                                                                                                                       // 4068
/**                                                                                                                    // 4069
 * Calls a contract function.                                                                                          // 4070
 *                                                                                                                     // 4071
 * @method call                                                                                                        // 4072
 * @param {...Object} Contract function arguments                                                                      // 4073
 * @param {function} If the last argument is a function, the contract function                                         // 4074
 *   call will be asynchronous, and the callback will be passed the                                                    // 4075
 *   error and result.                                                                                                 // 4076
 * @return {String} output bytes                                                                                       // 4077
 */                                                                                                                    // 4078
SolidityFunction.prototype.call = function () {                                                                        // 4079
    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });                  // 4080
    var callback = this.extractCallback(args);                                                                         // 4081
    var defaultBlock = this.extractDefaultBlock(args);                                                                 // 4082
    var payload = this.toPayload(args);                                                                                // 4083
                                                                                                                       // 4084
                                                                                                                       // 4085
    if (!callback) {                                                                                                   // 4086
        var output = this._eth.call(payload, defaultBlock);                                                            // 4087
        return this.unpackOutput(output);                                                                              // 4088
    }                                                                                                                  // 4089
                                                                                                                       // 4090
    var self = this;                                                                                                   // 4091
    this._eth.call(payload, defaultBlock, function (error, output) {                                                   // 4092
        if (error) return callback(error, null);                                                                       // 4093
                                                                                                                       // 4094
        var unpacked = null;                                                                                           // 4095
        try {                                                                                                          // 4096
            unpacked = self.unpackOutput(output);                                                                      // 4097
        }                                                                                                              // 4098
        catch (e) {                                                                                                    // 4099
            error = e;                                                                                                 // 4100
        }                                                                                                              // 4101
                                                                                                                       // 4102
        callback(error, unpacked);                                                                                     // 4103
    });                                                                                                                // 4104
};                                                                                                                     // 4105
                                                                                                                       // 4106
/**                                                                                                                    // 4107
 * Should be used to sendTransaction to solidity function                                                              // 4108
 *                                                                                                                     // 4109
 * @method sendTransaction                                                                                             // 4110
 */                                                                                                                    // 4111
SolidityFunction.prototype.sendTransaction = function () {                                                             // 4112
    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });                  // 4113
    var callback = this.extractCallback(args);                                                                         // 4114
    var payload = this.toPayload(args);                                                                                // 4115
                                                                                                                       // 4116
    if (payload.value > 0 && !this._payable) {                                                                         // 4117
        throw new Error('Cannot send value to non-payable function');                                                  // 4118
    }                                                                                                                  // 4119
                                                                                                                       // 4120
    if (!callback) {                                                                                                   // 4121
        return this._eth.sendTransaction(payload);                                                                     // 4122
    }                                                                                                                  // 4123
                                                                                                                       // 4124
    this._eth.sendTransaction(payload, callback);                                                                      // 4125
};                                                                                                                     // 4126
                                                                                                                       // 4127
/**                                                                                                                    // 4128
 * Should be used to estimateGas of solidity function                                                                  // 4129
 *                                                                                                                     // 4130
 * @method estimateGas                                                                                                 // 4131
 */                                                                                                                    // 4132
SolidityFunction.prototype.estimateGas = function () {                                                                 // 4133
    var args = Array.prototype.slice.call(arguments);                                                                  // 4134
    var callback = this.extractCallback(args);                                                                         // 4135
    var payload = this.toPayload(args);                                                                                // 4136
                                                                                                                       // 4137
    if (!callback) {                                                                                                   // 4138
        return this._eth.estimateGas(payload);                                                                         // 4139
    }                                                                                                                  // 4140
                                                                                                                       // 4141
    this._eth.estimateGas(payload, callback);                                                                          // 4142
};                                                                                                                     // 4143
                                                                                                                       // 4144
/**                                                                                                                    // 4145
 * Return the encoded data of the call                                                                                 // 4146
 *                                                                                                                     // 4147
 * @method getData                                                                                                     // 4148
 * @return {String} the encoded data                                                                                   // 4149
 */                                                                                                                    // 4150
SolidityFunction.prototype.getData = function () {                                                                     // 4151
    var args = Array.prototype.slice.call(arguments);                                                                  // 4152
    var payload = this.toPayload(args);                                                                                // 4153
                                                                                                                       // 4154
    return payload.data;                                                                                               // 4155
};                                                                                                                     // 4156
                                                                                                                       // 4157
/**                                                                                                                    // 4158
 * Should be used to get function display name                                                                         // 4159
 *                                                                                                                     // 4160
 * @method displayName                                                                                                 // 4161
 * @return {String} display name of the function                                                                       // 4162
 */                                                                                                                    // 4163
SolidityFunction.prototype.displayName = function () {                                                                 // 4164
    return utils.extractDisplayName(this._name);                                                                       // 4165
};                                                                                                                     // 4166
                                                                                                                       // 4167
/**                                                                                                                    // 4168
 * Should be used to get function type name                                                                            // 4169
 *                                                                                                                     // 4170
 * @method typeName                                                                                                    // 4171
 * @return {String} type name of the function                                                                          // 4172
 */                                                                                                                    // 4173
SolidityFunction.prototype.typeName = function () {                                                                    // 4174
    return utils.extractTypeName(this._name);                                                                          // 4175
};                                                                                                                     // 4176
                                                                                                                       // 4177
/**                                                                                                                    // 4178
 * Should be called to get rpc requests from solidity function                                                         // 4179
 *                                                                                                                     // 4180
 * @method request                                                                                                     // 4181
 * @returns {Object}                                                                                                   // 4182
 */                                                                                                                    // 4183
SolidityFunction.prototype.request = function () {                                                                     // 4184
    var args = Array.prototype.slice.call(arguments);                                                                  // 4185
    var callback = this.extractCallback(args);                                                                         // 4186
    var payload = this.toPayload(args);                                                                                // 4187
    var format = this.unpackOutput.bind(this);                                                                         // 4188
                                                                                                                       // 4189
    return {                                                                                                           // 4190
        method: this._constant ? 'eth_call' : 'eth_sendTransaction',                                                   // 4191
        callback: callback,                                                                                            // 4192
        params: [payload],                                                                                             // 4193
        format: format                                                                                                 // 4194
    };                                                                                                                 // 4195
};                                                                                                                     // 4196
                                                                                                                       // 4197
/**                                                                                                                    // 4198
 * Should be called to execute function                                                                                // 4199
 *                                                                                                                     // 4200
 * @method execute                                                                                                     // 4201
 */                                                                                                                    // 4202
SolidityFunction.prototype.execute = function () {                                                                     // 4203
    var transaction = !this._constant;                                                                                 // 4204
                                                                                                                       // 4205
    // send transaction                                                                                                // 4206
    if (transaction) {                                                                                                 // 4207
        return this.sendTransaction.apply(this, Array.prototype.slice.call(arguments));                                // 4208
    }                                                                                                                  // 4209
                                                                                                                       // 4210
    // call                                                                                                            // 4211
    return this.call.apply(this, Array.prototype.slice.call(arguments));                                               // 4212
};                                                                                                                     // 4213
                                                                                                                       // 4214
/**                                                                                                                    // 4215
 * Should be called to attach function to contract                                                                     // 4216
 *                                                                                                                     // 4217
 * @method attachToContract                                                                                            // 4218
 * @param {Contract}                                                                                                   // 4219
 */                                                                                                                    // 4220
SolidityFunction.prototype.attachToContract = function (contract) {                                                    // 4221
    var execute = this.execute.bind(this);                                                                             // 4222
    execute.request = this.request.bind(this);                                                                         // 4223
    execute.call = this.call.bind(this);                                                                               // 4224
    execute.sendTransaction = this.sendTransaction.bind(this);                                                         // 4225
    execute.estimateGas = this.estimateGas.bind(this);                                                                 // 4226
    execute.getData = this.getData.bind(this);                                                                         // 4227
    var displayName = this.displayName();                                                                              // 4228
    if (!contract[displayName]) {                                                                                      // 4229
        contract[displayName] = execute;                                                                               // 4230
    }                                                                                                                  // 4231
    contract[displayName][this.typeName()] = execute; // circular!!!!                                                  // 4232
};                                                                                                                     // 4233
                                                                                                                       // 4234
module.exports = SolidityFunction;                                                                                     // 4235
                                                                                                                       // 4236
},{"../solidity/coder":7,"../utils/sha3":19,"../utils/utils":20,"./errors":26,"./formatters":30}],32:[function(require,module,exports){
/*                                                                                                                     // 4238
    This file is part of web3.js.                                                                                      // 4239
                                                                                                                       // 4240
    web3.js is free software: you can redistribute it and/or modify                                                    // 4241
    it under the terms of the GNU Lesser General Public License as published by                                        // 4242
    the Free Software Foundation, either version 3 of the License, or                                                  // 4243
    (at your option) any later version.                                                                                // 4244
                                                                                                                       // 4245
    web3.js is distributed in the hope that it will be useful,                                                         // 4246
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4247
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4248
    GNU Lesser General Public License for more details.                                                                // 4249
                                                                                                                       // 4250
    You should have received a copy of the GNU Lesser General Public License                                           // 4251
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4252
*/                                                                                                                     // 4253
/** @file httpprovider.js                                                                                              // 4254
 * @authors:                                                                                                           // 4255
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 4256
 *   Marian Oancea <marian@ethdev.com>                                                                                 // 4257
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 4258
 * @date 2015                                                                                                          // 4259
 */                                                                                                                    // 4260
                                                                                                                       // 4261
var errors = require('./errors');                                                                                      // 4262
                                                                                                                       // 4263
// workaround to use httpprovider in different envs                                                                    // 4264
                                                                                                                       // 4265
// browser                                                                                                             // 4266
if (typeof window !== 'undefined' && window.XMLHttpRequest) {                                                          // 4267
  XMLHttpRequest = window.XMLHttpRequest; // jshint ignore: line                                                       // 4268
// node                                                                                                                // 4269
} else {                                                                                                               // 4270
  XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest; // jshint ignore: line                                    // 4271
}                                                                                                                      // 4272
                                                                                                                       // 4273
var XHR2 = require('xhr2'); // jshint ignore: line                                                                     // 4274
                                                                                                                       // 4275
/**                                                                                                                    // 4276
 * HttpProvider should be used to send rpc calls over http                                                             // 4277
 */                                                                                                                    // 4278
var HttpProvider = function (host, timeout, user, password) {                                                          // 4279
  this.host = host || 'http://localhost:8545';                                                                         // 4280
  this.timeout = timeout || 0;                                                                                         // 4281
  this.user = user;                                                                                                    // 4282
  this.password = password;                                                                                            // 4283
};                                                                                                                     // 4284
                                                                                                                       // 4285
/**                                                                                                                    // 4286
 * Should be called to prepare new XMLHttpRequest                                                                      // 4287
 *                                                                                                                     // 4288
 * @method prepareRequest                                                                                              // 4289
 * @param {Boolean} true if request should be async                                                                    // 4290
 * @return {XMLHttpRequest} object                                                                                     // 4291
 */                                                                                                                    // 4292
HttpProvider.prototype.prepareRequest = function (async) {                                                             // 4293
  var request;                                                                                                         // 4294
                                                                                                                       // 4295
  if (async) {                                                                                                         // 4296
    request = new XHR2();                                                                                              // 4297
    request.timeout = this.timeout;                                                                                    // 4298
  } else {                                                                                                             // 4299
    request = new XMLHttpRequest();                                                                                    // 4300
  }                                                                                                                    // 4301
                                                                                                                       // 4302
  request.open('POST', this.host, async);                                                                              // 4303
  if (this.user && this.password) {                                                                                    // 4304
    var auth = 'Basic ' + new Buffer(this.user + ':' + this.password).toString('base64');                              // 4305
    request.setRequestHeader('Authorization', auth);                                                                   // 4306
  } request.setRequestHeader('Content-Type', 'application/json');                                                      // 4307
  return request;                                                                                                      // 4308
};                                                                                                                     // 4309
                                                                                                                       // 4310
/**                                                                                                                    // 4311
 * Should be called to make sync request                                                                               // 4312
 *                                                                                                                     // 4313
 * @method send                                                                                                        // 4314
 * @param {Object} payload                                                                                             // 4315
 * @return {Object} result                                                                                             // 4316
 */                                                                                                                    // 4317
HttpProvider.prototype.send = function (payload) {                                                                     // 4318
  var request = this.prepareRequest(false);                                                                            // 4319
                                                                                                                       // 4320
  try {                                                                                                                // 4321
    request.send(JSON.stringify(payload));                                                                             // 4322
  } catch (error) {                                                                                                    // 4323
    throw errors.InvalidConnection(this.host);                                                                         // 4324
  }                                                                                                                    // 4325
                                                                                                                       // 4326
  var result = request.responseText;                                                                                   // 4327
                                                                                                                       // 4328
  try {                                                                                                                // 4329
    result = JSON.parse(result);                                                                                       // 4330
  } catch (e) {                                                                                                        // 4331
    throw errors.InvalidResponse(request.responseText);                                                                // 4332
  }                                                                                                                    // 4333
                                                                                                                       // 4334
  return result;                                                                                                       // 4335
};                                                                                                                     // 4336
                                                                                                                       // 4337
/**                                                                                                                    // 4338
 * Should be used to make async request                                                                                // 4339
 *                                                                                                                     // 4340
 * @method sendAsync                                                                                                   // 4341
 * @param {Object} payload                                                                                             // 4342
 * @param {Function} callback triggered on end with (err, result)                                                      // 4343
 */                                                                                                                    // 4344
HttpProvider.prototype.sendAsync = function (payload, callback) {                                                      // 4345
  var request = this.prepareRequest(true);                                                                             // 4346
                                                                                                                       // 4347
  request.onreadystatechange = function () {                                                                           // 4348
    if (request.readyState === 4 && request.timeout !== 1) {                                                           // 4349
      var result = request.responseText;                                                                               // 4350
      var error = null;                                                                                                // 4351
                                                                                                                       // 4352
      try {                                                                                                            // 4353
        result = JSON.parse(result);                                                                                   // 4354
      } catch (e) {                                                                                                    // 4355
        error = errors.InvalidResponse(request.responseText);                                                          // 4356
      }                                                                                                                // 4357
                                                                                                                       // 4358
      callback(error, result);                                                                                         // 4359
    }                                                                                                                  // 4360
  };                                                                                                                   // 4361
                                                                                                                       // 4362
  request.ontimeout = function () {                                                                                    // 4363
    callback(errors.ConnectionTimeout(this.timeout));                                                                  // 4364
  };                                                                                                                   // 4365
                                                                                                                       // 4366
  try {                                                                                                                // 4367
    request.send(JSON.stringify(payload));                                                                             // 4368
  } catch (error) {                                                                                                    // 4369
    callback(errors.InvalidConnection(this.host));                                                                     // 4370
  }                                                                                                                    // 4371
};                                                                                                                     // 4372
                                                                                                                       // 4373
/**                                                                                                                    // 4374
 * Synchronously tries to make Http request                                                                            // 4375
 *                                                                                                                     // 4376
 * @method isConnected                                                                                                 // 4377
 * @return {Boolean} returns true if request haven't failed. Otherwise false                                           // 4378
 */                                                                                                                    // 4379
HttpProvider.prototype.isConnected = function () {                                                                     // 4380
  try {                                                                                                                // 4381
    this.send({                                                                                                        // 4382
      id: 9999999999,                                                                                                  // 4383
      jsonrpc: '2.0',                                                                                                  // 4384
      method: 'net_listening',                                                                                         // 4385
      params: []                                                                                                       // 4386
    });                                                                                                                // 4387
    return true;                                                                                                       // 4388
  } catch (e) {                                                                                                        // 4389
    return false;                                                                                                      // 4390
  }                                                                                                                    // 4391
};                                                                                                                     // 4392
                                                                                                                       // 4393
module.exports = HttpProvider;                                                                                         // 4394
                                                                                                                       // 4395
},{"./errors":26,"xhr2":85,"xmlhttprequest":17}],33:[function(require,module,exports){                                 // 4396
/*                                                                                                                     // 4397
    This file is part of web3.js.                                                                                      // 4398
                                                                                                                       // 4399
    web3.js is free software: you can redistribute it and/or modify                                                    // 4400
    it under the terms of the GNU Lesser General Public License as published by                                        // 4401
    the Free Software Foundation, either version 3 of the License, or                                                  // 4402
    (at your option) any later version.                                                                                // 4403
                                                                                                                       // 4404
    web3.js is distributed in the hope that it will be useful,                                                         // 4405
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4406
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4407
    GNU Lesser General Public License for more details.                                                                // 4408
                                                                                                                       // 4409
    You should have received a copy of the GNU Lesser General Public License                                           // 4410
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4411
*/                                                                                                                     // 4412
/**                                                                                                                    // 4413
 * @file iban.js                                                                                                       // 4414
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 4415
 * @date 2015                                                                                                          // 4416
 */                                                                                                                    // 4417
                                                                                                                       // 4418
var BigNumber = require('bignumber.js');                                                                               // 4419
                                                                                                                       // 4420
var padLeft = function (string, bytes) {                                                                               // 4421
    var result = string;                                                                                               // 4422
    while (result.length < bytes * 2) {                                                                                // 4423
        result = '0' + result;                                                                                         // 4424
    }                                                                                                                  // 4425
    return result;                                                                                                     // 4426
};                                                                                                                     // 4427
                                                                                                                       // 4428
/**                                                                                                                    // 4429
 * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to       // 4430
 * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.                                                    // 4431
 *                                                                                                                     // 4432
 * @method iso13616Prepare                                                                                             // 4433
 * @param {String} iban the IBAN                                                                                       // 4434
 * @returns {String} the prepared IBAN                                                                                 // 4435
 */                                                                                                                    // 4436
var iso13616Prepare = function (iban) {                                                                                // 4437
    var A = 'A'.charCodeAt(0);                                                                                         // 4438
    var Z = 'Z'.charCodeAt(0);                                                                                         // 4439
                                                                                                                       // 4440
    iban = iban.toUpperCase();                                                                                         // 4441
    iban = iban.substr(4) + iban.substr(0,4);                                                                          // 4442
                                                                                                                       // 4443
    return iban.split('').map(function(n){                                                                             // 4444
        var code = n.charCodeAt(0);                                                                                    // 4445
        if (code >= A && code <= Z){                                                                                   // 4446
            // A = 10, B = 11, ... Z = 35                                                                              // 4447
            return code - A + 10;                                                                                      // 4448
        } else {                                                                                                       // 4449
            return n;                                                                                                  // 4450
        }                                                                                                              // 4451
    }).join('');                                                                                                       // 4452
};                                                                                                                     // 4453
                                                                                                                       // 4454
/**                                                                                                                    // 4455
 * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.                                                // 4456
 *                                                                                                                     // 4457
 * @method mod9710                                                                                                     // 4458
 * @param {String} iban                                                                                                // 4459
 * @returns {Number}                                                                                                   // 4460
 */                                                                                                                    // 4461
var mod9710 = function (iban) {                                                                                        // 4462
    var remainder = iban,                                                                                              // 4463
        block;                                                                                                         // 4464
                                                                                                                       // 4465
    while (remainder.length > 2){                                                                                      // 4466
        block = remainder.slice(0, 9);                                                                                 // 4467
        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);                                          // 4468
    }                                                                                                                  // 4469
                                                                                                                       // 4470
    return parseInt(remainder, 10) % 97;                                                                               // 4471
};                                                                                                                     // 4472
                                                                                                                       // 4473
/**                                                                                                                    // 4474
 * This prototype should be used to create iban object from iban correct string                                        // 4475
 *                                                                                                                     // 4476
 * @param {String} iban                                                                                                // 4477
 */                                                                                                                    // 4478
var Iban = function (iban) {                                                                                           // 4479
    this._iban = iban;                                                                                                 // 4480
};                                                                                                                     // 4481
                                                                                                                       // 4482
/**                                                                                                                    // 4483
 * This method should be used to create iban object from ethereum address                                              // 4484
 *                                                                                                                     // 4485
 * @method fromAddress                                                                                                 // 4486
 * @param {String} address                                                                                             // 4487
 * @return {Iban} the IBAN object                                                                                      // 4488
 */                                                                                                                    // 4489
Iban.fromAddress = function (address) {                                                                                // 4490
    var asBn = new BigNumber(address, 16);                                                                             // 4491
    var base36 = asBn.toString(36);                                                                                    // 4492
    var padded = padLeft(base36, 15);                                                                                  // 4493
    return Iban.fromBban(padded.toUpperCase());                                                                        // 4494
};                                                                                                                     // 4495
                                                                                                                       // 4496
/**                                                                                                                    // 4497
 * Convert the passed BBAN to an IBAN for this country specification.                                                  // 4498
 * Please note that <i>"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account"</i>.
 * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits
 *                                                                                                                     // 4501
 * @method fromBban                                                                                                    // 4502
 * @param {String} bban the BBAN to convert to IBAN                                                                    // 4503
 * @returns {Iban} the IBAN object                                                                                     // 4504
 */                                                                                                                    // 4505
Iban.fromBban = function (bban) {                                                                                      // 4506
    var countryCode = 'XE';                                                                                            // 4507
                                                                                                                       // 4508
    var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));                                               // 4509
    var checkDigit = ('0' + (98 - remainder)).slice(-2);                                                               // 4510
                                                                                                                       // 4511
    return new Iban(countryCode + checkDigit + bban);                                                                  // 4512
};                                                                                                                     // 4513
                                                                                                                       // 4514
/**                                                                                                                    // 4515
 * Should be used to create IBAN object for given institution and identifier                                           // 4516
 *                                                                                                                     // 4517
 * @method createIndirect                                                                                              // 4518
 * @param {Object} options, required options are "institution" and "identifier"                                        // 4519
 * @return {Iban} the IBAN object                                                                                      // 4520
 */                                                                                                                    // 4521
Iban.createIndirect = function (options) {                                                                             // 4522
    return Iban.fromBban('ETH' + options.institution + options.identifier);                                            // 4523
};                                                                                                                     // 4524
                                                                                                                       // 4525
/**                                                                                                                    // 4526
 * Thos method should be used to check if given string is valid iban object                                            // 4527
 *                                                                                                                     // 4528
 * @method isValid                                                                                                     // 4529
 * @param {String} iban string                                                                                         // 4530
 * @return {Boolean} true if it is valid IBAN                                                                          // 4531
 */                                                                                                                    // 4532
Iban.isValid = function (iban) {                                                                                       // 4533
    var i = new Iban(iban);                                                                                            // 4534
    return i.isValid();                                                                                                // 4535
};                                                                                                                     // 4536
                                                                                                                       // 4537
/**                                                                                                                    // 4538
 * Should be called to check if iban is correct                                                                        // 4539
 *                                                                                                                     // 4540
 * @method isValid                                                                                                     // 4541
 * @returns {Boolean} true if it is, otherwise false                                                                   // 4542
 */                                                                                                                    // 4543
Iban.prototype.isValid = function () {                                                                                 // 4544
    return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&                                         // 4545
        mod9710(iso13616Prepare(this._iban)) === 1;                                                                    // 4546
};                                                                                                                     // 4547
                                                                                                                       // 4548
/**                                                                                                                    // 4549
 * Should be called to check if iban number is direct                                                                  // 4550
 *                                                                                                                     // 4551
 * @method isDirect                                                                                                    // 4552
 * @returns {Boolean} true if it is, otherwise false                                                                   // 4553
 */                                                                                                                    // 4554
Iban.prototype.isDirect = function () {                                                                                // 4555
    return this._iban.length === 34 || this._iban.length === 35;                                                       // 4556
};                                                                                                                     // 4557
                                                                                                                       // 4558
/**                                                                                                                    // 4559
 * Should be called to check if iban number if indirect                                                                // 4560
 *                                                                                                                     // 4561
 * @method isIndirect                                                                                                  // 4562
 * @returns {Boolean} true if it is, otherwise false                                                                   // 4563
 */                                                                                                                    // 4564
Iban.prototype.isIndirect = function () {                                                                              // 4565
    return this._iban.length === 20;                                                                                   // 4566
};                                                                                                                     // 4567
                                                                                                                       // 4568
/**                                                                                                                    // 4569
 * Should be called to get iban checksum                                                                               // 4570
 * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)                                                        // 4571
 *                                                                                                                     // 4572
 * @method checksum                                                                                                    // 4573
 * @returns {String} checksum                                                                                          // 4574
 */                                                                                                                    // 4575
Iban.prototype.checksum = function () {                                                                                // 4576
    return this._iban.substr(2, 2);                                                                                    // 4577
};                                                                                                                     // 4578
                                                                                                                       // 4579
/**                                                                                                                    // 4580
 * Should be called to get institution identifier                                                                      // 4581
 * eg. XREG                                                                                                            // 4582
 *                                                                                                                     // 4583
 * @method institution                                                                                                 // 4584
 * @returns {String} institution identifier                                                                            // 4585
 */                                                                                                                    // 4586
Iban.prototype.institution = function () {                                                                             // 4587
    return this.isIndirect() ? this._iban.substr(7, 4) : '';                                                           // 4588
};                                                                                                                     // 4589
                                                                                                                       // 4590
/**                                                                                                                    // 4591
 * Should be called to get client identifier within institution                                                        // 4592
 * eg. GAVOFYORK                                                                                                       // 4593
 *                                                                                                                     // 4594
 * @method client                                                                                                      // 4595
 * @returns {String} client identifier                                                                                 // 4596
 */                                                                                                                    // 4597
Iban.prototype.client = function () {                                                                                  // 4598
    return this.isIndirect() ? this._iban.substr(11) : '';                                                             // 4599
};                                                                                                                     // 4600
                                                                                                                       // 4601
/**                                                                                                                    // 4602
 * Should be called to get client direct address                                                                       // 4603
 *                                                                                                                     // 4604
 * @method address                                                                                                     // 4605
 * @returns {String} client direct address                                                                             // 4606
 */                                                                                                                    // 4607
Iban.prototype.address = function () {                                                                                 // 4608
    if (this.isDirect()) {                                                                                             // 4609
        var base36 = this._iban.substr(4);                                                                             // 4610
        var asBn = new BigNumber(base36, 36);                                                                          // 4611
        return padLeft(asBn.toString(16), 20);                                                                         // 4612
    }                                                                                                                  // 4613
                                                                                                                       // 4614
    return '';                                                                                                         // 4615
};                                                                                                                     // 4616
                                                                                                                       // 4617
Iban.prototype.toString = function () {                                                                                // 4618
    return this._iban;                                                                                                 // 4619
};                                                                                                                     // 4620
                                                                                                                       // 4621
module.exports = Iban;                                                                                                 // 4622
                                                                                                                       // 4623
                                                                                                                       // 4624
},{"bignumber.js":"bignumber.js"}],34:[function(require,module,exports){                                               // 4625
/*                                                                                                                     // 4626
    This file is part of web3.js.                                                                                      // 4627
                                                                                                                       // 4628
    web3.js is free software: you can redistribute it and/or modify                                                    // 4629
    it under the terms of the GNU Lesser General Public License as published by                                        // 4630
    the Free Software Foundation, either version 3 of the License, or                                                  // 4631
    (at your option) any later version.                                                                                // 4632
                                                                                                                       // 4633
    web3.js is distributed in the hope that it will be useful,                                                         // 4634
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4635
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4636
    GNU Lesser General Public License for more details.                                                                // 4637
                                                                                                                       // 4638
    You should have received a copy of the GNU Lesser General Public License                                           // 4639
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4640
*/                                                                                                                     // 4641
/** @file ipcprovider.js                                                                                               // 4642
 * @authors:                                                                                                           // 4643
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 4644
 * @date 2015                                                                                                          // 4645
 */                                                                                                                    // 4646
                                                                                                                       // 4647
"use strict";                                                                                                          // 4648
                                                                                                                       // 4649
var utils = require('../utils/utils');                                                                                 // 4650
var errors = require('./errors');                                                                                      // 4651
                                                                                                                       // 4652
                                                                                                                       // 4653
var IpcProvider = function (path, net) {                                                                               // 4654
    var _this = this;                                                                                                  // 4655
    this.responseCallbacks = {};                                                                                       // 4656
    this.path = path;                                                                                                  // 4657
                                                                                                                       // 4658
    this.connection = net.connect({path: this.path});                                                                  // 4659
                                                                                                                       // 4660
    this.connection.on('error', function(e){                                                                           // 4661
        console.error('IPC Connection Error', e);                                                                      // 4662
        _this._timeout();                                                                                              // 4663
    });                                                                                                                // 4664
                                                                                                                       // 4665
    this.connection.on('end', function(){                                                                              // 4666
        _this._timeout();                                                                                              // 4667
    });                                                                                                                // 4668
                                                                                                                       // 4669
                                                                                                                       // 4670
    // LISTEN FOR CONNECTION RESPONSES                                                                                 // 4671
    this.connection.on('data', function(data) {                                                                        // 4672
        /*jshint maxcomplexity: 6 */                                                                                   // 4673
                                                                                                                       // 4674
        _this._parseResponse(data.toString()).forEach(function(result){                                                // 4675
                                                                                                                       // 4676
            var id = null;                                                                                             // 4677
                                                                                                                       // 4678
            // get the id which matches the returned id                                                                // 4679
            if(utils.isArray(result)) {                                                                                // 4680
                result.forEach(function(load){                                                                         // 4681
                    if(_this.responseCallbacks[load.id])                                                               // 4682
                        id = load.id;                                                                                  // 4683
                });                                                                                                    // 4684
            } else {                                                                                                   // 4685
                id = result.id;                                                                                        // 4686
            }                                                                                                          // 4687
                                                                                                                       // 4688
            // fire the callback                                                                                       // 4689
            if(_this.responseCallbacks[id]) {                                                                          // 4690
                _this.responseCallbacks[id](null, result);                                                             // 4691
                delete _this.responseCallbacks[id];                                                                    // 4692
            }                                                                                                          // 4693
        });                                                                                                            // 4694
    });                                                                                                                // 4695
};                                                                                                                     // 4696
                                                                                                                       // 4697
/**                                                                                                                    // 4698
Will parse the response and make an array out of it.                                                                   // 4699
                                                                                                                       // 4700
@method _parseResponse                                                                                                 // 4701
@param {String} data                                                                                                   // 4702
*/                                                                                                                     // 4703
IpcProvider.prototype._parseResponse = function(data) {                                                                // 4704
    var _this = this,                                                                                                  // 4705
        returnValues = [];                                                                                             // 4706
                                                                                                                       // 4707
    // DE-CHUNKER                                                                                                      // 4708
    var dechunkedData = data                                                                                           // 4709
        .replace(/\}[\n\r]?\{/g,'}|--|{') // }{                                                                        // 4710
        .replace(/\}\][\n\r]?\[\{/g,'}]|--|[{') // }][{                                                                // 4711
        .replace(/\}[\n\r]?\[\{/g,'}|--|[{') // }[{                                                                    // 4712
        .replace(/\}\][\n\r]?\{/g,'}]|--|{') // }]{                                                                    // 4713
        .split('|--|');                                                                                                // 4714
                                                                                                                       // 4715
    dechunkedData.forEach(function(data){                                                                              // 4716
                                                                                                                       // 4717
        // prepend the last chunk                                                                                      // 4718
        if(_this.lastChunk)                                                                                            // 4719
            data = _this.lastChunk + data;                                                                             // 4720
                                                                                                                       // 4721
        var result = null;                                                                                             // 4722
                                                                                                                       // 4723
        try {                                                                                                          // 4724
            result = JSON.parse(data);                                                                                 // 4725
                                                                                                                       // 4726
        } catch(e) {                                                                                                   // 4727
                                                                                                                       // 4728
            _this.lastChunk = data;                                                                                    // 4729
                                                                                                                       // 4730
            // start timeout to cancel all requests                                                                    // 4731
            clearTimeout(_this.lastChunkTimeout);                                                                      // 4732
            _this.lastChunkTimeout = setTimeout(function(){                                                            // 4733
                _this._timeout();                                                                                      // 4734
                throw errors.InvalidResponse(data);                                                                    // 4735
            }, 1000 * 15);                                                                                             // 4736
                                                                                                                       // 4737
            return;                                                                                                    // 4738
        }                                                                                                              // 4739
                                                                                                                       // 4740
        // cancel timeout and set chunk to null                                                                        // 4741
        clearTimeout(_this.lastChunkTimeout);                                                                          // 4742
        _this.lastChunk = null;                                                                                        // 4743
                                                                                                                       // 4744
        if(result)                                                                                                     // 4745
            returnValues.push(result);                                                                                 // 4746
    });                                                                                                                // 4747
                                                                                                                       // 4748
    return returnValues;                                                                                               // 4749
};                                                                                                                     // 4750
                                                                                                                       // 4751
                                                                                                                       // 4752
/**                                                                                                                    // 4753
Get the adds a callback to the responseCallbacks object,                                                               // 4754
which will be called if a response matching the response Id will arrive.                                               // 4755
                                                                                                                       // 4756
@method _addResponseCallback                                                                                           // 4757
*/                                                                                                                     // 4758
IpcProvider.prototype._addResponseCallback = function(payload, callback) {                                             // 4759
    var id = payload.id || payload[0].id;                                                                              // 4760
    var method = payload.method || payload[0].method;                                                                  // 4761
                                                                                                                       // 4762
    this.responseCallbacks[id] = callback;                                                                             // 4763
    this.responseCallbacks[id].method = method;                                                                        // 4764
};                                                                                                                     // 4765
                                                                                                                       // 4766
/**                                                                                                                    // 4767
Timeout all requests when the end/error event is fired                                                                 // 4768
                                                                                                                       // 4769
@method _timeout                                                                                                       // 4770
*/                                                                                                                     // 4771
IpcProvider.prototype._timeout = function() {                                                                          // 4772
    for(var key in this.responseCallbacks) {                                                                           // 4773
        if(this.responseCallbacks.hasOwnProperty(key)){                                                                // 4774
            this.responseCallbacks[key](errors.InvalidConnection('on IPC'));                                           // 4775
            delete this.responseCallbacks[key];                                                                        // 4776
        }                                                                                                              // 4777
    }                                                                                                                  // 4778
};                                                                                                                     // 4779
                                                                                                                       // 4780
                                                                                                                       // 4781
/**                                                                                                                    // 4782
Check if the current connection is still valid.                                                                        // 4783
                                                                                                                       // 4784
@method isConnected                                                                                                    // 4785
*/                                                                                                                     // 4786
IpcProvider.prototype.isConnected = function() {                                                                       // 4787
    var _this = this;                                                                                                  // 4788
                                                                                                                       // 4789
    // try reconnect, when connection is gone                                                                          // 4790
    if(!_this.connection.writable)                                                                                     // 4791
        _this.connection.connect({path: _this.path});                                                                  // 4792
                                                                                                                       // 4793
    return !!this.connection.writable;                                                                                 // 4794
};                                                                                                                     // 4795
                                                                                                                       // 4796
IpcProvider.prototype.send = function (payload) {                                                                      // 4797
                                                                                                                       // 4798
    if(this.connection.writeSync) {                                                                                    // 4799
        var result;                                                                                                    // 4800
                                                                                                                       // 4801
        // try reconnect, when connection is gone                                                                      // 4802
        if(!this.connection.writable)                                                                                  // 4803
            this.connection.connect({path: this.path});                                                                // 4804
                                                                                                                       // 4805
        var data = this.connection.writeSync(JSON.stringify(payload));                                                 // 4806
                                                                                                                       // 4807
        try {                                                                                                          // 4808
            result = JSON.parse(data);                                                                                 // 4809
        } catch(e) {                                                                                                   // 4810
            throw errors.InvalidResponse(data);                                                                        // 4811
        }                                                                                                              // 4812
                                                                                                                       // 4813
        return result;                                                                                                 // 4814
                                                                                                                       // 4815
    } else {                                                                                                           // 4816
        throw new Error('You tried to send "'+ payload.method +'" synchronously. Synchronous requests are not supported by the IPC provider.');
    }                                                                                                                  // 4818
};                                                                                                                     // 4819
                                                                                                                       // 4820
IpcProvider.prototype.sendAsync = function (payload, callback) {                                                       // 4821
    // try reconnect, when connection is gone                                                                          // 4822
    if(!this.connection.writable)                                                                                      // 4823
        this.connection.connect({path: this.path});                                                                    // 4824
                                                                                                                       // 4825
                                                                                                                       // 4826
    this.connection.write(JSON.stringify(payload));                                                                    // 4827
    this._addResponseCallback(payload, callback);                                                                      // 4828
};                                                                                                                     // 4829
                                                                                                                       // 4830
module.exports = IpcProvider;                                                                                          // 4831
                                                                                                                       // 4832
                                                                                                                       // 4833
},{"../utils/utils":20,"./errors":26}],35:[function(require,module,exports){                                           // 4834
/*                                                                                                                     // 4835
    This file is part of web3.js.                                                                                      // 4836
                                                                                                                       // 4837
    web3.js is free software: you can redistribute it and/or modify                                                    // 4838
    it under the terms of the GNU Lesser General Public License as published by                                        // 4839
    the Free Software Foundation, either version 3 of the License, or                                                  // 4840
    (at your option) any later version.                                                                                // 4841
                                                                                                                       // 4842
    web3.js is distributed in the hope that it will be useful,                                                         // 4843
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4844
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4845
    GNU Lesser General Public License for more details.                                                                // 4846
                                                                                                                       // 4847
    You should have received a copy of the GNU Lesser General Public License                                           // 4848
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4849
*/                                                                                                                     // 4850
/** @file jsonrpc.js                                                                                                   // 4851
 * @authors:                                                                                                           // 4852
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 4853
 *   Aaron Kumavis <aaron@kumavis.me>                                                                                  // 4854
 * @date 2015                                                                                                          // 4855
 */                                                                                                                    // 4856
                                                                                                                       // 4857
// Initialize Jsonrpc as a simple object with utility functions.                                                       // 4858
var Jsonrpc = {                                                                                                        // 4859
    messageId: 0                                                                                                       // 4860
};                                                                                                                     // 4861
                                                                                                                       // 4862
/**                                                                                                                    // 4863
 * Should be called to valid json create payload object                                                                // 4864
 *                                                                                                                     // 4865
 * @method toPayload                                                                                                   // 4866
 * @param {Function} method of jsonrpc call, required                                                                  // 4867
 * @param {Array} params, an array of method params, optional                                                          // 4868
 * @returns {Object} valid jsonrpc payload object                                                                      // 4869
 */                                                                                                                    // 4870
Jsonrpc.toPayload = function (method, params) {                                                                        // 4871
    if (!method)                                                                                                       // 4872
        console.error('jsonrpc method should be specified!');                                                          // 4873
                                                                                                                       // 4874
    // advance message ID                                                                                              // 4875
    Jsonrpc.messageId++;                                                                                               // 4876
                                                                                                                       // 4877
    return {                                                                                                           // 4878
        jsonrpc: '2.0',                                                                                                // 4879
        id: Jsonrpc.messageId,                                                                                         // 4880
        method: method,                                                                                                // 4881
        params: params || []                                                                                           // 4882
    };                                                                                                                 // 4883
};                                                                                                                     // 4884
                                                                                                                       // 4885
/**                                                                                                                    // 4886
 * Should be called to check if jsonrpc response is valid                                                              // 4887
 *                                                                                                                     // 4888
 * @method isValidResponse                                                                                             // 4889
 * @param {Object}                                                                                                     // 4890
 * @returns {Boolean} true if response is valid, otherwise false                                                       // 4891
 */                                                                                                                    // 4892
Jsonrpc.isValidResponse = function (response) {                                                                        // 4893
    return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);          // 4894
                                                                                                                       // 4895
    function validateSingleMessage(message){                                                                           // 4896
      return !!message &&                                                                                              // 4897
        !message.error &&                                                                                              // 4898
        message.jsonrpc === '2.0' &&                                                                                   // 4899
        typeof message.id === 'number' &&                                                                              // 4900
        message.result !== undefined; // only undefined is not valid json object                                       // 4901
    }                                                                                                                  // 4902
};                                                                                                                     // 4903
                                                                                                                       // 4904
/**                                                                                                                    // 4905
 * Should be called to create batch payload object                                                                     // 4906
 *                                                                                                                     // 4907
 * @method toBatchPayload                                                                                              // 4908
 * @param {Array} messages, an array of objects with method (required) and params (optional) fields                    // 4909
 * @returns {Array} batch payload                                                                                      // 4910
 */                                                                                                                    // 4911
Jsonrpc.toBatchPayload = function (messages) {                                                                         // 4912
    return messages.map(function (message) {                                                                           // 4913
        return Jsonrpc.toPayload(message.method, message.params);                                                      // 4914
    });                                                                                                                // 4915
};                                                                                                                     // 4916
                                                                                                                       // 4917
module.exports = Jsonrpc;                                                                                              // 4918
                                                                                                                       // 4919
                                                                                                                       // 4920
},{}],36:[function(require,module,exports){                                                                            // 4921
/*                                                                                                                     // 4922
    This file is part of web3.js.                                                                                      // 4923
                                                                                                                       // 4924
    web3.js is free software: you can redistribute it and/or modify                                                    // 4925
    it under the terms of the GNU Lesser General Public License as published by                                        // 4926
    the Free Software Foundation, either version 3 of the License, or                                                  // 4927
    (at your option) any later version.                                                                                // 4928
                                                                                                                       // 4929
    web3.js is distributed in the hope that it will be useful,                                                         // 4930
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4931
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4932
    GNU Lesser General Public License for more details.                                                                // 4933
                                                                                                                       // 4934
    You should have received a copy of the GNU Lesser General Public License                                           // 4935
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4936
*/                                                                                                                     // 4937
/**                                                                                                                    // 4938
 * @file method.js                                                                                                     // 4939
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 4940
 * @date 2015                                                                                                          // 4941
 */                                                                                                                    // 4942
                                                                                                                       // 4943
var utils = require('../utils/utils');                                                                                 // 4944
var errors = require('./errors');                                                                                      // 4945
                                                                                                                       // 4946
var Method = function (options) {                                                                                      // 4947
    this.name = options.name;                                                                                          // 4948
    this.call = options.call;                                                                                          // 4949
    this.params = options.params || 0;                                                                                 // 4950
    this.inputFormatter = options.inputFormatter;                                                                      // 4951
    this.outputFormatter = options.outputFormatter;                                                                    // 4952
    this.requestManager = null;                                                                                        // 4953
};                                                                                                                     // 4954
                                                                                                                       // 4955
Method.prototype.setRequestManager = function (rm) {                                                                   // 4956
    this.requestManager = rm;                                                                                          // 4957
};                                                                                                                     // 4958
                                                                                                                       // 4959
/**                                                                                                                    // 4960
 * Should be used to determine name of the jsonrpc method based on arguments                                           // 4961
 *                                                                                                                     // 4962
 * @method getCall                                                                                                     // 4963
 * @param {Array} arguments                                                                                            // 4964
 * @return {String} name of jsonrpc method                                                                             // 4965
 */                                                                                                                    // 4966
Method.prototype.getCall = function (args) {                                                                           // 4967
    return utils.isFunction(this.call) ? this.call(args) : this.call;                                                  // 4968
};                                                                                                                     // 4969
                                                                                                                       // 4970
/**                                                                                                                    // 4971
 * Should be used to extract callback from array of arguments. Modifies input param                                    // 4972
 *                                                                                                                     // 4973
 * @method extractCallback                                                                                             // 4974
 * @param {Array} arguments                                                                                            // 4975
 * @return {Function|Null} callback, if exists                                                                         // 4976
 */                                                                                                                    // 4977
Method.prototype.extractCallback = function (args) {                                                                   // 4978
    if (utils.isFunction(args[args.length - 1])) {                                                                     // 4979
        return args.pop(); // modify the args array!                                                                   // 4980
    }                                                                                                                  // 4981
};                                                                                                                     // 4982
                                                                                                                       // 4983
/**                                                                                                                    // 4984
 * Should be called to check if the number of arguments is correct                                                     // 4985
 *                                                                                                                     // 4986
 * @method validateArgs                                                                                                // 4987
 * @param {Array} arguments                                                                                            // 4988
 * @throws {Error} if it is not                                                                                        // 4989
 */                                                                                                                    // 4990
Method.prototype.validateArgs = function (args) {                                                                      // 4991
    if (args.length !== this.params) {                                                                                 // 4992
        throw errors.InvalidNumberOfRPCParams();                                                                       // 4993
    }                                                                                                                  // 4994
};                                                                                                                     // 4995
                                                                                                                       // 4996
/**                                                                                                                    // 4997
 * Should be called to format input args of method                                                                     // 4998
 *                                                                                                                     // 4999
 * @method formatInput                                                                                                 // 5000
 * @param {Array}                                                                                                      // 5001
 * @return {Array}                                                                                                     // 5002
 */                                                                                                                    // 5003
Method.prototype.formatInput = function (args) {                                                                       // 5004
    if (!this.inputFormatter) {                                                                                        // 5005
        return args;                                                                                                   // 5006
    }                                                                                                                  // 5007
                                                                                                                       // 5008
    return this.inputFormatter.map(function (formatter, index) {                                                       // 5009
        return formatter ? formatter(args[index]) : args[index];                                                       // 5010
    });                                                                                                                // 5011
};                                                                                                                     // 5012
                                                                                                                       // 5013
/**                                                                                                                    // 5014
 * Should be called to format output(result) of method                                                                 // 5015
 *                                                                                                                     // 5016
 * @method formatOutput                                                                                                // 5017
 * @param {Object}                                                                                                     // 5018
 * @return {Object}                                                                                                    // 5019
 */                                                                                                                    // 5020
Method.prototype.formatOutput = function (result) {                                                                    // 5021
    return this.outputFormatter && result ? this.outputFormatter(result) : result;                                     // 5022
};                                                                                                                     // 5023
                                                                                                                       // 5024
/**                                                                                                                    // 5025
 * Should create payload from given input args                                                                         // 5026
 *                                                                                                                     // 5027
 * @method toPayload                                                                                                   // 5028
 * @param {Array} args                                                                                                 // 5029
 * @return {Object}                                                                                                    // 5030
 */                                                                                                                    // 5031
Method.prototype.toPayload = function (args) {                                                                         // 5032
    var call = this.getCall(args);                                                                                     // 5033
    var callback = this.extractCallback(args);                                                                         // 5034
    var params = this.formatInput(args);                                                                               // 5035
    this.validateArgs(params);                                                                                         // 5036
                                                                                                                       // 5037
    return {                                                                                                           // 5038
        method: call,                                                                                                  // 5039
        params: params,                                                                                                // 5040
        callback: callback                                                                                             // 5041
    };                                                                                                                 // 5042
};                                                                                                                     // 5043
                                                                                                                       // 5044
Method.prototype.attachToObject = function (obj) {                                                                     // 5045
    var func = this.buildCall();                                                                                       // 5046
    func.call = this.call; // TODO!!! that's ugly. filter.js uses it                                                   // 5047
    var name = this.name.split('.');                                                                                   // 5048
    if (name.length > 1) {                                                                                             // 5049
        obj[name[0]] = obj[name[0]] || {};                                                                             // 5050
        obj[name[0]][name[1]] = func;                                                                                  // 5051
    } else {                                                                                                           // 5052
        obj[name[0]] = func;                                                                                           // 5053
    }                                                                                                                  // 5054
};                                                                                                                     // 5055
                                                                                                                       // 5056
Method.prototype.buildCall = function() {                                                                              // 5057
    var method = this;                                                                                                 // 5058
    var send = function () {                                                                                           // 5059
        var payload = method.toPayload(Array.prototype.slice.call(arguments));                                         // 5060
        if (payload.callback) {                                                                                        // 5061
            return method.requestManager.sendAsync(payload, function (err, result) {                                   // 5062
                payload.callback(err, method.formatOutput(result));                                                    // 5063
            });                                                                                                        // 5064
        }                                                                                                              // 5065
        return method.formatOutput(method.requestManager.send(payload));                                               // 5066
    };                                                                                                                 // 5067
    send.request = this.request.bind(this);                                                                            // 5068
    return send;                                                                                                       // 5069
};                                                                                                                     // 5070
                                                                                                                       // 5071
/**                                                                                                                    // 5072
 * Should be called to create pure JSONRPC request which can be used in batch request                                  // 5073
 *                                                                                                                     // 5074
 * @method request                                                                                                     // 5075
 * @param {...} params                                                                                                 // 5076
 * @return {Object} jsonrpc request                                                                                    // 5077
 */                                                                                                                    // 5078
Method.prototype.request = function () {                                                                               // 5079
    var payload = this.toPayload(Array.prototype.slice.call(arguments));                                               // 5080
    payload.format = this.formatOutput.bind(this);                                                                     // 5081
    return payload;                                                                                                    // 5082
};                                                                                                                     // 5083
                                                                                                                       // 5084
module.exports = Method;                                                                                               // 5085
                                                                                                                       // 5086
},{"../utils/utils":20,"./errors":26}],37:[function(require,module,exports){                                           // 5087
/*                                                                                                                     // 5088
    This file is part of web3.js.                                                                                      // 5089
                                                                                                                       // 5090
    web3.js is free software: you can redistribute it and/or modify                                                    // 5091
    it under the terms of the GNU Lesser General Public License as published by                                        // 5092
    the Free Software Foundation, either version 3 of the License, or                                                  // 5093
    (at your option) any later version.                                                                                // 5094
                                                                                                                       // 5095
    web3.js is distributed in the hope that it will be useful,                                                         // 5096
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5097
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5098
    GNU Lesser General Public License for more details.                                                                // 5099
                                                                                                                       // 5100
    You should have received a copy of the GNU Lesser General Public License                                           // 5101
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5102
*/                                                                                                                     // 5103
/** @file db.js                                                                                                        // 5104
 * @authors:                                                                                                           // 5105
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 5106
 * @date 2015                                                                                                          // 5107
 */                                                                                                                    // 5108
                                                                                                                       // 5109
var Method = require('../method');                                                                                     // 5110
                                                                                                                       // 5111
var DB = function (web3) {                                                                                             // 5112
    this._requestManager = web3._requestManager;                                                                       // 5113
                                                                                                                       // 5114
    var self = this;                                                                                                   // 5115
                                                                                                                       // 5116
    methods().forEach(function(method) {                                                                               // 5117
        method.attachToObject(self);                                                                                   // 5118
        method.setRequestManager(web3._requestManager);                                                                // 5119
    });                                                                                                                // 5120
};                                                                                                                     // 5121
                                                                                                                       // 5122
var methods = function () {                                                                                            // 5123
    var putString = new Method({                                                                                       // 5124
        name: 'putString',                                                                                             // 5125
        call: 'db_putString',                                                                                          // 5126
        params: 3                                                                                                      // 5127
    });                                                                                                                // 5128
                                                                                                                       // 5129
    var getString = new Method({                                                                                       // 5130
        name: 'getString',                                                                                             // 5131
        call: 'db_getString',                                                                                          // 5132
        params: 2                                                                                                      // 5133
    });                                                                                                                // 5134
                                                                                                                       // 5135
    var putHex = new Method({                                                                                          // 5136
        name: 'putHex',                                                                                                // 5137
        call: 'db_putHex',                                                                                             // 5138
        params: 3                                                                                                      // 5139
    });                                                                                                                // 5140
                                                                                                                       // 5141
    var getHex = new Method({                                                                                          // 5142
        name: 'getHex',                                                                                                // 5143
        call: 'db_getHex',                                                                                             // 5144
        params: 2                                                                                                      // 5145
    });                                                                                                                // 5146
                                                                                                                       // 5147
    return [                                                                                                           // 5148
        putString, getString, putHex, getHex                                                                           // 5149
    ];                                                                                                                 // 5150
};                                                                                                                     // 5151
                                                                                                                       // 5152
module.exports = DB;                                                                                                   // 5153
                                                                                                                       // 5154
},{"../method":36}],38:[function(require,module,exports){                                                              // 5155
/*                                                                                                                     // 5156
    This file is part of web3.js.                                                                                      // 5157
                                                                                                                       // 5158
    web3.js is free software: you can redistribute it and/or modify                                                    // 5159
    it under the terms of the GNU Lesser General Public License as published by                                        // 5160
    the Free Software Foundation, either version 3 of the License, or                                                  // 5161
    (at your option) any later version.                                                                                // 5162
                                                                                                                       // 5163
    web3.js is distributed in the hope that it will be useful,                                                         // 5164
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5165
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5166
    GNU Lesser General Public License for more details.                                                                // 5167
                                                                                                                       // 5168
    You should have received a copy of the GNU Lesser General Public License                                           // 5169
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5170
*/                                                                                                                     // 5171
/**                                                                                                                    // 5172
 * @file eth.js                                                                                                        // 5173
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 5174
 * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 5175
 * @date 2015                                                                                                          // 5176
 */                                                                                                                    // 5177
                                                                                                                       // 5178
"use strict";                                                                                                          // 5179
                                                                                                                       // 5180
var formatters = require('../formatters');                                                                             // 5181
var utils = require('../../utils/utils');                                                                              // 5182
var Method = require('../method');                                                                                     // 5183
var Property = require('../property');                                                                                 // 5184
var c = require('../../utils/config');                                                                                 // 5185
var Contract = require('../contract');                                                                                 // 5186
var watches = require('./watches');                                                                                    // 5187
var Filter = require('../filter');                                                                                     // 5188
var IsSyncing = require('../syncing');                                                                                 // 5189
var namereg = require('../namereg');                                                                                   // 5190
var Iban = require('../iban');                                                                                         // 5191
var transfer = require('../transfer');                                                                                 // 5192
                                                                                                                       // 5193
var blockCall = function (args) {                                                                                      // 5194
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? "eth_getBlockByHash" : "eth_getBlockByNumber";   // 5195
};                                                                                                                     // 5196
                                                                                                                       // 5197
var transactionFromBlockCall = function (args) {                                                                       // 5198
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';
};                                                                                                                     // 5200
                                                                                                                       // 5201
var uncleCall = function (args) {                                                                                      // 5202
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';
};                                                                                                                     // 5204
                                                                                                                       // 5205
var getBlockTransactionCountCall = function (args) {                                                                   // 5206
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';
};                                                                                                                     // 5208
                                                                                                                       // 5209
var uncleCountCall = function (args) {                                                                                 // 5210
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';
};                                                                                                                     // 5212
                                                                                                                       // 5213
function Eth(web3) {                                                                                                   // 5214
    this._requestManager = web3._requestManager;                                                                       // 5215
                                                                                                                       // 5216
    var self = this;                                                                                                   // 5217
                                                                                                                       // 5218
    methods().forEach(function(method) {                                                                               // 5219
        method.attachToObject(self);                                                                                   // 5220
        method.setRequestManager(self._requestManager);                                                                // 5221
    });                                                                                                                // 5222
                                                                                                                       // 5223
    properties().forEach(function(p) {                                                                                 // 5224
        p.attachToObject(self);                                                                                        // 5225
        p.setRequestManager(self._requestManager);                                                                     // 5226
    });                                                                                                                // 5227
                                                                                                                       // 5228
                                                                                                                       // 5229
    this.iban = Iban;                                                                                                  // 5230
    this.sendIBANTransaction = transfer.bind(null, this);                                                              // 5231
}                                                                                                                      // 5232
                                                                                                                       // 5233
Object.defineProperty(Eth.prototype, 'defaultBlock', {                                                                 // 5234
    get: function () {                                                                                                 // 5235
        return c.defaultBlock;                                                                                         // 5236
    },                                                                                                                 // 5237
    set: function (val) {                                                                                              // 5238
        c.defaultBlock = val;                                                                                          // 5239
        return val;                                                                                                    // 5240
    }                                                                                                                  // 5241
});                                                                                                                    // 5242
                                                                                                                       // 5243
Object.defineProperty(Eth.prototype, 'defaultAccount', {                                                               // 5244
    get: function () {                                                                                                 // 5245
        return c.defaultAccount;                                                                                       // 5246
    },                                                                                                                 // 5247
    set: function (val) {                                                                                              // 5248
        c.defaultAccount = val;                                                                                        // 5249
        return val;                                                                                                    // 5250
    }                                                                                                                  // 5251
});                                                                                                                    // 5252
                                                                                                                       // 5253
var methods = function () {                                                                                            // 5254
    var getBalance = new Method({                                                                                      // 5255
        name: 'getBalance',                                                                                            // 5256
        call: 'eth_getBalance',                                                                                        // 5257
        params: 2,                                                                                                     // 5258
        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],               // 5259
        outputFormatter: formatters.outputBigNumberFormatter                                                           // 5260
    });                                                                                                                // 5261
                                                                                                                       // 5262
    var getStorageAt = new Method({                                                                                    // 5263
        name: 'getStorageAt',                                                                                          // 5264
        call: 'eth_getStorageAt',                                                                                      // 5265
        params: 3,                                                                                                     // 5266
        inputFormatter: [null, utils.toHex, formatters.inputDefaultBlockNumberFormatter]                               // 5267
    });                                                                                                                // 5268
                                                                                                                       // 5269
    var getCode = new Method({                                                                                         // 5270
        name: 'getCode',                                                                                               // 5271
        call: 'eth_getCode',                                                                                           // 5272
        params: 2,                                                                                                     // 5273
        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]                // 5274
    });                                                                                                                // 5275
                                                                                                                       // 5276
    var getBlock = new Method({                                                                                        // 5277
        name: 'getBlock',                                                                                              // 5278
        call: blockCall,                                                                                               // 5279
        params: 2,                                                                                                     // 5280
        inputFormatter: [formatters.inputBlockNumberFormatter, function (val) { return !!val; }],                      // 5281
        outputFormatter: formatters.outputBlockFormatter                                                               // 5282
    });                                                                                                                // 5283
                                                                                                                       // 5284
    var getUncle = new Method({                                                                                        // 5285
        name: 'getUncle',                                                                                              // 5286
        call: uncleCall,                                                                                               // 5287
        params: 2,                                                                                                     // 5288
        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],                                           // 5289
        outputFormatter: formatters.outputBlockFormatter,                                                              // 5290
                                                                                                                       // 5291
    });                                                                                                                // 5292
                                                                                                                       // 5293
    var getCompilers = new Method({                                                                                    // 5294
        name: 'getCompilers',                                                                                          // 5295
        call: 'eth_getCompilers',                                                                                      // 5296
        params: 0                                                                                                      // 5297
    });                                                                                                                // 5298
                                                                                                                       // 5299
    var getBlockTransactionCount = new Method({                                                                        // 5300
        name: 'getBlockTransactionCount',                                                                              // 5301
        call: getBlockTransactionCountCall,                                                                            // 5302
        params: 1,                                                                                                     // 5303
        inputFormatter: [formatters.inputBlockNumberFormatter],                                                        // 5304
        outputFormatter: utils.toDecimal                                                                               // 5305
    });                                                                                                                // 5306
                                                                                                                       // 5307
    var getBlockUncleCount = new Method({                                                                              // 5308
        name: 'getBlockUncleCount',                                                                                    // 5309
        call: uncleCountCall,                                                                                          // 5310
        params: 1,                                                                                                     // 5311
        inputFormatter: [formatters.inputBlockNumberFormatter],                                                        // 5312
        outputFormatter: utils.toDecimal                                                                               // 5313
    });                                                                                                                // 5314
                                                                                                                       // 5315
    var getTransaction = new Method({                                                                                  // 5316
        name: 'getTransaction',                                                                                        // 5317
        call: 'eth_getTransactionByHash',                                                                              // 5318
        params: 1,                                                                                                     // 5319
        outputFormatter: formatters.outputTransactionFormatter                                                         // 5320
    });                                                                                                                // 5321
                                                                                                                       // 5322
    var getTransactionFromBlock = new Method({                                                                         // 5323
        name: 'getTransactionFromBlock',                                                                               // 5324
        call: transactionFromBlockCall,                                                                                // 5325
        params: 2,                                                                                                     // 5326
        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],                                           // 5327
        outputFormatter: formatters.outputTransactionFormatter                                                         // 5328
    });                                                                                                                // 5329
                                                                                                                       // 5330
    var getTransactionReceipt = new Method({                                                                           // 5331
        name: 'getTransactionReceipt',                                                                                 // 5332
        call: 'eth_getTransactionReceipt',                                                                             // 5333
        params: 1,                                                                                                     // 5334
        outputFormatter: formatters.outputTransactionReceiptFormatter                                                  // 5335
    });                                                                                                                // 5336
                                                                                                                       // 5337
    var getTransactionCount = new Method({                                                                             // 5338
        name: 'getTransactionCount',                                                                                   // 5339
        call: 'eth_getTransactionCount',                                                                               // 5340
        params: 2,                                                                                                     // 5341
        inputFormatter: [null, formatters.inputDefaultBlockNumberFormatter],                                           // 5342
        outputFormatter: utils.toDecimal                                                                               // 5343
    });                                                                                                                // 5344
                                                                                                                       // 5345
    var sendRawTransaction = new Method({                                                                              // 5346
        name: 'sendRawTransaction',                                                                                    // 5347
        call: 'eth_sendRawTransaction',                                                                                // 5348
        params: 1,                                                                                                     // 5349
        inputFormatter: [null]                                                                                         // 5350
    });                                                                                                                // 5351
                                                                                                                       // 5352
    var sendTransaction = new Method({                                                                                 // 5353
        name: 'sendTransaction',                                                                                       // 5354
        call: 'eth_sendTransaction',                                                                                   // 5355
        params: 1,                                                                                                     // 5356
        inputFormatter: [formatters.inputTransactionFormatter]                                                         // 5357
    });                                                                                                                // 5358
                                                                                                                       // 5359
    var signTransaction = new Method({                                                                                 // 5360
        name: 'signTransaction',                                                                                       // 5361
        call: 'eth_signTransaction',                                                                                   // 5362
        params: 1,                                                                                                     // 5363
        inputFormatter: [formatters.inputTransactionFormatter]                                                         // 5364
    });                                                                                                                // 5365
                                                                                                                       // 5366
    var sign = new Method({                                                                                            // 5367
        name: 'sign',                                                                                                  // 5368
        call: 'eth_sign',                                                                                              // 5369
        params: 2,                                                                                                     // 5370
        inputFormatter: [formatters.inputAddressFormatter, null]                                                       // 5371
    });                                                                                                                // 5372
                                                                                                                       // 5373
    var call = new Method({                                                                                            // 5374
        name: 'call',                                                                                                  // 5375
        call: 'eth_call',                                                                                              // 5376
        params: 2,                                                                                                     // 5377
        inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter]                   // 5378
    });                                                                                                                // 5379
                                                                                                                       // 5380
    var estimateGas = new Method({                                                                                     // 5381
        name: 'estimateGas',                                                                                           // 5382
        call: 'eth_estimateGas',                                                                                       // 5383
        params: 1,                                                                                                     // 5384
        inputFormatter: [formatters.inputCallFormatter],                                                               // 5385
        outputFormatter: utils.toDecimal                                                                               // 5386
    });                                                                                                                // 5387
                                                                                                                       // 5388
    var compileSolidity = new Method({                                                                                 // 5389
        name: 'compile.solidity',                                                                                      // 5390
        call: 'eth_compileSolidity',                                                                                   // 5391
        params: 1                                                                                                      // 5392
    });                                                                                                                // 5393
                                                                                                                       // 5394
    var compileLLL = new Method({                                                                                      // 5395
        name: 'compile.lll',                                                                                           // 5396
        call: 'eth_compileLLL',                                                                                        // 5397
        params: 1                                                                                                      // 5398
    });                                                                                                                // 5399
                                                                                                                       // 5400
    var compileSerpent = new Method({                                                                                  // 5401
        name: 'compile.serpent',                                                                                       // 5402
        call: 'eth_compileSerpent',                                                                                    // 5403
        params: 1                                                                                                      // 5404
    });                                                                                                                // 5405
                                                                                                                       // 5406
    var submitWork = new Method({                                                                                      // 5407
        name: 'submitWork',                                                                                            // 5408
        call: 'eth_submitWork',                                                                                        // 5409
        params: 3                                                                                                      // 5410
    });                                                                                                                // 5411
                                                                                                                       // 5412
    var getWork = new Method({                                                                                         // 5413
        name: 'getWork',                                                                                               // 5414
        call: 'eth_getWork',                                                                                           // 5415
        params: 0                                                                                                      // 5416
    });                                                                                                                // 5417
                                                                                                                       // 5418
    return [                                                                                                           // 5419
        getBalance,                                                                                                    // 5420
        getStorageAt,                                                                                                  // 5421
        getCode,                                                                                                       // 5422
        getBlock,                                                                                                      // 5423
        getUncle,                                                                                                      // 5424
        getCompilers,                                                                                                  // 5425
        getBlockTransactionCount,                                                                                      // 5426
        getBlockUncleCount,                                                                                            // 5427
        getTransaction,                                                                                                // 5428
        getTransactionFromBlock,                                                                                       // 5429
        getTransactionReceipt,                                                                                         // 5430
        getTransactionCount,                                                                                           // 5431
        call,                                                                                                          // 5432
        estimateGas,                                                                                                   // 5433
        sendRawTransaction,                                                                                            // 5434
        signTransaction,                                                                                               // 5435
        sendTransaction,                                                                                               // 5436
        sign,                                                                                                          // 5437
        compileSolidity,                                                                                               // 5438
        compileLLL,                                                                                                    // 5439
        compileSerpent,                                                                                                // 5440
        submitWork,                                                                                                    // 5441
        getWork                                                                                                        // 5442
    ];                                                                                                                 // 5443
};                                                                                                                     // 5444
                                                                                                                       // 5445
                                                                                                                       // 5446
var properties = function () {                                                                                         // 5447
    return [                                                                                                           // 5448
        new Property({                                                                                                 // 5449
            name: 'coinbase',                                                                                          // 5450
            getter: 'eth_coinbase'                                                                                     // 5451
        }),                                                                                                            // 5452
        new Property({                                                                                                 // 5453
            name: 'mining',                                                                                            // 5454
            getter: 'eth_mining'                                                                                       // 5455
        }),                                                                                                            // 5456
        new Property({                                                                                                 // 5457
            name: 'hashrate',                                                                                          // 5458
            getter: 'eth_hashrate',                                                                                    // 5459
            outputFormatter: utils.toDecimal                                                                           // 5460
        }),                                                                                                            // 5461
        new Property({                                                                                                 // 5462
            name: 'syncing',                                                                                           // 5463
            getter: 'eth_syncing',                                                                                     // 5464
            outputFormatter: formatters.outputSyncingFormatter                                                         // 5465
        }),                                                                                                            // 5466
        new Property({                                                                                                 // 5467
            name: 'gasPrice',                                                                                          // 5468
            getter: 'eth_gasPrice',                                                                                    // 5469
            outputFormatter: formatters.outputBigNumberFormatter                                                       // 5470
        }),                                                                                                            // 5471
        new Property({                                                                                                 // 5472
            name: 'accounts',                                                                                          // 5473
            getter: 'eth_accounts'                                                                                     // 5474
        }),                                                                                                            // 5475
        new Property({                                                                                                 // 5476
            name: 'blockNumber',                                                                                       // 5477
            getter: 'eth_blockNumber',                                                                                 // 5478
            outputFormatter: utils.toDecimal                                                                           // 5479
        }),                                                                                                            // 5480
        new Property({                                                                                                 // 5481
            name: 'protocolVersion',                                                                                   // 5482
            getter: 'eth_protocolVersion'                                                                              // 5483
        })                                                                                                             // 5484
    ];                                                                                                                 // 5485
};                                                                                                                     // 5486
                                                                                                                       // 5487
Eth.prototype.contract = function (abi) {                                                                              // 5488
    var factory = new Contract(this, abi);                                                                             // 5489
    return factory;                                                                                                    // 5490
};                                                                                                                     // 5491
                                                                                                                       // 5492
Eth.prototype.filter = function (options, callback, filterCreationErrorCallback) {                                     // 5493
    return new Filter(options, 'eth', this._requestManager, watches.eth(), formatters.outputLogFormatter, callback, filterCreationErrorCallback);
};                                                                                                                     // 5495
                                                                                                                       // 5496
Eth.prototype.namereg = function () {                                                                                  // 5497
    return this.contract(namereg.global.abi).at(namereg.global.address);                                               // 5498
};                                                                                                                     // 5499
                                                                                                                       // 5500
Eth.prototype.icapNamereg = function () {                                                                              // 5501
    return this.contract(namereg.icap.abi).at(namereg.icap.address);                                                   // 5502
};                                                                                                                     // 5503
                                                                                                                       // 5504
Eth.prototype.isSyncing = function (callback) {                                                                        // 5505
    return new IsSyncing(this._requestManager, callback);                                                              // 5506
};                                                                                                                     // 5507
                                                                                                                       // 5508
module.exports = Eth;                                                                                                  // 5509
                                                                                                                       // 5510
},{"../../utils/config":18,"../../utils/utils":20,"../contract":25,"../filter":29,"../formatters":30,"../iban":33,"../method":36,"../namereg":44,"../property":45,"../syncing":48,"../transfer":49,"./watches":43}],39:[function(require,module,exports){
/*                                                                                                                     // 5512
    This file is part of web3.js.                                                                                      // 5513
                                                                                                                       // 5514
    web3.js is free software: you can redistribute it and/or modify                                                    // 5515
    it under the terms of the GNU Lesser General Public License as published by                                        // 5516
    the Free Software Foundation, either version 3 of the License, or                                                  // 5517
    (at your option) any later version.                                                                                // 5518
                                                                                                                       // 5519
    web3.js is distributed in the hope that it will be useful,                                                         // 5520
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5521
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5522
    GNU Lesser General Public License for more details.                                                                // 5523
                                                                                                                       // 5524
    You should have received a copy of the GNU Lesser General Public License                                           // 5525
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5526
*/                                                                                                                     // 5527
/** @file eth.js                                                                                                       // 5528
 * @authors:                                                                                                           // 5529
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 5530
 * @date 2015                                                                                                          // 5531
 */                                                                                                                    // 5532
                                                                                                                       // 5533
var utils = require('../../utils/utils');                                                                              // 5534
var Property = require('../property');                                                                                 // 5535
                                                                                                                       // 5536
var Net = function (web3) {                                                                                            // 5537
    this._requestManager = web3._requestManager;                                                                       // 5538
                                                                                                                       // 5539
    var self = this;                                                                                                   // 5540
                                                                                                                       // 5541
    properties().forEach(function(p) {                                                                                 // 5542
        p.attachToObject(self);                                                                                        // 5543
        p.setRequestManager(web3._requestManager);                                                                     // 5544
    });                                                                                                                // 5545
};                                                                                                                     // 5546
                                                                                                                       // 5547
/// @returns an array of objects describing web3.eth api properties                                                    // 5548
var properties = function () {                                                                                         // 5549
    return [                                                                                                           // 5550
        new Property({                                                                                                 // 5551
            name: 'listening',                                                                                         // 5552
            getter: 'net_listening'                                                                                    // 5553
        }),                                                                                                            // 5554
        new Property({                                                                                                 // 5555
            name: 'peerCount',                                                                                         // 5556
            getter: 'net_peerCount',                                                                                   // 5557
            outputFormatter: utils.toDecimal                                                                           // 5558
        })                                                                                                             // 5559
    ];                                                                                                                 // 5560
};                                                                                                                     // 5561
                                                                                                                       // 5562
module.exports = Net;                                                                                                  // 5563
                                                                                                                       // 5564
},{"../../utils/utils":20,"../property":45}],40:[function(require,module,exports){                                     // 5565
/*                                                                                                                     // 5566
    This file is part of web3.js.                                                                                      // 5567
                                                                                                                       // 5568
    web3.js is free software: you can redistribute it and/or modify                                                    // 5569
    it under the terms of the GNU Lesser General Public License as published by                                        // 5570
    the Free Software Foundation, either version 3 of the License, or                                                  // 5571
    (at your option) any later version.                                                                                // 5572
                                                                                                                       // 5573
    web3.js is distributed in the hope that it will be useful,                                                         // 5574
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5575
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5576
    GNU Lesser General Public License for more details.                                                                // 5577
                                                                                                                       // 5578
    You should have received a copy of the GNU Lesser General Public License                                           // 5579
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5580
*/                                                                                                                     // 5581
/**                                                                                                                    // 5582
 * @file eth.js                                                                                                        // 5583
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 5584
 * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 5585
 * @date 2015                                                                                                          // 5586
 */                                                                                                                    // 5587
                                                                                                                       // 5588
"use strict";                                                                                                          // 5589
                                                                                                                       // 5590
var Method = require('../method');                                                                                     // 5591
var Property = require('../property');                                                                                 // 5592
var formatters = require('../formatters');                                                                             // 5593
                                                                                                                       // 5594
function Personal(web3) {                                                                                              // 5595
    this._requestManager = web3._requestManager;                                                                       // 5596
                                                                                                                       // 5597
    var self = this;                                                                                                   // 5598
                                                                                                                       // 5599
    methods().forEach(function(method) {                                                                               // 5600
        method.attachToObject(self);                                                                                   // 5601
        method.setRequestManager(self._requestManager);                                                                // 5602
    });                                                                                                                // 5603
                                                                                                                       // 5604
    properties().forEach(function(p) {                                                                                 // 5605
        p.attachToObject(self);                                                                                        // 5606
        p.setRequestManager(self._requestManager);                                                                     // 5607
    });                                                                                                                // 5608
}                                                                                                                      // 5609
                                                                                                                       // 5610
var methods = function () {                                                                                            // 5611
    var newAccount = new Method({                                                                                      // 5612
        name: 'newAccount',                                                                                            // 5613
        call: 'personal_newAccount',                                                                                   // 5614
        params: 1,                                                                                                     // 5615
        inputFormatter: [null]                                                                                         // 5616
    });                                                                                                                // 5617
                                                                                                                       // 5618
    var importRawKey = new Method({                                                                                    // 5619
        name: 'importRawKey',                                                                                          // 5620
		call: 'personal_importRawKey',                                                                                       // 5621
		params: 2                                                                                                            // 5622
    });                                                                                                                // 5623
                                                                                                                       // 5624
    var sign = new Method({                                                                                            // 5625
        name: 'sign',                                                                                                  // 5626
		call: 'personal_sign',                                                                                               // 5627
		params: 3,                                                                                                           // 5628
		inputFormatter: [null, formatters.inputAddressFormatter, null]                                                       // 5629
    });                                                                                                                // 5630
                                                                                                                       // 5631
    var ecRecover = new Method({                                                                                       // 5632
        name: 'ecRecover',                                                                                             // 5633
		call: 'personal_ecRecover',                                                                                          // 5634
		params: 2                                                                                                            // 5635
    });                                                                                                                // 5636
                                                                                                                       // 5637
    var unlockAccount = new Method({                                                                                   // 5638
        name: 'unlockAccount',                                                                                         // 5639
        call: 'personal_unlockAccount',                                                                                // 5640
        params: 3,                                                                                                     // 5641
        inputFormatter: [formatters.inputAddressFormatter, null, null]                                                 // 5642
    });                                                                                                                // 5643
                                                                                                                       // 5644
    var sendTransaction = new Method({                                                                                 // 5645
        name: 'sendTransaction',                                                                                       // 5646
        call: 'personal_sendTransaction',                                                                              // 5647
        params: 2,                                                                                                     // 5648
        inputFormatter: [formatters.inputTransactionFormatter, null]                                                   // 5649
    });                                                                                                                // 5650
                                                                                                                       // 5651
    var lockAccount = new Method({                                                                                     // 5652
        name: 'lockAccount',                                                                                           // 5653
        call: 'personal_lockAccount',                                                                                  // 5654
        params: 1,                                                                                                     // 5655
        inputFormatter: [formatters.inputAddressFormatter]                                                             // 5656
    });                                                                                                                // 5657
                                                                                                                       // 5658
    return [                                                                                                           // 5659
        newAccount,                                                                                                    // 5660
        importRawKey,                                                                                                  // 5661
        unlockAccount,                                                                                                 // 5662
        ecRecover,                                                                                                     // 5663
        sign,                                                                                                          // 5664
        sendTransaction,                                                                                               // 5665
        lockAccount                                                                                                    // 5666
    ];                                                                                                                 // 5667
};                                                                                                                     // 5668
                                                                                                                       // 5669
var properties = function () {                                                                                         // 5670
    return [                                                                                                           // 5671
        new Property({                                                                                                 // 5672
            name: 'listAccounts',                                                                                      // 5673
            getter: 'personal_listAccounts'                                                                            // 5674
        })                                                                                                             // 5675
    ];                                                                                                                 // 5676
};                                                                                                                     // 5677
                                                                                                                       // 5678
                                                                                                                       // 5679
module.exports = Personal;                                                                                             // 5680
                                                                                                                       // 5681
},{"../formatters":30,"../method":36,"../property":45}],41:[function(require,module,exports){                          // 5682
/*                                                                                                                     // 5683
    This file is part of web3.js.                                                                                      // 5684
                                                                                                                       // 5685
    web3.js is free software: you can redistribute it and/or modify                                                    // 5686
    it under the terms of the GNU Lesser General Public License as published by                                        // 5687
    the Free Software Foundation, either version 3 of the License, or                                                  // 5688
    (at your option) any later version.                                                                                // 5689
                                                                                                                       // 5690
    web3.js is distributed in the hope that it will be useful,                                                         // 5691
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5692
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5693
    GNU Lesser General Public License for more details.                                                                // 5694
                                                                                                                       // 5695
    You should have received a copy of the GNU Lesser General Public License                                           // 5696
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5697
*/                                                                                                                     // 5698
/** @file shh.js                                                                                                       // 5699
 * @authors:                                                                                                           // 5700
 *   Fabian Vogelsteller <fabian@ethereum.org>                                                                         // 5701
 *   Marek Kotewicz <marek@ethcore.io>                                                                                 // 5702
 * @date 2017                                                                                                          // 5703
 */                                                                                                                    // 5704
                                                                                                                       // 5705
var Method = require('../method');                                                                                     // 5706
var Filter = require('../filter');                                                                                     // 5707
var watches = require('./watches');                                                                                    // 5708
                                                                                                                       // 5709
var Shh = function (web3) {                                                                                            // 5710
    this._requestManager = web3._requestManager;                                                                       // 5711
                                                                                                                       // 5712
    var self = this;                                                                                                   // 5713
                                                                                                                       // 5714
    methods().forEach(function(method) {                                                                               // 5715
        method.attachToObject(self);                                                                                   // 5716
        method.setRequestManager(self._requestManager);                                                                // 5717
    });                                                                                                                // 5718
};                                                                                                                     // 5719
                                                                                                                       // 5720
Shh.prototype.newMessageFilter = function (options, callback, filterCreationErrorCallback) {                           // 5721
    return new Filter(options, 'shh', this._requestManager, watches.shh(), null, callback, filterCreationErrorCallback);
};                                                                                                                     // 5723
                                                                                                                       // 5724
var methods = function () {                                                                                            // 5725
                                                                                                                       // 5726
    return [                                                                                                           // 5727
        new Method({                                                                                                   // 5728
            name: 'version',                                                                                           // 5729
            call: 'shh_version',                                                                                       // 5730
            params: 0                                                                                                  // 5731
        }),                                                                                                            // 5732
        new Method({                                                                                                   // 5733
            name: 'info',                                                                                              // 5734
            call: 'shh_info',                                                                                          // 5735
            params: 0                                                                                                  // 5736
        }),                                                                                                            // 5737
        new Method({                                                                                                   // 5738
            name: 'setMaxMessageSize',                                                                                 // 5739
            call: 'shh_setMaxMessageSize',                                                                             // 5740
            params: 1                                                                                                  // 5741
        }),                                                                                                            // 5742
        new Method({                                                                                                   // 5743
            name: 'setMinPoW',                                                                                         // 5744
            call: 'shh_setMinPoW',                                                                                     // 5745
            params: 1                                                                                                  // 5746
        }),                                                                                                            // 5747
        new Method({                                                                                                   // 5748
            name: 'markTrustedPeer',                                                                                   // 5749
            call: 'shh_markTrustedPeer',                                                                               // 5750
            params: 1                                                                                                  // 5751
        }),                                                                                                            // 5752
        new Method({                                                                                                   // 5753
            name: 'newKeyPair',                                                                                        // 5754
            call: 'shh_newKeyPair',                                                                                    // 5755
            params: 0                                                                                                  // 5756
        }),                                                                                                            // 5757
        new Method({                                                                                                   // 5758
            name: 'addPrivateKey',                                                                                     // 5759
            call: 'shh_addPrivateKey',                                                                                 // 5760
            params: 1                                                                                                  // 5761
        }),                                                                                                            // 5762
        new Method({                                                                                                   // 5763
            name: 'deleteKeyPair',                                                                                     // 5764
            call: 'shh_deleteKeyPair',                                                                                 // 5765
            params: 1                                                                                                  // 5766
        }),                                                                                                            // 5767
        new Method({                                                                                                   // 5768
            name: 'hasKeyPair',                                                                                        // 5769
            call: 'shh_hasKeyPair',                                                                                    // 5770
            params: 1                                                                                                  // 5771
        }),                                                                                                            // 5772
        new Method({                                                                                                   // 5773
            name: 'getPublicKey',                                                                                      // 5774
            call: 'shh_getPublicKey',                                                                                  // 5775
            params: 1                                                                                                  // 5776
        }),                                                                                                            // 5777
        new Method({                                                                                                   // 5778
            name: 'getPrivateKey',                                                                                     // 5779
            call: 'shh_getPrivateKey',                                                                                 // 5780
            params: 1                                                                                                  // 5781
        }),                                                                                                            // 5782
        new Method({                                                                                                   // 5783
            name: 'newSymKey',                                                                                         // 5784
            call: 'shh_newSymKey',                                                                                     // 5785
            params: 0                                                                                                  // 5786
        }),                                                                                                            // 5787
        new Method({                                                                                                   // 5788
            name: 'addSymKey',                                                                                         // 5789
            call: 'shh_addSymKey',                                                                                     // 5790
            params: 1                                                                                                  // 5791
        }),                                                                                                            // 5792
        new Method({                                                                                                   // 5793
            name: 'generateSymKeyFromPassword',                                                                        // 5794
            call: 'shh_generateSymKeyFromPassword',                                                                    // 5795
            params: 1                                                                                                  // 5796
        }),                                                                                                            // 5797
        new Method({                                                                                                   // 5798
            name: 'hasSymKey',                                                                                         // 5799
            call: 'shh_hasSymKey',                                                                                     // 5800
            params: 1                                                                                                  // 5801
        }),                                                                                                            // 5802
        new Method({                                                                                                   // 5803
            name: 'getSymKey',                                                                                         // 5804
            call: 'shh_getSymKey',                                                                                     // 5805
            params: 1                                                                                                  // 5806
        }),                                                                                                            // 5807
        new Method({                                                                                                   // 5808
            name: 'deleteSymKey',                                                                                      // 5809
            call: 'shh_deleteSymKey',                                                                                  // 5810
            params: 1                                                                                                  // 5811
        }),                                                                                                            // 5812
                                                                                                                       // 5813
        // subscribe and unsubscribe missing                                                                           // 5814
                                                                                                                       // 5815
        new Method({                                                                                                   // 5816
            name: 'post',                                                                                              // 5817
            call: 'shh_post',                                                                                          // 5818
            params: 1,                                                                                                 // 5819
            inputFormatter: [null]                                                                                     // 5820
        })                                                                                                             // 5821
    ];                                                                                                                 // 5822
};                                                                                                                     // 5823
                                                                                                                       // 5824
module.exports = Shh;                                                                                                  // 5825
                                                                                                                       // 5826
                                                                                                                       // 5827
},{"../filter":29,"../method":36,"./watches":43}],42:[function(require,module,exports){                                // 5828
/*                                                                                                                     // 5829
    This file is part of web3.js.                                                                                      // 5830
                                                                                                                       // 5831
    web3.js is free software: you can redistribute it and/or modify                                                    // 5832
    it under the terms of the GNU Lesser General Public License as published by                                        // 5833
    the Free Software Foundation, either version 3 of the License, or                                                  // 5834
    (at your option) any later version.                                                                                // 5835
                                                                                                                       // 5836
    web3.js is distributed in the hope that it will be useful,                                                         // 5837
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5838
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5839
    GNU Lesser General Public License for more details.                                                                // 5840
                                                                                                                       // 5841
    You should have received a copy of the GNU Lesser General Public License                                           // 5842
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5843
*/                                                                                                                     // 5844
/**                                                                                                                    // 5845
 * @file bzz.js                                                                                                        // 5846
 * @author Alex Beregszaszi <alex@rtfs.hu>                                                                             // 5847
 * @date 2016                                                                                                          // 5848
 *                                                                                                                     // 5849
 * Reference: https://github.com/ethereum/go-ethereum/blob/swarm/internal/web3ext/web3ext.go#L33                       // 5850
 */                                                                                                                    // 5851
                                                                                                                       // 5852
"use strict";                                                                                                          // 5853
                                                                                                                       // 5854
var Method = require('../method');                                                                                     // 5855
var Property = require('../property');                                                                                 // 5856
                                                                                                                       // 5857
function Swarm(web3) {                                                                                                 // 5858
    this._requestManager = web3._requestManager;                                                                       // 5859
                                                                                                                       // 5860
    var self = this;                                                                                                   // 5861
                                                                                                                       // 5862
    methods().forEach(function(method) {                                                                               // 5863
        method.attachToObject(self);                                                                                   // 5864
        method.setRequestManager(self._requestManager);                                                                // 5865
    });                                                                                                                // 5866
                                                                                                                       // 5867
    properties().forEach(function(p) {                                                                                 // 5868
        p.attachToObject(self);                                                                                        // 5869
        p.setRequestManager(self._requestManager);                                                                     // 5870
    });                                                                                                                // 5871
}                                                                                                                      // 5872
                                                                                                                       // 5873
var methods = function () {                                                                                            // 5874
    var blockNetworkRead = new Method({                                                                                // 5875
        name: 'blockNetworkRead',                                                                                      // 5876
        call: 'bzz_blockNetworkRead',                                                                                  // 5877
        params: 1,                                                                                                     // 5878
        inputFormatter: [null]                                                                                         // 5879
    });                                                                                                                // 5880
                                                                                                                       // 5881
    var syncEnabled = new Method({                                                                                     // 5882
        name: 'syncEnabled',                                                                                           // 5883
        call: 'bzz_syncEnabled',                                                                                       // 5884
        params: 1,                                                                                                     // 5885
        inputFormatter: [null]                                                                                         // 5886
    });                                                                                                                // 5887
                                                                                                                       // 5888
    var swapEnabled = new Method({                                                                                     // 5889
        name: 'swapEnabled',                                                                                           // 5890
        call: 'bzz_swapEnabled',                                                                                       // 5891
        params: 1,                                                                                                     // 5892
        inputFormatter: [null]                                                                                         // 5893
    });                                                                                                                // 5894
                                                                                                                       // 5895
    var download = new Method({                                                                                        // 5896
        name: 'download',                                                                                              // 5897
        call: 'bzz_download',                                                                                          // 5898
        params: 2,                                                                                                     // 5899
        inputFormatter: [null, null]                                                                                   // 5900
    });                                                                                                                // 5901
                                                                                                                       // 5902
    var upload = new Method({                                                                                          // 5903
        name: 'upload',                                                                                                // 5904
        call: 'bzz_upload',                                                                                            // 5905
        params: 2,                                                                                                     // 5906
        inputFormatter: [null, null]                                                                                   // 5907
    });                                                                                                                // 5908
                                                                                                                       // 5909
    var retrieve = new Method({                                                                                        // 5910
        name: 'retrieve',                                                                                              // 5911
        call: 'bzz_retrieve',                                                                                          // 5912
        params: 1,                                                                                                     // 5913
        inputFormatter: [null]                                                                                         // 5914
    });                                                                                                                // 5915
                                                                                                                       // 5916
    var store = new Method({                                                                                           // 5917
        name: 'store',                                                                                                 // 5918
        call: 'bzz_store',                                                                                             // 5919
        params: 2,                                                                                                     // 5920
        inputFormatter: [null, null]                                                                                   // 5921
    });                                                                                                                // 5922
                                                                                                                       // 5923
    var get = new Method({                                                                                             // 5924
        name: 'get',                                                                                                   // 5925
        call: 'bzz_get',                                                                                               // 5926
        params: 1,                                                                                                     // 5927
        inputFormatter: [null]                                                                                         // 5928
    });                                                                                                                // 5929
                                                                                                                       // 5930
    var put = new Method({                                                                                             // 5931
        name: 'put',                                                                                                   // 5932
        call: 'bzz_put',                                                                                               // 5933
        params: 2,                                                                                                     // 5934
        inputFormatter: [null, null]                                                                                   // 5935
    });                                                                                                                // 5936
                                                                                                                       // 5937
    var modify = new Method({                                                                                          // 5938
        name: 'modify',                                                                                                // 5939
        call: 'bzz_modify',                                                                                            // 5940
        params: 4,                                                                                                     // 5941
        inputFormatter: [null, null, null, null]                                                                       // 5942
    });                                                                                                                // 5943
                                                                                                                       // 5944
    return [                                                                                                           // 5945
        blockNetworkRead,                                                                                              // 5946
        syncEnabled,                                                                                                   // 5947
        swapEnabled,                                                                                                   // 5948
        download,                                                                                                      // 5949
        upload,                                                                                                        // 5950
        retrieve,                                                                                                      // 5951
        store,                                                                                                         // 5952
        get,                                                                                                           // 5953
        put,                                                                                                           // 5954
        modify                                                                                                         // 5955
    ];                                                                                                                 // 5956
};                                                                                                                     // 5957
                                                                                                                       // 5958
var properties = function () {                                                                                         // 5959
    return [                                                                                                           // 5960
        new Property({                                                                                                 // 5961
            name: 'hive',                                                                                              // 5962
            getter: 'bzz_hive'                                                                                         // 5963
        }),                                                                                                            // 5964
        new Property({                                                                                                 // 5965
            name: 'info',                                                                                              // 5966
            getter: 'bzz_info'                                                                                         // 5967
        })                                                                                                             // 5968
    ];                                                                                                                 // 5969
};                                                                                                                     // 5970
                                                                                                                       // 5971
                                                                                                                       // 5972
module.exports = Swarm;                                                                                                // 5973
                                                                                                                       // 5974
},{"../method":36,"../property":45}],43:[function(require,module,exports){                                             // 5975
/*                                                                                                                     // 5976
    This file is part of web3.js.                                                                                      // 5977
                                                                                                                       // 5978
    web3.js is free software: you can redistribute it and/or modify                                                    // 5979
    it under the terms of the GNU Lesser General Public License as published by                                        // 5980
    the Free Software Foundation, either version 3 of the License, or                                                  // 5981
    (at your option) any later version.                                                                                // 5982
                                                                                                                       // 5983
    web3.js is distributed in the hope that it will be useful,                                                         // 5984
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5985
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5986
    GNU Lesser General Public License for more details.                                                                // 5987
                                                                                                                       // 5988
    You should have received a copy of the GNU Lesser General Public License                                           // 5989
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5990
*/                                                                                                                     // 5991
/** @file watches.js                                                                                                   // 5992
 * @authors:                                                                                                           // 5993
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 5994
 * @date 2015                                                                                                          // 5995
 */                                                                                                                    // 5996
                                                                                                                       // 5997
var Method = require('../method');                                                                                     // 5998
                                                                                                                       // 5999
/// @returns an array of objects describing web3.eth.filter api methods                                                // 6000
var eth = function () {                                                                                                // 6001
    var newFilterCall = function (args) {                                                                              // 6002
        var type = args[0];                                                                                            // 6003
                                                                                                                       // 6004
        switch(type) {                                                                                                 // 6005
            case 'latest':                                                                                             // 6006
                args.shift();                                                                                          // 6007
                this.params = 0;                                                                                       // 6008
                return 'eth_newBlockFilter';                                                                           // 6009
            case 'pending':                                                                                            // 6010
                args.shift();                                                                                          // 6011
                this.params = 0;                                                                                       // 6012
                return 'eth_newPendingTransactionFilter';                                                              // 6013
            default:                                                                                                   // 6014
                return 'eth_newFilter';                                                                                // 6015
        }                                                                                                              // 6016
    };                                                                                                                 // 6017
                                                                                                                       // 6018
    var newFilter = new Method({                                                                                       // 6019
        name: 'newFilter',                                                                                             // 6020
        call: newFilterCall,                                                                                           // 6021
        params: 1                                                                                                      // 6022
    });                                                                                                                // 6023
                                                                                                                       // 6024
    var uninstallFilter = new Method({                                                                                 // 6025
        name: 'uninstallFilter',                                                                                       // 6026
        call: 'eth_uninstallFilter',                                                                                   // 6027
        params: 1                                                                                                      // 6028
    });                                                                                                                // 6029
                                                                                                                       // 6030
    var getLogs = new Method({                                                                                         // 6031
        name: 'getLogs',                                                                                               // 6032
        call: 'eth_getFilterLogs',                                                                                     // 6033
        params: 1                                                                                                      // 6034
    });                                                                                                                // 6035
                                                                                                                       // 6036
    var poll = new Method({                                                                                            // 6037
        name: 'poll',                                                                                                  // 6038
        call: 'eth_getFilterChanges',                                                                                  // 6039
        params: 1                                                                                                      // 6040
    });                                                                                                                // 6041
                                                                                                                       // 6042
    return [                                                                                                           // 6043
        newFilter,                                                                                                     // 6044
        uninstallFilter,                                                                                               // 6045
        getLogs,                                                                                                       // 6046
        poll                                                                                                           // 6047
    ];                                                                                                                 // 6048
};                                                                                                                     // 6049
                                                                                                                       // 6050
/// @returns an array of objects describing web3.shh.watch api methods                                                 // 6051
var shh = function () {                                                                                                // 6052
                                                                                                                       // 6053
    return [                                                                                                           // 6054
        new Method({                                                                                                   // 6055
            name: 'newFilter',                                                                                         // 6056
            call: 'shh_newMessageFilter',                                                                              // 6057
            params: 1                                                                                                  // 6058
        }),                                                                                                            // 6059
        new Method({                                                                                                   // 6060
            name: 'uninstallFilter',                                                                                   // 6061
            call: 'shh_deleteMessageFilter',                                                                           // 6062
            params: 1                                                                                                  // 6063
        }),                                                                                                            // 6064
        new Method({                                                                                                   // 6065
            name: 'getLogs',                                                                                           // 6066
            call: 'shh_getFilterMessages',                                                                             // 6067
            params: 1                                                                                                  // 6068
        }),                                                                                                            // 6069
        new Method({                                                                                                   // 6070
            name: 'poll',                                                                                              // 6071
            call: 'shh_getFilterMessages',                                                                             // 6072
            params: 1                                                                                                  // 6073
        })                                                                                                             // 6074
    ];                                                                                                                 // 6075
};                                                                                                                     // 6076
                                                                                                                       // 6077
module.exports = {                                                                                                     // 6078
    eth: eth,                                                                                                          // 6079
    shh: shh                                                                                                           // 6080
};                                                                                                                     // 6081
                                                                                                                       // 6082
                                                                                                                       // 6083
},{"../method":36}],44:[function(require,module,exports){                                                              // 6084
/*                                                                                                                     // 6085
    This file is part of web3.js.                                                                                      // 6086
                                                                                                                       // 6087
    web3.js is free software: you can redistribute it and/or modify                                                    // 6088
    it under the terms of the GNU Lesser General Public License as published by                                        // 6089
    the Free Software Foundation, either version 3 of the License, or                                                  // 6090
    (at your option) any later version.                                                                                // 6091
                                                                                                                       // 6092
    web3.js is distributed in the hope that it will be useful,                                                         // 6093
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 6094
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 6095
    GNU Lesser General Public License for more details.                                                                // 6096
                                                                                                                       // 6097
    You should have received a copy of the GNU Lesser General Public License                                           // 6098
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 6099
*/                                                                                                                     // 6100
/**                                                                                                                    // 6101
 * @file namereg.js                                                                                                    // 6102
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 6103
 * @date 2015                                                                                                          // 6104
 */                                                                                                                    // 6105
                                                                                                                       // 6106
var globalRegistrarAbi = require('../contracts/GlobalRegistrar.json');                                                 // 6107
var icapRegistrarAbi= require('../contracts/ICAPRegistrar.json');                                                      // 6108
                                                                                                                       // 6109
var globalNameregAddress = '0xc6d9d2cd449a754c494264e1809c50e34d64562b';                                               // 6110
var icapNameregAddress = '0xa1a111bc074c9cfa781f0c38e63bd51c91b8af00';                                                 // 6111
                                                                                                                       // 6112
module.exports = {                                                                                                     // 6113
    global: {                                                                                                          // 6114
        abi: globalRegistrarAbi,                                                                                       // 6115
        address: globalNameregAddress                                                                                  // 6116
    },                                                                                                                 // 6117
    icap: {                                                                                                            // 6118
        abi: icapRegistrarAbi,                                                                                         // 6119
        address: icapNameregAddress                                                                                    // 6120
    }                                                                                                                  // 6121
};                                                                                                                     // 6122
                                                                                                                       // 6123
                                                                                                                       // 6124
},{"../contracts/GlobalRegistrar.json":1,"../contracts/ICAPRegistrar.json":2}],45:[function(require,module,exports){   // 6125
/*                                                                                                                     // 6126
    This file is part of web3.js.                                                                                      // 6127
                                                                                                                       // 6128
    web3.js is free software: you can redistribute it and/or modify                                                    // 6129
    it under the terms of the GNU Lesser General Public License as published by                                        // 6130
    the Free Software Foundation, either version 3 of the License, or                                                  // 6131
    (at your option) any later version.                                                                                // 6132
                                                                                                                       // 6133
    web3.js is distributed in the hope that it will be useful,                                                         // 6134
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 6135
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 6136
    GNU Lesser General Public License for more details.                                                                // 6137
                                                                                                                       // 6138
    You should have received a copy of the GNU Lesser General Public License                                           // 6139
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 6140
*/                                                                                                                     // 6141
/**                                                                                                                    // 6142
 * @file property.js                                                                                                   // 6143
 * @author Fabian Vogelsteller <fabian@frozeman.de>                                                                    // 6144
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 6145
 * @date 2015                                                                                                          // 6146
 */                                                                                                                    // 6147
                                                                                                                       // 6148
var utils = require('../utils/utils');                                                                                 // 6149
                                                                                                                       // 6150
var Property = function (options) {                                                                                    // 6151
    this.name = options.name;                                                                                          // 6152
    this.getter = options.getter;                                                                                      // 6153
    this.setter = options.setter;                                                                                      // 6154
    this.outputFormatter = options.outputFormatter;                                                                    // 6155
    this.inputFormatter = options.inputFormatter;                                                                      // 6156
    this.requestManager = null;                                                                                        // 6157
};                                                                                                                     // 6158
                                                                                                                       // 6159
Property.prototype.setRequestManager = function (rm) {                                                                 // 6160
    this.requestManager = rm;                                                                                          // 6161
};                                                                                                                     // 6162
                                                                                                                       // 6163
/**                                                                                                                    // 6164
 * Should be called to format input args of method                                                                     // 6165
 *                                                                                                                     // 6166
 * @method formatInput                                                                                                 // 6167
 * @param {Array}                                                                                                      // 6168
 * @return {Array}                                                                                                     // 6169
 */                                                                                                                    // 6170
Property.prototype.formatInput = function (arg) {                                                                      // 6171
    return this.inputFormatter ? this.inputFormatter(arg) : arg;                                                       // 6172
};                                                                                                                     // 6173
                                                                                                                       // 6174
/**                                                                                                                    // 6175
 * Should be called to format output(result) of method                                                                 // 6176
 *                                                                                                                     // 6177
 * @method formatOutput                                                                                                // 6178
 * @param {Object}                                                                                                     // 6179
 * @return {Object}                                                                                                    // 6180
 */                                                                                                                    // 6181
Property.prototype.formatOutput = function (result) {                                                                  // 6182
    return this.outputFormatter && result !== null && result !== undefined ? this.outputFormatter(result) : result;    // 6183
};                                                                                                                     // 6184
                                                                                                                       // 6185
/**                                                                                                                    // 6186
 * Should be used to extract callback from array of arguments. Modifies input param                                    // 6187
 *                                                                                                                     // 6188
 * @method extractCallback                                                                                             // 6189
 * @param {Array} arguments                                                                                            // 6190
 * @return {Function|Null} callback, if exists                                                                         // 6191
 */                                                                                                                    // 6192
Property.prototype.extractCallback = function (args) {                                                                 // 6193
    if (utils.isFunction(args[args.length - 1])) {                                                                     // 6194
        return args.pop(); // modify the args array!                                                                   // 6195
    }                                                                                                                  // 6196
};                                                                                                                     // 6197
                                                                                                                       // 6198
                                                                                                                       // 6199
/**                                                                                                                    // 6200
 * Should attach function to method                                                                                    // 6201
 *                                                                                                                     // 6202
 * @method attachToObject                                                                                              // 6203
 * @param {Object}                                                                                                     // 6204
 * @param {Function}                                                                                                   // 6205
 */                                                                                                                    // 6206
Property.prototype.attachToObject = function (obj) {                                                                   // 6207
    var proto = {                                                                                                      // 6208
        get: this.buildGet(),                                                                                          // 6209
        enumerable: true                                                                                               // 6210
    };                                                                                                                 // 6211
                                                                                                                       // 6212
    var names = this.name.split('.');                                                                                  // 6213
    var name = names[0];                                                                                               // 6214
    if (names.length > 1) {                                                                                            // 6215
        obj[names[0]] = obj[names[0]] || {};                                                                           // 6216
        obj = obj[names[0]];                                                                                           // 6217
        name = names[1];                                                                                               // 6218
    }                                                                                                                  // 6219
                                                                                                                       // 6220
    Object.defineProperty(obj, name, proto);                                                                           // 6221
    obj[asyncGetterName(name)] = this.buildAsyncGet();                                                                 // 6222
};                                                                                                                     // 6223
                                                                                                                       // 6224
var asyncGetterName = function (name) {                                                                                // 6225
    return 'get' + name.charAt(0).toUpperCase() + name.slice(1);                                                       // 6226
};                                                                                                                     // 6227
                                                                                                                       // 6228
Property.prototype.buildGet = function () {                                                                            // 6229
    var property = this;                                                                                               // 6230
    return function get() {                                                                                            // 6231
        return property.formatOutput(property.requestManager.send({                                                    // 6232
            method: property.getter                                                                                    // 6233
        }));                                                                                                           // 6234
    };                                                                                                                 // 6235
};                                                                                                                     // 6236
                                                                                                                       // 6237
Property.prototype.buildAsyncGet = function () {                                                                       // 6238
    var property = this;                                                                                               // 6239
    var get = function (callback) {                                                                                    // 6240
        property.requestManager.sendAsync({                                                                            // 6241
            method: property.getter                                                                                    // 6242
        }, function (err, result) {                                                                                    // 6243
            callback(err, property.formatOutput(result));                                                              // 6244
        });                                                                                                            // 6245
    };                                                                                                                 // 6246
    get.request = this.request.bind(this);                                                                             // 6247
    return get;                                                                                                        // 6248
};                                                                                                                     // 6249
                                                                                                                       // 6250
/**                                                                                                                    // 6251
 * Should be called to create pure JSONRPC request which can be used in batch request                                  // 6252
 *                                                                                                                     // 6253
 * @method request                                                                                                     // 6254
 * @param {...} params                                                                                                 // 6255
 * @return {Object} jsonrpc request                                                                                    // 6256
 */                                                                                                                    // 6257
Property.prototype.request = function () {                                                                             // 6258
    var payload = {                                                                                                    // 6259
        method: this.getter,                                                                                           // 6260
        params: [],                                                                                                    // 6261
        callback: this.extractCallback(Array.prototype.slice.call(arguments))                                          // 6262
    };                                                                                                                 // 6263
    payload.format = this.formatOutput.bind(this);                                                                     // 6264
    return payload;                                                                                                    // 6265
};                                                                                                                     // 6266
                                                                                                                       // 6267
module.exports = Property;                                                                                             // 6268
                                                                                                                       // 6269
                                                                                                                       // 6270
},{"../utils/utils":20}],46:[function(require,module,exports){                                                         // 6271
/*                                                                                                                     // 6272
    This file is part of web3.js.                                                                                      // 6273
                                                                                                                       // 6274
    web3.js is free software: you can redistribute it and/or modify                                                    // 6275
    it under the terms of the GNU Lesser General Public License as published by                                        // 6276
    the Free Software Foundation, either version 3 of the License, or                                                  // 6277
    (at your option) any later version.                                                                                // 6278
                                                                                                                       // 6279
    web3.js is distributed in the hope that it will be useful,                                                         // 6280
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 6281
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 6282
    GNU Lesser General Public License for more details.                                                                // 6283
                                                                                                                       // 6284
    You should have received a copy of the GNU Lesser General Public License                                           // 6285
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 6286
*/                                                                                                                     // 6287
/**                                                                                                                    // 6288
 * @file requestmanager.js                                                                                             // 6289
 * @author Jeffrey Wilcke <jeff@ethdev.com>                                                                            // 6290
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 6291
 * @author Marian Oancea <marian@ethdev.com>                                                                           // 6292
 * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 6293
 * @author Gav Wood <g@ethdev.com>                                                                                     // 6294
 * @date 2014                                                                                                          // 6295
 */                                                                                                                    // 6296
                                                                                                                       // 6297
var Jsonrpc = require('./jsonrpc');                                                                                    // 6298
var utils = require('../utils/utils');                                                                                 // 6299
var c = require('../utils/config');                                                                                    // 6300
var errors = require('./errors');                                                                                      // 6301
                                                                                                                       // 6302
/**                                                                                                                    // 6303
 * It's responsible for passing messages to providers                                                                  // 6304
 * It's also responsible for polling the ethereum node for incoming messages                                           // 6305
 * Default poll timeout is 1 second                                                                                    // 6306
 * Singleton                                                                                                           // 6307
 */                                                                                                                    // 6308
var RequestManager = function (provider) {                                                                             // 6309
    this.provider = provider;                                                                                          // 6310
    this.polls = {};                                                                                                   // 6311
    this.timeout = null;                                                                                               // 6312
};                                                                                                                     // 6313
                                                                                                                       // 6314
/**                                                                                                                    // 6315
 * Should be used to synchronously send request                                                                        // 6316
 *                                                                                                                     // 6317
 * @method send                                                                                                        // 6318
 * @param {Object} data                                                                                                // 6319
 * @return {Object}                                                                                                    // 6320
 */                                                                                                                    // 6321
RequestManager.prototype.send = function (data) {                                                                      // 6322
    if (!this.provider) {                                                                                              // 6323
        console.error(errors.InvalidProvider());                                                                       // 6324
        return null;                                                                                                   // 6325
    }                                                                                                                  // 6326
                                                                                                                       // 6327
    var payload = Jsonrpc.toPayload(data.method, data.params);                                                         // 6328
    var result = this.provider.send(payload);                                                                          // 6329
                                                                                                                       // 6330
    if (!Jsonrpc.isValidResponse(result)) {                                                                            // 6331
        throw errors.InvalidResponse(result);                                                                          // 6332
    }                                                                                                                  // 6333
                                                                                                                       // 6334
    return result.result;                                                                                              // 6335
};                                                                                                                     // 6336
                                                                                                                       // 6337
/**                                                                                                                    // 6338
 * Should be used to asynchronously send request                                                                       // 6339
 *                                                                                                                     // 6340
 * @method sendAsync                                                                                                   // 6341
 * @param {Object} data                                                                                                // 6342
 * @param {Function} callback                                                                                          // 6343
 */                                                                                                                    // 6344
RequestManager.prototype.sendAsync = function (data, callback) {                                                       // 6345
    if (!this.provider) {                                                                                              // 6346
        return callback(errors.InvalidProvider());                                                                     // 6347
    }                                                                                                                  // 6348
                                                                                                                       // 6349
    var payload = Jsonrpc.toPayload(data.method, data.params);                                                         // 6350
    this.provider.sendAsync(payload, function (err, result) {                                                          // 6351
        if (err) {                                                                                                     // 6352
            return callback(err);                                                                                      // 6353
        }                                                                                                              // 6354
                                                                                                                       // 6355
        if (!Jsonrpc.isValidResponse(result)) {                                                                        // 6356
            return callback(errors.InvalidResponse(result));                                                           // 6357
        }                                                                                                              // 6358
                                                                                                                       // 6359
        callback(null, result.result);                                                                                 // 6360
    });                                                                                                                // 6361
};                                                                                                                     // 6362
                                                                                                                       // 6363
/**                                                                                                                    // 6364
 * Should be called to asynchronously send batch request                                                               // 6365
 *                                                                                                                     // 6366
 * @method sendBatch                                                                                                   // 6367
 * @param {Array} batch data                                                                                           // 6368
 * @param {Function} callback                                                                                          // 6369
 */                                                                                                                    // 6370
RequestManager.prototype.sendBatch = function (data, callback) {                                                       // 6371
    if (!this.provider) {                                                                                              // 6372
        return callback(errors.InvalidProvider());                                                                     // 6373
    }                                                                                                                  // 6374
                                                                                                                       // 6375
    var payload = Jsonrpc.toBatchPayload(data);                                                                        // 6376
                                                                                                                       // 6377
    this.provider.sendAsync(payload, function (err, results) {                                                         // 6378
        if (err) {                                                                                                     // 6379
            return callback(err);                                                                                      // 6380
        }                                                                                                              // 6381
                                                                                                                       // 6382
        if (!utils.isArray(results)) {                                                                                 // 6383
            return callback(errors.InvalidResponse(results));                                                          // 6384
        }                                                                                                              // 6385
                                                                                                                       // 6386
        callback(err, results);                                                                                        // 6387
    });                                                                                                                // 6388
};                                                                                                                     // 6389
                                                                                                                       // 6390
/**                                                                                                                    // 6391
 * Should be used to set provider of request manager                                                                   // 6392
 *                                                                                                                     // 6393
 * @method setProvider                                                                                                 // 6394
 * @param {Object}                                                                                                     // 6395
 */                                                                                                                    // 6396
RequestManager.prototype.setProvider = function (p) {                                                                  // 6397
    this.provider = p;                                                                                                 // 6398
};                                                                                                                     // 6399
                                                                                                                       // 6400
/**                                                                                                                    // 6401
 * Should be used to start polling                                                                                     // 6402
 *                                                                                                                     // 6403
 * @method startPolling                                                                                                // 6404
 * @param {Object} data                                                                                                // 6405
 * @param {Number} pollId                                                                                              // 6406
 * @param {Function} callback                                                                                          // 6407
 * @param {Function} uninstall                                                                                         // 6408
 *                                                                                                                     // 6409
 * @todo cleanup number of params                                                                                      // 6410
 */                                                                                                                    // 6411
RequestManager.prototype.startPolling = function (data, pollId, callback, uninstall) {                                 // 6412
    this.polls[pollId] = {data: data, id: pollId, callback: callback, uninstall: uninstall};                           // 6413
                                                                                                                       // 6414
                                                                                                                       // 6415
    // start polling                                                                                                   // 6416
    if (!this.timeout) {                                                                                               // 6417
        this.poll();                                                                                                   // 6418
    }                                                                                                                  // 6419
};                                                                                                                     // 6420
                                                                                                                       // 6421
/**                                                                                                                    // 6422
 * Should be used to stop polling for filter with given id                                                             // 6423
 *                                                                                                                     // 6424
 * @method stopPolling                                                                                                 // 6425
 * @param {Number} pollId                                                                                              // 6426
 */                                                                                                                    // 6427
RequestManager.prototype.stopPolling = function (pollId) {                                                             // 6428
    delete this.polls[pollId];                                                                                         // 6429
                                                                                                                       // 6430
    // stop polling                                                                                                    // 6431
    if(Object.keys(this.polls).length === 0 && this.timeout) {                                                         // 6432
        clearTimeout(this.timeout);                                                                                    // 6433
        this.timeout = null;                                                                                           // 6434
    }                                                                                                                  // 6435
};                                                                                                                     // 6436
                                                                                                                       // 6437
/**                                                                                                                    // 6438
 * Should be called to reset the polling mechanism of the request manager                                              // 6439
 *                                                                                                                     // 6440
 * @method reset                                                                                                       // 6441
 */                                                                                                                    // 6442
RequestManager.prototype.reset = function (keepIsSyncing) {                                                            // 6443
    /*jshint maxcomplexity:5 */                                                                                        // 6444
                                                                                                                       // 6445
    for (var key in this.polls) {                                                                                      // 6446
        // remove all polls, except sync polls,                                                                        // 6447
        // they need to be removed manually by calling syncing.stopWatching()                                          // 6448
        if(!keepIsSyncing || key.indexOf('syncPoll_') === -1) {                                                        // 6449
            this.polls[key].uninstall();                                                                               // 6450
            delete this.polls[key];                                                                                    // 6451
        }                                                                                                              // 6452
    }                                                                                                                  // 6453
                                                                                                                       // 6454
    // stop polling                                                                                                    // 6455
    if(Object.keys(this.polls).length === 0 && this.timeout) {                                                         // 6456
        clearTimeout(this.timeout);                                                                                    // 6457
        this.timeout = null;                                                                                           // 6458
    }                                                                                                                  // 6459
};                                                                                                                     // 6460
                                                                                                                       // 6461
/**                                                                                                                    // 6462
 * Should be called to poll for changes on filter with given id                                                        // 6463
 *                                                                                                                     // 6464
 * @method poll                                                                                                        // 6465
 */                                                                                                                    // 6466
RequestManager.prototype.poll = function () {                                                                          // 6467
    /*jshint maxcomplexity: 6 */                                                                                       // 6468
    this.timeout = setTimeout(this.poll.bind(this), c.ETH_POLLING_TIMEOUT);                                            // 6469
                                                                                                                       // 6470
    if (Object.keys(this.polls).length === 0) {                                                                        // 6471
        return;                                                                                                        // 6472
    }                                                                                                                  // 6473
                                                                                                                       // 6474
    if (!this.provider) {                                                                                              // 6475
        console.error(errors.InvalidProvider());                                                                       // 6476
        return;                                                                                                        // 6477
    }                                                                                                                  // 6478
                                                                                                                       // 6479
    var pollsData = [];                                                                                                // 6480
    var pollsIds = [];                                                                                                 // 6481
    for (var key in this.polls) {                                                                                      // 6482
        pollsData.push(this.polls[key].data);                                                                          // 6483
        pollsIds.push(key);                                                                                            // 6484
    }                                                                                                                  // 6485
                                                                                                                       // 6486
    if (pollsData.length === 0) {                                                                                      // 6487
        return;                                                                                                        // 6488
    }                                                                                                                  // 6489
                                                                                                                       // 6490
    var payload = Jsonrpc.toBatchPayload(pollsData);                                                                   // 6491
                                                                                                                       // 6492
    // map the request id to they poll id                                                                              // 6493
    var pollsIdMap = {};                                                                                               // 6494
    payload.forEach(function(load, index){                                                                             // 6495
        pollsIdMap[load.id] = pollsIds[index];                                                                         // 6496
    });                                                                                                                // 6497
                                                                                                                       // 6498
                                                                                                                       // 6499
    var self = this;                                                                                                   // 6500
    this.provider.sendAsync(payload, function (error, results) {                                                       // 6501
                                                                                                                       // 6502
                                                                                                                       // 6503
        // TODO: console log?                                                                                          // 6504
        if (error) {                                                                                                   // 6505
            return;                                                                                                    // 6506
        }                                                                                                              // 6507
                                                                                                                       // 6508
        if (!utils.isArray(results)) {                                                                                 // 6509
            throw errors.InvalidResponse(results);                                                                     // 6510
        }                                                                                                              // 6511
        results.map(function (result) {                                                                                // 6512
            var id = pollsIdMap[result.id];                                                                            // 6513
                                                                                                                       // 6514
            // make sure the filter is still installed after arrival of the request                                    // 6515
            if (self.polls[id]) {                                                                                      // 6516
                result.callback = self.polls[id].callback;                                                             // 6517
                return result;                                                                                         // 6518
            } else                                                                                                     // 6519
                return false;                                                                                          // 6520
        }).filter(function (result) {                                                                                  // 6521
            return !!result;                                                                                           // 6522
        }).filter(function (result) {                                                                                  // 6523
            var valid = Jsonrpc.isValidResponse(result);                                                               // 6524
            if (!valid) {                                                                                              // 6525
                result.callback(errors.InvalidResponse(result));                                                       // 6526
            }                                                                                                          // 6527
            return valid;                                                                                              // 6528
        }).forEach(function (result) {                                                                                 // 6529
            result.callback(null, result.result);                                                                      // 6530
        });                                                                                                            // 6531
    });                                                                                                                // 6532
};                                                                                                                     // 6533
                                                                                                                       // 6534
module.exports = RequestManager;                                                                                       // 6535
                                                                                                                       // 6536
                                                                                                                       // 6537
},{"../utils/config":18,"../utils/utils":20,"./errors":26,"./jsonrpc":35}],47:[function(require,module,exports){       // 6538
                                                                                                                       // 6539
                                                                                                                       // 6540
var Settings = function () {                                                                                           // 6541
    this.defaultBlock = 'latest';                                                                                      // 6542
    this.defaultAccount = undefined;                                                                                   // 6543
};                                                                                                                     // 6544
                                                                                                                       // 6545
module.exports = Settings;                                                                                             // 6546
                                                                                                                       // 6547
                                                                                                                       // 6548
},{}],48:[function(require,module,exports){                                                                            // 6549
/*                                                                                                                     // 6550
    This file is part of web3.js.                                                                                      // 6551
                                                                                                                       // 6552
    web3.js is free software: you can redistribute it and/or modify                                                    // 6553
    it under the terms of the GNU Lesser General Public License as published by                                        // 6554
    the Free Software Foundation, either version 3 of the License, or                                                  // 6555
    (at your option) any later version.                                                                                // 6556
                                                                                                                       // 6557
    web3.js is distributed in the hope that it will be useful,                                                         // 6558
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 6559
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 6560
    GNU Lesser General Public License for more details.                                                                // 6561
                                                                                                                       // 6562
    You should have received a copy of the GNU Lesser General Public License                                           // 6563
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 6564
*/                                                                                                                     // 6565
/** @file syncing.js                                                                                                   // 6566
 * @authors:                                                                                                           // 6567
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 6568
 * @date 2015                                                                                                          // 6569
 */                                                                                                                    // 6570
                                                                                                                       // 6571
var formatters = require('./formatters');                                                                              // 6572
var utils = require('../utils/utils');                                                                                 // 6573
                                                                                                                       // 6574
var count = 1;                                                                                                         // 6575
                                                                                                                       // 6576
/**                                                                                                                    // 6577
Adds the callback and sets up the methods, to iterate over the results.                                                // 6578
                                                                                                                       // 6579
@method pollSyncing                                                                                                    // 6580
@param {Object} self                                                                                                   // 6581
*/                                                                                                                     // 6582
var pollSyncing = function(self) {                                                                                     // 6583
                                                                                                                       // 6584
    var onMessage = function (error, sync) {                                                                           // 6585
        if (error) {                                                                                                   // 6586
            return self.callbacks.forEach(function (callback) {                                                        // 6587
                callback(error);                                                                                       // 6588
            });                                                                                                        // 6589
        }                                                                                                              // 6590
                                                                                                                       // 6591
        if(utils.isObject(sync) && sync.startingBlock)                                                                 // 6592
            sync = formatters.outputSyncingFormatter(sync);                                                            // 6593
                                                                                                                       // 6594
        self.callbacks.forEach(function (callback) {                                                                   // 6595
            if (self.lastSyncState !== sync) {                                                                         // 6596
                                                                                                                       // 6597
                // call the callback with true first so the app can stop anything, before receiving the sync data      // 6598
                if(!self.lastSyncState && utils.isObject(sync))                                                        // 6599
                    callback(null, true);                                                                              // 6600
                                                                                                                       // 6601
                // call on the next CPU cycle, so the actions of the sync stop can be processes first                  // 6602
                setTimeout(function() {                                                                                // 6603
                    callback(null, sync);                                                                              // 6604
                }, 0);                                                                                                 // 6605
                                                                                                                       // 6606
                self.lastSyncState = sync;                                                                             // 6607
            }                                                                                                          // 6608
        });                                                                                                            // 6609
    };                                                                                                                 // 6610
                                                                                                                       // 6611
    self.requestManager.startPolling({                                                                                 // 6612
        method: 'eth_syncing',                                                                                         // 6613
        params: [],                                                                                                    // 6614
    }, self.pollId, onMessage, self.stopWatching.bind(self));                                                          // 6615
                                                                                                                       // 6616
};                                                                                                                     // 6617
                                                                                                                       // 6618
var IsSyncing = function (requestManager, callback) {                                                                  // 6619
    this.requestManager = requestManager;                                                                              // 6620
    this.pollId = 'syncPoll_'+ count++;                                                                                // 6621
    this.callbacks = [];                                                                                               // 6622
    this.addCallback(callback);                                                                                        // 6623
    this.lastSyncState = false;                                                                                        // 6624
    pollSyncing(this);                                                                                                 // 6625
                                                                                                                       // 6626
    return this;                                                                                                       // 6627
};                                                                                                                     // 6628
                                                                                                                       // 6629
IsSyncing.prototype.addCallback = function (callback) {                                                                // 6630
    if(callback)                                                                                                       // 6631
        this.callbacks.push(callback);                                                                                 // 6632
    return this;                                                                                                       // 6633
};                                                                                                                     // 6634
                                                                                                                       // 6635
IsSyncing.prototype.stopWatching = function () {                                                                       // 6636
    this.requestManager.stopPolling(this.pollId);                                                                      // 6637
    this.callbacks = [];                                                                                               // 6638
};                                                                                                                     // 6639
                                                                                                                       // 6640
module.exports = IsSyncing;                                                                                            // 6641
                                                                                                                       // 6642
                                                                                                                       // 6643
},{"../utils/utils":20,"./formatters":30}],49:[function(require,module,exports){                                       // 6644
/*                                                                                                                     // 6645
    This file is part of web3.js.                                                                                      // 6646
                                                                                                                       // 6647
    web3.js is free software: you can redistribute it and/or modify                                                    // 6648
    it under the terms of the GNU Lesser General Public License as published by                                        // 6649
    the Free Software Foundation, either version 3 of the License, or                                                  // 6650
    (at your option) any later version.                                                                                // 6651
                                                                                                                       // 6652
    web3.js is distributed in the hope that it will be useful,                                                         // 6653
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 6654
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 6655
    GNU Lesser General Public License for more details.                                                                // 6656
                                                                                                                       // 6657
    You should have received a copy of the GNU Lesser General Public License                                           // 6658
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 6659
*/                                                                                                                     // 6660
/**                                                                                                                    // 6661
 * @file transfer.js                                                                                                   // 6662
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 6663
 * @date 2015                                                                                                          // 6664
 */                                                                                                                    // 6665
                                                                                                                       // 6666
var Iban = require('./iban');                                                                                          // 6667
var exchangeAbi = require('../contracts/SmartExchange.json');                                                          // 6668
                                                                                                                       // 6669
/**                                                                                                                    // 6670
 * Should be used to make Iban transfer                                                                                // 6671
 *                                                                                                                     // 6672
 * @method transfer                                                                                                    // 6673
 * @param {String} from                                                                                                // 6674
 * @param {String} to iban                                                                                             // 6675
 * @param {Value} value to be tranfered                                                                                // 6676
 * @param {Function} callback, callback                                                                                // 6677
 */                                                                                                                    // 6678
var transfer = function (eth, from, to, value, callback) {                                                             // 6679
    var iban = new Iban(to);                                                                                           // 6680
    if (!iban.isValid()) {                                                                                             // 6681
        throw new Error('invalid iban address');                                                                       // 6682
    }                                                                                                                  // 6683
                                                                                                                       // 6684
    if (iban.isDirect()) {                                                                                             // 6685
        return transferToAddress(eth, from, iban.address(), value, callback);                                          // 6686
    }                                                                                                                  // 6687
                                                                                                                       // 6688
    if (!callback) {                                                                                                   // 6689
        var address = eth.icapNamereg().addr(iban.institution());                                                      // 6690
        return deposit(eth, from, address, value, iban.client());                                                      // 6691
    }                                                                                                                  // 6692
                                                                                                                       // 6693
    eth.icapNamereg().addr(iban.institution(), function (err, address) {                                               // 6694
        return deposit(eth, from, address, value, iban.client(), callback);                                            // 6695
    });                                                                                                                // 6696
                                                                                                                       // 6697
};                                                                                                                     // 6698
                                                                                                                       // 6699
/**                                                                                                                    // 6700
 * Should be used to transfer funds to certain address                                                                 // 6701
 *                                                                                                                     // 6702
 * @method transferToAddress                                                                                           // 6703
 * @param {String} from                                                                                                // 6704
 * @param {String} to                                                                                                  // 6705
 * @param {Value} value to be tranfered                                                                                // 6706
 * @param {Function} callback, callback                                                                                // 6707
 */                                                                                                                    // 6708
var transferToAddress = function (eth, from, to, value, callback) {                                                    // 6709
    return eth.sendTransaction({                                                                                       // 6710
        address: to,                                                                                                   // 6711
        from: from,                                                                                                    // 6712
        value: value                                                                                                   // 6713
    }, callback);                                                                                                      // 6714
};                                                                                                                     // 6715
                                                                                                                       // 6716
/**                                                                                                                    // 6717
 * Should be used to deposit funds to generic Exchange contract (must implement deposit(bytes32) method!)              // 6718
 *                                                                                                                     // 6719
 * @method deposit                                                                                                     // 6720
 * @param {String} from                                                                                                // 6721
 * @param {String} to                                                                                                  // 6722
 * @param {Value} value to be transfered                                                                               // 6723
 * @param {String} client unique identifier                                                                            // 6724
 * @param {Function} callback, callback                                                                                // 6725
 */                                                                                                                    // 6726
var deposit = function (eth, from, to, value, client, callback) {                                                      // 6727
    var abi = exchangeAbi;                                                                                             // 6728
    return eth.contract(abi).at(to).deposit(client, {                                                                  // 6729
        from: from,                                                                                                    // 6730
        value: value                                                                                                   // 6731
    }, callback);                                                                                                      // 6732
};                                                                                                                     // 6733
                                                                                                                       // 6734
module.exports = transfer;                                                                                             // 6735
                                                                                                                       // 6736
                                                                                                                       // 6737
},{"../contracts/SmartExchange.json":3,"./iban":33}],50:[function(require,module,exports){                             // 6738
;(function (root, factory, undef) {                                                                                    // 6739
	if (typeof exports === "object") {                                                                                    // 6740
		// CommonJS                                                                                                          // 6741
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 6743
	else if (typeof define === "function" && define.amd) {                                                                // 6744
		// AMD                                                                                                               // 6745
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 6746
	}                                                                                                                     // 6747
	else {                                                                                                                // 6748
		// Global (browser)                                                                                                  // 6749
		factory(root.CryptoJS);                                                                                              // 6750
	}                                                                                                                     // 6751
}(this, function (CryptoJS) {                                                                                          // 6752
                                                                                                                       // 6753
	(function () {                                                                                                        // 6754
	    // Shortcuts                                                                                                      // 6755
	    var C = CryptoJS;                                                                                                 // 6756
	    var C_lib = C.lib;                                                                                                // 6757
	    var BlockCipher = C_lib.BlockCipher;                                                                              // 6758
	    var C_algo = C.algo;                                                                                              // 6759
                                                                                                                       // 6760
	    // Lookup tables                                                                                                  // 6761
	    var SBOX = [];                                                                                                    // 6762
	    var INV_SBOX = [];                                                                                                // 6763
	    var SUB_MIX_0 = [];                                                                                               // 6764
	    var SUB_MIX_1 = [];                                                                                               // 6765
	    var SUB_MIX_2 = [];                                                                                               // 6766
	    var SUB_MIX_3 = [];                                                                                               // 6767
	    var INV_SUB_MIX_0 = [];                                                                                           // 6768
	    var INV_SUB_MIX_1 = [];                                                                                           // 6769
	    var INV_SUB_MIX_2 = [];                                                                                           // 6770
	    var INV_SUB_MIX_3 = [];                                                                                           // 6771
                                                                                                                       // 6772
	    // Compute lookup tables                                                                                          // 6773
	    (function () {                                                                                                    // 6774
	        // Compute double table                                                                                       // 6775
	        var d = [];                                                                                                   // 6776
	        for (var i = 0; i < 256; i++) {                                                                               // 6777
	            if (i < 128) {                                                                                            // 6778
	                d[i] = i << 1;                                                                                        // 6779
	            } else {                                                                                                  // 6780
	                d[i] = (i << 1) ^ 0x11b;                                                                              // 6781
	            }                                                                                                         // 6782
	        }                                                                                                             // 6783
                                                                                                                       // 6784
	        // Walk GF(2^8)                                                                                               // 6785
	        var x = 0;                                                                                                    // 6786
	        var xi = 0;                                                                                                   // 6787
	        for (var i = 0; i < 256; i++) {                                                                               // 6788
	            // Compute sbox                                                                                           // 6789
	            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);                                              // 6790
	            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;                                                                     // 6791
	            SBOX[x] = sx;                                                                                             // 6792
	            INV_SBOX[sx] = x;                                                                                         // 6793
                                                                                                                       // 6794
	            // Compute multiplication                                                                                 // 6795
	            var x2 = d[x];                                                                                            // 6796
	            var x4 = d[x2];                                                                                           // 6797
	            var x8 = d[x4];                                                                                           // 6798
                                                                                                                       // 6799
	            // Compute sub bytes, mix columns tables                                                                  // 6800
	            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);                                                               // 6801
	            SUB_MIX_0[x] = (t << 24) | (t >>> 8);                                                                     // 6802
	            SUB_MIX_1[x] = (t << 16) | (t >>> 16);                                                                    // 6803
	            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);                                                                    // 6804
	            SUB_MIX_3[x] = t;                                                                                         // 6805
                                                                                                                       // 6806
	            // Compute inv sub bytes, inv mix columns tables                                                          // 6807
	            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);                               // 6808
	            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);                                                                // 6809
	            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);                                                               // 6810
	            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);                                                               // 6811
	            INV_SUB_MIX_3[sx] = t;                                                                                    // 6812
                                                                                                                       // 6813
	            // Compute next counter                                                                                   // 6814
	            if (!x) {                                                                                                 // 6815
	                x = xi = 1;                                                                                           // 6816
	            } else {                                                                                                  // 6817
	                x = x2 ^ d[d[d[x8 ^ x2]]];                                                                            // 6818
	                xi ^= d[d[xi]];                                                                                       // 6819
	            }                                                                                                         // 6820
	        }                                                                                                             // 6821
	    }());                                                                                                             // 6822
                                                                                                                       // 6823
	    // Precomputed Rcon lookup                                                                                        // 6824
	    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];                                    // 6825
                                                                                                                       // 6826
	    /**                                                                                                               // 6827
	     * AES block cipher algorithm.                                                                                    // 6828
	     */                                                                                                               // 6829
	    var AES = C_algo.AES = BlockCipher.extend({                                                                       // 6830
	        _doReset: function () {                                                                                       // 6831
	            // Skip reset of nRounds has been set before and key did not change                                       // 6832
	            if (this._nRounds && this._keyPriorReset === this._key) {                                                 // 6833
	                return;                                                                                               // 6834
	            }                                                                                                         // 6835
                                                                                                                       // 6836
	            // Shortcuts                                                                                              // 6837
	            var key = this._keyPriorReset = this._key;                                                                // 6838
	            var keyWords = key.words;                                                                                 // 6839
	            var keySize = key.sigBytes / 4;                                                                           // 6840
                                                                                                                       // 6841
	            // Compute number of rounds                                                                               // 6842
	            var nRounds = this._nRounds = keySize + 6;                                                                // 6843
                                                                                                                       // 6844
	            // Compute number of key schedule rows                                                                    // 6845
	            var ksRows = (nRounds + 1) * 4;                                                                           // 6846
                                                                                                                       // 6847
	            // Compute key schedule                                                                                   // 6848
	            var keySchedule = this._keySchedule = [];                                                                 // 6849
	            for (var ksRow = 0; ksRow < ksRows; ksRow++) {                                                            // 6850
	                if (ksRow < keySize) {                                                                                // 6851
	                    keySchedule[ksRow] = keyWords[ksRow];                                                             // 6852
	                } else {                                                                                              // 6853
	                    var t = keySchedule[ksRow - 1];                                                                   // 6854
                                                                                                                       // 6855
	                    if (!(ksRow % keySize)) {                                                                         // 6856
	                        // Rot word                                                                                   // 6857
	                        t = (t << 8) | (t >>> 24);                                                                    // 6858
                                                                                                                       // 6859
	                        // Sub word                                                                                   // 6860
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
                                                                                                                       // 6862
	                        // Mix Rcon                                                                                   // 6863
	                        t ^= RCON[(ksRow / keySize) | 0] << 24;                                                       // 6864
	                    } else if (keySize > 6 && ksRow % keySize == 4) {                                                 // 6865
	                        // Sub word                                                                                   // 6866
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
	                    }                                                                                                 // 6868
                                                                                                                       // 6869
	                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;                                            // 6870
	                }                                                                                                     // 6871
	            }                                                                                                         // 6872
                                                                                                                       // 6873
	            // Compute inv key schedule                                                                               // 6874
	            var invKeySchedule = this._invKeySchedule = [];                                                           // 6875
	            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {                                                   // 6876
	                var ksRow = ksRows - invKsRow;                                                                        // 6877
                                                                                                                       // 6878
	                if (invKsRow % 4) {                                                                                   // 6879
	                    var t = keySchedule[ksRow];                                                                       // 6880
	                } else {                                                                                              // 6881
	                    var t = keySchedule[ksRow - 4];                                                                   // 6882
	                }                                                                                                     // 6883
                                                                                                                       // 6884
	                if (invKsRow < 4 || ksRow <= 4) {                                                                     // 6885
	                    invKeySchedule[invKsRow] = t;                                                                     // 6886
	                } else {                                                                                              // 6887
	                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
	                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
	                }                                                                                                     // 6890
	            }                                                                                                         // 6891
	        },                                                                                                            // 6892
                                                                                                                       // 6893
	        encryptBlock: function (M, offset) {                                                                          // 6894
	            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);       // 6895
	        },                                                                                                            // 6896
                                                                                                                       // 6897
	        decryptBlock: function (M, offset) {                                                                          // 6898
	            // Swap 2nd and 4th rows                                                                                  // 6899
	            var t = M[offset + 1];                                                                                    // 6900
	            M[offset + 1] = M[offset + 3];                                                                            // 6901
	            M[offset + 3] = t;                                                                                        // 6902
                                                                                                                       // 6903
	            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
                                                                                                                       // 6905
	            // Inv swap 2nd and 4th rows                                                                              // 6906
	            var t = M[offset + 1];                                                                                    // 6907
	            M[offset + 1] = M[offset + 3];                                                                            // 6908
	            M[offset + 3] = t;                                                                                        // 6909
	        },                                                                                                            // 6910
                                                                                                                       // 6911
	        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {          // 6912
	            // Shortcut                                                                                               // 6913
	            var nRounds = this._nRounds;                                                                              // 6914
                                                                                                                       // 6915
	            // Get input, add round key                                                                               // 6916
	            var s0 = M[offset]     ^ keySchedule[0];                                                                  // 6917
	            var s1 = M[offset + 1] ^ keySchedule[1];                                                                  // 6918
	            var s2 = M[offset + 2] ^ keySchedule[2];                                                                  // 6919
	            var s3 = M[offset + 3] ^ keySchedule[3];                                                                  // 6920
                                                                                                                       // 6921
	            // Key schedule row counter                                                                               // 6922
	            var ksRow = 4;                                                                                            // 6923
                                                                                                                       // 6924
	            // Rounds                                                                                                 // 6925
	            for (var round = 1; round < nRounds; round++) {                                                           // 6926
	                // Shift rows, sub bytes, mix columns, add round key                                                  // 6927
	                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
	                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
	                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
	                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];
                                                                                                                       // 6932
	                // Update state                                                                                       // 6933
	                s0 = t0;                                                                                              // 6934
	                s1 = t1;                                                                                              // 6935
	                s2 = t2;                                                                                              // 6936
	                s3 = t3;                                                                                              // 6937
	            }                                                                                                         // 6938
                                                                                                                       // 6939
	            // Shift rows, sub bytes, add round key                                                                   // 6940
	            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
	            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
	            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
	            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
                                                                                                                       // 6945
	            // Set output                                                                                             // 6946
	            M[offset]     = t0;                                                                                       // 6947
	            M[offset + 1] = t1;                                                                                       // 6948
	            M[offset + 2] = t2;                                                                                       // 6949
	            M[offset + 3] = t3;                                                                                       // 6950
	        },                                                                                                            // 6951
                                                                                                                       // 6952
	        keySize: 256/32                                                                                               // 6953
	    });                                                                                                               // 6954
                                                                                                                       // 6955
	    /**                                                                                                               // 6956
	     * Shortcut functions to the cipher's object interface.                                                           // 6957
	     *                                                                                                                // 6958
	     * @example                                                                                                       // 6959
	     *                                                                                                                // 6960
	     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);                                                  // 6961
	     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);                                               // 6962
	     */                                                                                                               // 6963
	    C.AES = BlockCipher._createHelper(AES);                                                                           // 6964
	}());                                                                                                                 // 6965
                                                                                                                       // 6966
                                                                                                                       // 6967
	return CryptoJS.AES;                                                                                                  // 6968
                                                                                                                       // 6969
}));                                                                                                                   // 6970
},{"./cipher-core":51,"./core":52,"./enc-base64":53,"./evpkdf":55,"./md5":60}],51:[function(require,module,exports){   // 6971
;(function (root, factory) {                                                                                           // 6972
	if (typeof exports === "object") {                                                                                    // 6973
		// CommonJS                                                                                                          // 6974
		module.exports = exports = factory(require("./core"));                                                               // 6975
	}                                                                                                                     // 6976
	else if (typeof define === "function" && define.amd) {                                                                // 6977
		// AMD                                                                                                               // 6978
		define(["./core"], factory);                                                                                         // 6979
	}                                                                                                                     // 6980
	else {                                                                                                                // 6981
		// Global (browser)                                                                                                  // 6982
		factory(root.CryptoJS);                                                                                              // 6983
	}                                                                                                                     // 6984
}(this, function (CryptoJS) {                                                                                          // 6985
                                                                                                                       // 6986
	/**                                                                                                                   // 6987
	 * Cipher core components.                                                                                            // 6988
	 */                                                                                                                   // 6989
	CryptoJS.lib.Cipher || (function (undefined) {                                                                        // 6990
	    // Shortcuts                                                                                                      // 6991
	    var C = CryptoJS;                                                                                                 // 6992
	    var C_lib = C.lib;                                                                                                // 6993
	    var Base = C_lib.Base;                                                                                            // 6994
	    var WordArray = C_lib.WordArray;                                                                                  // 6995
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;                                                        // 6996
	    var C_enc = C.enc;                                                                                                // 6997
	    var Utf8 = C_enc.Utf8;                                                                                            // 6998
	    var Base64 = C_enc.Base64;                                                                                        // 6999
	    var C_algo = C.algo;                                                                                              // 7000
	    var EvpKDF = C_algo.EvpKDF;                                                                                       // 7001
                                                                                                                       // 7002
	    /**                                                                                                               // 7003
	     * Abstract base cipher template.                                                                                 // 7004
	     *                                                                                                                // 7005
	     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)                                       // 7006
	     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)                                         // 7007
	     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.                                    // 7008
	     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.                                    // 7009
	     */                                                                                                               // 7010
	    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({                                                       // 7011
	        /**                                                                                                           // 7012
	         * Configuration options.                                                                                     // 7013
	         *                                                                                                            // 7014
	         * @property {WordArray} iv The IV to use for this operation.                                                 // 7015
	         */                                                                                                           // 7016
	        cfg: Base.extend(),                                                                                           // 7017
                                                                                                                       // 7018
	        /**                                                                                                           // 7019
	         * Creates this cipher in encryption mode.                                                                    // 7020
	         *                                                                                                            // 7021
	         * @param {WordArray} key The key.                                                                            // 7022
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7023
	         *                                                                                                            // 7024
	         * @return {Cipher} A cipher instance.                                                                        // 7025
	         *                                                                                                            // 7026
	         * @static                                                                                                    // 7027
	         *                                                                                                            // 7028
	         * @example                                                                                                   // 7029
	         *                                                                                                            // 7030
	         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });                     // 7031
	         */                                                                                                           // 7032
	        createEncryptor: function (key, cfg) {                                                                        // 7033
	            return this.create(this._ENC_XFORM_MODE, key, cfg);                                                       // 7034
	        },                                                                                                            // 7035
                                                                                                                       // 7036
	        /**                                                                                                           // 7037
	         * Creates this cipher in decryption mode.                                                                    // 7038
	         *                                                                                                            // 7039
	         * @param {WordArray} key The key.                                                                            // 7040
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7041
	         *                                                                                                            // 7042
	         * @return {Cipher} A cipher instance.                                                                        // 7043
	         *                                                                                                            // 7044
	         * @static                                                                                                    // 7045
	         *                                                                                                            // 7046
	         * @example                                                                                                   // 7047
	         *                                                                                                            // 7048
	         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });                     // 7049
	         */                                                                                                           // 7050
	        createDecryptor: function (key, cfg) {                                                                        // 7051
	            return this.create(this._DEC_XFORM_MODE, key, cfg);                                                       // 7052
	        },                                                                                                            // 7053
                                                                                                                       // 7054
	        /**                                                                                                           // 7055
	         * Initializes a newly created cipher.                                                                        // 7056
	         *                                                                                                            // 7057
	         * @param {number} xformMode Either the encryption or decryption transormation mode constant.                 // 7058
	         * @param {WordArray} key The key.                                                                            // 7059
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7060
	         *                                                                                                            // 7061
	         * @example                                                                                                   // 7062
	         *                                                                                                            // 7063
	         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
	         */                                                                                                           // 7065
	        init: function (xformMode, key, cfg) {                                                                        // 7066
	            // Apply config defaults                                                                                  // 7067
	            this.cfg = this.cfg.extend(cfg);                                                                          // 7068
                                                                                                                       // 7069
	            // Store transform mode and key                                                                           // 7070
	            this._xformMode = xformMode;                                                                              // 7071
	            this._key = key;                                                                                          // 7072
                                                                                                                       // 7073
	            // Set initial values                                                                                     // 7074
	            this.reset();                                                                                             // 7075
	        },                                                                                                            // 7076
                                                                                                                       // 7077
	        /**                                                                                                           // 7078
	         * Resets this cipher to its initial state.                                                                   // 7079
	         *                                                                                                            // 7080
	         * @example                                                                                                   // 7081
	         *                                                                                                            // 7082
	         *     cipher.reset();                                                                                        // 7083
	         */                                                                                                           // 7084
	        reset: function () {                                                                                          // 7085
	            // Reset data buffer                                                                                      // 7086
	            BufferedBlockAlgorithm.reset.call(this);                                                                  // 7087
                                                                                                                       // 7088
	            // Perform concrete-cipher logic                                                                          // 7089
	            this._doReset();                                                                                          // 7090
	        },                                                                                                            // 7091
                                                                                                                       // 7092
	        /**                                                                                                           // 7093
	         * Adds data to be encrypted or decrypted.                                                                    // 7094
	         *                                                                                                            // 7095
	         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.                                       // 7096
	         *                                                                                                            // 7097
	         * @return {WordArray} The data after processing.                                                             // 7098
	         *                                                                                                            // 7099
	         * @example                                                                                                   // 7100
	         *                                                                                                            // 7101
	         *     var encrypted = cipher.process('data');                                                                // 7102
	         *     var encrypted = cipher.process(wordArray);                                                             // 7103
	         */                                                                                                           // 7104
	        process: function (dataUpdate) {                                                                              // 7105
	            // Append                                                                                                 // 7106
	            this._append(dataUpdate);                                                                                 // 7107
                                                                                                                       // 7108
	            // Process available blocks                                                                               // 7109
	            return this._process();                                                                                   // 7110
	        },                                                                                                            // 7111
                                                                                                                       // 7112
	        /**                                                                                                           // 7113
	         * Finalizes the encryption or decryption process.                                                            // 7114
	         * Note that the finalize operation is effectively a destructive, read-once operation.                        // 7115
	         *                                                                                                            // 7116
	         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.                                 // 7117
	         *                                                                                                            // 7118
	         * @return {WordArray} The data after final processing.                                                       // 7119
	         *                                                                                                            // 7120
	         * @example                                                                                                   // 7121
	         *                                                                                                            // 7122
	         *     var encrypted = cipher.finalize();                                                                     // 7123
	         *     var encrypted = cipher.finalize('data');                                                               // 7124
	         *     var encrypted = cipher.finalize(wordArray);                                                            // 7125
	         */                                                                                                           // 7126
	        finalize: function (dataUpdate) {                                                                             // 7127
	            // Final data update                                                                                      // 7128
	            if (dataUpdate) {                                                                                         // 7129
	                this._append(dataUpdate);                                                                             // 7130
	            }                                                                                                         // 7131
                                                                                                                       // 7132
	            // Perform concrete-cipher logic                                                                          // 7133
	            var finalProcessedData = this._doFinalize();                                                              // 7134
                                                                                                                       // 7135
	            return finalProcessedData;                                                                                // 7136
	        },                                                                                                            // 7137
                                                                                                                       // 7138
	        keySize: 128/32,                                                                                              // 7139
                                                                                                                       // 7140
	        ivSize: 128/32,                                                                                               // 7141
                                                                                                                       // 7142
	        _ENC_XFORM_MODE: 1,                                                                                           // 7143
                                                                                                                       // 7144
	        _DEC_XFORM_MODE: 2,                                                                                           // 7145
                                                                                                                       // 7146
	        /**                                                                                                           // 7147
	         * Creates shortcut functions to a cipher's object interface.                                                 // 7148
	         *                                                                                                            // 7149
	         * @param {Cipher} cipher The cipher to create a helper for.                                                  // 7150
	         *                                                                                                            // 7151
	         * @return {Object} An object with encrypt and decrypt shortcut functions.                                    // 7152
	         *                                                                                                            // 7153
	         * @static                                                                                                    // 7154
	         *                                                                                                            // 7155
	         * @example                                                                                                   // 7156
	         *                                                                                                            // 7157
	         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);                                        // 7158
	         */                                                                                                           // 7159
	        _createHelper: (function () {                                                                                 // 7160
	            function selectCipherStrategy(key) {                                                                      // 7161
	                if (typeof key == 'string') {                                                                         // 7162
	                    return PasswordBasedCipher;                                                                       // 7163
	                } else {                                                                                              // 7164
	                    return SerializableCipher;                                                                        // 7165
	                }                                                                                                     // 7166
	            }                                                                                                         // 7167
                                                                                                                       // 7168
	            return function (cipher) {                                                                                // 7169
	                return {                                                                                              // 7170
	                    encrypt: function (message, key, cfg) {                                                           // 7171
	                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);                          // 7172
	                    },                                                                                                // 7173
                                                                                                                       // 7174
	                    decrypt: function (ciphertext, key, cfg) {                                                        // 7175
	                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);                       // 7176
	                    }                                                                                                 // 7177
	                };                                                                                                    // 7178
	            };                                                                                                        // 7179
	        }())                                                                                                          // 7180
	    });                                                                                                               // 7181
                                                                                                                       // 7182
	    /**                                                                                                               // 7183
	     * Abstract base stream cipher template.                                                                          // 7184
	     *                                                                                                                // 7185
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)          // 7186
	     */                                                                                                               // 7187
	    var StreamCipher = C_lib.StreamCipher = Cipher.extend({                                                           // 7188
	        _doFinalize: function () {                                                                                    // 7189
	            // Process partial blocks                                                                                 // 7190
	            var finalProcessedBlocks = this._process(!!'flush');                                                      // 7191
                                                                                                                       // 7192
	            return finalProcessedBlocks;                                                                              // 7193
	        },                                                                                                            // 7194
                                                                                                                       // 7195
	        blockSize: 1                                                                                                  // 7196
	    });                                                                                                               // 7197
                                                                                                                       // 7198
	    /**                                                                                                               // 7199
	     * Mode namespace.                                                                                                // 7200
	     */                                                                                                               // 7201
	    var C_mode = C.mode = {};                                                                                         // 7202
                                                                                                                       // 7203
	    /**                                                                                                               // 7204
	     * Abstract base block cipher mode template.                                                                      // 7205
	     */                                                                                                               // 7206
	    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({                                                       // 7207
	        /**                                                                                                           // 7208
	         * Creates this mode for encryption.                                                                          // 7209
	         *                                                                                                            // 7210
	         * @param {Cipher} cipher A block cipher instance.                                                            // 7211
	         * @param {Array} iv The IV words.                                                                            // 7212
	         *                                                                                                            // 7213
	         * @static                                                                                                    // 7214
	         *                                                                                                            // 7215
	         * @example                                                                                                   // 7216
	         *                                                                                                            // 7217
	         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);                                        // 7218
	         */                                                                                                           // 7219
	        createEncryptor: function (cipher, iv) {                                                                      // 7220
	            return this.Encryptor.create(cipher, iv);                                                                 // 7221
	        },                                                                                                            // 7222
                                                                                                                       // 7223
	        /**                                                                                                           // 7224
	         * Creates this mode for decryption.                                                                          // 7225
	         *                                                                                                            // 7226
	         * @param {Cipher} cipher A block cipher instance.                                                            // 7227
	         * @param {Array} iv The IV words.                                                                            // 7228
	         *                                                                                                            // 7229
	         * @static                                                                                                    // 7230
	         *                                                                                                            // 7231
	         * @example                                                                                                   // 7232
	         *                                                                                                            // 7233
	         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);                                        // 7234
	         */                                                                                                           // 7235
	        createDecryptor: function (cipher, iv) {                                                                      // 7236
	            return this.Decryptor.create(cipher, iv);                                                                 // 7237
	        },                                                                                                            // 7238
                                                                                                                       // 7239
	        /**                                                                                                           // 7240
	         * Initializes a newly created mode.                                                                          // 7241
	         *                                                                                                            // 7242
	         * @param {Cipher} cipher A block cipher instance.                                                            // 7243
	         * @param {Array} iv The IV words.                                                                            // 7244
	         *                                                                                                            // 7245
	         * @example                                                                                                   // 7246
	         *                                                                                                            // 7247
	         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);                                       // 7248
	         */                                                                                                           // 7249
	        init: function (cipher, iv) {                                                                                 // 7250
	            this._cipher = cipher;                                                                                    // 7251
	            this._iv = iv;                                                                                            // 7252
	        }                                                                                                             // 7253
	    });                                                                                                               // 7254
                                                                                                                       // 7255
	    /**                                                                                                               // 7256
	     * Cipher Block Chaining mode.                                                                                    // 7257
	     */                                                                                                               // 7258
	    var CBC = C_mode.CBC = (function () {                                                                             // 7259
	        /**                                                                                                           // 7260
	         * Abstract base CBC mode.                                                                                    // 7261
	         */                                                                                                           // 7262
	        var CBC = BlockCipherMode.extend();                                                                           // 7263
                                                                                                                       // 7264
	        /**                                                                                                           // 7265
	         * CBC encryptor.                                                                                             // 7266
	         */                                                                                                           // 7267
	        CBC.Encryptor = CBC.extend({                                                                                  // 7268
	            /**                                                                                                       // 7269
	             * Processes the data block at offset.                                                                    // 7270
	             *                                                                                                        // 7271
	             * @param {Array} words The data words to operate on.                                                     // 7272
	             * @param {number} offset The offset where the block starts.                                              // 7273
	             *                                                                                                        // 7274
	             * @example                                                                                               // 7275
	             *                                                                                                        // 7276
	             *     mode.processBlock(data.words, offset);                                                             // 7277
	             */                                                                                                       // 7278
	            processBlock: function (words, offset) {                                                                  // 7279
	                // Shortcuts                                                                                          // 7280
	                var cipher = this._cipher;                                                                            // 7281
	                var blockSize = cipher.blockSize;                                                                     // 7282
                                                                                                                       // 7283
	                // XOR and encrypt                                                                                    // 7284
	                xorBlock.call(this, words, offset, blockSize);                                                        // 7285
	                cipher.encryptBlock(words, offset);                                                                   // 7286
                                                                                                                       // 7287
	                // Remember this block to use with next block                                                         // 7288
	                this._prevBlock = words.slice(offset, offset + blockSize);                                            // 7289
	            }                                                                                                         // 7290
	        });                                                                                                           // 7291
                                                                                                                       // 7292
	        /**                                                                                                           // 7293
	         * CBC decryptor.                                                                                             // 7294
	         */                                                                                                           // 7295
	        CBC.Decryptor = CBC.extend({                                                                                  // 7296
	            /**                                                                                                       // 7297
	             * Processes the data block at offset.                                                                    // 7298
	             *                                                                                                        // 7299
	             * @param {Array} words The data words to operate on.                                                     // 7300
	             * @param {number} offset The offset where the block starts.                                              // 7301
	             *                                                                                                        // 7302
	             * @example                                                                                               // 7303
	             *                                                                                                        // 7304
	             *     mode.processBlock(data.words, offset);                                                             // 7305
	             */                                                                                                       // 7306
	            processBlock: function (words, offset) {                                                                  // 7307
	                // Shortcuts                                                                                          // 7308
	                var cipher = this._cipher;                                                                            // 7309
	                var blockSize = cipher.blockSize;                                                                     // 7310
                                                                                                                       // 7311
	                // Remember this block to use with next block                                                         // 7312
	                var thisBlock = words.slice(offset, offset + blockSize);                                              // 7313
                                                                                                                       // 7314
	                // Decrypt and XOR                                                                                    // 7315
	                cipher.decryptBlock(words, offset);                                                                   // 7316
	                xorBlock.call(this, words, offset, blockSize);                                                        // 7317
                                                                                                                       // 7318
	                // This block becomes the previous block                                                              // 7319
	                this._prevBlock = thisBlock;                                                                          // 7320
	            }                                                                                                         // 7321
	        });                                                                                                           // 7322
                                                                                                                       // 7323
	        function xorBlock(words, offset, blockSize) {                                                                 // 7324
	            // Shortcut                                                                                               // 7325
	            var iv = this._iv;                                                                                        // 7326
                                                                                                                       // 7327
	            // Choose mixing block                                                                                    // 7328
	            if (iv) {                                                                                                 // 7329
	                var block = iv;                                                                                       // 7330
                                                                                                                       // 7331
	                // Remove IV for subsequent blocks                                                                    // 7332
	                this._iv = undefined;                                                                                 // 7333
	            } else {                                                                                                  // 7334
	                var block = this._prevBlock;                                                                          // 7335
	            }                                                                                                         // 7336
                                                                                                                       // 7337
	            // XOR blocks                                                                                             // 7338
	            for (var i = 0; i < blockSize; i++) {                                                                     // 7339
	                words[offset + i] ^= block[i];                                                                        // 7340
	            }                                                                                                         // 7341
	        }                                                                                                             // 7342
                                                                                                                       // 7343
	        return CBC;                                                                                                   // 7344
	    }());                                                                                                             // 7345
                                                                                                                       // 7346
	    /**                                                                                                               // 7347
	     * Padding namespace.                                                                                             // 7348
	     */                                                                                                               // 7349
	    var C_pad = C.pad = {};                                                                                           // 7350
                                                                                                                       // 7351
	    /**                                                                                                               // 7352
	     * PKCS #5/7 padding strategy.                                                                                    // 7353
	     */                                                                                                               // 7354
	    var Pkcs7 = C_pad.Pkcs7 = {                                                                                       // 7355
	        /**                                                                                                           // 7356
	         * Pads data using the algorithm defined in PKCS #5/7.                                                        // 7357
	         *                                                                                                            // 7358
	         * @param {WordArray} data The data to pad.                                                                   // 7359
	         * @param {number} blockSize The multiple that the data should be padded to.                                  // 7360
	         *                                                                                                            // 7361
	         * @static                                                                                                    // 7362
	         *                                                                                                            // 7363
	         * @example                                                                                                   // 7364
	         *                                                                                                            // 7365
	         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);                                                                  // 7366
	         */                                                                                                           // 7367
	        pad: function (data, blockSize) {                                                                             // 7368
	            // Shortcut                                                                                               // 7369
	            var blockSizeBytes = blockSize * 4;                                                                       // 7370
                                                                                                                       // 7371
	            // Count padding bytes                                                                                    // 7372
	            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;                                      // 7373
                                                                                                                       // 7374
	            // Create padding word                                                                                    // 7375
	            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;   // 7376
                                                                                                                       // 7377
	            // Create padding                                                                                         // 7378
	            var paddingWords = [];                                                                                    // 7379
	            for (var i = 0; i < nPaddingBytes; i += 4) {                                                              // 7380
	                paddingWords.push(paddingWord);                                                                       // 7381
	            }                                                                                                         // 7382
	            var padding = WordArray.create(paddingWords, nPaddingBytes);                                              // 7383
                                                                                                                       // 7384
	            // Add padding                                                                                            // 7385
	            data.concat(padding);                                                                                     // 7386
	        },                                                                                                            // 7387
                                                                                                                       // 7388
	        /**                                                                                                           // 7389
	         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.                                 // 7390
	         *                                                                                                            // 7391
	         * @param {WordArray} data The data to unpad.                                                                 // 7392
	         *                                                                                                            // 7393
	         * @static                                                                                                    // 7394
	         *                                                                                                            // 7395
	         * @example                                                                                                   // 7396
	         *                                                                                                            // 7397
	         *     CryptoJS.pad.Pkcs7.unpad(wordArray);                                                                   // 7398
	         */                                                                                                           // 7399
	        unpad: function (data) {                                                                                      // 7400
	            // Get number of padding bytes from last byte                                                             // 7401
	            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;                                         // 7402
                                                                                                                       // 7403
	            // Remove padding                                                                                         // 7404
	            data.sigBytes -= nPaddingBytes;                                                                           // 7405
	        }                                                                                                             // 7406
	    };                                                                                                                // 7407
                                                                                                                       // 7408
	    /**                                                                                                               // 7409
	     * Abstract base block cipher template.                                                                           // 7410
	     *                                                                                                                // 7411
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)         // 7412
	     */                                                                                                               // 7413
	    var BlockCipher = C_lib.BlockCipher = Cipher.extend({                                                             // 7414
	        /**                                                                                                           // 7415
	         * Configuration options.                                                                                     // 7416
	         *                                                                                                            // 7417
	         * @property {Mode} mode The block mode to use. Default: CBC                                                  // 7418
	         * @property {Padding} padding The padding strategy to use. Default: Pkcs7                                    // 7419
	         */                                                                                                           // 7420
	        cfg: Cipher.cfg.extend({                                                                                      // 7421
	            mode: CBC,                                                                                                // 7422
	            padding: Pkcs7                                                                                            // 7423
	        }),                                                                                                           // 7424
                                                                                                                       // 7425
	        reset: function () {                                                                                          // 7426
	            // Reset cipher                                                                                           // 7427
	            Cipher.reset.call(this);                                                                                  // 7428
                                                                                                                       // 7429
	            // Shortcuts                                                                                              // 7430
	            var cfg = this.cfg;                                                                                       // 7431
	            var iv = cfg.iv;                                                                                          // 7432
	            var mode = cfg.mode;                                                                                      // 7433
                                                                                                                       // 7434
	            // Reset block mode                                                                                       // 7435
	            if (this._xformMode == this._ENC_XFORM_MODE) {                                                            // 7436
	                var modeCreator = mode.createEncryptor;                                                               // 7437
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {                                               // 7438
	                var modeCreator = mode.createDecryptor;                                                               // 7439
                                                                                                                       // 7440
	                // Keep at least one block in the buffer for unpadding                                                // 7441
	                this._minBufferSize = 1;                                                                              // 7442
	            }                                                                                                         // 7443
	            this._mode = modeCreator.call(mode, this, iv && iv.words);                                                // 7444
	        },                                                                                                            // 7445
                                                                                                                       // 7446
	        _doProcessBlock: function (words, offset) {                                                                   // 7447
	            this._mode.processBlock(words, offset);                                                                   // 7448
	        },                                                                                                            // 7449
                                                                                                                       // 7450
	        _doFinalize: function () {                                                                                    // 7451
	            // Shortcut                                                                                               // 7452
	            var padding = this.cfg.padding;                                                                           // 7453
                                                                                                                       // 7454
	            // Finalize                                                                                               // 7455
	            if (this._xformMode == this._ENC_XFORM_MODE) {                                                            // 7456
	                // Pad data                                                                                           // 7457
	                padding.pad(this._data, this.blockSize);                                                              // 7458
                                                                                                                       // 7459
	                // Process final blocks                                                                               // 7460
	                var finalProcessedBlocks = this._process(!!'flush');                                                  // 7461
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {                                               // 7462
	                // Process final blocks                                                                               // 7463
	                var finalProcessedBlocks = this._process(!!'flush');                                                  // 7464
                                                                                                                       // 7465
	                // Unpad data                                                                                         // 7466
	                padding.unpad(finalProcessedBlocks);                                                                  // 7467
	            }                                                                                                         // 7468
                                                                                                                       // 7469
	            return finalProcessedBlocks;                                                                              // 7470
	        },                                                                                                            // 7471
                                                                                                                       // 7472
	        blockSize: 128/32                                                                                             // 7473
	    });                                                                                                               // 7474
                                                                                                                       // 7475
	    /**                                                                                                               // 7476
	     * A collection of cipher parameters.                                                                             // 7477
	     *                                                                                                                // 7478
	     * @property {WordArray} ciphertext The raw ciphertext.                                                           // 7479
	     * @property {WordArray} key The key to this ciphertext.                                                          // 7480
	     * @property {WordArray} iv The IV used in the ciphering operation.                                               // 7481
	     * @property {WordArray} salt The salt used with a key derivation function.                                       // 7482
	     * @property {Cipher} algorithm The cipher algorithm.                                                             // 7483
	     * @property {Mode} mode The block mode used in the ciphering operation.                                          // 7484
	     * @property {Padding} padding The padding scheme used in the ciphering operation.                                // 7485
	     * @property {number} blockSize The block size of the cipher.                                                     // 7486
	     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
	     */                                                                                                               // 7488
	    var CipherParams = C_lib.CipherParams = Base.extend({                                                             // 7489
	        /**                                                                                                           // 7490
	         * Initializes a newly created cipher params object.                                                          // 7491
	         *                                                                                                            // 7492
	         * @param {Object} cipherParams An object with any of the possible cipher parameters.                         // 7493
	         *                                                                                                            // 7494
	         * @example                                                                                                   // 7495
	         *                                                                                                            // 7496
	         *     var cipherParams = CryptoJS.lib.CipherParams.create({                                                  // 7497
	         *         ciphertext: ciphertextWordArray,                                                                   // 7498
	         *         key: keyWordArray,                                                                                 // 7499
	         *         iv: ivWordArray,                                                                                   // 7500
	         *         salt: saltWordArray,                                                                               // 7501
	         *         algorithm: CryptoJS.algo.AES,                                                                      // 7502
	         *         mode: CryptoJS.mode.CBC,                                                                           // 7503
	         *         padding: CryptoJS.pad.PKCS7,                                                                       // 7504
	         *         blockSize: 4,                                                                                      // 7505
	         *         formatter: CryptoJS.format.OpenSSL                                                                 // 7506
	         *     });                                                                                                    // 7507
	         */                                                                                                           // 7508
	        init: function (cipherParams) {                                                                               // 7509
	            this.mixIn(cipherParams);                                                                                 // 7510
	        },                                                                                                            // 7511
                                                                                                                       // 7512
	        /**                                                                                                           // 7513
	         * Converts this cipher params object to a string.                                                            // 7514
	         *                                                                                                            // 7515
	         * @param {Format} formatter (Optional) The formatting strategy to use.                                       // 7516
	         *                                                                                                            // 7517
	         * @return {string} The stringified cipher params.                                                            // 7518
	         *                                                                                                            // 7519
	         * @throws Error If neither the formatter nor the default formatter is set.                                   // 7520
	         *                                                                                                            // 7521
	         * @example                                                                                                   // 7522
	         *                                                                                                            // 7523
	         *     var string = cipherParams + '';                                                                        // 7524
	         *     var string = cipherParams.toString();                                                                  // 7525
	         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);                                           // 7526
	         */                                                                                                           // 7527
	        toString: function (formatter) {                                                                              // 7528
	            return (formatter || this.formatter).stringify(this);                                                     // 7529
	        }                                                                                                             // 7530
	    });                                                                                                               // 7531
                                                                                                                       // 7532
	    /**                                                                                                               // 7533
	     * Format namespace.                                                                                              // 7534
	     */                                                                                                               // 7535
	    var C_format = C.format = {};                                                                                     // 7536
                                                                                                                       // 7537
	    /**                                                                                                               // 7538
	     * OpenSSL formatting strategy.                                                                                   // 7539
	     */                                                                                                               // 7540
	    var OpenSSLFormatter = C_format.OpenSSL = {                                                                       // 7541
	        /**                                                                                                           // 7542
	         * Converts a cipher params object to an OpenSSL-compatible string.                                           // 7543
	         *                                                                                                            // 7544
	         * @param {CipherParams} cipherParams The cipher params object.                                               // 7545
	         *                                                                                                            // 7546
	         * @return {string} The OpenSSL-compatible string.                                                            // 7547
	         *                                                                                                            // 7548
	         * @static                                                                                                    // 7549
	         *                                                                                                            // 7550
	         * @example                                                                                                   // 7551
	         *                                                                                                            // 7552
	         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);                                   // 7553
	         */                                                                                                           // 7554
	        stringify: function (cipherParams) {                                                                          // 7555
	            // Shortcuts                                                                                              // 7556
	            var ciphertext = cipherParams.ciphertext;                                                                 // 7557
	            var salt = cipherParams.salt;                                                                             // 7558
                                                                                                                       // 7559
	            // Format                                                                                                 // 7560
	            if (salt) {                                                                                               // 7561
	                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);           // 7562
	            } else {                                                                                                  // 7563
	                var wordArray = ciphertext;                                                                           // 7564
	            }                                                                                                         // 7565
                                                                                                                       // 7566
	            return wordArray.toString(Base64);                                                                        // 7567
	        },                                                                                                            // 7568
                                                                                                                       // 7569
	        /**                                                                                                           // 7570
	         * Converts an OpenSSL-compatible string to a cipher params object.                                           // 7571
	         *                                                                                                            // 7572
	         * @param {string} openSSLStr The OpenSSL-compatible string.                                                  // 7573
	         *                                                                                                            // 7574
	         * @return {CipherParams} The cipher params object.                                                           // 7575
	         *                                                                                                            // 7576
	         * @static                                                                                                    // 7577
	         *                                                                                                            // 7578
	         * @example                                                                                                   // 7579
	         *                                                                                                            // 7580
	         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);                                       // 7581
	         */                                                                                                           // 7582
	        parse: function (openSSLStr) {                                                                                // 7583
	            // Parse base64                                                                                           // 7584
	            var ciphertext = Base64.parse(openSSLStr);                                                                // 7585
                                                                                                                       // 7586
	            // Shortcut                                                                                               // 7587
	            var ciphertextWords = ciphertext.words;                                                                   // 7588
                                                                                                                       // 7589
	            // Test for salt                                                                                          // 7590
	            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {                               // 7591
	                // Extract salt                                                                                       // 7592
	                var salt = WordArray.create(ciphertextWords.slice(2, 4));                                             // 7593
                                                                                                                       // 7594
	                // Remove salt from ciphertext                                                                        // 7595
	                ciphertextWords.splice(0, 4);                                                                         // 7596
	                ciphertext.sigBytes -= 16;                                                                            // 7597
	            }                                                                                                         // 7598
                                                                                                                       // 7599
	            return CipherParams.create({ ciphertext: ciphertext, salt: salt });                                       // 7600
	        }                                                                                                             // 7601
	    };                                                                                                                // 7602
                                                                                                                       // 7603
	    /**                                                                                                               // 7604
	     * A cipher wrapper that returns ciphertext as a serializable cipher params object.                               // 7605
	     */                                                                                                               // 7606
	    var SerializableCipher = C_lib.SerializableCipher = Base.extend({                                                 // 7607
	        /**                                                                                                           // 7608
	         * Configuration options.                                                                                     // 7609
	         *                                                                                                            // 7610
	         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
	         */                                                                                                           // 7612
	        cfg: Base.extend({                                                                                            // 7613
	            format: OpenSSLFormatter                                                                                  // 7614
	        }),                                                                                                           // 7615
                                                                                                                       // 7616
	        /**                                                                                                           // 7617
	         * Encrypts a message.                                                                                        // 7618
	         *                                                                                                            // 7619
	         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 7620
	         * @param {WordArray|string} message The message to encrypt.                                                  // 7621
	         * @param {WordArray} key The key.                                                                            // 7622
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7623
	         *                                                                                                            // 7624
	         * @return {CipherParams} A cipher params object.                                                             // 7625
	         *                                                                                                            // 7626
	         * @static                                                                                                    // 7627
	         *                                                                                                            // 7628
	         * @example                                                                                                   // 7629
	         *                                                                                                            // 7630
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);       // 7631
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */                                                                                                           // 7634
	        encrypt: function (cipher, message, key, cfg) {                                                               // 7635
	            // Apply config defaults                                                                                  // 7636
	            cfg = this.cfg.extend(cfg);                                                                               // 7637
                                                                                                                       // 7638
	            // Encrypt                                                                                                // 7639
	            var encryptor = cipher.createEncryptor(key, cfg);                                                         // 7640
	            var ciphertext = encryptor.finalize(message);                                                             // 7641
                                                                                                                       // 7642
	            // Shortcut                                                                                               // 7643
	            var cipherCfg = encryptor.cfg;                                                                            // 7644
                                                                                                                       // 7645
	            // Create and return serializable cipher params                                                           // 7646
	            return CipherParams.create({                                                                              // 7647
	                ciphertext: ciphertext,                                                                               // 7648
	                key: key,                                                                                             // 7649
	                iv: cipherCfg.iv,                                                                                     // 7650
	                algorithm: cipher,                                                                                    // 7651
	                mode: cipherCfg.mode,                                                                                 // 7652
	                padding: cipherCfg.padding,                                                                           // 7653
	                blockSize: cipher.blockSize,                                                                          // 7654
	                formatter: cfg.format                                                                                 // 7655
	            });                                                                                                       // 7656
	        },                                                                                                            // 7657
                                                                                                                       // 7658
	        /**                                                                                                           // 7659
	         * Decrypts serialized ciphertext.                                                                            // 7660
	         *                                                                                                            // 7661
	         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 7662
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.                                         // 7663
	         * @param {WordArray} key The key.                                                                            // 7664
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7665
	         *                                                                                                            // 7666
	         * @return {WordArray} The plaintext.                                                                         // 7667
	         *                                                                                                            // 7668
	         * @static                                                                                                    // 7669
	         *                                                                                                            // 7670
	         * @example                                                                                                   // 7671
	         *                                                                                                            // 7672
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */                                                                                                           // 7675
	        decrypt: function (cipher, ciphertext, key, cfg) {                                                            // 7676
	            // Apply config defaults                                                                                  // 7677
	            cfg = this.cfg.extend(cfg);                                                                               // 7678
                                                                                                                       // 7679
	            // Convert string to CipherParams                                                                         // 7680
	            ciphertext = this._parse(ciphertext, cfg.format);                                                         // 7681
                                                                                                                       // 7682
	            // Decrypt                                                                                                // 7683
	            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);                         // 7684
                                                                                                                       // 7685
	            return plaintext;                                                                                         // 7686
	        },                                                                                                            // 7687
                                                                                                                       // 7688
	        /**                                                                                                           // 7689
	         * Converts serialized ciphertext to CipherParams,                                                            // 7690
	         * else assumed CipherParams already and returns ciphertext unchanged.                                        // 7691
	         *                                                                                                            // 7692
	         * @param {CipherParams|string} ciphertext The ciphertext.                                                    // 7693
	         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.                   // 7694
	         *                                                                                                            // 7695
	         * @return {CipherParams} The unserialized ciphertext.                                                        // 7696
	         *                                                                                                            // 7697
	         * @static                                                                                                    // 7698
	         *                                                                                                            // 7699
	         * @example                                                                                                   // 7700
	         *                                                                                                            // 7701
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);       // 7702
	         */                                                                                                           // 7703
	        _parse: function (ciphertext, format) {                                                                       // 7704
	            if (typeof ciphertext == 'string') {                                                                      // 7705
	                return format.parse(ciphertext, this);                                                                // 7706
	            } else {                                                                                                  // 7707
	                return ciphertext;                                                                                    // 7708
	            }                                                                                                         // 7709
	        }                                                                                                             // 7710
	    });                                                                                                               // 7711
                                                                                                                       // 7712
	    /**                                                                                                               // 7713
	     * Key derivation function namespace.                                                                             // 7714
	     */                                                                                                               // 7715
	    var C_kdf = C.kdf = {};                                                                                           // 7716
                                                                                                                       // 7717
	    /**                                                                                                               // 7718
	     * OpenSSL key derivation function.                                                                               // 7719
	     */                                                                                                               // 7720
	    var OpenSSLKdf = C_kdf.OpenSSL = {                                                                                // 7721
	        /**                                                                                                           // 7722
	         * Derives a key and IV from a password.                                                                      // 7723
	         *                                                                                                            // 7724
	         * @param {string} password The password to derive from.                                                      // 7725
	         * @param {number} keySize The size in words of the key to generate.                                          // 7726
	         * @param {number} ivSize The size in words of the IV to generate.                                            // 7727
	         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
	         *                                                                                                            // 7729
	         * @return {CipherParams} A cipher params object with the key, IV, and salt.                                  // 7730
	         *                                                                                                            // 7731
	         * @static                                                                                                    // 7732
	         *                                                                                                            // 7733
	         * @example                                                                                                   // 7734
	         *                                                                                                            // 7735
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);                          // 7736
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');              // 7737
	         */                                                                                                           // 7738
	        execute: function (password, keySize, ivSize, salt) {                                                         // 7739
	            // Generate random salt                                                                                   // 7740
	            if (!salt) {                                                                                              // 7741
	                salt = WordArray.random(64/8);                                                                        // 7742
	            }                                                                                                         // 7743
                                                                                                                       // 7744
	            // Derive key and IV                                                                                      // 7745
	            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);                           // 7746
                                                                                                                       // 7747
	            // Separate key and IV                                                                                    // 7748
	            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);                                          // 7749
	            key.sigBytes = keySize * 4;                                                                               // 7750
                                                                                                                       // 7751
	            // Return params                                                                                          // 7752
	            return CipherParams.create({ key: key, iv: iv, salt: salt });                                             // 7753
	        }                                                                                                             // 7754
	    };                                                                                                                // 7755
                                                                                                                       // 7756
	    /**                                                                                                               // 7757
	     * A serializable cipher wrapper that derives the key from a password,                                            // 7758
	     * and returns ciphertext as a serializable cipher params object.                                                 // 7759
	     */                                                                                                               // 7760
	    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({                                 // 7761
	        /**                                                                                                           // 7762
	         * Configuration options.                                                                                     // 7763
	         *                                                                                                            // 7764
	         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
	         */                                                                                                           // 7766
	        cfg: SerializableCipher.cfg.extend({                                                                          // 7767
	            kdf: OpenSSLKdf                                                                                           // 7768
	        }),                                                                                                           // 7769
                                                                                                                       // 7770
	        /**                                                                                                           // 7771
	         * Encrypts a message using a password.                                                                       // 7772
	         *                                                                                                            // 7773
	         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 7774
	         * @param {WordArray|string} message The message to encrypt.                                                  // 7775
	         * @param {string} password The password.                                                                     // 7776
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7777
	         *                                                                                                            // 7778
	         * @return {CipherParams} A cipher params object.                                                             // 7779
	         *                                                                                                            // 7780
	         * @static                                                                                                    // 7781
	         *                                                                                                            // 7782
	         * @example                                                                                                   // 7783
	         *                                                                                                            // 7784
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
	         */                                                                                                           // 7787
	        encrypt: function (cipher, message, password, cfg) {                                                          // 7788
	            // Apply config defaults                                                                                  // 7789
	            cfg = this.cfg.extend(cfg);                                                                               // 7790
                                                                                                                       // 7791
	            // Derive key and other params                                                                            // 7792
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);                             // 7793
                                                                                                                       // 7794
	            // Add IV to config                                                                                       // 7795
	            cfg.iv = derivedParams.iv;                                                                                // 7796
                                                                                                                       // 7797
	            // Encrypt                                                                                                // 7798
	            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);          // 7799
                                                                                                                       // 7800
	            // Mix in derived params                                                                                  // 7801
	            ciphertext.mixIn(derivedParams);                                                                          // 7802
                                                                                                                       // 7803
	            return ciphertext;                                                                                        // 7804
	        },                                                                                                            // 7805
                                                                                                                       // 7806
	        /**                                                                                                           // 7807
	         * Decrypts serialized ciphertext using a password.                                                           // 7808
	         *                                                                                                            // 7809
	         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 7810
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.                                         // 7811
	         * @param {string} password The password.                                                                     // 7812
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7813
	         *                                                                                                            // 7814
	         * @return {WordArray} The plaintext.                                                                         // 7815
	         *                                                                                                            // 7816
	         * @static                                                                                                    // 7817
	         *                                                                                                            // 7818
	         * @example                                                                                                   // 7819
	         *                                                                                                            // 7820
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
	         */                                                                                                           // 7823
	        decrypt: function (cipher, ciphertext, password, cfg) {                                                       // 7824
	            // Apply config defaults                                                                                  // 7825
	            cfg = this.cfg.extend(cfg);                                                                               // 7826
                                                                                                                       // 7827
	            // Convert string to CipherParams                                                                         // 7828
	            ciphertext = this._parse(ciphertext, cfg.format);                                                         // 7829
                                                                                                                       // 7830
	            // Derive key and other params                                                                            // 7831
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);            // 7832
                                                                                                                       // 7833
	            // Add IV to config                                                                                       // 7834
	            cfg.iv = derivedParams.iv;                                                                                // 7835
                                                                                                                       // 7836
	            // Decrypt                                                                                                // 7837
	            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);        // 7838
                                                                                                                       // 7839
	            return plaintext;                                                                                         // 7840
	        }                                                                                                             // 7841
	    });                                                                                                               // 7842
	}());                                                                                                                 // 7843
                                                                                                                       // 7844
                                                                                                                       // 7845
}));                                                                                                                   // 7846
},{"./core":52}],52:[function(require,module,exports){                                                                 // 7847
;(function (root, factory) {                                                                                           // 7848
	if (typeof exports === "object") {                                                                                    // 7849
		// CommonJS                                                                                                          // 7850
		module.exports = exports = factory();                                                                                // 7851
	}                                                                                                                     // 7852
	else if (typeof define === "function" && define.amd) {                                                                // 7853
		// AMD                                                                                                               // 7854
		define([], factory);                                                                                                 // 7855
	}                                                                                                                     // 7856
	else {                                                                                                                // 7857
		// Global (browser)                                                                                                  // 7858
		root.CryptoJS = factory();                                                                                           // 7859
	}                                                                                                                     // 7860
}(this, function () {                                                                                                  // 7861
                                                                                                                       // 7862
	/**                                                                                                                   // 7863
	 * CryptoJS core components.                                                                                          // 7864
	 */                                                                                                                   // 7865
	var CryptoJS = CryptoJS || (function (Math, undefined) {                                                              // 7866
	    /*                                                                                                                // 7867
	     * Local polyfil of Object.create                                                                                 // 7868
	     */                                                                                                               // 7869
	    var create = Object.create || (function () {                                                                      // 7870
	        function F() {};                                                                                              // 7871
                                                                                                                       // 7872
	        return function (obj) {                                                                                       // 7873
	            var subtype;                                                                                              // 7874
                                                                                                                       // 7875
	            F.prototype = obj;                                                                                        // 7876
                                                                                                                       // 7877
	            subtype = new F();                                                                                        // 7878
                                                                                                                       // 7879
	            F.prototype = null;                                                                                       // 7880
                                                                                                                       // 7881
	            return subtype;                                                                                           // 7882
	        };                                                                                                            // 7883
	    }())                                                                                                              // 7884
                                                                                                                       // 7885
	    /**                                                                                                               // 7886
	     * CryptoJS namespace.                                                                                            // 7887
	     */                                                                                                               // 7888
	    var C = {};                                                                                                       // 7889
                                                                                                                       // 7890
	    /**                                                                                                               // 7891
	     * Library namespace.                                                                                             // 7892
	     */                                                                                                               // 7893
	    var C_lib = C.lib = {};                                                                                           // 7894
                                                                                                                       // 7895
	    /**                                                                                                               // 7896
	     * Base object for prototypal inheritance.                                                                        // 7897
	     */                                                                                                               // 7898
	    var Base = C_lib.Base = (function () {                                                                            // 7899
                                                                                                                       // 7900
                                                                                                                       // 7901
	        return {                                                                                                      // 7902
	            /**                                                                                                       // 7903
	             * Creates a new object that inherits from this object.                                                   // 7904
	             *                                                                                                        // 7905
	             * @param {Object} overrides Properties to copy into the new object.                                      // 7906
	             *                                                                                                        // 7907
	             * @return {Object} The new object.                                                                       // 7908
	             *                                                                                                        // 7909
	             * @static                                                                                                // 7910
	             *                                                                                                        // 7911
	             * @example                                                                                               // 7912
	             *                                                                                                        // 7913
	             *     var MyType = CryptoJS.lib.Base.extend({                                                            // 7914
	             *         field: 'value',                                                                                // 7915
	             *                                                                                                        // 7916
	             *         method: function () {                                                                          // 7917
	             *         }                                                                                              // 7918
	             *     });                                                                                                // 7919
	             */                                                                                                       // 7920
	            extend: function (overrides) {                                                                            // 7921
	                // Spawn                                                                                              // 7922
	                var subtype = create(this);                                                                           // 7923
                                                                                                                       // 7924
	                // Augment                                                                                            // 7925
	                if (overrides) {                                                                                      // 7926
	                    subtype.mixIn(overrides);                                                                         // 7927
	                }                                                                                                     // 7928
                                                                                                                       // 7929
	                // Create default initializer                                                                         // 7930
	                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {                                  // 7931
	                    subtype.init = function () {                                                                      // 7932
	                        subtype.$super.init.apply(this, arguments);                                                   // 7933
	                    };                                                                                                // 7934
	                }                                                                                                     // 7935
                                                                                                                       // 7936
	                // Initializer's prototype is the subtype object                                                      // 7937
	                subtype.init.prototype = subtype;                                                                     // 7938
                                                                                                                       // 7939
	                // Reference supertype                                                                                // 7940
	                subtype.$super = this;                                                                                // 7941
                                                                                                                       // 7942
	                return subtype;                                                                                       // 7943
	            },                                                                                                        // 7944
                                                                                                                       // 7945
	            /**                                                                                                       // 7946
	             * Extends this object and runs the init method.                                                          // 7947
	             * Arguments to create() will be passed to init().                                                        // 7948
	             *                                                                                                        // 7949
	             * @return {Object} The new object.                                                                       // 7950
	             *                                                                                                        // 7951
	             * @static                                                                                                // 7952
	             *                                                                                                        // 7953
	             * @example                                                                                               // 7954
	             *                                                                                                        // 7955
	             *     var instance = MyType.create();                                                                    // 7956
	             */                                                                                                       // 7957
	            create: function () {                                                                                     // 7958
	                var instance = this.extend();                                                                         // 7959
	                instance.init.apply(instance, arguments);                                                             // 7960
                                                                                                                       // 7961
	                return instance;                                                                                      // 7962
	            },                                                                                                        // 7963
                                                                                                                       // 7964
	            /**                                                                                                       // 7965
	             * Initializes a newly created object.                                                                    // 7966
	             * Override this method to add some logic when your objects are created.                                  // 7967
	             *                                                                                                        // 7968
	             * @example                                                                                               // 7969
	             *                                                                                                        // 7970
	             *     var MyType = CryptoJS.lib.Base.extend({                                                            // 7971
	             *         init: function () {                                                                            // 7972
	             *             // ...                                                                                     // 7973
	             *         }                                                                                              // 7974
	             *     });                                                                                                // 7975
	             */                                                                                                       // 7976
	            init: function () {                                                                                       // 7977
	            },                                                                                                        // 7978
                                                                                                                       // 7979
	            /**                                                                                                       // 7980
	             * Copies properties into this object.                                                                    // 7981
	             *                                                                                                        // 7982
	             * @param {Object} properties The properties to mix in.                                                   // 7983
	             *                                                                                                        // 7984
	             * @example                                                                                               // 7985
	             *                                                                                                        // 7986
	             *     MyType.mixIn({                                                                                     // 7987
	             *         field: 'value'                                                                                 // 7988
	             *     });                                                                                                // 7989
	             */                                                                                                       // 7990
	            mixIn: function (properties) {                                                                            // 7991
	                for (var propertyName in properties) {                                                                // 7992
	                    if (properties.hasOwnProperty(propertyName)) {                                                    // 7993
	                        this[propertyName] = properties[propertyName];                                                // 7994
	                    }                                                                                                 // 7995
	                }                                                                                                     // 7996
                                                                                                                       // 7997
	                // IE won't copy toString using the loop above                                                        // 7998
	                if (properties.hasOwnProperty('toString')) {                                                          // 7999
	                    this.toString = properties.toString;                                                              // 8000
	                }                                                                                                     // 8001
	            },                                                                                                        // 8002
                                                                                                                       // 8003
	            /**                                                                                                       // 8004
	             * Creates a copy of this object.                                                                         // 8005
	             *                                                                                                        // 8006
	             * @return {Object} The clone.                                                                            // 8007
	             *                                                                                                        // 8008
	             * @example                                                                                               // 8009
	             *                                                                                                        // 8010
	             *     var clone = instance.clone();                                                                      // 8011
	             */                                                                                                       // 8012
	            clone: function () {                                                                                      // 8013
	                return this.init.prototype.extend(this);                                                              // 8014
	            }                                                                                                         // 8015
	        };                                                                                                            // 8016
	    }());                                                                                                             // 8017
                                                                                                                       // 8018
	    /**                                                                                                               // 8019
	     * An array of 32-bit words.                                                                                      // 8020
	     *                                                                                                                // 8021
	     * @property {Array} words The array of 32-bit words.                                                             // 8022
	     * @property {number} sigBytes The number of significant bytes in this word array.                                // 8023
	     */                                                                                                               // 8024
	    var WordArray = C_lib.WordArray = Base.extend({                                                                   // 8025
	        /**                                                                                                           // 8026
	         * Initializes a newly created word array.                                                                    // 8027
	         *                                                                                                            // 8028
	         * @param {Array} words (Optional) An array of 32-bit words.                                                  // 8029
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.                          // 8030
	         *                                                                                                            // 8031
	         * @example                                                                                                   // 8032
	         *                                                                                                            // 8033
	         *     var wordArray = CryptoJS.lib.WordArray.create();                                                       // 8034
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);                               // 8035
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);                            // 8036
	         */                                                                                                           // 8037
	        init: function (words, sigBytes) {                                                                            // 8038
	            words = this.words = words || [];                                                                         // 8039
                                                                                                                       // 8040
	            if (sigBytes != undefined) {                                                                              // 8041
	                this.sigBytes = sigBytes;                                                                             // 8042
	            } else {                                                                                                  // 8043
	                this.sigBytes = words.length * 4;                                                                     // 8044
	            }                                                                                                         // 8045
	        },                                                                                                            // 8046
                                                                                                                       // 8047
	        /**                                                                                                           // 8048
	         * Converts this word array to a string.                                                                      // 8049
	         *                                                                                                            // 8050
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex                // 8051
	         *                                                                                                            // 8052
	         * @return {string} The stringified word array.                                                               // 8053
	         *                                                                                                            // 8054
	         * @example                                                                                                   // 8055
	         *                                                                                                            // 8056
	         *     var string = wordArray + '';                                                                           // 8057
	         *     var string = wordArray.toString();                                                                     // 8058
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);                                                    // 8059
	         */                                                                                                           // 8060
	        toString: function (encoder) {                                                                                // 8061
	            return (encoder || Hex).stringify(this);                                                                  // 8062
	        },                                                                                                            // 8063
                                                                                                                       // 8064
	        /**                                                                                                           // 8065
	         * Concatenates a word array to this word array.                                                              // 8066
	         *                                                                                                            // 8067
	         * @param {WordArray} wordArray The word array to append.                                                     // 8068
	         *                                                                                                            // 8069
	         * @return {WordArray} This word array.                                                                       // 8070
	         *                                                                                                            // 8071
	         * @example                                                                                                   // 8072
	         *                                                                                                            // 8073
	         *     wordArray1.concat(wordArray2);                                                                         // 8074
	         */                                                                                                           // 8075
	        concat: function (wordArray) {                                                                                // 8076
	            // Shortcuts                                                                                              // 8077
	            var thisWords = this.words;                                                                               // 8078
	            var thatWords = wordArray.words;                                                                          // 8079
	            var thisSigBytes = this.sigBytes;                                                                         // 8080
	            var thatSigBytes = wordArray.sigBytes;                                                                    // 8081
                                                                                                                       // 8082
	            // Clamp excess bits                                                                                      // 8083
	            this.clamp();                                                                                             // 8084
                                                                                                                       // 8085
	            // Concat                                                                                                 // 8086
	            if (thisSigBytes % 4) {                                                                                   // 8087
	                // Copy one byte at a time                                                                            // 8088
	                for (var i = 0; i < thatSigBytes; i++) {                                                              // 8089
	                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                // 8090
	                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);           // 8091
	                }                                                                                                     // 8092
	            } else {                                                                                                  // 8093
	                // Copy one word at a time                                                                            // 8094
	                for (var i = 0; i < thatSigBytes; i += 4) {                                                           // 8095
	                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];                                         // 8096
	                }                                                                                                     // 8097
	            }                                                                                                         // 8098
	            this.sigBytes += thatSigBytes;                                                                            // 8099
                                                                                                                       // 8100
	            // Chainable                                                                                              // 8101
	            return this;                                                                                              // 8102
	        },                                                                                                            // 8103
                                                                                                                       // 8104
	        /**                                                                                                           // 8105
	         * Removes insignificant bits.                                                                                // 8106
	         *                                                                                                            // 8107
	         * @example                                                                                                   // 8108
	         *                                                                                                            // 8109
	         *     wordArray.clamp();                                                                                     // 8110
	         */                                                                                                           // 8111
	        clamp: function () {                                                                                          // 8112
	            // Shortcuts                                                                                              // 8113
	            var words = this.words;                                                                                   // 8114
	            var sigBytes = this.sigBytes;                                                                             // 8115
                                                                                                                       // 8116
	            // Clamp                                                                                                  // 8117
	            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);                                         // 8118
	            words.length = Math.ceil(sigBytes / 4);                                                                   // 8119
	        },                                                                                                            // 8120
                                                                                                                       // 8121
	        /**                                                                                                           // 8122
	         * Creates a copy of this word array.                                                                         // 8123
	         *                                                                                                            // 8124
	         * @return {WordArray} The clone.                                                                             // 8125
	         *                                                                                                            // 8126
	         * @example                                                                                                   // 8127
	         *                                                                                                            // 8128
	         *     var clone = wordArray.clone();                                                                         // 8129
	         */                                                                                                           // 8130
	        clone: function () {                                                                                          // 8131
	            var clone = Base.clone.call(this);                                                                        // 8132
	            clone.words = this.words.slice(0);                                                                        // 8133
                                                                                                                       // 8134
	            return clone;                                                                                             // 8135
	        },                                                                                                            // 8136
                                                                                                                       // 8137
	        /**                                                                                                           // 8138
	         * Creates a word array filled with random bytes.                                                             // 8139
	         *                                                                                                            // 8140
	         * @param {number} nBytes The number of random bytes to generate.                                             // 8141
	         *                                                                                                            // 8142
	         * @return {WordArray} The random word array.                                                                 // 8143
	         *                                                                                                            // 8144
	         * @static                                                                                                    // 8145
	         *                                                                                                            // 8146
	         * @example                                                                                                   // 8147
	         *                                                                                                            // 8148
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);                                                     // 8149
	         */                                                                                                           // 8150
	        random: function (nBytes) {                                                                                   // 8151
	            var words = [];                                                                                           // 8152
                                                                                                                       // 8153
	            var r = (function (m_w) {                                                                                 // 8154
	                var m_w = m_w;                                                                                        // 8155
	                var m_z = 0x3ade68b1;                                                                                 // 8156
	                var mask = 0xffffffff;                                                                                // 8157
                                                                                                                       // 8158
	                return function () {                                                                                  // 8159
	                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;                                           // 8160
	                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;                                           // 8161
	                    var result = ((m_z << 0x10) + m_w) & mask;                                                        // 8162
	                    result /= 0x100000000;                                                                            // 8163
	                    result += 0.5;                                                                                    // 8164
	                    return result * (Math.random() > .5 ? 1 : -1);                                                    // 8165
	                }                                                                                                     // 8166
	            });                                                                                                       // 8167
                                                                                                                       // 8168
	            for (var i = 0, rcache; i < nBytes; i += 4) {                                                             // 8169
	                var _r = r((rcache || Math.random()) * 0x100000000);                                                  // 8170
                                                                                                                       // 8171
	                rcache = _r() * 0x3ade67b7;                                                                           // 8172
	                words.push((_r() * 0x100000000) | 0);                                                                 // 8173
	            }                                                                                                         // 8174
                                                                                                                       // 8175
	            return new WordArray.init(words, nBytes);                                                                 // 8176
	        }                                                                                                             // 8177
	    });                                                                                                               // 8178
                                                                                                                       // 8179
	    /**                                                                                                               // 8180
	     * Encoder namespace.                                                                                             // 8181
	     */                                                                                                               // 8182
	    var C_enc = C.enc = {};                                                                                           // 8183
                                                                                                                       // 8184
	    /**                                                                                                               // 8185
	     * Hex encoding strategy.                                                                                         // 8186
	     */                                                                                                               // 8187
	    var Hex = C_enc.Hex = {                                                                                           // 8188
	        /**                                                                                                           // 8189
	         * Converts a word array to a hex string.                                                                     // 8190
	         *                                                                                                            // 8191
	         * @param {WordArray} wordArray The word array.                                                               // 8192
	         *                                                                                                            // 8193
	         * @return {string} The hex string.                                                                           // 8194
	         *                                                                                                            // 8195
	         * @static                                                                                                    // 8196
	         *                                                                                                            // 8197
	         * @example                                                                                                   // 8198
	         *                                                                                                            // 8199
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);                                                 // 8200
	         */                                                                                                           // 8201
	        stringify: function (wordArray) {                                                                             // 8202
	            // Shortcuts                                                                                              // 8203
	            var words = wordArray.words;                                                                              // 8204
	            var sigBytes = wordArray.sigBytes;                                                                        // 8205
                                                                                                                       // 8206
	            // Convert                                                                                                // 8207
	            var hexChars = [];                                                                                        // 8208
	            for (var i = 0; i < sigBytes; i++) {                                                                      // 8209
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                            // 8210
	                hexChars.push((bite >>> 4).toString(16));                                                             // 8211
	                hexChars.push((bite & 0x0f).toString(16));                                                            // 8212
	            }                                                                                                         // 8213
                                                                                                                       // 8214
	            return hexChars.join('');                                                                                 // 8215
	        },                                                                                                            // 8216
                                                                                                                       // 8217
	        /**                                                                                                           // 8218
	         * Converts a hex string to a word array.                                                                     // 8219
	         *                                                                                                            // 8220
	         * @param {string} hexStr The hex string.                                                                     // 8221
	         *                                                                                                            // 8222
	         * @return {WordArray} The word array.                                                                        // 8223
	         *                                                                                                            // 8224
	         * @static                                                                                                    // 8225
	         *                                                                                                            // 8226
	         * @example                                                                                                   // 8227
	         *                                                                                                            // 8228
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);                                                     // 8229
	         */                                                                                                           // 8230
	        parse: function (hexStr) {                                                                                    // 8231
	            // Shortcut                                                                                               // 8232
	            var hexStrLength = hexStr.length;                                                                         // 8233
                                                                                                                       // 8234
	            // Convert                                                                                                // 8235
	            var words = [];                                                                                           // 8236
	            for (var i = 0; i < hexStrLength; i += 2) {                                                               // 8237
	                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);                            // 8238
	            }                                                                                                         // 8239
                                                                                                                       // 8240
	            return new WordArray.init(words, hexStrLength / 2);                                                       // 8241
	        }                                                                                                             // 8242
	    };                                                                                                                // 8243
                                                                                                                       // 8244
	    /**                                                                                                               // 8245
	     * Latin1 encoding strategy.                                                                                      // 8246
	     */                                                                                                               // 8247
	    var Latin1 = C_enc.Latin1 = {                                                                                     // 8248
	        /**                                                                                                           // 8249
	         * Converts a word array to a Latin1 string.                                                                  // 8250
	         *                                                                                                            // 8251
	         * @param {WordArray} wordArray The word array.                                                               // 8252
	         *                                                                                                            // 8253
	         * @return {string} The Latin1 string.                                                                        // 8254
	         *                                                                                                            // 8255
	         * @static                                                                                                    // 8256
	         *                                                                                                            // 8257
	         * @example                                                                                                   // 8258
	         *                                                                                                            // 8259
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);                                           // 8260
	         */                                                                                                           // 8261
	        stringify: function (wordArray) {                                                                             // 8262
	            // Shortcuts                                                                                              // 8263
	            var words = wordArray.words;                                                                              // 8264
	            var sigBytes = wordArray.sigBytes;                                                                        // 8265
                                                                                                                       // 8266
	            // Convert                                                                                                // 8267
	            var latin1Chars = [];                                                                                     // 8268
	            for (var i = 0; i < sigBytes; i++) {                                                                      // 8269
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                            // 8270
	                latin1Chars.push(String.fromCharCode(bite));                                                          // 8271
	            }                                                                                                         // 8272
                                                                                                                       // 8273
	            return latin1Chars.join('');                                                                              // 8274
	        },                                                                                                            // 8275
                                                                                                                       // 8276
	        /**                                                                                                           // 8277
	         * Converts a Latin1 string to a word array.                                                                  // 8278
	         *                                                                                                            // 8279
	         * @param {string} latin1Str The Latin1 string.                                                               // 8280
	         *                                                                                                            // 8281
	         * @return {WordArray} The word array.                                                                        // 8282
	         *                                                                                                            // 8283
	         * @static                                                                                                    // 8284
	         *                                                                                                            // 8285
	         * @example                                                                                                   // 8286
	         *                                                                                                            // 8287
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);                                               // 8288
	         */                                                                                                           // 8289
	        parse: function (latin1Str) {                                                                                 // 8290
	            // Shortcut                                                                                               // 8291
	            var latin1StrLength = latin1Str.length;                                                                   // 8292
                                                                                                                       // 8293
	            // Convert                                                                                                // 8294
	            var words = [];                                                                                           // 8295
	            for (var i = 0; i < latin1StrLength; i++) {                                                               // 8296
	                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);                             // 8297
	            }                                                                                                         // 8298
                                                                                                                       // 8299
	            return new WordArray.init(words, latin1StrLength);                                                        // 8300
	        }                                                                                                             // 8301
	    };                                                                                                                // 8302
                                                                                                                       // 8303
	    /**                                                                                                               // 8304
	     * UTF-8 encoding strategy.                                                                                       // 8305
	     */                                                                                                               // 8306
	    var Utf8 = C_enc.Utf8 = {                                                                                         // 8307
	        /**                                                                                                           // 8308
	         * Converts a word array to a UTF-8 string.                                                                   // 8309
	         *                                                                                                            // 8310
	         * @param {WordArray} wordArray The word array.                                                               // 8311
	         *                                                                                                            // 8312
	         * @return {string} The UTF-8 string.                                                                         // 8313
	         *                                                                                                            // 8314
	         * @static                                                                                                    // 8315
	         *                                                                                                            // 8316
	         * @example                                                                                                   // 8317
	         *                                                                                                            // 8318
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);                                               // 8319
	         */                                                                                                           // 8320
	        stringify: function (wordArray) {                                                                             // 8321
	            try {                                                                                                     // 8322
	                return decodeURIComponent(escape(Latin1.stringify(wordArray)));                                       // 8323
	            } catch (e) {                                                                                             // 8324
	                throw new Error('Malformed UTF-8 data');                                                              // 8325
	            }                                                                                                         // 8326
	        },                                                                                                            // 8327
                                                                                                                       // 8328
	        /**                                                                                                           // 8329
	         * Converts a UTF-8 string to a word array.                                                                   // 8330
	         *                                                                                                            // 8331
	         * @param {string} utf8Str The UTF-8 string.                                                                  // 8332
	         *                                                                                                            // 8333
	         * @return {WordArray} The word array.                                                                        // 8334
	         *                                                                                                            // 8335
	         * @static                                                                                                    // 8336
	         *                                                                                                            // 8337
	         * @example                                                                                                   // 8338
	         *                                                                                                            // 8339
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);                                                   // 8340
	         */                                                                                                           // 8341
	        parse: function (utf8Str) {                                                                                   // 8342
	            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));                                               // 8343
	        }                                                                                                             // 8344
	    };                                                                                                                // 8345
                                                                                                                       // 8346
	    /**                                                                                                               // 8347
	     * Abstract buffered block algorithm template.                                                                    // 8348
	     *                                                                                                                // 8349
	     * The property blockSize must be implemented in a concrete subtype.                                              // 8350
	     *                                                                                                                // 8351
	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	     */                                                                                                               // 8353
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({                                         // 8354
	        /**                                                                                                           // 8355
	         * Resets this block algorithm's data buffer to its initial state.                                            // 8356
	         *                                                                                                            // 8357
	         * @example                                                                                                   // 8358
	         *                                                                                                            // 8359
	         *     bufferedBlockAlgorithm.reset();                                                                        // 8360
	         */                                                                                                           // 8361
	        reset: function () {                                                                                          // 8362
	            // Initial values                                                                                         // 8363
	            this._data = new WordArray.init();                                                                        // 8364
	            this._nDataBytes = 0;                                                                                     // 8365
	        },                                                                                                            // 8366
                                                                                                                       // 8367
	        /**                                                                                                           // 8368
	         * Adds new data to this block algorithm's buffer.                                                            // 8369
	         *                                                                                                            // 8370
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.       // 8371
	         *                                                                                                            // 8372
	         * @example                                                                                                   // 8373
	         *                                                                                                            // 8374
	         *     bufferedBlockAlgorithm._append('data');                                                                // 8375
	         *     bufferedBlockAlgorithm._append(wordArray);                                                             // 8376
	         */                                                                                                           // 8377
	        _append: function (data) {                                                                                    // 8378
	            // Convert string to WordArray, else assume WordArray already                                             // 8379
	            if (typeof data == 'string') {                                                                            // 8380
	                data = Utf8.parse(data);                                                                              // 8381
	            }                                                                                                         // 8382
                                                                                                                       // 8383
	            // Append                                                                                                 // 8384
	            this._data.concat(data);                                                                                  // 8385
	            this._nDataBytes += data.sigBytes;                                                                        // 8386
	        },                                                                                                            // 8387
                                                                                                                       // 8388
	        /**                                                                                                           // 8389
	         * Processes available data blocks.                                                                           // 8390
	         *                                                                                                            // 8391
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.              // 8392
	         *                                                                                                            // 8393
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.                        // 8394
	         *                                                                                                            // 8395
	         * @return {WordArray} The processed data.                                                                    // 8396
	         *                                                                                                            // 8397
	         * @example                                                                                                   // 8398
	         *                                                                                                            // 8399
	         *     var processedData = bufferedBlockAlgorithm._process();                                                 // 8400
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');                                        // 8401
	         */                                                                                                           // 8402
	        _process: function (doFlush) {                                                                                // 8403
	            // Shortcuts                                                                                              // 8404
	            var data = this._data;                                                                                    // 8405
	            var dataWords = data.words;                                                                               // 8406
	            var dataSigBytes = data.sigBytes;                                                                         // 8407
	            var blockSize = this.blockSize;                                                                           // 8408
	            var blockSizeBytes = blockSize * 4;                                                                       // 8409
                                                                                                                       // 8410
	            // Count blocks ready                                                                                     // 8411
	            var nBlocksReady = dataSigBytes / blockSizeBytes;                                                         // 8412
	            if (doFlush) {                                                                                            // 8413
	                // Round up to include partial blocks                                                                 // 8414
	                nBlocksReady = Math.ceil(nBlocksReady);                                                               // 8415
	            } else {                                                                                                  // 8416
	                // Round down to include only full blocks,                                                            // 8417
	                // less the number of blocks that must remain in the buffer                                           // 8418
	                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);                                 // 8419
	            }                                                                                                         // 8420
                                                                                                                       // 8421
	            // Count words ready                                                                                      // 8422
	            var nWordsReady = nBlocksReady * blockSize;                                                               // 8423
                                                                                                                       // 8424
	            // Count bytes ready                                                                                      // 8425
	            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);                                                // 8426
                                                                                                                       // 8427
	            // Process blocks                                                                                         // 8428
	            if (nWordsReady) {                                                                                        // 8429
	                for (var offset = 0; offset < nWordsReady; offset += blockSize) {                                     // 8430
	                    // Perform concrete-algorithm logic                                                               // 8431
	                    this._doProcessBlock(dataWords, offset);                                                          // 8432
	                }                                                                                                     // 8433
                                                                                                                       // 8434
	                // Remove processed words                                                                             // 8435
	                var processedWords = dataWords.splice(0, nWordsReady);                                                // 8436
	                data.sigBytes -= nBytesReady;                                                                         // 8437
	            }                                                                                                         // 8438
                                                                                                                       // 8439
	            // Return processed words                                                                                 // 8440
	            return new WordArray.init(processedWords, nBytesReady);                                                   // 8441
	        },                                                                                                            // 8442
                                                                                                                       // 8443
	        /**                                                                                                           // 8444
	         * Creates a copy of this object.                                                                             // 8445
	         *                                                                                                            // 8446
	         * @return {Object} The clone.                                                                                // 8447
	         *                                                                                                            // 8448
	         * @example                                                                                                   // 8449
	         *                                                                                                            // 8450
	         *     var clone = bufferedBlockAlgorithm.clone();                                                            // 8451
	         */                                                                                                           // 8452
	        clone: function () {                                                                                          // 8453
	            var clone = Base.clone.call(this);                                                                        // 8454
	            clone._data = this._data.clone();                                                                         // 8455
                                                                                                                       // 8456
	            return clone;                                                                                             // 8457
	        },                                                                                                            // 8458
                                                                                                                       // 8459
	        _minBufferSize: 0                                                                                             // 8460
	    });                                                                                                               // 8461
                                                                                                                       // 8462
	    /**                                                                                                               // 8463
	     * Abstract hasher template.                                                                                      // 8464
	     *                                                                                                                // 8465
	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)        // 8466
	     */                                                                                                               // 8467
	    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({                                                       // 8468
	        /**                                                                                                           // 8469
	         * Configuration options.                                                                                     // 8470
	         */                                                                                                           // 8471
	        cfg: Base.extend(),                                                                                           // 8472
                                                                                                                       // 8473
	        /**                                                                                                           // 8474
	         * Initializes a newly created hasher.                                                                        // 8475
	         *                                                                                                            // 8476
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.                 // 8477
	         *                                                                                                            // 8478
	         * @example                                                                                                   // 8479
	         *                                                                                                            // 8480
	         *     var hasher = CryptoJS.algo.SHA256.create();                                                            // 8481
	         */                                                                                                           // 8482
	        init: function (cfg) {                                                                                        // 8483
	            // Apply config defaults                                                                                  // 8484
	            this.cfg = this.cfg.extend(cfg);                                                                          // 8485
                                                                                                                       // 8486
	            // Set initial values                                                                                     // 8487
	            this.reset();                                                                                             // 8488
	        },                                                                                                            // 8489
                                                                                                                       // 8490
	        /**                                                                                                           // 8491
	         * Resets this hasher to its initial state.                                                                   // 8492
	         *                                                                                                            // 8493
	         * @example                                                                                                   // 8494
	         *                                                                                                            // 8495
	         *     hasher.reset();                                                                                        // 8496
	         */                                                                                                           // 8497
	        reset: function () {                                                                                          // 8498
	            // Reset data buffer                                                                                      // 8499
	            BufferedBlockAlgorithm.reset.call(this);                                                                  // 8500
                                                                                                                       // 8501
	            // Perform concrete-hasher logic                                                                          // 8502
	            this._doReset();                                                                                          // 8503
	        },                                                                                                            // 8504
                                                                                                                       // 8505
	        /**                                                                                                           // 8506
	         * Updates this hasher with a message.                                                                        // 8507
	         *                                                                                                            // 8508
	         * @param {WordArray|string} messageUpdate The message to append.                                             // 8509
	         *                                                                                                            // 8510
	         * @return {Hasher} This hasher.                                                                              // 8511
	         *                                                                                                            // 8512
	         * @example                                                                                                   // 8513
	         *                                                                                                            // 8514
	         *     hasher.update('message');                                                                              // 8515
	         *     hasher.update(wordArray);                                                                              // 8516
	         */                                                                                                           // 8517
	        update: function (messageUpdate) {                                                                            // 8518
	            // Append                                                                                                 // 8519
	            this._append(messageUpdate);                                                                              // 8520
                                                                                                                       // 8521
	            // Update the hash                                                                                        // 8522
	            this._process();                                                                                          // 8523
                                                                                                                       // 8524
	            // Chainable                                                                                              // 8525
	            return this;                                                                                              // 8526
	        },                                                                                                            // 8527
                                                                                                                       // 8528
	        /**                                                                                                           // 8529
	         * Finalizes the hash computation.                                                                            // 8530
	         * Note that the finalize operation is effectively a destructive, read-once operation.                        // 8531
	         *                                                                                                            // 8532
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.                                 // 8533
	         *                                                                                                            // 8534
	         * @return {WordArray} The hash.                                                                              // 8535
	         *                                                                                                            // 8536
	         * @example                                                                                                   // 8537
	         *                                                                                                            // 8538
	         *     var hash = hasher.finalize();                                                                          // 8539
	         *     var hash = hasher.finalize('message');                                                                 // 8540
	         *     var hash = hasher.finalize(wordArray);                                                                 // 8541
	         */                                                                                                           // 8542
	        finalize: function (messageUpdate) {                                                                          // 8543
	            // Final message update                                                                                   // 8544
	            if (messageUpdate) {                                                                                      // 8545
	                this._append(messageUpdate);                                                                          // 8546
	            }                                                                                                         // 8547
                                                                                                                       // 8548
	            // Perform concrete-hasher logic                                                                          // 8549
	            var hash = this._doFinalize();                                                                            // 8550
                                                                                                                       // 8551
	            return hash;                                                                                              // 8552
	        },                                                                                                            // 8553
                                                                                                                       // 8554
	        blockSize: 512/32,                                                                                            // 8555
                                                                                                                       // 8556
	        /**                                                                                                           // 8557
	         * Creates a shortcut function to a hasher's object interface.                                                // 8558
	         *                                                                                                            // 8559
	         * @param {Hasher} hasher The hasher to create a helper for.                                                  // 8560
	         *                                                                                                            // 8561
	         * @return {Function} The shortcut function.                                                                  // 8562
	         *                                                                                                            // 8563
	         * @static                                                                                                    // 8564
	         *                                                                                                            // 8565
	         * @example                                                                                                   // 8566
	         *                                                                                                            // 8567
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);                                  // 8568
	         */                                                                                                           // 8569
	        _createHelper: function (hasher) {                                                                            // 8570
	            return function (message, cfg) {                                                                          // 8571
	                return new hasher.init(cfg).finalize(message);                                                        // 8572
	            };                                                                                                        // 8573
	        },                                                                                                            // 8574
                                                                                                                       // 8575
	        /**                                                                                                           // 8576
	         * Creates a shortcut function to the HMAC's object interface.                                                // 8577
	         *                                                                                                            // 8578
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.                                              // 8579
	         *                                                                                                            // 8580
	         * @return {Function} The shortcut function.                                                                  // 8581
	         *                                                                                                            // 8582
	         * @static                                                                                                    // 8583
	         *                                                                                                            // 8584
	         * @example                                                                                                   // 8585
	         *                                                                                                            // 8586
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);                          // 8587
	         */                                                                                                           // 8588
	        _createHmacHelper: function (hasher) {                                                                        // 8589
	            return function (message, key) {                                                                          // 8590
	                return new C_algo.HMAC.init(hasher, key).finalize(message);                                           // 8591
	            };                                                                                                        // 8592
	        }                                                                                                             // 8593
	    });                                                                                                               // 8594
                                                                                                                       // 8595
	    /**                                                                                                               // 8596
	     * Algorithm namespace.                                                                                           // 8597
	     */                                                                                                               // 8598
	    var C_algo = C.algo = {};                                                                                         // 8599
                                                                                                                       // 8600
	    return C;                                                                                                         // 8601
	}(Math));                                                                                                             // 8602
                                                                                                                       // 8603
                                                                                                                       // 8604
	return CryptoJS;                                                                                                      // 8605
                                                                                                                       // 8606
}));                                                                                                                   // 8607
},{}],53:[function(require,module,exports){                                                                            // 8608
;(function (root, factory) {                                                                                           // 8609
	if (typeof exports === "object") {                                                                                    // 8610
		// CommonJS                                                                                                          // 8611
		module.exports = exports = factory(require("./core"));                                                               // 8612
	}                                                                                                                     // 8613
	else if (typeof define === "function" && define.amd) {                                                                // 8614
		// AMD                                                                                                               // 8615
		define(["./core"], factory);                                                                                         // 8616
	}                                                                                                                     // 8617
	else {                                                                                                                // 8618
		// Global (browser)                                                                                                  // 8619
		factory(root.CryptoJS);                                                                                              // 8620
	}                                                                                                                     // 8621
}(this, function (CryptoJS) {                                                                                          // 8622
                                                                                                                       // 8623
	(function () {                                                                                                        // 8624
	    // Shortcuts                                                                                                      // 8625
	    var C = CryptoJS;                                                                                                 // 8626
	    var C_lib = C.lib;                                                                                                // 8627
	    var WordArray = C_lib.WordArray;                                                                                  // 8628
	    var C_enc = C.enc;                                                                                                // 8629
                                                                                                                       // 8630
	    /**                                                                                                               // 8631
	     * Base64 encoding strategy.                                                                                      // 8632
	     */                                                                                                               // 8633
	    var Base64 = C_enc.Base64 = {                                                                                     // 8634
	        /**                                                                                                           // 8635
	         * Converts a word array to a Base64 string.                                                                  // 8636
	         *                                                                                                            // 8637
	         * @param {WordArray} wordArray The word array.                                                               // 8638
	         *                                                                                                            // 8639
	         * @return {string} The Base64 string.                                                                        // 8640
	         *                                                                                                            // 8641
	         * @static                                                                                                    // 8642
	         *                                                                                                            // 8643
	         * @example                                                                                                   // 8644
	         *                                                                                                            // 8645
	         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);                                           // 8646
	         */                                                                                                           // 8647
	        stringify: function (wordArray) {                                                                             // 8648
	            // Shortcuts                                                                                              // 8649
	            var words = wordArray.words;                                                                              // 8650
	            var sigBytes = wordArray.sigBytes;                                                                        // 8651
	            var map = this._map;                                                                                      // 8652
                                                                                                                       // 8653
	            // Clamp excess bits                                                                                      // 8654
	            wordArray.clamp();                                                                                        // 8655
                                                                                                                       // 8656
	            // Convert                                                                                                // 8657
	            var base64Chars = [];                                                                                     // 8658
	            for (var i = 0; i < sigBytes; i += 3) {                                                                   // 8659
	                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;                               // 8660
	                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;                               // 8661
	                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;                               // 8662
                                                                                                                       // 8663
	                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;                                                   // 8664
                                                                                                                       // 8665
	                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {                                          // 8666
	                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));                                 // 8667
	                }                                                                                                     // 8668
	            }                                                                                                         // 8669
                                                                                                                       // 8670
	            // Add padding                                                                                            // 8671
	            var paddingChar = map.charAt(64);                                                                         // 8672
	            if (paddingChar) {                                                                                        // 8673
	                while (base64Chars.length % 4) {                                                                      // 8674
	                    base64Chars.push(paddingChar);                                                                    // 8675
	                }                                                                                                     // 8676
	            }                                                                                                         // 8677
                                                                                                                       // 8678
	            return base64Chars.join('');                                                                              // 8679
	        },                                                                                                            // 8680
                                                                                                                       // 8681
	        /**                                                                                                           // 8682
	         * Converts a Base64 string to a word array.                                                                  // 8683
	         *                                                                                                            // 8684
	         * @param {string} base64Str The Base64 string.                                                               // 8685
	         *                                                                                                            // 8686
	         * @return {WordArray} The word array.                                                                        // 8687
	         *                                                                                                            // 8688
	         * @static                                                                                                    // 8689
	         *                                                                                                            // 8690
	         * @example                                                                                                   // 8691
	         *                                                                                                            // 8692
	         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);                                               // 8693
	         */                                                                                                           // 8694
	        parse: function (base64Str) {                                                                                 // 8695
	            // Shortcuts                                                                                              // 8696
	            var base64StrLength = base64Str.length;                                                                   // 8697
	            var map = this._map;                                                                                      // 8698
	            var reverseMap = this._reverseMap;                                                                        // 8699
                                                                                                                       // 8700
	            if (!reverseMap) {                                                                                        // 8701
	                    reverseMap = this._reverseMap = [];                                                               // 8702
	                    for (var j = 0; j < map.length; j++) {                                                            // 8703
	                        reverseMap[map.charCodeAt(j)] = j;                                                            // 8704
	                    }                                                                                                 // 8705
	            }                                                                                                         // 8706
                                                                                                                       // 8707
	            // Ignore padding                                                                                         // 8708
	            var paddingChar = map.charAt(64);                                                                         // 8709
	            if (paddingChar) {                                                                                        // 8710
	                var paddingIndex = base64Str.indexOf(paddingChar);                                                    // 8711
	                if (paddingIndex !== -1) {                                                                            // 8712
	                    base64StrLength = paddingIndex;                                                                   // 8713
	                }                                                                                                     // 8714
	            }                                                                                                         // 8715
                                                                                                                       // 8716
	            // Convert                                                                                                // 8717
	            return parseLoop(base64Str, base64StrLength, reverseMap);                                                 // 8718
                                                                                                                       // 8719
	        },                                                                                                            // 8720
                                                                                                                       // 8721
	        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='                                     // 8722
	    };                                                                                                                // 8723
                                                                                                                       // 8724
	    function parseLoop(base64Str, base64StrLength, reverseMap) {                                                      // 8725
	      var words = [];                                                                                                 // 8726
	      var nBytes = 0;                                                                                                 // 8727
	      for (var i = 0; i < base64StrLength; i++) {                                                                     // 8728
	          if (i % 4) {                                                                                                // 8729
	              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);                                   // 8730
	              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);                                  // 8731
	              words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);                                      // 8732
	              nBytes++;                                                                                               // 8733
	          }                                                                                                           // 8734
	      }                                                                                                               // 8735
	      return WordArray.create(words, nBytes);                                                                         // 8736
	    }                                                                                                                 // 8737
	}());                                                                                                                 // 8738
                                                                                                                       // 8739
                                                                                                                       // 8740
	return CryptoJS.enc.Base64;                                                                                           // 8741
                                                                                                                       // 8742
}));                                                                                                                   // 8743
},{"./core":52}],54:[function(require,module,exports){                                                                 // 8744
;(function (root, factory) {                                                                                           // 8745
	if (typeof exports === "object") {                                                                                    // 8746
		// CommonJS                                                                                                          // 8747
		module.exports = exports = factory(require("./core"));                                                               // 8748
	}                                                                                                                     // 8749
	else if (typeof define === "function" && define.amd) {                                                                // 8750
		// AMD                                                                                                               // 8751
		define(["./core"], factory);                                                                                         // 8752
	}                                                                                                                     // 8753
	else {                                                                                                                // 8754
		// Global (browser)                                                                                                  // 8755
		factory(root.CryptoJS);                                                                                              // 8756
	}                                                                                                                     // 8757
}(this, function (CryptoJS) {                                                                                          // 8758
                                                                                                                       // 8759
	(function () {                                                                                                        // 8760
	    // Shortcuts                                                                                                      // 8761
	    var C = CryptoJS;                                                                                                 // 8762
	    var C_lib = C.lib;                                                                                                // 8763
	    var WordArray = C_lib.WordArray;                                                                                  // 8764
	    var C_enc = C.enc;                                                                                                // 8765
                                                                                                                       // 8766
	    /**                                                                                                               // 8767
	     * UTF-16 BE encoding strategy.                                                                                   // 8768
	     */                                                                                                               // 8769
	    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {                                                                     // 8770
	        /**                                                                                                           // 8771
	         * Converts a word array to a UTF-16 BE string.                                                               // 8772
	         *                                                                                                            // 8773
	         * @param {WordArray} wordArray The word array.                                                               // 8774
	         *                                                                                                            // 8775
	         * @return {string} The UTF-16 BE string.                                                                     // 8776
	         *                                                                                                            // 8777
	         * @static                                                                                                    // 8778
	         *                                                                                                            // 8779
	         * @example                                                                                                   // 8780
	         *                                                                                                            // 8781
	         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);                                             // 8782
	         */                                                                                                           // 8783
	        stringify: function (wordArray) {                                                                             // 8784
	            // Shortcuts                                                                                              // 8785
	            var words = wordArray.words;                                                                              // 8786
	            var sigBytes = wordArray.sigBytes;                                                                        // 8787
                                                                                                                       // 8788
	            // Convert                                                                                                // 8789
	            var utf16Chars = [];                                                                                      // 8790
	            for (var i = 0; i < sigBytes; i += 2) {                                                                   // 8791
	                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;                                     // 8792
	                utf16Chars.push(String.fromCharCode(codePoint));                                                      // 8793
	            }                                                                                                         // 8794
                                                                                                                       // 8795
	            return utf16Chars.join('');                                                                               // 8796
	        },                                                                                                            // 8797
                                                                                                                       // 8798
	        /**                                                                                                           // 8799
	         * Converts a UTF-16 BE string to a word array.                                                               // 8800
	         *                                                                                                            // 8801
	         * @param {string} utf16Str The UTF-16 BE string.                                                             // 8802
	         *                                                                                                            // 8803
	         * @return {WordArray} The word array.                                                                        // 8804
	         *                                                                                                            // 8805
	         * @static                                                                                                    // 8806
	         *                                                                                                            // 8807
	         * @example                                                                                                   // 8808
	         *                                                                                                            // 8809
	         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);                                                 // 8810
	         */                                                                                                           // 8811
	        parse: function (utf16Str) {                                                                                  // 8812
	            // Shortcut                                                                                               // 8813
	            var utf16StrLength = utf16Str.length;                                                                     // 8814
                                                                                                                       // 8815
	            // Convert                                                                                                // 8816
	            var words = [];                                                                                           // 8817
	            for (var i = 0; i < utf16StrLength; i++) {                                                                // 8818
	                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);                                      // 8819
	            }                                                                                                         // 8820
                                                                                                                       // 8821
	            return WordArray.create(words, utf16StrLength * 2);                                                       // 8822
	        }                                                                                                             // 8823
	    };                                                                                                                // 8824
                                                                                                                       // 8825
	    /**                                                                                                               // 8826
	     * UTF-16 LE encoding strategy.                                                                                   // 8827
	     */                                                                                                               // 8828
	    C_enc.Utf16LE = {                                                                                                 // 8829
	        /**                                                                                                           // 8830
	         * Converts a word array to a UTF-16 LE string.                                                               // 8831
	         *                                                                                                            // 8832
	         * @param {WordArray} wordArray The word array.                                                               // 8833
	         *                                                                                                            // 8834
	         * @return {string} The UTF-16 LE string.                                                                     // 8835
	         *                                                                                                            // 8836
	         * @static                                                                                                    // 8837
	         *                                                                                                            // 8838
	         * @example                                                                                                   // 8839
	         *                                                                                                            // 8840
	         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);                                              // 8841
	         */                                                                                                           // 8842
	        stringify: function (wordArray) {                                                                             // 8843
	            // Shortcuts                                                                                              // 8844
	            var words = wordArray.words;                                                                              // 8845
	            var sigBytes = wordArray.sigBytes;                                                                        // 8846
                                                                                                                       // 8847
	            // Convert                                                                                                // 8848
	            var utf16Chars = [];                                                                                      // 8849
	            for (var i = 0; i < sigBytes; i += 2) {                                                                   // 8850
	                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);                         // 8851
	                utf16Chars.push(String.fromCharCode(codePoint));                                                      // 8852
	            }                                                                                                         // 8853
                                                                                                                       // 8854
	            return utf16Chars.join('');                                                                               // 8855
	        },                                                                                                            // 8856
                                                                                                                       // 8857
	        /**                                                                                                           // 8858
	         * Converts a UTF-16 LE string to a word array.                                                               // 8859
	         *                                                                                                            // 8860
	         * @param {string} utf16Str The UTF-16 LE string.                                                             // 8861
	         *                                                                                                            // 8862
	         * @return {WordArray} The word array.                                                                        // 8863
	         *                                                                                                            // 8864
	         * @static                                                                                                    // 8865
	         *                                                                                                            // 8866
	         * @example                                                                                                   // 8867
	         *                                                                                                            // 8868
	         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);                                                  // 8869
	         */                                                                                                           // 8870
	        parse: function (utf16Str) {                                                                                  // 8871
	            // Shortcut                                                                                               // 8872
	            var utf16StrLength = utf16Str.length;                                                                     // 8873
                                                                                                                       // 8874
	            // Convert                                                                                                // 8875
	            var words = [];                                                                                           // 8876
	            for (var i = 0; i < utf16StrLength; i++) {                                                                // 8877
	                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));                          // 8878
	            }                                                                                                         // 8879
                                                                                                                       // 8880
	            return WordArray.create(words, utf16StrLength * 2);                                                       // 8881
	        }                                                                                                             // 8882
	    };                                                                                                                // 8883
                                                                                                                       // 8884
	    function swapEndian(word) {                                                                                       // 8885
	        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);                                              // 8886
	    }                                                                                                                 // 8887
	}());                                                                                                                 // 8888
                                                                                                                       // 8889
                                                                                                                       // 8890
	return CryptoJS.enc.Utf16;                                                                                            // 8891
                                                                                                                       // 8892
}));                                                                                                                   // 8893
},{"./core":52}],55:[function(require,module,exports){                                                                 // 8894
;(function (root, factory, undef) {                                                                                    // 8895
	if (typeof exports === "object") {                                                                                    // 8896
		// CommonJS                                                                                                          // 8897
		module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));                         // 8898
	}                                                                                                                     // 8899
	else if (typeof define === "function" && define.amd) {                                                                // 8900
		// AMD                                                                                                               // 8901
		define(["./core", "./sha1", "./hmac"], factory);                                                                     // 8902
	}                                                                                                                     // 8903
	else {                                                                                                                // 8904
		// Global (browser)                                                                                                  // 8905
		factory(root.CryptoJS);                                                                                              // 8906
	}                                                                                                                     // 8907
}(this, function (CryptoJS) {                                                                                          // 8908
                                                                                                                       // 8909
	(function () {                                                                                                        // 8910
	    // Shortcuts                                                                                                      // 8911
	    var C = CryptoJS;                                                                                                 // 8912
	    var C_lib = C.lib;                                                                                                // 8913
	    var Base = C_lib.Base;                                                                                            // 8914
	    var WordArray = C_lib.WordArray;                                                                                  // 8915
	    var C_algo = C.algo;                                                                                              // 8916
	    var MD5 = C_algo.MD5;                                                                                             // 8917
                                                                                                                       // 8918
	    /**                                                                                                               // 8919
	     * This key derivation function is meant to conform with EVP_BytesToKey.                                          // 8920
	     * www.openssl.org/docs/crypto/EVP_BytesToKey.html                                                                // 8921
	     */                                                                                                               // 8922
	    var EvpKDF = C_algo.EvpKDF = Base.extend({                                                                        // 8923
	        /**                                                                                                           // 8924
	         * Configuration options.                                                                                     // 8925
	         *                                                                                                            // 8926
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)                        // 8927
	         * @property {Hasher} hasher The hash algorithm to use. Default: MD5                                          // 8928
	         * @property {number} iterations The number of iterations to perform. Default: 1                              // 8929
	         */                                                                                                           // 8930
	        cfg: Base.extend({                                                                                            // 8931
	            keySize: 128/32,                                                                                          // 8932
	            hasher: MD5,                                                                                              // 8933
	            iterations: 1                                                                                             // 8934
	        }),                                                                                                           // 8935
                                                                                                                       // 8936
	        /**                                                                                                           // 8937
	         * Initializes a newly created key derivation function.                                                       // 8938
	         *                                                                                                            // 8939
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.                        // 8940
	         *                                                                                                            // 8941
	         * @example                                                                                                   // 8942
	         *                                                                                                            // 8943
	         *     var kdf = CryptoJS.algo.EvpKDF.create();                                                               // 8944
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });                                                 // 8945
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });                               // 8946
	         */                                                                                                           // 8947
	        init: function (cfg) {                                                                                        // 8948
	            this.cfg = this.cfg.extend(cfg);                                                                          // 8949
	        },                                                                                                            // 8950
                                                                                                                       // 8951
	        /**                                                                                                           // 8952
	         * Derives a key from a password.                                                                             // 8953
	         *                                                                                                            // 8954
	         * @param {WordArray|string} password The password.                                                           // 8955
	         * @param {WordArray|string} salt A salt.                                                                     // 8956
	         *                                                                                                            // 8957
	         * @return {WordArray} The derived key.                                                                       // 8958
	         *                                                                                                            // 8959
	         * @example                                                                                                   // 8960
	         *                                                                                                            // 8961
	         *     var key = kdf.compute(password, salt);                                                                 // 8962
	         */                                                                                                           // 8963
	        compute: function (password, salt) {                                                                          // 8964
	            // Shortcut                                                                                               // 8965
	            var cfg = this.cfg;                                                                                       // 8966
                                                                                                                       // 8967
	            // Init hasher                                                                                            // 8968
	            var hasher = cfg.hasher.create();                                                                         // 8969
                                                                                                                       // 8970
	            // Initial values                                                                                         // 8971
	            var derivedKey = WordArray.create();                                                                      // 8972
                                                                                                                       // 8973
	            // Shortcuts                                                                                              // 8974
	            var derivedKeyWords = derivedKey.words;                                                                   // 8975
	            var keySize = cfg.keySize;                                                                                // 8976
	            var iterations = cfg.iterations;                                                                          // 8977
                                                                                                                       // 8978
	            // Generate key                                                                                           // 8979
	            while (derivedKeyWords.length < keySize) {                                                                // 8980
	                if (block) {                                                                                          // 8981
	                    hasher.update(block);                                                                             // 8982
	                }                                                                                                     // 8983
	                var block = hasher.update(password).finalize(salt);                                                   // 8984
	                hasher.reset();                                                                                       // 8985
                                                                                                                       // 8986
	                // Iterations                                                                                         // 8987
	                for (var i = 1; i < iterations; i++) {                                                                // 8988
	                    block = hasher.finalize(block);                                                                   // 8989
	                    hasher.reset();                                                                                   // 8990
	                }                                                                                                     // 8991
                                                                                                                       // 8992
	                derivedKey.concat(block);                                                                             // 8993
	            }                                                                                                         // 8994
	            derivedKey.sigBytes = keySize * 4;                                                                        // 8995
                                                                                                                       // 8996
	            return derivedKey;                                                                                        // 8997
	        }                                                                                                             // 8998
	    });                                                                                                               // 8999
                                                                                                                       // 9000
	    /**                                                                                                               // 9001
	     * Derives a key from a password.                                                                                 // 9002
	     *                                                                                                                // 9003
	     * @param {WordArray|string} password The password.                                                               // 9004
	     * @param {WordArray|string} salt A salt.                                                                         // 9005
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.                          // 9006
	     *                                                                                                                // 9007
	     * @return {WordArray} The derived key.                                                                           // 9008
	     *                                                                                                                // 9009
	     * @static                                                                                                        // 9010
	     *                                                                                                                // 9011
	     * @example                                                                                                       // 9012
	     *                                                                                                                // 9013
	     *     var key = CryptoJS.EvpKDF(password, salt);                                                                 // 9014
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });                                                 // 9015
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });                               // 9016
	     */                                                                                                               // 9017
	    C.EvpKDF = function (password, salt, cfg) {                                                                       // 9018
	        return EvpKDF.create(cfg).compute(password, salt);                                                            // 9019
	    };                                                                                                                // 9020
	}());                                                                                                                 // 9021
                                                                                                                       // 9022
                                                                                                                       // 9023
	return CryptoJS.EvpKDF;                                                                                               // 9024
                                                                                                                       // 9025
}));                                                                                                                   // 9026
},{"./core":52,"./hmac":57,"./sha1":76}],56:[function(require,module,exports){                                         // 9027
;(function (root, factory, undef) {                                                                                    // 9028
	if (typeof exports === "object") {                                                                                    // 9029
		// CommonJS                                                                                                          // 9030
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9031
	}                                                                                                                     // 9032
	else if (typeof define === "function" && define.amd) {                                                                // 9033
		// AMD                                                                                                               // 9034
		define(["./core", "./cipher-core"], factory);                                                                        // 9035
	}                                                                                                                     // 9036
	else {                                                                                                                // 9037
		// Global (browser)                                                                                                  // 9038
		factory(root.CryptoJS);                                                                                              // 9039
	}                                                                                                                     // 9040
}(this, function (CryptoJS) {                                                                                          // 9041
                                                                                                                       // 9042
	(function (undefined) {                                                                                               // 9043
	    // Shortcuts                                                                                                      // 9044
	    var C = CryptoJS;                                                                                                 // 9045
	    var C_lib = C.lib;                                                                                                // 9046
	    var CipherParams = C_lib.CipherParams;                                                                            // 9047
	    var C_enc = C.enc;                                                                                                // 9048
	    var Hex = C_enc.Hex;                                                                                              // 9049
	    var C_format = C.format;                                                                                          // 9050
                                                                                                                       // 9051
	    var HexFormatter = C_format.Hex = {                                                                               // 9052
	        /**                                                                                                           // 9053
	         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.                       // 9054
	         *                                                                                                            // 9055
	         * @param {CipherParams} cipherParams The cipher params object.                                               // 9056
	         *                                                                                                            // 9057
	         * @return {string} The hexadecimally encoded string.                                                         // 9058
	         *                                                                                                            // 9059
	         * @static                                                                                                    // 9060
	         *                                                                                                            // 9061
	         * @example                                                                                                   // 9062
	         *                                                                                                            // 9063
	         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);                                           // 9064
	         */                                                                                                           // 9065
	        stringify: function (cipherParams) {                                                                          // 9066
	            return cipherParams.ciphertext.toString(Hex);                                                             // 9067
	        },                                                                                                            // 9068
                                                                                                                       // 9069
	        /**                                                                                                           // 9070
	         * Converts a hexadecimally encoded ciphertext string to a cipher params object.                              // 9071
	         *                                                                                                            // 9072
	         * @param {string} input The hexadecimally encoded string.                                                    // 9073
	         *                                                                                                            // 9074
	         * @return {CipherParams} The cipher params object.                                                           // 9075
	         *                                                                                                            // 9076
	         * @static                                                                                                    // 9077
	         *                                                                                                            // 9078
	         * @example                                                                                                   // 9079
	         *                                                                                                            // 9080
	         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);                                               // 9081
	         */                                                                                                           // 9082
	        parse: function (input) {                                                                                     // 9083
	            var ciphertext = Hex.parse(input);                                                                        // 9084
	            return CipherParams.create({ ciphertext: ciphertext });                                                   // 9085
	        }                                                                                                             // 9086
	    };                                                                                                                // 9087
	}());                                                                                                                 // 9088
                                                                                                                       // 9089
                                                                                                                       // 9090
	return CryptoJS.format.Hex;                                                                                           // 9091
                                                                                                                       // 9092
}));                                                                                                                   // 9093
},{"./cipher-core":51,"./core":52}],57:[function(require,module,exports){                                              // 9094
;(function (root, factory) {                                                                                           // 9095
	if (typeof exports === "object") {                                                                                    // 9096
		// CommonJS                                                                                                          // 9097
		module.exports = exports = factory(require("./core"));                                                               // 9098
	}                                                                                                                     // 9099
	else if (typeof define === "function" && define.amd) {                                                                // 9100
		// AMD                                                                                                               // 9101
		define(["./core"], factory);                                                                                         // 9102
	}                                                                                                                     // 9103
	else {                                                                                                                // 9104
		// Global (browser)                                                                                                  // 9105
		factory(root.CryptoJS);                                                                                              // 9106
	}                                                                                                                     // 9107
}(this, function (CryptoJS) {                                                                                          // 9108
                                                                                                                       // 9109
	(function () {                                                                                                        // 9110
	    // Shortcuts                                                                                                      // 9111
	    var C = CryptoJS;                                                                                                 // 9112
	    var C_lib = C.lib;                                                                                                // 9113
	    var Base = C_lib.Base;                                                                                            // 9114
	    var C_enc = C.enc;                                                                                                // 9115
	    var Utf8 = C_enc.Utf8;                                                                                            // 9116
	    var C_algo = C.algo;                                                                                              // 9117
                                                                                                                       // 9118
	    /**                                                                                                               // 9119
	     * HMAC algorithm.                                                                                                // 9120
	     */                                                                                                               // 9121
	    var HMAC = C_algo.HMAC = Base.extend({                                                                            // 9122
	        /**                                                                                                           // 9123
	         * Initializes a newly created HMAC.                                                                          // 9124
	         *                                                                                                            // 9125
	         * @param {Hasher} hasher The hash algorithm to use.                                                          // 9126
	         * @param {WordArray|string} key The secret key.                                                              // 9127
	         *                                                                                                            // 9128
	         * @example                                                                                                   // 9129
	         *                                                                                                            // 9130
	         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);                                 // 9131
	         */                                                                                                           // 9132
	        init: function (hasher, key) {                                                                                // 9133
	            // Init hasher                                                                                            // 9134
	            hasher = this._hasher = new hasher.init();                                                                // 9135
                                                                                                                       // 9136
	            // Convert string to WordArray, else assume WordArray already                                             // 9137
	            if (typeof key == 'string') {                                                                             // 9138
	                key = Utf8.parse(key);                                                                                // 9139
	            }                                                                                                         // 9140
                                                                                                                       // 9141
	            // Shortcuts                                                                                              // 9142
	            var hasherBlockSize = hasher.blockSize;                                                                   // 9143
	            var hasherBlockSizeBytes = hasherBlockSize * 4;                                                           // 9144
                                                                                                                       // 9145
	            // Allow arbitrary length keys                                                                            // 9146
	            if (key.sigBytes > hasherBlockSizeBytes) {                                                                // 9147
	                key = hasher.finalize(key);                                                                           // 9148
	            }                                                                                                         // 9149
                                                                                                                       // 9150
	            // Clamp excess bits                                                                                      // 9151
	            key.clamp();                                                                                              // 9152
                                                                                                                       // 9153
	            // Clone key for inner and outer pads                                                                     // 9154
	            var oKey = this._oKey = key.clone();                                                                      // 9155
	            var iKey = this._iKey = key.clone();                                                                      // 9156
                                                                                                                       // 9157
	            // Shortcuts                                                                                              // 9158
	            var oKeyWords = oKey.words;                                                                               // 9159
	            var iKeyWords = iKey.words;                                                                               // 9160
                                                                                                                       // 9161
	            // XOR keys with pad constants                                                                            // 9162
	            for (var i = 0; i < hasherBlockSize; i++) {                                                               // 9163
	                oKeyWords[i] ^= 0x5c5c5c5c;                                                                           // 9164
	                iKeyWords[i] ^= 0x36363636;                                                                           // 9165
	            }                                                                                                         // 9166
	            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;                                                     // 9167
                                                                                                                       // 9168
	            // Set initial values                                                                                     // 9169
	            this.reset();                                                                                             // 9170
	        },                                                                                                            // 9171
                                                                                                                       // 9172
	        /**                                                                                                           // 9173
	         * Resets this HMAC to its initial state.                                                                     // 9174
	         *                                                                                                            // 9175
	         * @example                                                                                                   // 9176
	         *                                                                                                            // 9177
	         *     hmacHasher.reset();                                                                                    // 9178
	         */                                                                                                           // 9179
	        reset: function () {                                                                                          // 9180
	            // Shortcut                                                                                               // 9181
	            var hasher = this._hasher;                                                                                // 9182
                                                                                                                       // 9183
	            // Reset                                                                                                  // 9184
	            hasher.reset();                                                                                           // 9185
	            hasher.update(this._iKey);                                                                                // 9186
	        },                                                                                                            // 9187
                                                                                                                       // 9188
	        /**                                                                                                           // 9189
	         * Updates this HMAC with a message.                                                                          // 9190
	         *                                                                                                            // 9191
	         * @param {WordArray|string} messageUpdate The message to append.                                             // 9192
	         *                                                                                                            // 9193
	         * @return {HMAC} This HMAC instance.                                                                         // 9194
	         *                                                                                                            // 9195
	         * @example                                                                                                   // 9196
	         *                                                                                                            // 9197
	         *     hmacHasher.update('message');                                                                          // 9198
	         *     hmacHasher.update(wordArray);                                                                          // 9199
	         */                                                                                                           // 9200
	        update: function (messageUpdate) {                                                                            // 9201
	            this._hasher.update(messageUpdate);                                                                       // 9202
                                                                                                                       // 9203
	            // Chainable                                                                                              // 9204
	            return this;                                                                                              // 9205
	        },                                                                                                            // 9206
                                                                                                                       // 9207
	        /**                                                                                                           // 9208
	         * Finalizes the HMAC computation.                                                                            // 9209
	         * Note that the finalize operation is effectively a destructive, read-once operation.                        // 9210
	         *                                                                                                            // 9211
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.                                 // 9212
	         *                                                                                                            // 9213
	         * @return {WordArray} The HMAC.                                                                              // 9214
	         *                                                                                                            // 9215
	         * @example                                                                                                   // 9216
	         *                                                                                                            // 9217
	         *     var hmac = hmacHasher.finalize();                                                                      // 9218
	         *     var hmac = hmacHasher.finalize('message');                                                             // 9219
	         *     var hmac = hmacHasher.finalize(wordArray);                                                             // 9220
	         */                                                                                                           // 9221
	        finalize: function (messageUpdate) {                                                                          // 9222
	            // Shortcut                                                                                               // 9223
	            var hasher = this._hasher;                                                                                // 9224
                                                                                                                       // 9225
	            // Compute HMAC                                                                                           // 9226
	            var innerHash = hasher.finalize(messageUpdate);                                                           // 9227
	            hasher.reset();                                                                                           // 9228
	            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));                                         // 9229
                                                                                                                       // 9230
	            return hmac;                                                                                              // 9231
	        }                                                                                                             // 9232
	    });                                                                                                               // 9233
	}());                                                                                                                 // 9234
                                                                                                                       // 9235
                                                                                                                       // 9236
}));                                                                                                                   // 9237
},{"./core":52}],58:[function(require,module,exports){                                                                 // 9238
;(function (root, factory, undef) {                                                                                    // 9239
	if (typeof exports === "object") {                                                                                    // 9240
		// CommonJS                                                                                                          // 9241
		module.exports = exports = factory(require("./core"), require("./x64-core"), require("./lib-typedarrays"), require("./enc-utf16"), require("./enc-base64"), require("./md5"), require("./sha1"), require("./sha256"), require("./sha224"), require("./sha512"), require("./sha384"), require("./sha3"), require("./ripemd160"), require("./hmac"), require("./pbkdf2"), require("./evpkdf"), require("./cipher-core"), require("./mode-cfb"), require("./mode-ctr"), require("./mode-ctr-gladman"), require("./mode-ofb"), require("./mode-ecb"), require("./pad-ansix923"), require("./pad-iso10126"), require("./pad-iso97971"), require("./pad-zeropadding"), require("./pad-nopadding"), require("./format-hex"), require("./aes"), require("./tripledes"), require("./rc4"), require("./rabbit"), require("./rabbit-legacy"));
	}                                                                                                                     // 9243
	else if (typeof define === "function" && define.amd) {                                                                // 9244
		// AMD                                                                                                               // 9245
		define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy"], factory);
	}                                                                                                                     // 9247
	else {                                                                                                                // 9248
		// Global (browser)                                                                                                  // 9249
		root.CryptoJS = factory(root.CryptoJS);                                                                              // 9250
	}                                                                                                                     // 9251
}(this, function (CryptoJS) {                                                                                          // 9252
                                                                                                                       // 9253
	return CryptoJS;                                                                                                      // 9254
                                                                                                                       // 9255
}));                                                                                                                   // 9256
},{"./aes":50,"./cipher-core":51,"./core":52,"./enc-base64":53,"./enc-utf16":54,"./evpkdf":55,"./format-hex":56,"./hmac":57,"./lib-typedarrays":59,"./md5":60,"./mode-cfb":61,"./mode-ctr":63,"./mode-ctr-gladman":62,"./mode-ecb":64,"./mode-ofb":65,"./pad-ansix923":66,"./pad-iso10126":67,"./pad-iso97971":68,"./pad-nopadding":69,"./pad-zeropadding":70,"./pbkdf2":71,"./rabbit":73,"./rabbit-legacy":72,"./rc4":74,"./ripemd160":75,"./sha1":76,"./sha224":77,"./sha256":78,"./sha3":79,"./sha384":80,"./sha512":81,"./tripledes":82,"./x64-core":83}],59:[function(require,module,exports){
;(function (root, factory) {                                                                                           // 9258
	if (typeof exports === "object") {                                                                                    // 9259
		// CommonJS                                                                                                          // 9260
		module.exports = exports = factory(require("./core"));                                                               // 9261
	}                                                                                                                     // 9262
	else if (typeof define === "function" && define.amd) {                                                                // 9263
		// AMD                                                                                                               // 9264
		define(["./core"], factory);                                                                                         // 9265
	}                                                                                                                     // 9266
	else {                                                                                                                // 9267
		// Global (browser)                                                                                                  // 9268
		factory(root.CryptoJS);                                                                                              // 9269
	}                                                                                                                     // 9270
}(this, function (CryptoJS) {                                                                                          // 9271
                                                                                                                       // 9272
	(function () {                                                                                                        // 9273
	    // Check if typed arrays are supported                                                                            // 9274
	    if (typeof ArrayBuffer != 'function') {                                                                           // 9275
	        return;                                                                                                       // 9276
	    }                                                                                                                 // 9277
                                                                                                                       // 9278
	    // Shortcuts                                                                                                      // 9279
	    var C = CryptoJS;                                                                                                 // 9280
	    var C_lib = C.lib;                                                                                                // 9281
	    var WordArray = C_lib.WordArray;                                                                                  // 9282
                                                                                                                       // 9283
	    // Reference original init                                                                                        // 9284
	    var superInit = WordArray.init;                                                                                   // 9285
                                                                                                                       // 9286
	    // Augment WordArray.init to handle typed arrays                                                                  // 9287
	    var subInit = WordArray.init = function (typedArray) {                                                            // 9288
	        // Convert buffers to uint8                                                                                   // 9289
	        if (typedArray instanceof ArrayBuffer) {                                                                      // 9290
	            typedArray = new Uint8Array(typedArray);                                                                  // 9291
	        }                                                                                                             // 9292
                                                                                                                       // 9293
	        // Convert other array views to uint8                                                                         // 9294
	        if (                                                                                                          // 9295
	            typedArray instanceof Int8Array ||                                                                        // 9296
	            (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||                  // 9297
	            typedArray instanceof Int16Array ||                                                                       // 9298
	            typedArray instanceof Uint16Array ||                                                                      // 9299
	            typedArray instanceof Int32Array ||                                                                       // 9300
	            typedArray instanceof Uint32Array ||                                                                      // 9301
	            typedArray instanceof Float32Array ||                                                                     // 9302
	            typedArray instanceof Float64Array                                                                        // 9303
	        ) {                                                                                                           // 9304
	            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);             // 9305
	        }                                                                                                             // 9306
                                                                                                                       // 9307
	        // Handle Uint8Array                                                                                          // 9308
	        if (typedArray instanceof Uint8Array) {                                                                       // 9309
	            // Shortcut                                                                                               // 9310
	            var typedArrayByteLength = typedArray.byteLength;                                                         // 9311
                                                                                                                       // 9312
	            // Extract bytes                                                                                          // 9313
	            var words = [];                                                                                           // 9314
	            for (var i = 0; i < typedArrayByteLength; i++) {                                                          // 9315
	                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);                                                // 9316
	            }                                                                                                         // 9317
                                                                                                                       // 9318
	            // Initialize this word array                                                                             // 9319
	            superInit.call(this, words, typedArrayByteLength);                                                        // 9320
	        } else {                                                                                                      // 9321
	            // Else call normal init                                                                                  // 9322
	            superInit.apply(this, arguments);                                                                         // 9323
	        }                                                                                                             // 9324
	    };                                                                                                                // 9325
                                                                                                                       // 9326
	    subInit.prototype = WordArray;                                                                                    // 9327
	}());                                                                                                                 // 9328
                                                                                                                       // 9329
                                                                                                                       // 9330
	return CryptoJS.lib.WordArray;                                                                                        // 9331
                                                                                                                       // 9332
}));                                                                                                                   // 9333
},{"./core":52}],60:[function(require,module,exports){                                                                 // 9334
;(function (root, factory) {                                                                                           // 9335
	if (typeof exports === "object") {                                                                                    // 9336
		// CommonJS                                                                                                          // 9337
		module.exports = exports = factory(require("./core"));                                                               // 9338
	}                                                                                                                     // 9339
	else if (typeof define === "function" && define.amd) {                                                                // 9340
		// AMD                                                                                                               // 9341
		define(["./core"], factory);                                                                                         // 9342
	}                                                                                                                     // 9343
	else {                                                                                                                // 9344
		// Global (browser)                                                                                                  // 9345
		factory(root.CryptoJS);                                                                                              // 9346
	}                                                                                                                     // 9347
}(this, function (CryptoJS) {                                                                                          // 9348
                                                                                                                       // 9349
	(function (Math) {                                                                                                    // 9350
	    // Shortcuts                                                                                                      // 9351
	    var C = CryptoJS;                                                                                                 // 9352
	    var C_lib = C.lib;                                                                                                // 9353
	    var WordArray = C_lib.WordArray;                                                                                  // 9354
	    var Hasher = C_lib.Hasher;                                                                                        // 9355
	    var C_algo = C.algo;                                                                                              // 9356
                                                                                                                       // 9357
	    // Constants table                                                                                                // 9358
	    var T = [];                                                                                                       // 9359
                                                                                                                       // 9360
	    // Compute constants                                                                                              // 9361
	    (function () {                                                                                                    // 9362
	        for (var i = 0; i < 64; i++) {                                                                                // 9363
	            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;                                                     // 9364
	        }                                                                                                             // 9365
	    }());                                                                                                             // 9366
                                                                                                                       // 9367
	    /**                                                                                                               // 9368
	     * MD5 hash algorithm.                                                                                            // 9369
	     */                                                                                                               // 9370
	    var MD5 = C_algo.MD5 = Hasher.extend({                                                                            // 9371
	        _doReset: function () {                                                                                       // 9372
	            this._hash = new WordArray.init([                                                                         // 9373
	                0x67452301, 0xefcdab89,                                                                               // 9374
	                0x98badcfe, 0x10325476                                                                                // 9375
	            ]);                                                                                                       // 9376
	        },                                                                                                            // 9377
                                                                                                                       // 9378
	        _doProcessBlock: function (M, offset) {                                                                       // 9379
	            // Swap endian                                                                                            // 9380
	            for (var i = 0; i < 16; i++) {                                                                            // 9381
	                // Shortcuts                                                                                          // 9382
	                var offset_i = offset + i;                                                                            // 9383
	                var M_offset_i = M[offset_i];                                                                         // 9384
                                                                                                                       // 9385
	                M[offset_i] = (                                                                                       // 9386
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |                                       // 9387
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)                                         // 9388
	                );                                                                                                    // 9389
	            }                                                                                                         // 9390
                                                                                                                       // 9391
	            // Shortcuts                                                                                              // 9392
	            var H = this._hash.words;                                                                                 // 9393
                                                                                                                       // 9394
	            var M_offset_0  = M[offset + 0];                                                                          // 9395
	            var M_offset_1  = M[offset + 1];                                                                          // 9396
	            var M_offset_2  = M[offset + 2];                                                                          // 9397
	            var M_offset_3  = M[offset + 3];                                                                          // 9398
	            var M_offset_4  = M[offset + 4];                                                                          // 9399
	            var M_offset_5  = M[offset + 5];                                                                          // 9400
	            var M_offset_6  = M[offset + 6];                                                                          // 9401
	            var M_offset_7  = M[offset + 7];                                                                          // 9402
	            var M_offset_8  = M[offset + 8];                                                                          // 9403
	            var M_offset_9  = M[offset + 9];                                                                          // 9404
	            var M_offset_10 = M[offset + 10];                                                                         // 9405
	            var M_offset_11 = M[offset + 11];                                                                         // 9406
	            var M_offset_12 = M[offset + 12];                                                                         // 9407
	            var M_offset_13 = M[offset + 13];                                                                         // 9408
	            var M_offset_14 = M[offset + 14];                                                                         // 9409
	            var M_offset_15 = M[offset + 15];                                                                         // 9410
                                                                                                                       // 9411
	            // Working varialbes                                                                                      // 9412
	            var a = H[0];                                                                                             // 9413
	            var b = H[1];                                                                                             // 9414
	            var c = H[2];                                                                                             // 9415
	            var d = H[3];                                                                                             // 9416
                                                                                                                       // 9417
	            // Computation                                                                                            // 9418
	            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);                                                                // 9419
	            d = FF(d, a, b, c, M_offset_1,  12, T[1]);                                                                // 9420
	            c = FF(c, d, a, b, M_offset_2,  17, T[2]);                                                                // 9421
	            b = FF(b, c, d, a, M_offset_3,  22, T[3]);                                                                // 9422
	            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);                                                                // 9423
	            d = FF(d, a, b, c, M_offset_5,  12, T[5]);                                                                // 9424
	            c = FF(c, d, a, b, M_offset_6,  17, T[6]);                                                                // 9425
	            b = FF(b, c, d, a, M_offset_7,  22, T[7]);                                                                // 9426
	            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);                                                                // 9427
	            d = FF(d, a, b, c, M_offset_9,  12, T[9]);                                                                // 9428
	            c = FF(c, d, a, b, M_offset_10, 17, T[10]);                                                               // 9429
	            b = FF(b, c, d, a, M_offset_11, 22, T[11]);                                                               // 9430
	            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);                                                               // 9431
	            d = FF(d, a, b, c, M_offset_13, 12, T[13]);                                                               // 9432
	            c = FF(c, d, a, b, M_offset_14, 17, T[14]);                                                               // 9433
	            b = FF(b, c, d, a, M_offset_15, 22, T[15]);                                                               // 9434
                                                                                                                       // 9435
	            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);                                                               // 9436
	            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);                                                               // 9437
	            c = GG(c, d, a, b, M_offset_11, 14, T[18]);                                                               // 9438
	            b = GG(b, c, d, a, M_offset_0,  20, T[19]);                                                               // 9439
	            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);                                                               // 9440
	            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);                                                               // 9441
	            c = GG(c, d, a, b, M_offset_15, 14, T[22]);                                                               // 9442
	            b = GG(b, c, d, a, M_offset_4,  20, T[23]);                                                               // 9443
	            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);                                                               // 9444
	            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);                                                               // 9445
	            c = GG(c, d, a, b, M_offset_3,  14, T[26]);                                                               // 9446
	            b = GG(b, c, d, a, M_offset_8,  20, T[27]);                                                               // 9447
	            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);                                                               // 9448
	            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);                                                               // 9449
	            c = GG(c, d, a, b, M_offset_7,  14, T[30]);                                                               // 9450
	            b = GG(b, c, d, a, M_offset_12, 20, T[31]);                                                               // 9451
                                                                                                                       // 9452
	            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);                                                               // 9453
	            d = HH(d, a, b, c, M_offset_8,  11, T[33]);                                                               // 9454
	            c = HH(c, d, a, b, M_offset_11, 16, T[34]);                                                               // 9455
	            b = HH(b, c, d, a, M_offset_14, 23, T[35]);                                                               // 9456
	            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);                                                               // 9457
	            d = HH(d, a, b, c, M_offset_4,  11, T[37]);                                                               // 9458
	            c = HH(c, d, a, b, M_offset_7,  16, T[38]);                                                               // 9459
	            b = HH(b, c, d, a, M_offset_10, 23, T[39]);                                                               // 9460
	            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);                                                               // 9461
	            d = HH(d, a, b, c, M_offset_0,  11, T[41]);                                                               // 9462
	            c = HH(c, d, a, b, M_offset_3,  16, T[42]);                                                               // 9463
	            b = HH(b, c, d, a, M_offset_6,  23, T[43]);                                                               // 9464
	            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);                                                               // 9465
	            d = HH(d, a, b, c, M_offset_12, 11, T[45]);                                                               // 9466
	            c = HH(c, d, a, b, M_offset_15, 16, T[46]);                                                               // 9467
	            b = HH(b, c, d, a, M_offset_2,  23, T[47]);                                                               // 9468
                                                                                                                       // 9469
	            a = II(a, b, c, d, M_offset_0,  6,  T[48]);                                                               // 9470
	            d = II(d, a, b, c, M_offset_7,  10, T[49]);                                                               // 9471
	            c = II(c, d, a, b, M_offset_14, 15, T[50]);                                                               // 9472
	            b = II(b, c, d, a, M_offset_5,  21, T[51]);                                                               // 9473
	            a = II(a, b, c, d, M_offset_12, 6,  T[52]);                                                               // 9474
	            d = II(d, a, b, c, M_offset_3,  10, T[53]);                                                               // 9475
	            c = II(c, d, a, b, M_offset_10, 15, T[54]);                                                               // 9476
	            b = II(b, c, d, a, M_offset_1,  21, T[55]);                                                               // 9477
	            a = II(a, b, c, d, M_offset_8,  6,  T[56]);                                                               // 9478
	            d = II(d, a, b, c, M_offset_15, 10, T[57]);                                                               // 9479
	            c = II(c, d, a, b, M_offset_6,  15, T[58]);                                                               // 9480
	            b = II(b, c, d, a, M_offset_13, 21, T[59]);                                                               // 9481
	            a = II(a, b, c, d, M_offset_4,  6,  T[60]);                                                               // 9482
	            d = II(d, a, b, c, M_offset_11, 10, T[61]);                                                               // 9483
	            c = II(c, d, a, b, M_offset_2,  15, T[62]);                                                               // 9484
	            b = II(b, c, d, a, M_offset_9,  21, T[63]);                                                               // 9485
                                                                                                                       // 9486
	            // Intermediate hash value                                                                                // 9487
	            H[0] = (H[0] + a) | 0;                                                                                    // 9488
	            H[1] = (H[1] + b) | 0;                                                                                    // 9489
	            H[2] = (H[2] + c) | 0;                                                                                    // 9490
	            H[3] = (H[3] + d) | 0;                                                                                    // 9491
	        },                                                                                                            // 9492
                                                                                                                       // 9493
	        _doFinalize: function () {                                                                                    // 9494
	            // Shortcuts                                                                                              // 9495
	            var data = this._data;                                                                                    // 9496
	            var dataWords = data.words;                                                                               // 9497
                                                                                                                       // 9498
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 9499
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 9500
                                                                                                                       // 9501
	            // Add padding                                                                                            // 9502
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 9503
                                                                                                                       // 9504
	            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);                                                   // 9505
	            var nBitsTotalL = nBitsTotal;                                                                             // 9506
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (                                                       // 9507
	                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |                                         // 9508
	                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)                                           // 9509
	            );                                                                                                        // 9510
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (                                                       // 9511
	                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |                                         // 9512
	                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)                                           // 9513
	            );                                                                                                        // 9514
                                                                                                                       // 9515
	            data.sigBytes = (dataWords.length + 1) * 4;                                                               // 9516
                                                                                                                       // 9517
	            // Hash final blocks                                                                                      // 9518
	            this._process();                                                                                          // 9519
                                                                                                                       // 9520
	            // Shortcuts                                                                                              // 9521
	            var hash = this._hash;                                                                                    // 9522
	            var H = hash.words;                                                                                       // 9523
                                                                                                                       // 9524
	            // Swap endian                                                                                            // 9525
	            for (var i = 0; i < 4; i++) {                                                                             // 9526
	                // Shortcut                                                                                           // 9527
	                var H_i = H[i];                                                                                       // 9528
                                                                                                                       // 9529
	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |                                                  // 9530
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);                                                   // 9531
	            }                                                                                                         // 9532
                                                                                                                       // 9533
	            // Return final computed hash                                                                             // 9534
	            return hash;                                                                                              // 9535
	        },                                                                                                            // 9536
                                                                                                                       // 9537
	        clone: function () {                                                                                          // 9538
	            var clone = Hasher.clone.call(this);                                                                      // 9539
	            clone._hash = this._hash.clone();                                                                         // 9540
                                                                                                                       // 9541
	            return clone;                                                                                             // 9542
	        }                                                                                                             // 9543
	    });                                                                                                               // 9544
                                                                                                                       // 9545
	    function FF(a, b, c, d, x, s, t) {                                                                                // 9546
	        var n = a + ((b & c) | (~b & d)) + x + t;                                                                     // 9547
	        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 9548
	    }                                                                                                                 // 9549
                                                                                                                       // 9550
	    function GG(a, b, c, d, x, s, t) {                                                                                // 9551
	        var n = a + ((b & d) | (c & ~d)) + x + t;                                                                     // 9552
	        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 9553
	    }                                                                                                                 // 9554
                                                                                                                       // 9555
	    function HH(a, b, c, d, x, s, t) {                                                                                // 9556
	        var n = a + (b ^ c ^ d) + x + t;                                                                              // 9557
	        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 9558
	    }                                                                                                                 // 9559
                                                                                                                       // 9560
	    function II(a, b, c, d, x, s, t) {                                                                                // 9561
	        var n = a + (c ^ (b | ~d)) + x + t;                                                                           // 9562
	        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 9563
	    }                                                                                                                 // 9564
                                                                                                                       // 9565
	    /**                                                                                                               // 9566
	     * Shortcut function to the hasher's object interface.                                                            // 9567
	     *                                                                                                                // 9568
	     * @param {WordArray|string} message The message to hash.                                                         // 9569
	     *                                                                                                                // 9570
	     * @return {WordArray} The hash.                                                                                  // 9571
	     *                                                                                                                // 9572
	     * @static                                                                                                        // 9573
	     *                                                                                                                // 9574
	     * @example                                                                                                       // 9575
	     *                                                                                                                // 9576
	     *     var hash = CryptoJS.MD5('message');                                                                        // 9577
	     *     var hash = CryptoJS.MD5(wordArray);                                                                        // 9578
	     */                                                                                                               // 9579
	    C.MD5 = Hasher._createHelper(MD5);                                                                                // 9580
                                                                                                                       // 9581
	    /**                                                                                                               // 9582
	     * Shortcut function to the HMAC's object interface.                                                              // 9583
	     *                                                                                                                // 9584
	     * @param {WordArray|string} message The message to hash.                                                         // 9585
	     * @param {WordArray|string} key The secret key.                                                                  // 9586
	     *                                                                                                                // 9587
	     * @return {WordArray} The HMAC.                                                                                  // 9588
	     *                                                                                                                // 9589
	     * @static                                                                                                        // 9590
	     *                                                                                                                // 9591
	     * @example                                                                                                       // 9592
	     *                                                                                                                // 9593
	     *     var hmac = CryptoJS.HmacMD5(message, key);                                                                 // 9594
	     */                                                                                                               // 9595
	    C.HmacMD5 = Hasher._createHmacHelper(MD5);                                                                        // 9596
	}(Math));                                                                                                             // 9597
                                                                                                                       // 9598
                                                                                                                       // 9599
	return CryptoJS.MD5;                                                                                                  // 9600
                                                                                                                       // 9601
}));                                                                                                                   // 9602
},{"./core":52}],61:[function(require,module,exports){                                                                 // 9603
;(function (root, factory, undef) {                                                                                    // 9604
	if (typeof exports === "object") {                                                                                    // 9605
		// CommonJS                                                                                                          // 9606
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9607
	}                                                                                                                     // 9608
	else if (typeof define === "function" && define.amd) {                                                                // 9609
		// AMD                                                                                                               // 9610
		define(["./core", "./cipher-core"], factory);                                                                        // 9611
	}                                                                                                                     // 9612
	else {                                                                                                                // 9613
		// Global (browser)                                                                                                  // 9614
		factory(root.CryptoJS);                                                                                              // 9615
	}                                                                                                                     // 9616
}(this, function (CryptoJS) {                                                                                          // 9617
                                                                                                                       // 9618
	/**                                                                                                                   // 9619
	 * Cipher Feedback block mode.                                                                                        // 9620
	 */                                                                                                                   // 9621
	CryptoJS.mode.CFB = (function () {                                                                                    // 9622
	    var CFB = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 9623
                                                                                                                       // 9624
	    CFB.Encryptor = CFB.extend({                                                                                      // 9625
	        processBlock: function (words, offset) {                                                                      // 9626
	            // Shortcuts                                                                                              // 9627
	            var cipher = this._cipher;                                                                                // 9628
	            var blockSize = cipher.blockSize;                                                                         // 9629
                                                                                                                       // 9630
	            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);                                 // 9631
                                                                                                                       // 9632
	            // Remember this block to use with next block                                                             // 9633
	            this._prevBlock = words.slice(offset, offset + blockSize);                                                // 9634
	        }                                                                                                             // 9635
	    });                                                                                                               // 9636
                                                                                                                       // 9637
	    CFB.Decryptor = CFB.extend({                                                                                      // 9638
	        processBlock: function (words, offset) {                                                                      // 9639
	            // Shortcuts                                                                                              // 9640
	            var cipher = this._cipher;                                                                                // 9641
	            var blockSize = cipher.blockSize;                                                                         // 9642
                                                                                                                       // 9643
	            // Remember this block to use with next block                                                             // 9644
	            var thisBlock = words.slice(offset, offset + blockSize);                                                  // 9645
                                                                                                                       // 9646
	            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);                                 // 9647
                                                                                                                       // 9648
	            // This block becomes the previous block                                                                  // 9649
	            this._prevBlock = thisBlock;                                                                              // 9650
	        }                                                                                                             // 9651
	    });                                                                                                               // 9652
                                                                                                                       // 9653
	    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {                                          // 9654
	        // Shortcut                                                                                                   // 9655
	        var iv = this._iv;                                                                                            // 9656
                                                                                                                       // 9657
	        // Generate keystream                                                                                         // 9658
	        if (iv) {                                                                                                     // 9659
	            var keystream = iv.slice(0);                                                                              // 9660
                                                                                                                       // 9661
	            // Remove IV for subsequent blocks                                                                        // 9662
	            this._iv = undefined;                                                                                     // 9663
	        } else {                                                                                                      // 9664
	            var keystream = this._prevBlock;                                                                          // 9665
	        }                                                                                                             // 9666
	        cipher.encryptBlock(keystream, 0);                                                                            // 9667
                                                                                                                       // 9668
	        // Encrypt                                                                                                    // 9669
	        for (var i = 0; i < blockSize; i++) {                                                                         // 9670
	            words[offset + i] ^= keystream[i];                                                                        // 9671
	        }                                                                                                             // 9672
	    }                                                                                                                 // 9673
                                                                                                                       // 9674
	    return CFB;                                                                                                       // 9675
	}());                                                                                                                 // 9676
                                                                                                                       // 9677
                                                                                                                       // 9678
	return CryptoJS.mode.CFB;                                                                                             // 9679
                                                                                                                       // 9680
}));                                                                                                                   // 9681
},{"./cipher-core":51,"./core":52}],62:[function(require,module,exports){                                              // 9682
;(function (root, factory, undef) {                                                                                    // 9683
	if (typeof exports === "object") {                                                                                    // 9684
		// CommonJS                                                                                                          // 9685
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9686
	}                                                                                                                     // 9687
	else if (typeof define === "function" && define.amd) {                                                                // 9688
		// AMD                                                                                                               // 9689
		define(["./core", "./cipher-core"], factory);                                                                        // 9690
	}                                                                                                                     // 9691
	else {                                                                                                                // 9692
		// Global (browser)                                                                                                  // 9693
		factory(root.CryptoJS);                                                                                              // 9694
	}                                                                                                                     // 9695
}(this, function (CryptoJS) {                                                                                          // 9696
                                                                                                                       // 9697
	/** @preserve                                                                                                         // 9698
	 * Counter block mode compatible with  Dr Brian Gladman fileenc.c                                                     // 9699
	 * derived from CryptoJS.mode.CTR                                                                                     // 9700
	 * Jan Hruby jhruby.web@gmail.com                                                                                     // 9701
	 */                                                                                                                   // 9702
	CryptoJS.mode.CTRGladman = (function () {                                                                             // 9703
	    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();                                                           // 9704
                                                                                                                       // 9705
		function incWord(word)                                                                                               // 9706
		{                                                                                                                    // 9707
			if (((word >> 24) & 0xff) === 0xff) { //overflow                                                                    // 9708
			var b1 = (word >> 16)&0xff;                                                                                         // 9709
			var b2 = (word >> 8)&0xff;                                                                                          // 9710
			var b3 = word & 0xff;                                                                                               // 9711
                                                                                                                       // 9712
			if (b1 === 0xff) // overflow b1                                                                                     // 9713
			{                                                                                                                   // 9714
			b1 = 0;                                                                                                             // 9715
			if (b2 === 0xff)                                                                                                    // 9716
			{                                                                                                                   // 9717
				b2 = 0;                                                                                                            // 9718
				if (b3 === 0xff)                                                                                                   // 9719
				{                                                                                                                  // 9720
					b3 = 0;                                                                                                           // 9721
				}                                                                                                                  // 9722
				else                                                                                                               // 9723
				{                                                                                                                  // 9724
					++b3;                                                                                                             // 9725
				}                                                                                                                  // 9726
			}                                                                                                                   // 9727
			else                                                                                                                // 9728
			{                                                                                                                   // 9729
				++b2;                                                                                                              // 9730
			}                                                                                                                   // 9731
			}                                                                                                                   // 9732
			else                                                                                                                // 9733
			{                                                                                                                   // 9734
			++b1;                                                                                                               // 9735
			}                                                                                                                   // 9736
                                                                                                                       // 9737
			word = 0;                                                                                                           // 9738
			word += (b1 << 16);                                                                                                 // 9739
			word += (b2 << 8);                                                                                                  // 9740
			word += b3;                                                                                                         // 9741
			}                                                                                                                   // 9742
			else                                                                                                                // 9743
			{                                                                                                                   // 9744
			word += (0x01 << 24);                                                                                               // 9745
			}                                                                                                                   // 9746
			return word;                                                                                                        // 9747
		}                                                                                                                    // 9748
                                                                                                                       // 9749
		function incCounter(counter)                                                                                         // 9750
		{                                                                                                                    // 9751
			if ((counter[0] = incWord(counter[0])) === 0)                                                                       // 9752
			{                                                                                                                   // 9753
				// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8                                    // 9754
				counter[1] = incWord(counter[1]);                                                                                  // 9755
			}                                                                                                                   // 9756
			return counter;                                                                                                     // 9757
		}                                                                                                                    // 9758
                                                                                                                       // 9759
	    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({                                                        // 9760
	        processBlock: function (words, offset) {                                                                      // 9761
	            // Shortcuts                                                                                              // 9762
	            var cipher = this._cipher                                                                                 // 9763
	            var blockSize = cipher.blockSize;                                                                         // 9764
	            var iv = this._iv;                                                                                        // 9765
	            var counter = this._counter;                                                                              // 9766
                                                                                                                       // 9767
	            // Generate keystream                                                                                     // 9768
	            if (iv) {                                                                                                 // 9769
	                counter = this._counter = iv.slice(0);                                                                // 9770
                                                                                                                       // 9771
	                // Remove IV for subsequent blocks                                                                    // 9772
	                this._iv = undefined;                                                                                 // 9773
	            }                                                                                                         // 9774
                                                                                                                       // 9775
				incCounter(counter);                                                                                               // 9776
                                                                                                                       // 9777
				var keystream = counter.slice(0);                                                                                  // 9778
	            cipher.encryptBlock(keystream, 0);                                                                        // 9779
                                                                                                                       // 9780
	            // Encrypt                                                                                                // 9781
	            for (var i = 0; i < blockSize; i++) {                                                                     // 9782
	                words[offset + i] ^= keystream[i];                                                                    // 9783
	            }                                                                                                         // 9784
	        }                                                                                                             // 9785
	    });                                                                                                               // 9786
                                                                                                                       // 9787
	    CTRGladman.Decryptor = Encryptor;                                                                                 // 9788
                                                                                                                       // 9789
	    return CTRGladman;                                                                                                // 9790
	}());                                                                                                                 // 9791
                                                                                                                       // 9792
                                                                                                                       // 9793
                                                                                                                       // 9794
                                                                                                                       // 9795
	return CryptoJS.mode.CTRGladman;                                                                                      // 9796
                                                                                                                       // 9797
}));                                                                                                                   // 9798
},{"./cipher-core":51,"./core":52}],63:[function(require,module,exports){                                              // 9799
;(function (root, factory, undef) {                                                                                    // 9800
	if (typeof exports === "object") {                                                                                    // 9801
		// CommonJS                                                                                                          // 9802
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9803
	}                                                                                                                     // 9804
	else if (typeof define === "function" && define.amd) {                                                                // 9805
		// AMD                                                                                                               // 9806
		define(["./core", "./cipher-core"], factory);                                                                        // 9807
	}                                                                                                                     // 9808
	else {                                                                                                                // 9809
		// Global (browser)                                                                                                  // 9810
		factory(root.CryptoJS);                                                                                              // 9811
	}                                                                                                                     // 9812
}(this, function (CryptoJS) {                                                                                          // 9813
                                                                                                                       // 9814
	/**                                                                                                                   // 9815
	 * Counter block mode.                                                                                                // 9816
	 */                                                                                                                   // 9817
	CryptoJS.mode.CTR = (function () {                                                                                    // 9818
	    var CTR = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 9819
                                                                                                                       // 9820
	    var Encryptor = CTR.Encryptor = CTR.extend({                                                                      // 9821
	        processBlock: function (words, offset) {                                                                      // 9822
	            // Shortcuts                                                                                              // 9823
	            var cipher = this._cipher                                                                                 // 9824
	            var blockSize = cipher.blockSize;                                                                         // 9825
	            var iv = this._iv;                                                                                        // 9826
	            var counter = this._counter;                                                                              // 9827
                                                                                                                       // 9828
	            // Generate keystream                                                                                     // 9829
	            if (iv) {                                                                                                 // 9830
	                counter = this._counter = iv.slice(0);                                                                // 9831
                                                                                                                       // 9832
	                // Remove IV for subsequent blocks                                                                    // 9833
	                this._iv = undefined;                                                                                 // 9834
	            }                                                                                                         // 9835
	            var keystream = counter.slice(0);                                                                         // 9836
	            cipher.encryptBlock(keystream, 0);                                                                        // 9837
                                                                                                                       // 9838
	            // Increment counter                                                                                      // 9839
	            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0                                                 // 9840
                                                                                                                       // 9841
	            // Encrypt                                                                                                // 9842
	            for (var i = 0; i < blockSize; i++) {                                                                     // 9843
	                words[offset + i] ^= keystream[i];                                                                    // 9844
	            }                                                                                                         // 9845
	        }                                                                                                             // 9846
	    });                                                                                                               // 9847
                                                                                                                       // 9848
	    CTR.Decryptor = Encryptor;                                                                                        // 9849
                                                                                                                       // 9850
	    return CTR;                                                                                                       // 9851
	}());                                                                                                                 // 9852
                                                                                                                       // 9853
                                                                                                                       // 9854
	return CryptoJS.mode.CTR;                                                                                             // 9855
                                                                                                                       // 9856
}));                                                                                                                   // 9857
},{"./cipher-core":51,"./core":52}],64:[function(require,module,exports){                                              // 9858
;(function (root, factory, undef) {                                                                                    // 9859
	if (typeof exports === "object") {                                                                                    // 9860
		// CommonJS                                                                                                          // 9861
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9862
	}                                                                                                                     // 9863
	else if (typeof define === "function" && define.amd) {                                                                // 9864
		// AMD                                                                                                               // 9865
		define(["./core", "./cipher-core"], factory);                                                                        // 9866
	}                                                                                                                     // 9867
	else {                                                                                                                // 9868
		// Global (browser)                                                                                                  // 9869
		factory(root.CryptoJS);                                                                                              // 9870
	}                                                                                                                     // 9871
}(this, function (CryptoJS) {                                                                                          // 9872
                                                                                                                       // 9873
	/**                                                                                                                   // 9874
	 * Electronic Codebook block mode.                                                                                    // 9875
	 */                                                                                                                   // 9876
	CryptoJS.mode.ECB = (function () {                                                                                    // 9877
	    var ECB = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 9878
                                                                                                                       // 9879
	    ECB.Encryptor = ECB.extend({                                                                                      // 9880
	        processBlock: function (words, offset) {                                                                      // 9881
	            this._cipher.encryptBlock(words, offset);                                                                 // 9882
	        }                                                                                                             // 9883
	    });                                                                                                               // 9884
                                                                                                                       // 9885
	    ECB.Decryptor = ECB.extend({                                                                                      // 9886
	        processBlock: function (words, offset) {                                                                      // 9887
	            this._cipher.decryptBlock(words, offset);                                                                 // 9888
	        }                                                                                                             // 9889
	    });                                                                                                               // 9890
                                                                                                                       // 9891
	    return ECB;                                                                                                       // 9892
	}());                                                                                                                 // 9893
                                                                                                                       // 9894
                                                                                                                       // 9895
	return CryptoJS.mode.ECB;                                                                                             // 9896
                                                                                                                       // 9897
}));                                                                                                                   // 9898
},{"./cipher-core":51,"./core":52}],65:[function(require,module,exports){                                              // 9899
;(function (root, factory, undef) {                                                                                    // 9900
	if (typeof exports === "object") {                                                                                    // 9901
		// CommonJS                                                                                                          // 9902
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9903
	}                                                                                                                     // 9904
	else if (typeof define === "function" && define.amd) {                                                                // 9905
		// AMD                                                                                                               // 9906
		define(["./core", "./cipher-core"], factory);                                                                        // 9907
	}                                                                                                                     // 9908
	else {                                                                                                                // 9909
		// Global (browser)                                                                                                  // 9910
		factory(root.CryptoJS);                                                                                              // 9911
	}                                                                                                                     // 9912
}(this, function (CryptoJS) {                                                                                          // 9913
                                                                                                                       // 9914
	/**                                                                                                                   // 9915
	 * Output Feedback block mode.                                                                                        // 9916
	 */                                                                                                                   // 9917
	CryptoJS.mode.OFB = (function () {                                                                                    // 9918
	    var OFB = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 9919
                                                                                                                       // 9920
	    var Encryptor = OFB.Encryptor = OFB.extend({                                                                      // 9921
	        processBlock: function (words, offset) {                                                                      // 9922
	            // Shortcuts                                                                                              // 9923
	            var cipher = this._cipher                                                                                 // 9924
	            var blockSize = cipher.blockSize;                                                                         // 9925
	            var iv = this._iv;                                                                                        // 9926
	            var keystream = this._keystream;                                                                          // 9927
                                                                                                                       // 9928
	            // Generate keystream                                                                                     // 9929
	            if (iv) {                                                                                                 // 9930
	                keystream = this._keystream = iv.slice(0);                                                            // 9931
                                                                                                                       // 9932
	                // Remove IV for subsequent blocks                                                                    // 9933
	                this._iv = undefined;                                                                                 // 9934
	            }                                                                                                         // 9935
	            cipher.encryptBlock(keystream, 0);                                                                        // 9936
                                                                                                                       // 9937
	            // Encrypt                                                                                                // 9938
	            for (var i = 0; i < blockSize; i++) {                                                                     // 9939
	                words[offset + i] ^= keystream[i];                                                                    // 9940
	            }                                                                                                         // 9941
	        }                                                                                                             // 9942
	    });                                                                                                               // 9943
                                                                                                                       // 9944
	    OFB.Decryptor = Encryptor;                                                                                        // 9945
                                                                                                                       // 9946
	    return OFB;                                                                                                       // 9947
	}());                                                                                                                 // 9948
                                                                                                                       // 9949
                                                                                                                       // 9950
	return CryptoJS.mode.OFB;                                                                                             // 9951
                                                                                                                       // 9952
}));                                                                                                                   // 9953
},{"./cipher-core":51,"./core":52}],66:[function(require,module,exports){                                              // 9954
;(function (root, factory, undef) {                                                                                    // 9955
	if (typeof exports === "object") {                                                                                    // 9956
		// CommonJS                                                                                                          // 9957
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9958
	}                                                                                                                     // 9959
	else if (typeof define === "function" && define.amd) {                                                                // 9960
		// AMD                                                                                                               // 9961
		define(["./core", "./cipher-core"], factory);                                                                        // 9962
	}                                                                                                                     // 9963
	else {                                                                                                                // 9964
		// Global (browser)                                                                                                  // 9965
		factory(root.CryptoJS);                                                                                              // 9966
	}                                                                                                                     // 9967
}(this, function (CryptoJS) {                                                                                          // 9968
                                                                                                                       // 9969
	/**                                                                                                                   // 9970
	 * ANSI X.923 padding strategy.                                                                                       // 9971
	 */                                                                                                                   // 9972
	CryptoJS.pad.AnsiX923 = {                                                                                             // 9973
	    pad: function (data, blockSize) {                                                                                 // 9974
	        // Shortcuts                                                                                                  // 9975
	        var dataSigBytes = data.sigBytes;                                                                             // 9976
	        var blockSizeBytes = blockSize * 4;                                                                           // 9977
                                                                                                                       // 9978
	        // Count padding bytes                                                                                        // 9979
	        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;                                           // 9980
                                                                                                                       // 9981
	        // Compute last byte position                                                                                 // 9982
	        var lastBytePos = dataSigBytes + nPaddingBytes - 1;                                                           // 9983
                                                                                                                       // 9984
	        // Pad                                                                                                        // 9985
	        data.clamp();                                                                                                 // 9986
	        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);                               // 9987
	        data.sigBytes += nPaddingBytes;                                                                               // 9988
	    },                                                                                                                // 9989
                                                                                                                       // 9990
	    unpad: function (data) {                                                                                          // 9991
	        // Get number of padding bytes from last byte                                                                 // 9992
	        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;                                             // 9993
                                                                                                                       // 9994
	        // Remove padding                                                                                             // 9995
	        data.sigBytes -= nPaddingBytes;                                                                               // 9996
	    }                                                                                                                 // 9997
	};                                                                                                                    // 9998
                                                                                                                       // 9999
                                                                                                                       // 10000
	return CryptoJS.pad.Ansix923;                                                                                         // 10001
                                                                                                                       // 10002
}));                                                                                                                   // 10003
},{"./cipher-core":51,"./core":52}],67:[function(require,module,exports){                                              // 10004
;(function (root, factory, undef) {                                                                                    // 10005
	if (typeof exports === "object") {                                                                                    // 10006
		// CommonJS                                                                                                          // 10007
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 10008
	}                                                                                                                     // 10009
	else if (typeof define === "function" && define.amd) {                                                                // 10010
		// AMD                                                                                                               // 10011
		define(["./core", "./cipher-core"], factory);                                                                        // 10012
	}                                                                                                                     // 10013
	else {                                                                                                                // 10014
		// Global (browser)                                                                                                  // 10015
		factory(root.CryptoJS);                                                                                              // 10016
	}                                                                                                                     // 10017
}(this, function (CryptoJS) {                                                                                          // 10018
                                                                                                                       // 10019
	/**                                                                                                                   // 10020
	 * ISO 10126 padding strategy.                                                                                        // 10021
	 */                                                                                                                   // 10022
	CryptoJS.pad.Iso10126 = {                                                                                             // 10023
	    pad: function (data, blockSize) {                                                                                 // 10024
	        // Shortcut                                                                                                   // 10025
	        var blockSizeBytes = blockSize * 4;                                                                           // 10026
                                                                                                                       // 10027
	        // Count padding bytes                                                                                        // 10028
	        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;                                          // 10029
                                                                                                                       // 10030
	        // Pad                                                                                                        // 10031
	        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).                                                // 10032
	             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));                                         // 10033
	    },                                                                                                                // 10034
                                                                                                                       // 10035
	    unpad: function (data) {                                                                                          // 10036
	        // Get number of padding bytes from last byte                                                                 // 10037
	        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;                                             // 10038
                                                                                                                       // 10039
	        // Remove padding                                                                                             // 10040
	        data.sigBytes -= nPaddingBytes;                                                                               // 10041
	    }                                                                                                                 // 10042
	};                                                                                                                    // 10043
                                                                                                                       // 10044
                                                                                                                       // 10045
	return CryptoJS.pad.Iso10126;                                                                                         // 10046
                                                                                                                       // 10047
}));                                                                                                                   // 10048
},{"./cipher-core":51,"./core":52}],68:[function(require,module,exports){                                              // 10049
;(function (root, factory, undef) {                                                                                    // 10050
	if (typeof exports === "object") {                                                                                    // 10051
		// CommonJS                                                                                                          // 10052
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 10053
	}                                                                                                                     // 10054
	else if (typeof define === "function" && define.amd) {                                                                // 10055
		// AMD                                                                                                               // 10056
		define(["./core", "./cipher-core"], factory);                                                                        // 10057
	}                                                                                                                     // 10058
	else {                                                                                                                // 10059
		// Global (browser)                                                                                                  // 10060
		factory(root.CryptoJS);                                                                                              // 10061
	}                                                                                                                     // 10062
}(this, function (CryptoJS) {                                                                                          // 10063
                                                                                                                       // 10064
	/**                                                                                                                   // 10065
	 * ISO/IEC 9797-1 Padding Method 2.                                                                                   // 10066
	 */                                                                                                                   // 10067
	CryptoJS.pad.Iso97971 = {                                                                                             // 10068
	    pad: function (data, blockSize) {                                                                                 // 10069
	        // Add 0x80 byte                                                                                              // 10070
	        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));                                                  // 10071
                                                                                                                       // 10072
	        // Zero pad the rest                                                                                          // 10073
	        CryptoJS.pad.ZeroPadding.pad(data, blockSize);                                                                // 10074
	    },                                                                                                                // 10075
                                                                                                                       // 10076
	    unpad: function (data) {                                                                                          // 10077
	        // Remove zero padding                                                                                        // 10078
	        CryptoJS.pad.ZeroPadding.unpad(data);                                                                         // 10079
                                                                                                                       // 10080
	        // Remove one more byte -- the 0x80 byte                                                                      // 10081
	        data.sigBytes--;                                                                                              // 10082
	    }                                                                                                                 // 10083
	};                                                                                                                    // 10084
                                                                                                                       // 10085
                                                                                                                       // 10086
	return CryptoJS.pad.Iso97971;                                                                                         // 10087
                                                                                                                       // 10088
}));                                                                                                                   // 10089
},{"./cipher-core":51,"./core":52}],69:[function(require,module,exports){                                              // 10090
;(function (root, factory, undef) {                                                                                    // 10091
	if (typeof exports === "object") {                                                                                    // 10092
		// CommonJS                                                                                                          // 10093
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 10094
	}                                                                                                                     // 10095
	else if (typeof define === "function" && define.amd) {                                                                // 10096
		// AMD                                                                                                               // 10097
		define(["./core", "./cipher-core"], factory);                                                                        // 10098
	}                                                                                                                     // 10099
	else {                                                                                                                // 10100
		// Global (browser)                                                                                                  // 10101
		factory(root.CryptoJS);                                                                                              // 10102
	}                                                                                                                     // 10103
}(this, function (CryptoJS) {                                                                                          // 10104
                                                                                                                       // 10105
	/**                                                                                                                   // 10106
	 * A noop padding strategy.                                                                                           // 10107
	 */                                                                                                                   // 10108
	CryptoJS.pad.NoPadding = {                                                                                            // 10109
	    pad: function () {                                                                                                // 10110
	    },                                                                                                                // 10111
                                                                                                                       // 10112
	    unpad: function () {                                                                                              // 10113
	    }                                                                                                                 // 10114
	};                                                                                                                    // 10115
                                                                                                                       // 10116
                                                                                                                       // 10117
	return CryptoJS.pad.NoPadding;                                                                                        // 10118
                                                                                                                       // 10119
}));                                                                                                                   // 10120
},{"./cipher-core":51,"./core":52}],70:[function(require,module,exports){                                              // 10121
;(function (root, factory, undef) {                                                                                    // 10122
	if (typeof exports === "object") {                                                                                    // 10123
		// CommonJS                                                                                                          // 10124
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 10125
	}                                                                                                                     // 10126
	else if (typeof define === "function" && define.amd) {                                                                // 10127
		// AMD                                                                                                               // 10128
		define(["./core", "./cipher-core"], factory);                                                                        // 10129
	}                                                                                                                     // 10130
	else {                                                                                                                // 10131
		// Global (browser)                                                                                                  // 10132
		factory(root.CryptoJS);                                                                                              // 10133
	}                                                                                                                     // 10134
}(this, function (CryptoJS) {                                                                                          // 10135
                                                                                                                       // 10136
	/**                                                                                                                   // 10137
	 * Zero padding strategy.                                                                                             // 10138
	 */                                                                                                                   // 10139
	CryptoJS.pad.ZeroPadding = {                                                                                          // 10140
	    pad: function (data, blockSize) {                                                                                 // 10141
	        // Shortcut                                                                                                   // 10142
	        var blockSizeBytes = blockSize * 4;                                                                           // 10143
                                                                                                                       // 10144
	        // Pad                                                                                                        // 10145
	        data.clamp();                                                                                                 // 10146
	        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);                       // 10147
	    },                                                                                                                // 10148
                                                                                                                       // 10149
	    unpad: function (data) {                                                                                          // 10150
	        // Shortcut                                                                                                   // 10151
	        var dataWords = data.words;                                                                                   // 10152
                                                                                                                       // 10153
	        // Unpad                                                                                                      // 10154
	        var i = data.sigBytes - 1;                                                                                    // 10155
	        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {                                               // 10156
	            i--;                                                                                                      // 10157
	        }                                                                                                             // 10158
	        data.sigBytes = i + 1;                                                                                        // 10159
	    }                                                                                                                 // 10160
	};                                                                                                                    // 10161
                                                                                                                       // 10162
                                                                                                                       // 10163
	return CryptoJS.pad.ZeroPadding;                                                                                      // 10164
                                                                                                                       // 10165
}));                                                                                                                   // 10166
},{"./cipher-core":51,"./core":52}],71:[function(require,module,exports){                                              // 10167
;(function (root, factory, undef) {                                                                                    // 10168
	if (typeof exports === "object") {                                                                                    // 10169
		// CommonJS                                                                                                          // 10170
		module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));                         // 10171
	}                                                                                                                     // 10172
	else if (typeof define === "function" && define.amd) {                                                                // 10173
		// AMD                                                                                                               // 10174
		define(["./core", "./sha1", "./hmac"], factory);                                                                     // 10175
	}                                                                                                                     // 10176
	else {                                                                                                                // 10177
		// Global (browser)                                                                                                  // 10178
		factory(root.CryptoJS);                                                                                              // 10179
	}                                                                                                                     // 10180
}(this, function (CryptoJS) {                                                                                          // 10181
                                                                                                                       // 10182
	(function () {                                                                                                        // 10183
	    // Shortcuts                                                                                                      // 10184
	    var C = CryptoJS;                                                                                                 // 10185
	    var C_lib = C.lib;                                                                                                // 10186
	    var Base = C_lib.Base;                                                                                            // 10187
	    var WordArray = C_lib.WordArray;                                                                                  // 10188
	    var C_algo = C.algo;                                                                                              // 10189
	    var SHA1 = C_algo.SHA1;                                                                                           // 10190
	    var HMAC = C_algo.HMAC;                                                                                           // 10191
                                                                                                                       // 10192
	    /**                                                                                                               // 10193
	     * Password-Based Key Derivation Function 2 algorithm.                                                            // 10194
	     */                                                                                                               // 10195
	    var PBKDF2 = C_algo.PBKDF2 = Base.extend({                                                                        // 10196
	        /**                                                                                                           // 10197
	         * Configuration options.                                                                                     // 10198
	         *                                                                                                            // 10199
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)                        // 10200
	         * @property {Hasher} hasher The hasher to use. Default: SHA1                                                 // 10201
	         * @property {number} iterations The number of iterations to perform. Default: 1                              // 10202
	         */                                                                                                           // 10203
	        cfg: Base.extend({                                                                                            // 10204
	            keySize: 128/32,                                                                                          // 10205
	            hasher: SHA1,                                                                                             // 10206
	            iterations: 1                                                                                             // 10207
	        }),                                                                                                           // 10208
                                                                                                                       // 10209
	        /**                                                                                                           // 10210
	         * Initializes a newly created key derivation function.                                                       // 10211
	         *                                                                                                            // 10212
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.                        // 10213
	         *                                                                                                            // 10214
	         * @example                                                                                                   // 10215
	         *                                                                                                            // 10216
	         *     var kdf = CryptoJS.algo.PBKDF2.create();                                                               // 10217
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });                                                 // 10218
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });                               // 10219
	         */                                                                                                           // 10220
	        init: function (cfg) {                                                                                        // 10221
	            this.cfg = this.cfg.extend(cfg);                                                                          // 10222
	        },                                                                                                            // 10223
                                                                                                                       // 10224
	        /**                                                                                                           // 10225
	         * Computes the Password-Based Key Derivation Function 2.                                                     // 10226
	         *                                                                                                            // 10227
	         * @param {WordArray|string} password The password.                                                           // 10228
	         * @param {WordArray|string} salt A salt.                                                                     // 10229
	         *                                                                                                            // 10230
	         * @return {WordArray} The derived key.                                                                       // 10231
	         *                                                                                                            // 10232
	         * @example                                                                                                   // 10233
	         *                                                                                                            // 10234
	         *     var key = kdf.compute(password, salt);                                                                 // 10235
	         */                                                                                                           // 10236
	        compute: function (password, salt) {                                                                          // 10237
	            // Shortcut                                                                                               // 10238
	            var cfg = this.cfg;                                                                                       // 10239
                                                                                                                       // 10240
	            // Init HMAC                                                                                              // 10241
	            var hmac = HMAC.create(cfg.hasher, password);                                                             // 10242
                                                                                                                       // 10243
	            // Initial values                                                                                         // 10244
	            var derivedKey = WordArray.create();                                                                      // 10245
	            var blockIndex = WordArray.create([0x00000001]);                                                          // 10246
                                                                                                                       // 10247
	            // Shortcuts                                                                                              // 10248
	            var derivedKeyWords = derivedKey.words;                                                                   // 10249
	            var blockIndexWords = blockIndex.words;                                                                   // 10250
	            var keySize = cfg.keySize;                                                                                // 10251
	            var iterations = cfg.iterations;                                                                          // 10252
                                                                                                                       // 10253
	            // Generate key                                                                                           // 10254
	            while (derivedKeyWords.length < keySize) {                                                                // 10255
	                var block = hmac.update(salt).finalize(blockIndex);                                                   // 10256
	                hmac.reset();                                                                                         // 10257
                                                                                                                       // 10258
	                // Shortcuts                                                                                          // 10259
	                var blockWords = block.words;                                                                         // 10260
	                var blockWordsLength = blockWords.length;                                                             // 10261
                                                                                                                       // 10262
	                // Iterations                                                                                         // 10263
	                var intermediate = block;                                                                             // 10264
	                for (var i = 1; i < iterations; i++) {                                                                // 10265
	                    intermediate = hmac.finalize(intermediate);                                                       // 10266
	                    hmac.reset();                                                                                     // 10267
                                                                                                                       // 10268
	                    // Shortcut                                                                                       // 10269
	                    var intermediateWords = intermediate.words;                                                       // 10270
                                                                                                                       // 10271
	                    // XOR intermediate with block                                                                    // 10272
	                    for (var j = 0; j < blockWordsLength; j++) {                                                      // 10273
	                        blockWords[j] ^= intermediateWords[j];                                                        // 10274
	                    }                                                                                                 // 10275
	                }                                                                                                     // 10276
                                                                                                                       // 10277
	                derivedKey.concat(block);                                                                             // 10278
	                blockIndexWords[0]++;                                                                                 // 10279
	            }                                                                                                         // 10280
	            derivedKey.sigBytes = keySize * 4;                                                                        // 10281
                                                                                                                       // 10282
	            return derivedKey;                                                                                        // 10283
	        }                                                                                                             // 10284
	    });                                                                                                               // 10285
                                                                                                                       // 10286
	    /**                                                                                                               // 10287
	     * Computes the Password-Based Key Derivation Function 2.                                                         // 10288
	     *                                                                                                                // 10289
	     * @param {WordArray|string} password The password.                                                               // 10290
	     * @param {WordArray|string} salt A salt.                                                                         // 10291
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.                          // 10292
	     *                                                                                                                // 10293
	     * @return {WordArray} The derived key.                                                                           // 10294
	     *                                                                                                                // 10295
	     * @static                                                                                                        // 10296
	     *                                                                                                                // 10297
	     * @example                                                                                                       // 10298
	     *                                                                                                                // 10299
	     *     var key = CryptoJS.PBKDF2(password, salt);                                                                 // 10300
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });                                                 // 10301
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });                               // 10302
	     */                                                                                                               // 10303
	    C.PBKDF2 = function (password, salt, cfg) {                                                                       // 10304
	        return PBKDF2.create(cfg).compute(password, salt);                                                            // 10305
	    };                                                                                                                // 10306
	}());                                                                                                                 // 10307
                                                                                                                       // 10308
                                                                                                                       // 10309
	return CryptoJS.PBKDF2;                                                                                               // 10310
                                                                                                                       // 10311
}));                                                                                                                   // 10312
},{"./core":52,"./hmac":57,"./sha1":76}],72:[function(require,module,exports){                                         // 10313
;(function (root, factory, undef) {                                                                                    // 10314
	if (typeof exports === "object") {                                                                                    // 10315
		// CommonJS                                                                                                          // 10316
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 10318
	else if (typeof define === "function" && define.amd) {                                                                // 10319
		// AMD                                                                                                               // 10320
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 10321
	}                                                                                                                     // 10322
	else {                                                                                                                // 10323
		// Global (browser)                                                                                                  // 10324
		factory(root.CryptoJS);                                                                                              // 10325
	}                                                                                                                     // 10326
}(this, function (CryptoJS) {                                                                                          // 10327
                                                                                                                       // 10328
	(function () {                                                                                                        // 10329
	    // Shortcuts                                                                                                      // 10330
	    var C = CryptoJS;                                                                                                 // 10331
	    var C_lib = C.lib;                                                                                                // 10332
	    var StreamCipher = C_lib.StreamCipher;                                                                            // 10333
	    var C_algo = C.algo;                                                                                              // 10334
                                                                                                                       // 10335
	    // Reusable objects                                                                                               // 10336
	    var S  = [];                                                                                                      // 10337
	    var C_ = [];                                                                                                      // 10338
	    var G  = [];                                                                                                      // 10339
                                                                                                                       // 10340
	    /**                                                                                                               // 10341
	     * Rabbit stream cipher algorithm.                                                                                // 10342
	     *                                                                                                                // 10343
	     * This is a legacy version that neglected to convert the key to little-endian.                                   // 10344
	     * This error doesn't affect the cipher's security,                                                               // 10345
	     * but it does affect its compatibility with other implementations.                                               // 10346
	     */                                                                                                               // 10347
	    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({                                                    // 10348
	        _doReset: function () {                                                                                       // 10349
	            // Shortcuts                                                                                              // 10350
	            var K = this._key.words;                                                                                  // 10351
	            var iv = this.cfg.iv;                                                                                     // 10352
                                                                                                                       // 10353
	            // Generate initial state values                                                                          // 10354
	            var X = this._X = [                                                                                       // 10355
	                K[0], (K[3] << 16) | (K[2] >>> 16),                                                                   // 10356
	                K[1], (K[0] << 16) | (K[3] >>> 16),                                                                   // 10357
	                K[2], (K[1] << 16) | (K[0] >>> 16),                                                                   // 10358
	                K[3], (K[2] << 16) | (K[1] >>> 16)                                                                    // 10359
	            ];                                                                                                        // 10360
                                                                                                                       // 10361
	            // Generate initial counter values                                                                        // 10362
	            var C = this._C = [                                                                                       // 10363
	                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),                              // 10364
	                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),                              // 10365
	                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),                              // 10366
	                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)                               // 10367
	            ];                                                                                                        // 10368
                                                                                                                       // 10369
	            // Carry bit                                                                                              // 10370
	            this._b = 0;                                                                                              // 10371
                                                                                                                       // 10372
	            // Iterate the system four times                                                                          // 10373
	            for (var i = 0; i < 4; i++) {                                                                             // 10374
	                nextState.call(this);                                                                                 // 10375
	            }                                                                                                         // 10376
                                                                                                                       // 10377
	            // Modify the counters                                                                                    // 10378
	            for (var i = 0; i < 8; i++) {                                                                             // 10379
	                C[i] ^= X[(i + 4) & 7];                                                                               // 10380
	            }                                                                                                         // 10381
                                                                                                                       // 10382
	            // IV setup                                                                                               // 10383
	            if (iv) {                                                                                                 // 10384
	                // Shortcuts                                                                                          // 10385
	                var IV = iv.words;                                                                                    // 10386
	                var IV_0 = IV[0];                                                                                     // 10387
	                var IV_1 = IV[1];                                                                                     // 10388
                                                                                                                       // 10389
	                // Generate four subvectors                                                                           // 10390
	                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
	                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
	                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);                                                             // 10393
	                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);                                                             // 10394
                                                                                                                       // 10395
	                // Modify counter values                                                                              // 10396
	                C[0] ^= i0;                                                                                           // 10397
	                C[1] ^= i1;                                                                                           // 10398
	                C[2] ^= i2;                                                                                           // 10399
	                C[3] ^= i3;                                                                                           // 10400
	                C[4] ^= i0;                                                                                           // 10401
	                C[5] ^= i1;                                                                                           // 10402
	                C[6] ^= i2;                                                                                           // 10403
	                C[7] ^= i3;                                                                                           // 10404
                                                                                                                       // 10405
	                // Iterate the system four times                                                                      // 10406
	                for (var i = 0; i < 4; i++) {                                                                         // 10407
	                    nextState.call(this);                                                                             // 10408
	                }                                                                                                     // 10409
	            }                                                                                                         // 10410
	        },                                                                                                            // 10411
                                                                                                                       // 10412
	        _doProcessBlock: function (M, offset) {                                                                       // 10413
	            // Shortcut                                                                                               // 10414
	            var X = this._X;                                                                                          // 10415
                                                                                                                       // 10416
	            // Iterate the system                                                                                     // 10417
	            nextState.call(this);                                                                                     // 10418
                                                                                                                       // 10419
	            // Generate four keystream words                                                                          // 10420
	            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);                                                               // 10421
	            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);                                                               // 10422
	            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);                                                               // 10423
	            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);                                                               // 10424
                                                                                                                       // 10425
	            for (var i = 0; i < 4; i++) {                                                                             // 10426
	                // Swap endian                                                                                        // 10427
	                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |                                                // 10428
	                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);                                                 // 10429
                                                                                                                       // 10430
	                // Encrypt                                                                                            // 10431
	                M[offset + i] ^= S[i];                                                                                // 10432
	            }                                                                                                         // 10433
	        },                                                                                                            // 10434
                                                                                                                       // 10435
	        blockSize: 128/32,                                                                                            // 10436
                                                                                                                       // 10437
	        ivSize: 64/32                                                                                                 // 10438
	    });                                                                                                               // 10439
                                                                                                                       // 10440
	    function nextState() {                                                                                            // 10441
	        // Shortcuts                                                                                                  // 10442
	        var X = this._X;                                                                                              // 10443
	        var C = this._C;                                                                                              // 10444
                                                                                                                       // 10445
	        // Save old counter values                                                                                    // 10446
	        for (var i = 0; i < 8; i++) {                                                                                 // 10447
	            C_[i] = C[i];                                                                                             // 10448
	        }                                                                                                             // 10449
                                                                                                                       // 10450
	        // Calculate new counter values                                                                               // 10451
	        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;                                                                     // 10452
	        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;                                      // 10453
	        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;                                      // 10454
	        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;                                      // 10455
	        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;                                      // 10456
	        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;                                      // 10457
	        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;                                      // 10458
	        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;                                      // 10459
	        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;                                                               // 10460
                                                                                                                       // 10461
	        // Calculate the g-values                                                                                     // 10462
	        for (var i = 0; i < 8; i++) {                                                                                 // 10463
	            var gx = X[i] + C[i];                                                                                     // 10464
                                                                                                                       // 10465
	            // Construct high and low argument for squaring                                                           // 10466
	            var ga = gx & 0xffff;                                                                                     // 10467
	            var gb = gx >>> 16;                                                                                       // 10468
                                                                                                                       // 10469
	            // Calculate high and low result of squaring                                                              // 10470
	            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;                                               // 10471
	            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);                                 // 10472
                                                                                                                       // 10473
	            // High XOR low                                                                                           // 10474
	            G[i] = gh ^ gl;                                                                                           // 10475
	        }                                                                                                             // 10476
                                                                                                                       // 10477
	        // Calculate new state values                                                                                 // 10478
	        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;                          // 10479
	        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;                                                    // 10480
	        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;                          // 10481
	        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;                                                    // 10482
	        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;                          // 10483
	        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;                                                    // 10484
	        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;                          // 10485
	        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;                                                    // 10486
	    }                                                                                                                 // 10487
                                                                                                                       // 10488
	    /**                                                                                                               // 10489
	     * Shortcut functions to the cipher's object interface.                                                           // 10490
	     *                                                                                                                // 10491
	     * @example                                                                                                       // 10492
	     *                                                                                                                // 10493
	     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);                                         // 10494
	     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);                                      // 10495
	     */                                                                                                               // 10496
	    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);                                                        // 10497
	}());                                                                                                                 // 10498
                                                                                                                       // 10499
                                                                                                                       // 10500
	return CryptoJS.RabbitLegacy;                                                                                         // 10501
                                                                                                                       // 10502
}));                                                                                                                   // 10503
},{"./cipher-core":51,"./core":52,"./enc-base64":53,"./evpkdf":55,"./md5":60}],73:[function(require,module,exports){   // 10504
;(function (root, factory, undef) {                                                                                    // 10505
	if (typeof exports === "object") {                                                                                    // 10506
		// CommonJS                                                                                                          // 10507
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 10509
	else if (typeof define === "function" && define.amd) {                                                                // 10510
		// AMD                                                                                                               // 10511
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 10512
	}                                                                                                                     // 10513
	else {                                                                                                                // 10514
		// Global (browser)                                                                                                  // 10515
		factory(root.CryptoJS);                                                                                              // 10516
	}                                                                                                                     // 10517
}(this, function (CryptoJS) {                                                                                          // 10518
                                                                                                                       // 10519
	(function () {                                                                                                        // 10520
	    // Shortcuts                                                                                                      // 10521
	    var C = CryptoJS;                                                                                                 // 10522
	    var C_lib = C.lib;                                                                                                // 10523
	    var StreamCipher = C_lib.StreamCipher;                                                                            // 10524
	    var C_algo = C.algo;                                                                                              // 10525
                                                                                                                       // 10526
	    // Reusable objects                                                                                               // 10527
	    var S  = [];                                                                                                      // 10528
	    var C_ = [];                                                                                                      // 10529
	    var G  = [];                                                                                                      // 10530
                                                                                                                       // 10531
	    /**                                                                                                               // 10532
	     * Rabbit stream cipher algorithm                                                                                 // 10533
	     */                                                                                                               // 10534
	    var Rabbit = C_algo.Rabbit = StreamCipher.extend({                                                                // 10535
	        _doReset: function () {                                                                                       // 10536
	            // Shortcuts                                                                                              // 10537
	            var K = this._key.words;                                                                                  // 10538
	            var iv = this.cfg.iv;                                                                                     // 10539
                                                                                                                       // 10540
	            // Swap endian                                                                                            // 10541
	            for (var i = 0; i < 4; i++) {                                                                             // 10542
	                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |                                                // 10543
	                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);                                                 // 10544
	            }                                                                                                         // 10545
                                                                                                                       // 10546
	            // Generate initial state values                                                                          // 10547
	            var X = this._X = [                                                                                       // 10548
	                K[0], (K[3] << 16) | (K[2] >>> 16),                                                                   // 10549
	                K[1], (K[0] << 16) | (K[3] >>> 16),                                                                   // 10550
	                K[2], (K[1] << 16) | (K[0] >>> 16),                                                                   // 10551
	                K[3], (K[2] << 16) | (K[1] >>> 16)                                                                    // 10552
	            ];                                                                                                        // 10553
                                                                                                                       // 10554
	            // Generate initial counter values                                                                        // 10555
	            var C = this._C = [                                                                                       // 10556
	                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),                              // 10557
	                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),                              // 10558
	                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),                              // 10559
	                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)                               // 10560
	            ];                                                                                                        // 10561
                                                                                                                       // 10562
	            // Carry bit                                                                                              // 10563
	            this._b = 0;                                                                                              // 10564
                                                                                                                       // 10565
	            // Iterate the system four times                                                                          // 10566
	            for (var i = 0; i < 4; i++) {                                                                             // 10567
	                nextState.call(this);                                                                                 // 10568
	            }                                                                                                         // 10569
                                                                                                                       // 10570
	            // Modify the counters                                                                                    // 10571
	            for (var i = 0; i < 8; i++) {                                                                             // 10572
	                C[i] ^= X[(i + 4) & 7];                                                                               // 10573
	            }                                                                                                         // 10574
                                                                                                                       // 10575
	            // IV setup                                                                                               // 10576
	            if (iv) {                                                                                                 // 10577
	                // Shortcuts                                                                                          // 10578
	                var IV = iv.words;                                                                                    // 10579
	                var IV_0 = IV[0];                                                                                     // 10580
	                var IV_1 = IV[1];                                                                                     // 10581
                                                                                                                       // 10582
	                // Generate four subvectors                                                                           // 10583
	                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
	                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
	                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);                                                             // 10586
	                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);                                                             // 10587
                                                                                                                       // 10588
	                // Modify counter values                                                                              // 10589
	                C[0] ^= i0;                                                                                           // 10590
	                C[1] ^= i1;                                                                                           // 10591
	                C[2] ^= i2;                                                                                           // 10592
	                C[3] ^= i3;                                                                                           // 10593
	                C[4] ^= i0;                                                                                           // 10594
	                C[5] ^= i1;                                                                                           // 10595
	                C[6] ^= i2;                                                                                           // 10596
	                C[7] ^= i3;                                                                                           // 10597
                                                                                                                       // 10598
	                // Iterate the system four times                                                                      // 10599
	                for (var i = 0; i < 4; i++) {                                                                         // 10600
	                    nextState.call(this);                                                                             // 10601
	                }                                                                                                     // 10602
	            }                                                                                                         // 10603
	        },                                                                                                            // 10604
                                                                                                                       // 10605
	        _doProcessBlock: function (M, offset) {                                                                       // 10606
	            // Shortcut                                                                                               // 10607
	            var X = this._X;                                                                                          // 10608
                                                                                                                       // 10609
	            // Iterate the system                                                                                     // 10610
	            nextState.call(this);                                                                                     // 10611
                                                                                                                       // 10612
	            // Generate four keystream words                                                                          // 10613
	            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);                                                               // 10614
	            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);                                                               // 10615
	            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);                                                               // 10616
	            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);                                                               // 10617
                                                                                                                       // 10618
	            for (var i = 0; i < 4; i++) {                                                                             // 10619
	                // Swap endian                                                                                        // 10620
	                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |                                                // 10621
	                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);                                                 // 10622
                                                                                                                       // 10623
	                // Encrypt                                                                                            // 10624
	                M[offset + i] ^= S[i];                                                                                // 10625
	            }                                                                                                         // 10626
	        },                                                                                                            // 10627
                                                                                                                       // 10628
	        blockSize: 128/32,                                                                                            // 10629
                                                                                                                       // 10630
	        ivSize: 64/32                                                                                                 // 10631
	    });                                                                                                               // 10632
                                                                                                                       // 10633
	    function nextState() {                                                                                            // 10634
	        // Shortcuts                                                                                                  // 10635
	        var X = this._X;                                                                                              // 10636
	        var C = this._C;                                                                                              // 10637
                                                                                                                       // 10638
	        // Save old counter values                                                                                    // 10639
	        for (var i = 0; i < 8; i++) {                                                                                 // 10640
	            C_[i] = C[i];                                                                                             // 10641
	        }                                                                                                             // 10642
                                                                                                                       // 10643
	        // Calculate new counter values                                                                               // 10644
	        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;                                                                     // 10645
	        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;                                      // 10646
	        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;                                      // 10647
	        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;                                      // 10648
	        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;                                      // 10649
	        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;                                      // 10650
	        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;                                      // 10651
	        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;                                      // 10652
	        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;                                                               // 10653
                                                                                                                       // 10654
	        // Calculate the g-values                                                                                     // 10655
	        for (var i = 0; i < 8; i++) {                                                                                 // 10656
	            var gx = X[i] + C[i];                                                                                     // 10657
                                                                                                                       // 10658
	            // Construct high and low argument for squaring                                                           // 10659
	            var ga = gx & 0xffff;                                                                                     // 10660
	            var gb = gx >>> 16;                                                                                       // 10661
                                                                                                                       // 10662
	            // Calculate high and low result of squaring                                                              // 10663
	            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;                                               // 10664
	            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);                                 // 10665
                                                                                                                       // 10666
	            // High XOR low                                                                                           // 10667
	            G[i] = gh ^ gl;                                                                                           // 10668
	        }                                                                                                             // 10669
                                                                                                                       // 10670
	        // Calculate new state values                                                                                 // 10671
	        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;                          // 10672
	        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;                                                    // 10673
	        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;                          // 10674
	        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;                                                    // 10675
	        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;                          // 10676
	        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;                                                    // 10677
	        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;                          // 10678
	        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;                                                    // 10679
	    }                                                                                                                 // 10680
                                                                                                                       // 10681
	    /**                                                                                                               // 10682
	     * Shortcut functions to the cipher's object interface.                                                           // 10683
	     *                                                                                                                // 10684
	     * @example                                                                                                       // 10685
	     *                                                                                                                // 10686
	     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);                                               // 10687
	     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);                                            // 10688
	     */                                                                                                               // 10689
	    C.Rabbit = StreamCipher._createHelper(Rabbit);                                                                    // 10690
	}());                                                                                                                 // 10691
                                                                                                                       // 10692
                                                                                                                       // 10693
	return CryptoJS.Rabbit;                                                                                               // 10694
                                                                                                                       // 10695
}));                                                                                                                   // 10696
},{"./cipher-core":51,"./core":52,"./enc-base64":53,"./evpkdf":55,"./md5":60}],74:[function(require,module,exports){   // 10697
;(function (root, factory, undef) {                                                                                    // 10698
	if (typeof exports === "object") {                                                                                    // 10699
		// CommonJS                                                                                                          // 10700
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 10702
	else if (typeof define === "function" && define.amd) {                                                                // 10703
		// AMD                                                                                                               // 10704
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 10705
	}                                                                                                                     // 10706
	else {                                                                                                                // 10707
		// Global (browser)                                                                                                  // 10708
		factory(root.CryptoJS);                                                                                              // 10709
	}                                                                                                                     // 10710
}(this, function (CryptoJS) {                                                                                          // 10711
                                                                                                                       // 10712
	(function () {                                                                                                        // 10713
	    // Shortcuts                                                                                                      // 10714
	    var C = CryptoJS;                                                                                                 // 10715
	    var C_lib = C.lib;                                                                                                // 10716
	    var StreamCipher = C_lib.StreamCipher;                                                                            // 10717
	    var C_algo = C.algo;                                                                                              // 10718
                                                                                                                       // 10719
	    /**                                                                                                               // 10720
	     * RC4 stream cipher algorithm.                                                                                   // 10721
	     */                                                                                                               // 10722
	    var RC4 = C_algo.RC4 = StreamCipher.extend({                                                                      // 10723
	        _doReset: function () {                                                                                       // 10724
	            // Shortcuts                                                                                              // 10725
	            var key = this._key;                                                                                      // 10726
	            var keyWords = key.words;                                                                                 // 10727
	            var keySigBytes = key.sigBytes;                                                                           // 10728
                                                                                                                       // 10729
	            // Init sbox                                                                                              // 10730
	            var S = this._S = [];                                                                                     // 10731
	            for (var i = 0; i < 256; i++) {                                                                           // 10732
	                S[i] = i;                                                                                             // 10733
	            }                                                                                                         // 10734
                                                                                                                       // 10735
	            // Key setup                                                                                              // 10736
	            for (var i = 0, j = 0; i < 256; i++) {                                                                    // 10737
	                var keyByteIndex = i % keySigBytes;                                                                   // 10738
	                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;                // 10739
                                                                                                                       // 10740
	                j = (j + S[i] + keyByte) % 256;                                                                       // 10741
                                                                                                                       // 10742
	                // Swap                                                                                               // 10743
	                var t = S[i];                                                                                         // 10744
	                S[i] = S[j];                                                                                          // 10745
	                S[j] = t;                                                                                             // 10746
	            }                                                                                                         // 10747
                                                                                                                       // 10748
	            // Counters                                                                                               // 10749
	            this._i = this._j = 0;                                                                                    // 10750
	        },                                                                                                            // 10751
                                                                                                                       // 10752
	        _doProcessBlock: function (M, offset) {                                                                       // 10753
	            M[offset] ^= generateKeystreamWord.call(this);                                                            // 10754
	        },                                                                                                            // 10755
                                                                                                                       // 10756
	        keySize: 256/32,                                                                                              // 10757
                                                                                                                       // 10758
	        ivSize: 0                                                                                                     // 10759
	    });                                                                                                               // 10760
                                                                                                                       // 10761
	    function generateKeystreamWord() {                                                                                // 10762
	        // Shortcuts                                                                                                  // 10763
	        var S = this._S;                                                                                              // 10764
	        var i = this._i;                                                                                              // 10765
	        var j = this._j;                                                                                              // 10766
                                                                                                                       // 10767
	        // Generate keystream word                                                                                    // 10768
	        var keystreamWord = 0;                                                                                        // 10769
	        for (var n = 0; n < 4; n++) {                                                                                 // 10770
	            i = (i + 1) % 256;                                                                                        // 10771
	            j = (j + S[i]) % 256;                                                                                     // 10772
                                                                                                                       // 10773
	            // Swap                                                                                                   // 10774
	            var t = S[i];                                                                                             // 10775
	            S[i] = S[j];                                                                                              // 10776
	            S[j] = t;                                                                                                 // 10777
                                                                                                                       // 10778
	            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);                                                  // 10779
	        }                                                                                                             // 10780
                                                                                                                       // 10781
	        // Update counters                                                                                            // 10782
	        this._i = i;                                                                                                  // 10783
	        this._j = j;                                                                                                  // 10784
                                                                                                                       // 10785
	        return keystreamWord;                                                                                         // 10786
	    }                                                                                                                 // 10787
                                                                                                                       // 10788
	    /**                                                                                                               // 10789
	     * Shortcut functions to the cipher's object interface.                                                           // 10790
	     *                                                                                                                // 10791
	     * @example                                                                                                       // 10792
	     *                                                                                                                // 10793
	     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);                                                  // 10794
	     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);                                               // 10795
	     */                                                                                                               // 10796
	    C.RC4 = StreamCipher._createHelper(RC4);                                                                          // 10797
                                                                                                                       // 10798
	    /**                                                                                                               // 10799
	     * Modified RC4 stream cipher algorithm.                                                                          // 10800
	     */                                                                                                               // 10801
	    var RC4Drop = C_algo.RC4Drop = RC4.extend({                                                                       // 10802
	        /**                                                                                                           // 10803
	         * Configuration options.                                                                                     // 10804
	         *                                                                                                            // 10805
	         * @property {number} drop The number of keystream words to drop. Default 192                                 // 10806
	         */                                                                                                           // 10807
	        cfg: RC4.cfg.extend({                                                                                         // 10808
	            drop: 192                                                                                                 // 10809
	        }),                                                                                                           // 10810
                                                                                                                       // 10811
	        _doReset: function () {                                                                                       // 10812
	            RC4._doReset.call(this);                                                                                  // 10813
                                                                                                                       // 10814
	            // Drop                                                                                                   // 10815
	            for (var i = this.cfg.drop; i > 0; i--) {                                                                 // 10816
	                generateKeystreamWord.call(this);                                                                     // 10817
	            }                                                                                                         // 10818
	        }                                                                                                             // 10819
	    });                                                                                                               // 10820
                                                                                                                       // 10821
	    /**                                                                                                               // 10822
	     * Shortcut functions to the cipher's object interface.                                                           // 10823
	     *                                                                                                                // 10824
	     * @example                                                                                                       // 10825
	     *                                                                                                                // 10826
	     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);                                              // 10827
	     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);                                           // 10828
	     */                                                                                                               // 10829
	    C.RC4Drop = StreamCipher._createHelper(RC4Drop);                                                                  // 10830
	}());                                                                                                                 // 10831
                                                                                                                       // 10832
                                                                                                                       // 10833
	return CryptoJS.RC4;                                                                                                  // 10834
                                                                                                                       // 10835
}));                                                                                                                   // 10836
},{"./cipher-core":51,"./core":52,"./enc-base64":53,"./evpkdf":55,"./md5":60}],75:[function(require,module,exports){   // 10837
;(function (root, factory) {                                                                                           // 10838
	if (typeof exports === "object") {                                                                                    // 10839
		// CommonJS                                                                                                          // 10840
		module.exports = exports = factory(require("./core"));                                                               // 10841
	}                                                                                                                     // 10842
	else if (typeof define === "function" && define.amd) {                                                                // 10843
		// AMD                                                                                                               // 10844
		define(["./core"], factory);                                                                                         // 10845
	}                                                                                                                     // 10846
	else {                                                                                                                // 10847
		// Global (browser)                                                                                                  // 10848
		factory(root.CryptoJS);                                                                                              // 10849
	}                                                                                                                     // 10850
}(this, function (CryptoJS) {                                                                                          // 10851
                                                                                                                       // 10852
	/** @preserve                                                                                                         // 10853
	(c) 2012 by Cédric Mesnil. All rights reserved.                                                                       // 10854
                                                                                                                       // 10855
	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
                                                                                                                       // 10857
	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
                                                                                                                       // 10860
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/                                                                                                                    // 10862
                                                                                                                       // 10863
	(function (Math) {                                                                                                    // 10864
	    // Shortcuts                                                                                                      // 10865
	    var C = CryptoJS;                                                                                                 // 10866
	    var C_lib = C.lib;                                                                                                // 10867
	    var WordArray = C_lib.WordArray;                                                                                  // 10868
	    var Hasher = C_lib.Hasher;                                                                                        // 10869
	    var C_algo = C.algo;                                                                                              // 10870
                                                                                                                       // 10871
	    // Constants table                                                                                                // 10872
	    var _zl = WordArray.create([                                                                                      // 10873
	        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,                                                // 10874
	        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,                                                // 10875
	        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,                                                // 10876
	        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,                                                // 10877
	        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);                                              // 10878
	    var _zr = WordArray.create([                                                                                      // 10879
	        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,                                                // 10880
	        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,                                                // 10881
	        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,                                               // 10882
	        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,                                                // 10883
	        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);                                             // 10884
	    var _sl = WordArray.create([                                                                                      // 10885
	         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,                                              // 10886
	        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,                                                // 10887
	        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,                                               // 10888
	          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,                                             // 10889
	        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);                                             // 10890
	    var _sr = WordArray.create([                                                                                      // 10891
	        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,                                                // 10892
	        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,                                                // 10893
	        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,                                                // 10894
	        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,                                               // 10895
	        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);                                             // 10896
                                                                                                                       // 10897
	    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);                       // 10898
	    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);                       // 10899
                                                                                                                       // 10900
	    /**                                                                                                               // 10901
	     * RIPEMD160 hash algorithm.                                                                                      // 10902
	     */                                                                                                               // 10903
	    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({                                                                // 10904
	        _doReset: function () {                                                                                       // 10905
	            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);             // 10906
	        },                                                                                                            // 10907
                                                                                                                       // 10908
	        _doProcessBlock: function (M, offset) {                                                                       // 10909
                                                                                                                       // 10910
	            // Swap endian                                                                                            // 10911
	            for (var i = 0; i < 16; i++) {                                                                            // 10912
	                // Shortcuts                                                                                          // 10913
	                var offset_i = offset + i;                                                                            // 10914
	                var M_offset_i = M[offset_i];                                                                         // 10915
                                                                                                                       // 10916
	                // Swap                                                                                               // 10917
	                M[offset_i] = (                                                                                       // 10918
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |                                       // 10919
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)                                         // 10920
	                );                                                                                                    // 10921
	            }                                                                                                         // 10922
	            // Shortcut                                                                                               // 10923
	            var H  = this._hash.words;                                                                                // 10924
	            var hl = _hl.words;                                                                                       // 10925
	            var hr = _hr.words;                                                                                       // 10926
	            var zl = _zl.words;                                                                                       // 10927
	            var zr = _zr.words;                                                                                       // 10928
	            var sl = _sl.words;                                                                                       // 10929
	            var sr = _sr.words;                                                                                       // 10930
                                                                                                                       // 10931
	            // Working variables                                                                                      // 10932
	            var al, bl, cl, dl, el;                                                                                   // 10933
	            var ar, br, cr, dr, er;                                                                                   // 10934
                                                                                                                       // 10935
	            ar = al = H[0];                                                                                           // 10936
	            br = bl = H[1];                                                                                           // 10937
	            cr = cl = H[2];                                                                                           // 10938
	            dr = dl = H[3];                                                                                           // 10939
	            er = el = H[4];                                                                                           // 10940
	            // Computation                                                                                            // 10941
	            var t;                                                                                                    // 10942
	            for (var i = 0; i < 80; i += 1) {                                                                         // 10943
	                t = (al +  M[offset+zl[i]])|0;                                                                        // 10944
	                if (i<16){                                                                                            // 10945
		            t +=  f1(bl,cl,dl) + hl[0];                                                                              // 10946
	                } else if (i<32) {                                                                                    // 10947
		            t +=  f2(bl,cl,dl) + hl[1];                                                                              // 10948
	                } else if (i<48) {                                                                                    // 10949
		            t +=  f3(bl,cl,dl) + hl[2];                                                                              // 10950
	                } else if (i<64) {                                                                                    // 10951
		            t +=  f4(bl,cl,dl) + hl[3];                                                                              // 10952
	                } else {// if (i<80) {                                                                                // 10953
		            t +=  f5(bl,cl,dl) + hl[4];                                                                              // 10954
	                }                                                                                                     // 10955
	                t = t|0;                                                                                              // 10956
	                t =  rotl(t,sl[i]);                                                                                   // 10957
	                t = (t+el)|0;                                                                                         // 10958
	                al = el;                                                                                              // 10959
	                el = dl;                                                                                              // 10960
	                dl = rotl(cl, 10);                                                                                    // 10961
	                cl = bl;                                                                                              // 10962
	                bl = t;                                                                                               // 10963
                                                                                                                       // 10964
	                t = (ar + M[offset+zr[i]])|0;                                                                         // 10965
	                if (i<16){                                                                                            // 10966
		            t +=  f5(br,cr,dr) + hr[0];                                                                              // 10967
	                } else if (i<32) {                                                                                    // 10968
		            t +=  f4(br,cr,dr) + hr[1];                                                                              // 10969
	                } else if (i<48) {                                                                                    // 10970
		            t +=  f3(br,cr,dr) + hr[2];                                                                              // 10971
	                } else if (i<64) {                                                                                    // 10972
		            t +=  f2(br,cr,dr) + hr[3];                                                                              // 10973
	                } else {// if (i<80) {                                                                                // 10974
		            t +=  f1(br,cr,dr) + hr[4];                                                                              // 10975
	                }                                                                                                     // 10976
	                t = t|0;                                                                                              // 10977
	                t =  rotl(t,sr[i]) ;                                                                                  // 10978
	                t = (t+er)|0;                                                                                         // 10979
	                ar = er;                                                                                              // 10980
	                er = dr;                                                                                              // 10981
	                dr = rotl(cr, 10);                                                                                    // 10982
	                cr = br;                                                                                              // 10983
	                br = t;                                                                                               // 10984
	            }                                                                                                         // 10985
	            // Intermediate hash value                                                                                // 10986
	            t    = (H[1] + cl + dr)|0;                                                                                // 10987
	            H[1] = (H[2] + dl + er)|0;                                                                                // 10988
	            H[2] = (H[3] + el + ar)|0;                                                                                // 10989
	            H[3] = (H[4] + al + br)|0;                                                                                // 10990
	            H[4] = (H[0] + bl + cr)|0;                                                                                // 10991
	            H[0] =  t;                                                                                                // 10992
	        },                                                                                                            // 10993
                                                                                                                       // 10994
	        _doFinalize: function () {                                                                                    // 10995
	            // Shortcuts                                                                                              // 10996
	            var data = this._data;                                                                                    // 10997
	            var dataWords = data.words;                                                                               // 10998
                                                                                                                       // 10999
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 11000
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 11001
                                                                                                                       // 11002
	            // Add padding                                                                                            // 11003
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 11004
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (                                                       // 11005
	                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |                                           // 11006
	                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)                                             // 11007
	            );                                                                                                        // 11008
	            data.sigBytes = (dataWords.length + 1) * 4;                                                               // 11009
                                                                                                                       // 11010
	            // Hash final blocks                                                                                      // 11011
	            this._process();                                                                                          // 11012
                                                                                                                       // 11013
	            // Shortcuts                                                                                              // 11014
	            var hash = this._hash;                                                                                    // 11015
	            var H = hash.words;                                                                                       // 11016
                                                                                                                       // 11017
	            // Swap endian                                                                                            // 11018
	            for (var i = 0; i < 5; i++) {                                                                             // 11019
	                // Shortcut                                                                                           // 11020
	                var H_i = H[i];                                                                                       // 11021
                                                                                                                       // 11022
	                // Swap                                                                                               // 11023
	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |                                                  // 11024
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);                                                   // 11025
	            }                                                                                                         // 11026
                                                                                                                       // 11027
	            // Return final computed hash                                                                             // 11028
	            return hash;                                                                                              // 11029
	        },                                                                                                            // 11030
                                                                                                                       // 11031
	        clone: function () {                                                                                          // 11032
	            var clone = Hasher.clone.call(this);                                                                      // 11033
	            clone._hash = this._hash.clone();                                                                         // 11034
                                                                                                                       // 11035
	            return clone;                                                                                             // 11036
	        }                                                                                                             // 11037
	    });                                                                                                               // 11038
                                                                                                                       // 11039
                                                                                                                       // 11040
	    function f1(x, y, z) {                                                                                            // 11041
	        return ((x) ^ (y) ^ (z));                                                                                     // 11042
                                                                                                                       // 11043
	    }                                                                                                                 // 11044
                                                                                                                       // 11045
	    function f2(x, y, z) {                                                                                            // 11046
	        return (((x)&(y)) | ((~x)&(z)));                                                                              // 11047
	    }                                                                                                                 // 11048
                                                                                                                       // 11049
	    function f3(x, y, z) {                                                                                            // 11050
	        return (((x) | (~(y))) ^ (z));                                                                                // 11051
	    }                                                                                                                 // 11052
                                                                                                                       // 11053
	    function f4(x, y, z) {                                                                                            // 11054
	        return (((x) & (z)) | ((y)&(~(z))));                                                                          // 11055
	    }                                                                                                                 // 11056
                                                                                                                       // 11057
	    function f5(x, y, z) {                                                                                            // 11058
	        return ((x) ^ ((y) |(~(z))));                                                                                 // 11059
                                                                                                                       // 11060
	    }                                                                                                                 // 11061
                                                                                                                       // 11062
	    function rotl(x,n) {                                                                                              // 11063
	        return (x<<n) | (x>>>(32-n));                                                                                 // 11064
	    }                                                                                                                 // 11065
                                                                                                                       // 11066
                                                                                                                       // 11067
	    /**                                                                                                               // 11068
	     * Shortcut function to the hasher's object interface.                                                            // 11069
	     *                                                                                                                // 11070
	     * @param {WordArray|string} message The message to hash.                                                         // 11071
	     *                                                                                                                // 11072
	     * @return {WordArray} The hash.                                                                                  // 11073
	     *                                                                                                                // 11074
	     * @static                                                                                                        // 11075
	     *                                                                                                                // 11076
	     * @example                                                                                                       // 11077
	     *                                                                                                                // 11078
	     *     var hash = CryptoJS.RIPEMD160('message');                                                                  // 11079
	     *     var hash = CryptoJS.RIPEMD160(wordArray);                                                                  // 11080
	     */                                                                                                               // 11081
	    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);                                                                    // 11082
                                                                                                                       // 11083
	    /**                                                                                                               // 11084
	     * Shortcut function to the HMAC's object interface.                                                              // 11085
	     *                                                                                                                // 11086
	     * @param {WordArray|string} message The message to hash.                                                         // 11087
	     * @param {WordArray|string} key The secret key.                                                                  // 11088
	     *                                                                                                                // 11089
	     * @return {WordArray} The HMAC.                                                                                  // 11090
	     *                                                                                                                // 11091
	     * @static                                                                                                        // 11092
	     *                                                                                                                // 11093
	     * @example                                                                                                       // 11094
	     *                                                                                                                // 11095
	     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);                                                           // 11096
	     */                                                                                                               // 11097
	    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);                                                            // 11098
	}(Math));                                                                                                             // 11099
                                                                                                                       // 11100
                                                                                                                       // 11101
	return CryptoJS.RIPEMD160;                                                                                            // 11102
                                                                                                                       // 11103
}));                                                                                                                   // 11104
},{"./core":52}],76:[function(require,module,exports){                                                                 // 11105
;(function (root, factory) {                                                                                           // 11106
	if (typeof exports === "object") {                                                                                    // 11107
		// CommonJS                                                                                                          // 11108
		module.exports = exports = factory(require("./core"));                                                               // 11109
	}                                                                                                                     // 11110
	else if (typeof define === "function" && define.amd) {                                                                // 11111
		// AMD                                                                                                               // 11112
		define(["./core"], factory);                                                                                         // 11113
	}                                                                                                                     // 11114
	else {                                                                                                                // 11115
		// Global (browser)                                                                                                  // 11116
		factory(root.CryptoJS);                                                                                              // 11117
	}                                                                                                                     // 11118
}(this, function (CryptoJS) {                                                                                          // 11119
                                                                                                                       // 11120
	(function () {                                                                                                        // 11121
	    // Shortcuts                                                                                                      // 11122
	    var C = CryptoJS;                                                                                                 // 11123
	    var C_lib = C.lib;                                                                                                // 11124
	    var WordArray = C_lib.WordArray;                                                                                  // 11125
	    var Hasher = C_lib.Hasher;                                                                                        // 11126
	    var C_algo = C.algo;                                                                                              // 11127
                                                                                                                       // 11128
	    // Reusable object                                                                                                // 11129
	    var W = [];                                                                                                       // 11130
                                                                                                                       // 11131
	    /**                                                                                                               // 11132
	     * SHA-1 hash algorithm.                                                                                          // 11133
	     */                                                                                                               // 11134
	    var SHA1 = C_algo.SHA1 = Hasher.extend({                                                                          // 11135
	        _doReset: function () {                                                                                       // 11136
	            this._hash = new WordArray.init([                                                                         // 11137
	                0x67452301, 0xefcdab89,                                                                               // 11138
	                0x98badcfe, 0x10325476,                                                                               // 11139
	                0xc3d2e1f0                                                                                            // 11140
	            ]);                                                                                                       // 11141
	        },                                                                                                            // 11142
                                                                                                                       // 11143
	        _doProcessBlock: function (M, offset) {                                                                       // 11144
	            // Shortcut                                                                                               // 11145
	            var H = this._hash.words;                                                                                 // 11146
                                                                                                                       // 11147
	            // Working variables                                                                                      // 11148
	            var a = H[0];                                                                                             // 11149
	            var b = H[1];                                                                                             // 11150
	            var c = H[2];                                                                                             // 11151
	            var d = H[3];                                                                                             // 11152
	            var e = H[4];                                                                                             // 11153
                                                                                                                       // 11154
	            // Computation                                                                                            // 11155
	            for (var i = 0; i < 80; i++) {                                                                            // 11156
	                if (i < 16) {                                                                                         // 11157
	                    W[i] = M[offset + i] | 0;                                                                         // 11158
	                } else {                                                                                              // 11159
	                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];                                              // 11160
	                    W[i] = (n << 1) | (n >>> 31);                                                                     // 11161
	                }                                                                                                     // 11162
                                                                                                                       // 11163
	                var t = ((a << 5) | (a >>> 27)) + e + W[i];                                                           // 11164
	                if (i < 20) {                                                                                         // 11165
	                    t += ((b & c) | (~b & d)) + 0x5a827999;                                                           // 11166
	                } else if (i < 40) {                                                                                  // 11167
	                    t += (b ^ c ^ d) + 0x6ed9eba1;                                                                    // 11168
	                } else if (i < 60) {                                                                                  // 11169
	                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;                                                  // 11170
	                } else /* if (i < 80) */ {                                                                            // 11171
	                    t += (b ^ c ^ d) - 0x359d3e2a;                                                                    // 11172
	                }                                                                                                     // 11173
                                                                                                                       // 11174
	                e = d;                                                                                                // 11175
	                d = c;                                                                                                // 11176
	                c = (b << 30) | (b >>> 2);                                                                            // 11177
	                b = a;                                                                                                // 11178
	                a = t;                                                                                                // 11179
	            }                                                                                                         // 11180
                                                                                                                       // 11181
	            // Intermediate hash value                                                                                // 11182
	            H[0] = (H[0] + a) | 0;                                                                                    // 11183
	            H[1] = (H[1] + b) | 0;                                                                                    // 11184
	            H[2] = (H[2] + c) | 0;                                                                                    // 11185
	            H[3] = (H[3] + d) | 0;                                                                                    // 11186
	            H[4] = (H[4] + e) | 0;                                                                                    // 11187
	        },                                                                                                            // 11188
                                                                                                                       // 11189
	        _doFinalize: function () {                                                                                    // 11190
	            // Shortcuts                                                                                              // 11191
	            var data = this._data;                                                                                    // 11192
	            var dataWords = data.words;                                                                               // 11193
                                                                                                                       // 11194
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 11195
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 11196
                                                                                                                       // 11197
	            // Add padding                                                                                            // 11198
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 11199
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);                   // 11200
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;                                             // 11201
	            data.sigBytes = dataWords.length * 4;                                                                     // 11202
                                                                                                                       // 11203
	            // Hash final blocks                                                                                      // 11204
	            this._process();                                                                                          // 11205
                                                                                                                       // 11206
	            // Return final computed hash                                                                             // 11207
	            return this._hash;                                                                                        // 11208
	        },                                                                                                            // 11209
                                                                                                                       // 11210
	        clone: function () {                                                                                          // 11211
	            var clone = Hasher.clone.call(this);                                                                      // 11212
	            clone._hash = this._hash.clone();                                                                         // 11213
                                                                                                                       // 11214
	            return clone;                                                                                             // 11215
	        }                                                                                                             // 11216
	    });                                                                                                               // 11217
                                                                                                                       // 11218
	    /**                                                                                                               // 11219
	     * Shortcut function to the hasher's object interface.                                                            // 11220
	     *                                                                                                                // 11221
	     * @param {WordArray|string} message The message to hash.                                                         // 11222
	     *                                                                                                                // 11223
	     * @return {WordArray} The hash.                                                                                  // 11224
	     *                                                                                                                // 11225
	     * @static                                                                                                        // 11226
	     *                                                                                                                // 11227
	     * @example                                                                                                       // 11228
	     *                                                                                                                // 11229
	     *     var hash = CryptoJS.SHA1('message');                                                                       // 11230
	     *     var hash = CryptoJS.SHA1(wordArray);                                                                       // 11231
	     */                                                                                                               // 11232
	    C.SHA1 = Hasher._createHelper(SHA1);                                                                              // 11233
                                                                                                                       // 11234
	    /**                                                                                                               // 11235
	     * Shortcut function to the HMAC's object interface.                                                              // 11236
	     *                                                                                                                // 11237
	     * @param {WordArray|string} message The message to hash.                                                         // 11238
	     * @param {WordArray|string} key The secret key.                                                                  // 11239
	     *                                                                                                                // 11240
	     * @return {WordArray} The HMAC.                                                                                  // 11241
	     *                                                                                                                // 11242
	     * @static                                                                                                        // 11243
	     *                                                                                                                // 11244
	     * @example                                                                                                       // 11245
	     *                                                                                                                // 11246
	     *     var hmac = CryptoJS.HmacSHA1(message, key);                                                                // 11247
	     */                                                                                                               // 11248
	    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);                                                                      // 11249
	}());                                                                                                                 // 11250
                                                                                                                       // 11251
                                                                                                                       // 11252
	return CryptoJS.SHA1;                                                                                                 // 11253
                                                                                                                       // 11254
}));                                                                                                                   // 11255
},{"./core":52}],77:[function(require,module,exports){                                                                 // 11256
;(function (root, factory, undef) {                                                                                    // 11257
	if (typeof exports === "object") {                                                                                    // 11258
		// CommonJS                                                                                                          // 11259
		module.exports = exports = factory(require("./core"), require("./sha256"));                                          // 11260
	}                                                                                                                     // 11261
	else if (typeof define === "function" && define.amd) {                                                                // 11262
		// AMD                                                                                                               // 11263
		define(["./core", "./sha256"], factory);                                                                             // 11264
	}                                                                                                                     // 11265
	else {                                                                                                                // 11266
		// Global (browser)                                                                                                  // 11267
		factory(root.CryptoJS);                                                                                              // 11268
	}                                                                                                                     // 11269
}(this, function (CryptoJS) {                                                                                          // 11270
                                                                                                                       // 11271
	(function () {                                                                                                        // 11272
	    // Shortcuts                                                                                                      // 11273
	    var C = CryptoJS;                                                                                                 // 11274
	    var C_lib = C.lib;                                                                                                // 11275
	    var WordArray = C_lib.WordArray;                                                                                  // 11276
	    var C_algo = C.algo;                                                                                              // 11277
	    var SHA256 = C_algo.SHA256;                                                                                       // 11278
                                                                                                                       // 11279
	    /**                                                                                                               // 11280
	     * SHA-224 hash algorithm.                                                                                        // 11281
	     */                                                                                                               // 11282
	    var SHA224 = C_algo.SHA224 = SHA256.extend({                                                                      // 11283
	        _doReset: function () {                                                                                       // 11284
	            this._hash = new WordArray.init([                                                                         // 11285
	                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,                                                       // 11286
	                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4                                                        // 11287
	            ]);                                                                                                       // 11288
	        },                                                                                                            // 11289
                                                                                                                       // 11290
	        _doFinalize: function () {                                                                                    // 11291
	            var hash = SHA256._doFinalize.call(this);                                                                 // 11292
                                                                                                                       // 11293
	            hash.sigBytes -= 4;                                                                                       // 11294
                                                                                                                       // 11295
	            return hash;                                                                                              // 11296
	        }                                                                                                             // 11297
	    });                                                                                                               // 11298
                                                                                                                       // 11299
	    /**                                                                                                               // 11300
	     * Shortcut function to the hasher's object interface.                                                            // 11301
	     *                                                                                                                // 11302
	     * @param {WordArray|string} message The message to hash.                                                         // 11303
	     *                                                                                                                // 11304
	     * @return {WordArray} The hash.                                                                                  // 11305
	     *                                                                                                                // 11306
	     * @static                                                                                                        // 11307
	     *                                                                                                                // 11308
	     * @example                                                                                                       // 11309
	     *                                                                                                                // 11310
	     *     var hash = CryptoJS.SHA224('message');                                                                     // 11311
	     *     var hash = CryptoJS.SHA224(wordArray);                                                                     // 11312
	     */                                                                                                               // 11313
	    C.SHA224 = SHA256._createHelper(SHA224);                                                                          // 11314
                                                                                                                       // 11315
	    /**                                                                                                               // 11316
	     * Shortcut function to the HMAC's object interface.                                                              // 11317
	     *                                                                                                                // 11318
	     * @param {WordArray|string} message The message to hash.                                                         // 11319
	     * @param {WordArray|string} key The secret key.                                                                  // 11320
	     *                                                                                                                // 11321
	     * @return {WordArray} The HMAC.                                                                                  // 11322
	     *                                                                                                                // 11323
	     * @static                                                                                                        // 11324
	     *                                                                                                                // 11325
	     * @example                                                                                                       // 11326
	     *                                                                                                                // 11327
	     *     var hmac = CryptoJS.HmacSHA224(message, key);                                                              // 11328
	     */                                                                                                               // 11329
	    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);                                                                  // 11330
	}());                                                                                                                 // 11331
                                                                                                                       // 11332
                                                                                                                       // 11333
	return CryptoJS.SHA224;                                                                                               // 11334
                                                                                                                       // 11335
}));                                                                                                                   // 11336
},{"./core":52,"./sha256":78}],78:[function(require,module,exports){                                                   // 11337
;(function (root, factory) {                                                                                           // 11338
	if (typeof exports === "object") {                                                                                    // 11339
		// CommonJS                                                                                                          // 11340
		module.exports = exports = factory(require("./core"));                                                               // 11341
	}                                                                                                                     // 11342
	else if (typeof define === "function" && define.amd) {                                                                // 11343
		// AMD                                                                                                               // 11344
		define(["./core"], factory);                                                                                         // 11345
	}                                                                                                                     // 11346
	else {                                                                                                                // 11347
		// Global (browser)                                                                                                  // 11348
		factory(root.CryptoJS);                                                                                              // 11349
	}                                                                                                                     // 11350
}(this, function (CryptoJS) {                                                                                          // 11351
                                                                                                                       // 11352
	(function (Math) {                                                                                                    // 11353
	    // Shortcuts                                                                                                      // 11354
	    var C = CryptoJS;                                                                                                 // 11355
	    var C_lib = C.lib;                                                                                                // 11356
	    var WordArray = C_lib.WordArray;                                                                                  // 11357
	    var Hasher = C_lib.Hasher;                                                                                        // 11358
	    var C_algo = C.algo;                                                                                              // 11359
                                                                                                                       // 11360
	    // Initialization and round constants tables                                                                      // 11361
	    var H = [];                                                                                                       // 11362
	    var K = [];                                                                                                       // 11363
                                                                                                                       // 11364
	    // Compute constants                                                                                              // 11365
	    (function () {                                                                                                    // 11366
	        function isPrime(n) {                                                                                         // 11367
	            var sqrtN = Math.sqrt(n);                                                                                 // 11368
	            for (var factor = 2; factor <= sqrtN; factor++) {                                                         // 11369
	                if (!(n % factor)) {                                                                                  // 11370
	                    return false;                                                                                     // 11371
	                }                                                                                                     // 11372
	            }                                                                                                         // 11373
                                                                                                                       // 11374
	            return true;                                                                                              // 11375
	        }                                                                                                             // 11376
                                                                                                                       // 11377
	        function getFractionalBits(n) {                                                                               // 11378
	            return ((n - (n | 0)) * 0x100000000) | 0;                                                                 // 11379
	        }                                                                                                             // 11380
                                                                                                                       // 11381
	        var n = 2;                                                                                                    // 11382
	        var nPrime = 0;                                                                                               // 11383
	        while (nPrime < 64) {                                                                                         // 11384
	            if (isPrime(n)) {                                                                                         // 11385
	                if (nPrime < 8) {                                                                                     // 11386
	                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));                                                // 11387
	                }                                                                                                     // 11388
	                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));                                                    // 11389
                                                                                                                       // 11390
	                nPrime++;                                                                                             // 11391
	            }                                                                                                         // 11392
                                                                                                                       // 11393
	            n++;                                                                                                      // 11394
	        }                                                                                                             // 11395
	    }());                                                                                                             // 11396
                                                                                                                       // 11397
	    // Reusable object                                                                                                // 11398
	    var W = [];                                                                                                       // 11399
                                                                                                                       // 11400
	    /**                                                                                                               // 11401
	     * SHA-256 hash algorithm.                                                                                        // 11402
	     */                                                                                                               // 11403
	    var SHA256 = C_algo.SHA256 = Hasher.extend({                                                                      // 11404
	        _doReset: function () {                                                                                       // 11405
	            this._hash = new WordArray.init(H.slice(0));                                                              // 11406
	        },                                                                                                            // 11407
                                                                                                                       // 11408
	        _doProcessBlock: function (M, offset) {                                                                       // 11409
	            // Shortcut                                                                                               // 11410
	            var H = this._hash.words;                                                                                 // 11411
                                                                                                                       // 11412
	            // Working variables                                                                                      // 11413
	            var a = H[0];                                                                                             // 11414
	            var b = H[1];                                                                                             // 11415
	            var c = H[2];                                                                                             // 11416
	            var d = H[3];                                                                                             // 11417
	            var e = H[4];                                                                                             // 11418
	            var f = H[5];                                                                                             // 11419
	            var g = H[6];                                                                                             // 11420
	            var h = H[7];                                                                                             // 11421
                                                                                                                       // 11422
	            // Computation                                                                                            // 11423
	            for (var i = 0; i < 64; i++) {                                                                            // 11424
	                if (i < 16) {                                                                                         // 11425
	                    W[i] = M[offset + i] | 0;                                                                         // 11426
	                } else {                                                                                              // 11427
	                    var gamma0x = W[i - 15];                                                                          // 11428
	                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^                                              // 11429
	                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^                                              // 11430
	                                   (gamma0x >>> 3);                                                                   // 11431
                                                                                                                       // 11432
	                    var gamma1x = W[i - 2];                                                                           // 11433
	                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^                                              // 11434
	                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^                                              // 11435
	                                   (gamma1x >>> 10);                                                                  // 11436
                                                                                                                       // 11437
	                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];                                                    // 11438
	                }                                                                                                     // 11439
                                                                                                                       // 11440
	                var ch  = (e & f) ^ (~e & g);                                                                         // 11441
	                var maj = (a & b) ^ (a & c) ^ (b & c);                                                                // 11442
                                                                                                                       // 11443
	                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));           // 11444
	                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));           // 11445
                                                                                                                       // 11446
	                var t1 = h + sigma1 + ch + K[i] + W[i];                                                               // 11447
	                var t2 = sigma0 + maj;                                                                                // 11448
                                                                                                                       // 11449
	                h = g;                                                                                                // 11450
	                g = f;                                                                                                // 11451
	                f = e;                                                                                                // 11452
	                e = (d + t1) | 0;                                                                                     // 11453
	                d = c;                                                                                                // 11454
	                c = b;                                                                                                // 11455
	                b = a;                                                                                                // 11456
	                a = (t1 + t2) | 0;                                                                                    // 11457
	            }                                                                                                         // 11458
                                                                                                                       // 11459
	            // Intermediate hash value                                                                                // 11460
	            H[0] = (H[0] + a) | 0;                                                                                    // 11461
	            H[1] = (H[1] + b) | 0;                                                                                    // 11462
	            H[2] = (H[2] + c) | 0;                                                                                    // 11463
	            H[3] = (H[3] + d) | 0;                                                                                    // 11464
	            H[4] = (H[4] + e) | 0;                                                                                    // 11465
	            H[5] = (H[5] + f) | 0;                                                                                    // 11466
	            H[6] = (H[6] + g) | 0;                                                                                    // 11467
	            H[7] = (H[7] + h) | 0;                                                                                    // 11468
	        },                                                                                                            // 11469
                                                                                                                       // 11470
	        _doFinalize: function () {                                                                                    // 11471
	            // Shortcuts                                                                                              // 11472
	            var data = this._data;                                                                                    // 11473
	            var dataWords = data.words;                                                                               // 11474
                                                                                                                       // 11475
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 11476
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 11477
                                                                                                                       // 11478
	            // Add padding                                                                                            // 11479
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 11480
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);                   // 11481
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;                                             // 11482
	            data.sigBytes = dataWords.length * 4;                                                                     // 11483
                                                                                                                       // 11484
	            // Hash final blocks                                                                                      // 11485
	            this._process();                                                                                          // 11486
                                                                                                                       // 11487
	            // Return final computed hash                                                                             // 11488
	            return this._hash;                                                                                        // 11489
	        },                                                                                                            // 11490
                                                                                                                       // 11491
	        clone: function () {                                                                                          // 11492
	            var clone = Hasher.clone.call(this);                                                                      // 11493
	            clone._hash = this._hash.clone();                                                                         // 11494
                                                                                                                       // 11495
	            return clone;                                                                                             // 11496
	        }                                                                                                             // 11497
	    });                                                                                                               // 11498
                                                                                                                       // 11499
	    /**                                                                                                               // 11500
	     * Shortcut function to the hasher's object interface.                                                            // 11501
	     *                                                                                                                // 11502
	     * @param {WordArray|string} message The message to hash.                                                         // 11503
	     *                                                                                                                // 11504
	     * @return {WordArray} The hash.                                                                                  // 11505
	     *                                                                                                                // 11506
	     * @static                                                                                                        // 11507
	     *                                                                                                                // 11508
	     * @example                                                                                                       // 11509
	     *                                                                                                                // 11510
	     *     var hash = CryptoJS.SHA256('message');                                                                     // 11511
	     *     var hash = CryptoJS.SHA256(wordArray);                                                                     // 11512
	     */                                                                                                               // 11513
	    C.SHA256 = Hasher._createHelper(SHA256);                                                                          // 11514
                                                                                                                       // 11515
	    /**                                                                                                               // 11516
	     * Shortcut function to the HMAC's object interface.                                                              // 11517
	     *                                                                                                                // 11518
	     * @param {WordArray|string} message The message to hash.                                                         // 11519
	     * @param {WordArray|string} key The secret key.                                                                  // 11520
	     *                                                                                                                // 11521
	     * @return {WordArray} The HMAC.                                                                                  // 11522
	     *                                                                                                                // 11523
	     * @static                                                                                                        // 11524
	     *                                                                                                                // 11525
	     * @example                                                                                                       // 11526
	     *                                                                                                                // 11527
	     *     var hmac = CryptoJS.HmacSHA256(message, key);                                                              // 11528
	     */                                                                                                               // 11529
	    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);                                                                  // 11530
	}(Math));                                                                                                             // 11531
                                                                                                                       // 11532
                                                                                                                       // 11533
	return CryptoJS.SHA256;                                                                                               // 11534
                                                                                                                       // 11535
}));                                                                                                                   // 11536
},{"./core":52}],79:[function(require,module,exports){                                                                 // 11537
;(function (root, factory, undef) {                                                                                    // 11538
	if (typeof exports === "object") {                                                                                    // 11539
		// CommonJS                                                                                                          // 11540
		module.exports = exports = factory(require("./core"), require("./x64-core"));                                        // 11541
	}                                                                                                                     // 11542
	else if (typeof define === "function" && define.amd) {                                                                // 11543
		// AMD                                                                                                               // 11544
		define(["./core", "./x64-core"], factory);                                                                           // 11545
	}                                                                                                                     // 11546
	else {                                                                                                                // 11547
		// Global (browser)                                                                                                  // 11548
		factory(root.CryptoJS);                                                                                              // 11549
	}                                                                                                                     // 11550
}(this, function (CryptoJS) {                                                                                          // 11551
                                                                                                                       // 11552
	(function (Math) {                                                                                                    // 11553
	    // Shortcuts                                                                                                      // 11554
	    var C = CryptoJS;                                                                                                 // 11555
	    var C_lib = C.lib;                                                                                                // 11556
	    var WordArray = C_lib.WordArray;                                                                                  // 11557
	    var Hasher = C_lib.Hasher;                                                                                        // 11558
	    var C_x64 = C.x64;                                                                                                // 11559
	    var X64Word = C_x64.Word;                                                                                         // 11560
	    var C_algo = C.algo;                                                                                              // 11561
                                                                                                                       // 11562
	    // Constants tables                                                                                               // 11563
	    var RHO_OFFSETS = [];                                                                                             // 11564
	    var PI_INDEXES  = [];                                                                                             // 11565
	    var ROUND_CONSTANTS = [];                                                                                         // 11566
                                                                                                                       // 11567
	    // Compute Constants                                                                                              // 11568
	    (function () {                                                                                                    // 11569
	        // Compute rho offset constants                                                                               // 11570
	        var x = 1, y = 0;                                                                                             // 11571
	        for (var t = 0; t < 24; t++) {                                                                                // 11572
	            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;                                                    // 11573
                                                                                                                       // 11574
	            var newX = y % 5;                                                                                         // 11575
	            var newY = (2 * x + 3 * y) % 5;                                                                           // 11576
	            x = newX;                                                                                                 // 11577
	            y = newY;                                                                                                 // 11578
	        }                                                                                                             // 11579
                                                                                                                       // 11580
	        // Compute pi index constants                                                                                 // 11581
	        for (var x = 0; x < 5; x++) {                                                                                 // 11582
	            for (var y = 0; y < 5; y++) {                                                                             // 11583
	                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;                                                // 11584
	            }                                                                                                         // 11585
	        }                                                                                                             // 11586
                                                                                                                       // 11587
	        // Compute round constants                                                                                    // 11588
	        var LFSR = 0x01;                                                                                              // 11589
	        for (var i = 0; i < 24; i++) {                                                                                // 11590
	            var roundConstantMsw = 0;                                                                                 // 11591
	            var roundConstantLsw = 0;                                                                                 // 11592
                                                                                                                       // 11593
	            for (var j = 0; j < 7; j++) {                                                                             // 11594
	                if (LFSR & 0x01) {                                                                                    // 11595
	                    var bitPosition = (1 << j) - 1;                                                                   // 11596
	                    if (bitPosition < 32) {                                                                           // 11597
	                        roundConstantLsw ^= 1 << bitPosition;                                                         // 11598
	                    } else /* if (bitPosition >= 32) */ {                                                             // 11599
	                        roundConstantMsw ^= 1 << (bitPosition - 32);                                                  // 11600
	                    }                                                                                                 // 11601
	                }                                                                                                     // 11602
                                                                                                                       // 11603
	                // Compute next LFSR                                                                                  // 11604
	                if (LFSR & 0x80) {                                                                                    // 11605
	                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1                                     // 11606
	                    LFSR = (LFSR << 1) ^ 0x71;                                                                        // 11607
	                } else {                                                                                              // 11608
	                    LFSR <<= 1;                                                                                       // 11609
	                }                                                                                                     // 11610
	            }                                                                                                         // 11611
                                                                                                                       // 11612
	            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);                                  // 11613
	        }                                                                                                             // 11614
	    }());                                                                                                             // 11615
                                                                                                                       // 11616
	    // Reusable objects for temporary values                                                                          // 11617
	    var T = [];                                                                                                       // 11618
	    (function () {                                                                                                    // 11619
	        for (var i = 0; i < 25; i++) {                                                                                // 11620
	            T[i] = X64Word.create();                                                                                  // 11621
	        }                                                                                                             // 11622
	    }());                                                                                                             // 11623
                                                                                                                       // 11624
	    /**                                                                                                               // 11625
	     * SHA-3 hash algorithm.                                                                                          // 11626
	     */                                                                                                               // 11627
	    var SHA3 = C_algo.SHA3 = Hasher.extend({                                                                          // 11628
	        /**                                                                                                           // 11629
	         * Configuration options.                                                                                     // 11630
	         *                                                                                                            // 11631
	         * @property {number} outputLength                                                                            // 11632
	         *   The desired number of bits in the output hash.                                                           // 11633
	         *   Only values permitted are: 224, 256, 384, 512.                                                           // 11634
	         *   Default: 512                                                                                             // 11635
	         */                                                                                                           // 11636
	        cfg: Hasher.cfg.extend({                                                                                      // 11637
	            outputLength: 512                                                                                         // 11638
	        }),                                                                                                           // 11639
                                                                                                                       // 11640
	        _doReset: function () {                                                                                       // 11641
	            var state = this._state = []                                                                              // 11642
	            for (var i = 0; i < 25; i++) {                                                                            // 11643
	                state[i] = new X64Word.init();                                                                        // 11644
	            }                                                                                                         // 11645
                                                                                                                       // 11646
	            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;                                                 // 11647
	        },                                                                                                            // 11648
                                                                                                                       // 11649
	        _doProcessBlock: function (M, offset) {                                                                       // 11650
	            // Shortcuts                                                                                              // 11651
	            var state = this._state;                                                                                  // 11652
	            var nBlockSizeLanes = this.blockSize / 2;                                                                 // 11653
                                                                                                                       // 11654
	            // Absorb                                                                                                 // 11655
	            for (var i = 0; i < nBlockSizeLanes; i++) {                                                               // 11656
	                // Shortcuts                                                                                          // 11657
	                var M2i  = M[offset + 2 * i];                                                                         // 11658
	                var M2i1 = M[offset + 2 * i + 1];                                                                     // 11659
                                                                                                                       // 11660
	                // Swap endian                                                                                        // 11661
	                M2i = (                                                                                               // 11662
	                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |                                                     // 11663
	                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)                                                       // 11664
	                );                                                                                                    // 11665
	                M2i1 = (                                                                                              // 11666
	                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |                                                   // 11667
	                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)                                                     // 11668
	                );                                                                                                    // 11669
                                                                                                                       // 11670
	                // Absorb message into state                                                                          // 11671
	                var lane = state[i];                                                                                  // 11672
	                lane.high ^= M2i1;                                                                                    // 11673
	                lane.low  ^= M2i;                                                                                     // 11674
	            }                                                                                                         // 11675
                                                                                                                       // 11676
	            // Rounds                                                                                                 // 11677
	            for (var round = 0; round < 24; round++) {                                                                // 11678
	                // Theta                                                                                              // 11679
	                for (var x = 0; x < 5; x++) {                                                                         // 11680
	                    // Mix column lanes                                                                               // 11681
	                    var tMsw = 0, tLsw = 0;                                                                           // 11682
	                    for (var y = 0; y < 5; y++) {                                                                     // 11683
	                        var lane = state[x + 5 * y];                                                                  // 11684
	                        tMsw ^= lane.high;                                                                            // 11685
	                        tLsw ^= lane.low;                                                                             // 11686
	                    }                                                                                                 // 11687
                                                                                                                       // 11688
	                    // Temporary values                                                                               // 11689
	                    var Tx = T[x];                                                                                    // 11690
	                    Tx.high = tMsw;                                                                                   // 11691
	                    Tx.low  = tLsw;                                                                                   // 11692
	                }                                                                                                     // 11693
	                for (var x = 0; x < 5; x++) {                                                                         // 11694
	                    // Shortcuts                                                                                      // 11695
	                    var Tx4 = T[(x + 4) % 5];                                                                         // 11696
	                    var Tx1 = T[(x + 1) % 5];                                                                         // 11697
	                    var Tx1Msw = Tx1.high;                                                                            // 11698
	                    var Tx1Lsw = Tx1.low;                                                                             // 11699
                                                                                                                       // 11700
	                    // Mix surrounding columns                                                                        // 11701
	                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));                                          // 11702
	                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));                                          // 11703
	                    for (var y = 0; y < 5; y++) {                                                                     // 11704
	                        var lane = state[x + 5 * y];                                                                  // 11705
	                        lane.high ^= tMsw;                                                                            // 11706
	                        lane.low  ^= tLsw;                                                                            // 11707
	                    }                                                                                                 // 11708
	                }                                                                                                     // 11709
                                                                                                                       // 11710
	                // Rho Pi                                                                                             // 11711
	                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {                                                // 11712
	                    // Shortcuts                                                                                      // 11713
	                    var lane = state[laneIndex];                                                                      // 11714
	                    var laneMsw = lane.high;                                                                          // 11715
	                    var laneLsw = lane.low;                                                                           // 11716
	                    var rhoOffset = RHO_OFFSETS[laneIndex];                                                           // 11717
                                                                                                                       // 11718
	                    // Rotate lanes                                                                                   // 11719
	                    if (rhoOffset < 32) {                                                                             // 11720
	                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));                           // 11721
	                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));                           // 11722
	                    } else /* if (rhoOffset >= 32) */ {                                                               // 11723
	                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));                    // 11724
	                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));                    // 11725
	                    }                                                                                                 // 11726
                                                                                                                       // 11727
	                    // Transpose lanes                                                                                // 11728
	                    var TPiLane = T[PI_INDEXES[laneIndex]];                                                           // 11729
	                    TPiLane.high = tMsw;                                                                              // 11730
	                    TPiLane.low  = tLsw;                                                                              // 11731
	                }                                                                                                     // 11732
                                                                                                                       // 11733
	                // Rho pi at x = y = 0                                                                                // 11734
	                var T0 = T[0];                                                                                        // 11735
	                var state0 = state[0];                                                                                // 11736
	                T0.high = state0.high;                                                                                // 11737
	                T0.low  = state0.low;                                                                                 // 11738
                                                                                                                       // 11739
	                // Chi                                                                                                // 11740
	                for (var x = 0; x < 5; x++) {                                                                         // 11741
	                    for (var y = 0; y < 5; y++) {                                                                     // 11742
	                        // Shortcuts                                                                                  // 11743
	                        var laneIndex = x + 5 * y;                                                                    // 11744
	                        var lane = state[laneIndex];                                                                  // 11745
	                        var TLane = T[laneIndex];                                                                     // 11746
	                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];                                                       // 11747
	                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];                                                       // 11748
                                                                                                                       // 11749
	                        // Mix rows                                                                                   // 11750
	                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);                                      // 11751
	                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);                                       // 11752
	                    }                                                                                                 // 11753
	                }                                                                                                     // 11754
                                                                                                                       // 11755
	                // Iota                                                                                               // 11756
	                var lane = state[0];                                                                                  // 11757
	                var roundConstant = ROUND_CONSTANTS[round];                                                           // 11758
	                lane.high ^= roundConstant.high;                                                                      // 11759
	                lane.low  ^= roundConstant.low;;                                                                      // 11760
	            }                                                                                                         // 11761
	        },                                                                                                            // 11762
                                                                                                                       // 11763
	        _doFinalize: function () {                                                                                    // 11764
	            // Shortcuts                                                                                              // 11765
	            var data = this._data;                                                                                    // 11766
	            var dataWords = data.words;                                                                               // 11767
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 11768
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 11769
	            var blockSizeBits = this.blockSize * 32;                                                                  // 11770
                                                                                                                       // 11771
	            // Add padding                                                                                            // 11772
	            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);                                               // 11773
	            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;              // 11774
	            data.sigBytes = dataWords.length * 4;                                                                     // 11775
                                                                                                                       // 11776
	            // Hash final blocks                                                                                      // 11777
	            this._process();                                                                                          // 11778
                                                                                                                       // 11779
	            // Shortcuts                                                                                              // 11780
	            var state = this._state;                                                                                  // 11781
	            var outputLengthBytes = this.cfg.outputLength / 8;                                                        // 11782
	            var outputLengthLanes = outputLengthBytes / 8;                                                            // 11783
                                                                                                                       // 11784
	            // Squeeze                                                                                                // 11785
	            var hashWords = [];                                                                                       // 11786
	            for (var i = 0; i < outputLengthLanes; i++) {                                                             // 11787
	                // Shortcuts                                                                                          // 11788
	                var lane = state[i];                                                                                  // 11789
	                var laneMsw = lane.high;                                                                              // 11790
	                var laneLsw = lane.low;                                                                               // 11791
                                                                                                                       // 11792
	                // Swap endian                                                                                        // 11793
	                laneMsw = (                                                                                           // 11794
	                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |                                             // 11795
	                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)                                               // 11796
	                );                                                                                                    // 11797
	                laneLsw = (                                                                                           // 11798
	                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |                                             // 11799
	                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)                                               // 11800
	                );                                                                                                    // 11801
                                                                                                                       // 11802
	                // Squeeze state to retrieve hash                                                                     // 11803
	                hashWords.push(laneLsw);                                                                              // 11804
	                hashWords.push(laneMsw);                                                                              // 11805
	            }                                                                                                         // 11806
                                                                                                                       // 11807
	            // Return final computed hash                                                                             // 11808
	            return new WordArray.init(hashWords, outputLengthBytes);                                                  // 11809
	        },                                                                                                            // 11810
                                                                                                                       // 11811
	        clone: function () {                                                                                          // 11812
	            var clone = Hasher.clone.call(this);                                                                      // 11813
                                                                                                                       // 11814
	            var state = clone._state = this._state.slice(0);                                                          // 11815
	            for (var i = 0; i < 25; i++) {                                                                            // 11816
	                state[i] = state[i].clone();                                                                          // 11817
	            }                                                                                                         // 11818
                                                                                                                       // 11819
	            return clone;                                                                                             // 11820
	        }                                                                                                             // 11821
	    });                                                                                                               // 11822
                                                                                                                       // 11823
	    /**                                                                                                               // 11824
	     * Shortcut function to the hasher's object interface.                                                            // 11825
	     *                                                                                                                // 11826
	     * @param {WordArray|string} message The message to hash.                                                         // 11827
	     *                                                                                                                // 11828
	     * @return {WordArray} The hash.                                                                                  // 11829
	     *                                                                                                                // 11830
	     * @static                                                                                                        // 11831
	     *                                                                                                                // 11832
	     * @example                                                                                                       // 11833
	     *                                                                                                                // 11834
	     *     var hash = CryptoJS.SHA3('message');                                                                       // 11835
	     *     var hash = CryptoJS.SHA3(wordArray);                                                                       // 11836
	     */                                                                                                               // 11837
	    C.SHA3 = Hasher._createHelper(SHA3);                                                                              // 11838
                                                                                                                       // 11839
	    /**                                                                                                               // 11840
	     * Shortcut function to the HMAC's object interface.                                                              // 11841
	     *                                                                                                                // 11842
	     * @param {WordArray|string} message The message to hash.                                                         // 11843
	     * @param {WordArray|string} key The secret key.                                                                  // 11844
	     *                                                                                                                // 11845
	     * @return {WordArray} The HMAC.                                                                                  // 11846
	     *                                                                                                                // 11847
	     * @static                                                                                                        // 11848
	     *                                                                                                                // 11849
	     * @example                                                                                                       // 11850
	     *                                                                                                                // 11851
	     *     var hmac = CryptoJS.HmacSHA3(message, key);                                                                // 11852
	     */                                                                                                               // 11853
	    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);                                                                      // 11854
	}(Math));                                                                                                             // 11855
                                                                                                                       // 11856
                                                                                                                       // 11857
	return CryptoJS.SHA3;                                                                                                 // 11858
                                                                                                                       // 11859
}));                                                                                                                   // 11860
},{"./core":52,"./x64-core":83}],80:[function(require,module,exports){                                                 // 11861
;(function (root, factory, undef) {                                                                                    // 11862
	if (typeof exports === "object") {                                                                                    // 11863
		// CommonJS                                                                                                          // 11864
		module.exports = exports = factory(require("./core"), require("./x64-core"), require("./sha512"));                   // 11865
	}                                                                                                                     // 11866
	else if (typeof define === "function" && define.amd) {                                                                // 11867
		// AMD                                                                                                               // 11868
		define(["./core", "./x64-core", "./sha512"], factory);                                                               // 11869
	}                                                                                                                     // 11870
	else {                                                                                                                // 11871
		// Global (browser)                                                                                                  // 11872
		factory(root.CryptoJS);                                                                                              // 11873
	}                                                                                                                     // 11874
}(this, function (CryptoJS) {                                                                                          // 11875
                                                                                                                       // 11876
	(function () {                                                                                                        // 11877
	    // Shortcuts                                                                                                      // 11878
	    var C = CryptoJS;                                                                                                 // 11879
	    var C_x64 = C.x64;                                                                                                // 11880
	    var X64Word = C_x64.Word;                                                                                         // 11881
	    var X64WordArray = C_x64.WordArray;                                                                               // 11882
	    var C_algo = C.algo;                                                                                              // 11883
	    var SHA512 = C_algo.SHA512;                                                                                       // 11884
                                                                                                                       // 11885
	    /**                                                                                                               // 11886
	     * SHA-384 hash algorithm.                                                                                        // 11887
	     */                                                                                                               // 11888
	    var SHA384 = C_algo.SHA384 = SHA512.extend({                                                                      // 11889
	        _doReset: function () {                                                                                       // 11890
	            this._hash = new X64WordArray.init([                                                                      // 11891
	                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),                   // 11892
	                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),                   // 11893
	                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),                   // 11894
	                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)                    // 11895
	            ]);                                                                                                       // 11896
	        },                                                                                                            // 11897
                                                                                                                       // 11898
	        _doFinalize: function () {                                                                                    // 11899
	            var hash = SHA512._doFinalize.call(this);                                                                 // 11900
                                                                                                                       // 11901
	            hash.sigBytes -= 16;                                                                                      // 11902
                                                                                                                       // 11903
	            return hash;                                                                                              // 11904
	        }                                                                                                             // 11905
	    });                                                                                                               // 11906
                                                                                                                       // 11907
	    /**                                                                                                               // 11908
	     * Shortcut function to the hasher's object interface.                                                            // 11909
	     *                                                                                                                // 11910
	     * @param {WordArray|string} message The message to hash.                                                         // 11911
	     *                                                                                                                // 11912
	     * @return {WordArray} The hash.                                                                                  // 11913
	     *                                                                                                                // 11914
	     * @static                                                                                                        // 11915
	     *                                                                                                                // 11916
	     * @example                                                                                                       // 11917
	     *                                                                                                                // 11918
	     *     var hash = CryptoJS.SHA384('message');                                                                     // 11919
	     *     var hash = CryptoJS.SHA384(wordArray);                                                                     // 11920
	     */                                                                                                               // 11921
	    C.SHA384 = SHA512._createHelper(SHA384);                                                                          // 11922
                                                                                                                       // 11923
	    /**                                                                                                               // 11924
	     * Shortcut function to the HMAC's object interface.                                                              // 11925
	     *                                                                                                                // 11926
	     * @param {WordArray|string} message The message to hash.                                                         // 11927
	     * @param {WordArray|string} key The secret key.                                                                  // 11928
	     *                                                                                                                // 11929
	     * @return {WordArray} The HMAC.                                                                                  // 11930
	     *                                                                                                                // 11931
	     * @static                                                                                                        // 11932
	     *                                                                                                                // 11933
	     * @example                                                                                                       // 11934
	     *                                                                                                                // 11935
	     *     var hmac = CryptoJS.HmacSHA384(message, key);                                                              // 11936
	     */                                                                                                               // 11937
	    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);                                                                  // 11938
	}());                                                                                                                 // 11939
                                                                                                                       // 11940
                                                                                                                       // 11941
	return CryptoJS.SHA384;                                                                                               // 11942
                                                                                                                       // 11943
}));                                                                                                                   // 11944
},{"./core":52,"./sha512":81,"./x64-core":83}],81:[function(require,module,exports){                                   // 11945
;(function (root, factory, undef) {                                                                                    // 11946
	if (typeof exports === "object") {                                                                                    // 11947
		// CommonJS                                                                                                          // 11948
		module.exports = exports = factory(require("./core"), require("./x64-core"));                                        // 11949
	}                                                                                                                     // 11950
	else if (typeof define === "function" && define.amd) {                                                                // 11951
		// AMD                                                                                                               // 11952
		define(["./core", "./x64-core"], factory);                                                                           // 11953
	}                                                                                                                     // 11954
	else {                                                                                                                // 11955
		// Global (browser)                                                                                                  // 11956
		factory(root.CryptoJS);                                                                                              // 11957
	}                                                                                                                     // 11958
}(this, function (CryptoJS) {                                                                                          // 11959
                                                                                                                       // 11960
	(function () {                                                                                                        // 11961
	    // Shortcuts                                                                                                      // 11962
	    var C = CryptoJS;                                                                                                 // 11963
	    var C_lib = C.lib;                                                                                                // 11964
	    var Hasher = C_lib.Hasher;                                                                                        // 11965
	    var C_x64 = C.x64;                                                                                                // 11966
	    var X64Word = C_x64.Word;                                                                                         // 11967
	    var X64WordArray = C_x64.WordArray;                                                                               // 11968
	    var C_algo = C.algo;                                                                                              // 11969
                                                                                                                       // 11970
	    function X64Word_create() {                                                                                       // 11971
	        return X64Word.create.apply(X64Word, arguments);                                                              // 11972
	    }                                                                                                                 // 11973
                                                                                                                       // 11974
	    // Constants                                                                                                      // 11975
	    var K = [                                                                                                         // 11976
	        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),                               // 11977
	        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),                               // 11978
	        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),                               // 11979
	        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),                               // 11980
	        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),                               // 11981
	        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),                               // 11982
	        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),                               // 11983
	        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),                               // 11984
	        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),                               // 11985
	        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),                               // 11986
	        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),                               // 11987
	        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),                               // 11988
	        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),                               // 11989
	        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),                               // 11990
	        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),                               // 11991
	        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),                               // 11992
	        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),                               // 11993
	        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),                               // 11994
	        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),                               // 11995
	        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),                               // 11996
	        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),                               // 11997
	        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),                               // 11998
	        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),                               // 11999
	        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),                               // 12000
	        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),                               // 12001
	        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),                               // 12002
	        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),                               // 12003
	        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),                               // 12004
	        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),                               // 12005
	        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),                               // 12006
	        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),                               // 12007
	        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),                               // 12008
	        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),                               // 12009
	        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),                               // 12010
	        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),                               // 12011
	        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),                               // 12012
	        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),                               // 12013
	        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),                               // 12014
	        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),                               // 12015
	        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)                                // 12016
	    ];                                                                                                                // 12017
                                                                                                                       // 12018
	    // Reusable objects                                                                                               // 12019
	    var W = [];                                                                                                       // 12020
	    (function () {                                                                                                    // 12021
	        for (var i = 0; i < 80; i++) {                                                                                // 12022
	            W[i] = X64Word_create();                                                                                  // 12023
	        }                                                                                                             // 12024
	    }());                                                                                                             // 12025
                                                                                                                       // 12026
	    /**                                                                                                               // 12027
	     * SHA-512 hash algorithm.                                                                                        // 12028
	     */                                                                                                               // 12029
	    var SHA512 = C_algo.SHA512 = Hasher.extend({                                                                      // 12030
	        _doReset: function () {                                                                                       // 12031
	            this._hash = new X64WordArray.init([                                                                      // 12032
	                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),                   // 12033
	                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),                   // 12034
	                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),                   // 12035
	                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)                    // 12036
	            ]);                                                                                                       // 12037
	        },                                                                                                            // 12038
                                                                                                                       // 12039
	        _doProcessBlock: function (M, offset) {                                                                       // 12040
	            // Shortcuts                                                                                              // 12041
	            var H = this._hash.words;                                                                                 // 12042
                                                                                                                       // 12043
	            var H0 = H[0];                                                                                            // 12044
	            var H1 = H[1];                                                                                            // 12045
	            var H2 = H[2];                                                                                            // 12046
	            var H3 = H[3];                                                                                            // 12047
	            var H4 = H[4];                                                                                            // 12048
	            var H5 = H[5];                                                                                            // 12049
	            var H6 = H[6];                                                                                            // 12050
	            var H7 = H[7];                                                                                            // 12051
                                                                                                                       // 12052
	            var H0h = H0.high;                                                                                        // 12053
	            var H0l = H0.low;                                                                                         // 12054
	            var H1h = H1.high;                                                                                        // 12055
	            var H1l = H1.low;                                                                                         // 12056
	            var H2h = H2.high;                                                                                        // 12057
	            var H2l = H2.low;                                                                                         // 12058
	            var H3h = H3.high;                                                                                        // 12059
	            var H3l = H3.low;                                                                                         // 12060
	            var H4h = H4.high;                                                                                        // 12061
	            var H4l = H4.low;                                                                                         // 12062
	            var H5h = H5.high;                                                                                        // 12063
	            var H5l = H5.low;                                                                                         // 12064
	            var H6h = H6.high;                                                                                        // 12065
	            var H6l = H6.low;                                                                                         // 12066
	            var H7h = H7.high;                                                                                        // 12067
	            var H7l = H7.low;                                                                                         // 12068
                                                                                                                       // 12069
	            // Working variables                                                                                      // 12070
	            var ah = H0h;                                                                                             // 12071
	            var al = H0l;                                                                                             // 12072
	            var bh = H1h;                                                                                             // 12073
	            var bl = H1l;                                                                                             // 12074
	            var ch = H2h;                                                                                             // 12075
	            var cl = H2l;                                                                                             // 12076
	            var dh = H3h;                                                                                             // 12077
	            var dl = H3l;                                                                                             // 12078
	            var eh = H4h;                                                                                             // 12079
	            var el = H4l;                                                                                             // 12080
	            var fh = H5h;                                                                                             // 12081
	            var fl = H5l;                                                                                             // 12082
	            var gh = H6h;                                                                                             // 12083
	            var gl = H6l;                                                                                             // 12084
	            var hh = H7h;                                                                                             // 12085
	            var hl = H7l;                                                                                             // 12086
                                                                                                                       // 12087
	            // Rounds                                                                                                 // 12088
	            for (var i = 0; i < 80; i++) {                                                                            // 12089
	                // Shortcut                                                                                           // 12090
	                var Wi = W[i];                                                                                        // 12091
                                                                                                                       // 12092
	                // Extend message                                                                                     // 12093
	                if (i < 16) {                                                                                         // 12094
	                    var Wih = Wi.high = M[offset + i * 2]     | 0;                                                    // 12095
	                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;                                                    // 12096
	                } else {                                                                                              // 12097
	                    // Gamma0                                                                                         // 12098
	                    var gamma0x  = W[i - 15];                                                                         // 12099
	                    var gamma0xh = gamma0x.high;                                                                      // 12100
	                    var gamma0xl = gamma0x.low;                                                                       // 12101
	                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
	                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));
                                                                                                                       // 12104
	                    // Gamma1                                                                                         // 12105
	                    var gamma1x  = W[i - 2];                                                                          // 12106
	                    var gamma1xh = gamma1x.high;                                                                      // 12107
	                    var gamma1xl = gamma1x.low;                                                                       // 12108
	                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
	                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));
                                                                                                                       // 12111
	                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]                                                  // 12112
	                    var Wi7  = W[i - 7];                                                                              // 12113
	                    var Wi7h = Wi7.high;                                                                              // 12114
	                    var Wi7l = Wi7.low;                                                                               // 12115
                                                                                                                       // 12116
	                    var Wi16  = W[i - 16];                                                                            // 12117
	                    var Wi16h = Wi16.high;                                                                            // 12118
	                    var Wi16l = Wi16.low;                                                                             // 12119
                                                                                                                       // 12120
	                    var Wil = gamma0l + Wi7l;                                                                         // 12121
	                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);                               // 12122
	                    var Wil = Wil + gamma1l;                                                                          // 12123
	                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);                                // 12124
	                    var Wil = Wil + Wi16l;                                                                            // 12125
	                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);                                    // 12126
                                                                                                                       // 12127
	                    Wi.high = Wih;                                                                                    // 12128
	                    Wi.low  = Wil;                                                                                    // 12129
	                }                                                                                                     // 12130
                                                                                                                       // 12131
	                var chh  = (eh & fh) ^ (~eh & gh);                                                                    // 12132
	                var chl  = (el & fl) ^ (~el & gl);                                                                    // 12133
	                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);                                                         // 12134
	                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);                                                         // 12135
                                                                                                                       // 12136
	                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));    // 12137
	                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));    // 12138
	                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));    // 12139
	                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));    // 12140
                                                                                                                       // 12141
	                // t1 = h + sigma1 + ch + K[i] + W[i]                                                                 // 12142
	                var Ki  = K[i];                                                                                       // 12143
	                var Kih = Ki.high;                                                                                    // 12144
	                var Kil = Ki.low;                                                                                     // 12145
                                                                                                                       // 12146
	                var t1l = hl + sigma1l;                                                                               // 12147
	                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);                                          // 12148
	                var t1l = t1l + chl;                                                                                  // 12149
	                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);                                            // 12150
	                var t1l = t1l + Kil;                                                                                  // 12151
	                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);                                            // 12152
	                var t1l = t1l + Wil;                                                                                  // 12153
	                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);                                            // 12154
                                                                                                                       // 12155
	                // t2 = sigma0 + maj                                                                                  // 12156
	                var t2l = sigma0l + majl;                                                                             // 12157
	                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);                                   // 12158
                                                                                                                       // 12159
	                // Update working variables                                                                           // 12160
	                hh = gh;                                                                                              // 12161
	                hl = gl;                                                                                              // 12162
	                gh = fh;                                                                                              // 12163
	                gl = fl;                                                                                              // 12164
	                fh = eh;                                                                                              // 12165
	                fl = el;                                                                                              // 12166
	                el = (dl + t1l) | 0;                                                                                  // 12167
	                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;                                              // 12168
	                dh = ch;                                                                                              // 12169
	                dl = cl;                                                                                              // 12170
	                ch = bh;                                                                                              // 12171
	                cl = bl;                                                                                              // 12172
	                bh = ah;                                                                                              // 12173
	                bl = al;                                                                                              // 12174
	                al = (t1l + t2l) | 0;                                                                                 // 12175
	                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;                                            // 12176
	            }                                                                                                         // 12177
                                                                                                                       // 12178
	            // Intermediate hash value                                                                                // 12179
	            H0l = H0.low  = (H0l + al);                                                                               // 12180
	            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));                                                // 12181
	            H1l = H1.low  = (H1l + bl);                                                                               // 12182
	            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));                                                // 12183
	            H2l = H2.low  = (H2l + cl);                                                                               // 12184
	            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));                                                // 12185
	            H3l = H3.low  = (H3l + dl);                                                                               // 12186
	            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));                                                // 12187
	            H4l = H4.low  = (H4l + el);                                                                               // 12188
	            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));                                                // 12189
	            H5l = H5.low  = (H5l + fl);                                                                               // 12190
	            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));                                                // 12191
	            H6l = H6.low  = (H6l + gl);                                                                               // 12192
	            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));                                                // 12193
	            H7l = H7.low  = (H7l + hl);                                                                               // 12194
	            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));                                                // 12195
	        },                                                                                                            // 12196
                                                                                                                       // 12197
	        _doFinalize: function () {                                                                                    // 12198
	            // Shortcuts                                                                                              // 12199
	            var data = this._data;                                                                                    // 12200
	            var dataWords = data.words;                                                                               // 12201
                                                                                                                       // 12202
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 12203
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 12204
                                                                                                                       // 12205
	            // Add padding                                                                                            // 12206
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 12207
	            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);                 // 12208
	            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;                                           // 12209
	            data.sigBytes = dataWords.length * 4;                                                                     // 12210
                                                                                                                       // 12211
	            // Hash final blocks                                                                                      // 12212
	            this._process();                                                                                          // 12213
                                                                                                                       // 12214
	            // Convert hash to 32-bit word array before returning                                                     // 12215
	            var hash = this._hash.toX32();                                                                            // 12216
                                                                                                                       // 12217
	            // Return final computed hash                                                                             // 12218
	            return hash;                                                                                              // 12219
	        },                                                                                                            // 12220
                                                                                                                       // 12221
	        clone: function () {                                                                                          // 12222
	            var clone = Hasher.clone.call(this);                                                                      // 12223
	            clone._hash = this._hash.clone();                                                                         // 12224
                                                                                                                       // 12225
	            return clone;                                                                                             // 12226
	        },                                                                                                            // 12227
                                                                                                                       // 12228
	        blockSize: 1024/32                                                                                            // 12229
	    });                                                                                                               // 12230
                                                                                                                       // 12231
	    /**                                                                                                               // 12232
	     * Shortcut function to the hasher's object interface.                                                            // 12233
	     *                                                                                                                // 12234
	     * @param {WordArray|string} message The message to hash.                                                         // 12235
	     *                                                                                                                // 12236
	     * @return {WordArray} The hash.                                                                                  // 12237
	     *                                                                                                                // 12238
	     * @static                                                                                                        // 12239
	     *                                                                                                                // 12240
	     * @example                                                                                                       // 12241
	     *                                                                                                                // 12242
	     *     var hash = CryptoJS.SHA512('message');                                                                     // 12243
	     *     var hash = CryptoJS.SHA512(wordArray);                                                                     // 12244
	     */                                                                                                               // 12245
	    C.SHA512 = Hasher._createHelper(SHA512);                                                                          // 12246
                                                                                                                       // 12247
	    /**                                                                                                               // 12248
	     * Shortcut function to the HMAC's object interface.                                                              // 12249
	     *                                                                                                                // 12250
	     * @param {WordArray|string} message The message to hash.                                                         // 12251
	     * @param {WordArray|string} key The secret key.                                                                  // 12252
	     *                                                                                                                // 12253
	     * @return {WordArray} The HMAC.                                                                                  // 12254
	     *                                                                                                                // 12255
	     * @static                                                                                                        // 12256
	     *                                                                                                                // 12257
	     * @example                                                                                                       // 12258
	     *                                                                                                                // 12259
	     *     var hmac = CryptoJS.HmacSHA512(message, key);                                                              // 12260
	     */                                                                                                               // 12261
	    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);                                                                  // 12262
	}());                                                                                                                 // 12263
                                                                                                                       // 12264
                                                                                                                       // 12265
	return CryptoJS.SHA512;                                                                                               // 12266
                                                                                                                       // 12267
}));                                                                                                                   // 12268
},{"./core":52,"./x64-core":83}],82:[function(require,module,exports){                                                 // 12269
;(function (root, factory, undef) {                                                                                    // 12270
	if (typeof exports === "object") {                                                                                    // 12271
		// CommonJS                                                                                                          // 12272
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 12274
	else if (typeof define === "function" && define.amd) {                                                                // 12275
		// AMD                                                                                                               // 12276
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 12277
	}                                                                                                                     // 12278
	else {                                                                                                                // 12279
		// Global (browser)                                                                                                  // 12280
		factory(root.CryptoJS);                                                                                              // 12281
	}                                                                                                                     // 12282
}(this, function (CryptoJS) {                                                                                          // 12283
                                                                                                                       // 12284
	(function () {                                                                                                        // 12285
	    // Shortcuts                                                                                                      // 12286
	    var C = CryptoJS;                                                                                                 // 12287
	    var C_lib = C.lib;                                                                                                // 12288
	    var WordArray = C_lib.WordArray;                                                                                  // 12289
	    var BlockCipher = C_lib.BlockCipher;                                                                              // 12290
	    var C_algo = C.algo;                                                                                              // 12291
                                                                                                                       // 12292
	    // Permuted Choice 1 constants                                                                                    // 12293
	    var PC1 = [                                                                                                       // 12294
	        57, 49, 41, 33, 25, 17, 9,  1,                                                                                // 12295
	        58, 50, 42, 34, 26, 18, 10, 2,                                                                                // 12296
	        59, 51, 43, 35, 27, 19, 11, 3,                                                                                // 12297
	        60, 52, 44, 36, 63, 55, 47, 39,                                                                               // 12298
	        31, 23, 15, 7,  62, 54, 46, 38,                                                                               // 12299
	        30, 22, 14, 6,  61, 53, 45, 37,                                                                               // 12300
	        29, 21, 13, 5,  28, 20, 12, 4                                                                                 // 12301
	    ];                                                                                                                // 12302
                                                                                                                       // 12303
	    // Permuted Choice 2 constants                                                                                    // 12304
	    var PC2 = [                                                                                                       // 12305
	        14, 17, 11, 24, 1,  5,                                                                                        // 12306
	        3,  28, 15, 6,  21, 10,                                                                                       // 12307
	        23, 19, 12, 4,  26, 8,                                                                                        // 12308
	        16, 7,  27, 20, 13, 2,                                                                                        // 12309
	        41, 52, 31, 37, 47, 55,                                                                                       // 12310
	        30, 40, 51, 45, 33, 48,                                                                                       // 12311
	        44, 49, 39, 56, 34, 53,                                                                                       // 12312
	        46, 42, 50, 36, 29, 32                                                                                        // 12313
	    ];                                                                                                                // 12314
                                                                                                                       // 12315
	    // Cumulative bit shift constants                                                                                 // 12316
	    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];                                // 12317
                                                                                                                       // 12318
	    // SBOXes and round permutation constants                                                                         // 12319
	    var SBOX_P = [                                                                                                    // 12320
	        {                                                                                                             // 12321
	            0x0: 0x808200,                                                                                            // 12322
	            0x10000000: 0x8000,                                                                                       // 12323
	            0x20000000: 0x808002,                                                                                     // 12324
	            0x30000000: 0x2,                                                                                          // 12325
	            0x40000000: 0x200,                                                                                        // 12326
	            0x50000000: 0x808202,                                                                                     // 12327
	            0x60000000: 0x800202,                                                                                     // 12328
	            0x70000000: 0x800000,                                                                                     // 12329
	            0x80000000: 0x202,                                                                                        // 12330
	            0x90000000: 0x800200,                                                                                     // 12331
	            0xa0000000: 0x8200,                                                                                       // 12332
	            0xb0000000: 0x808000,                                                                                     // 12333
	            0xc0000000: 0x8002,                                                                                       // 12334
	            0xd0000000: 0x800002,                                                                                     // 12335
	            0xe0000000: 0x0,                                                                                          // 12336
	            0xf0000000: 0x8202,                                                                                       // 12337
	            0x8000000: 0x0,                                                                                           // 12338
	            0x18000000: 0x808202,                                                                                     // 12339
	            0x28000000: 0x8202,                                                                                       // 12340
	            0x38000000: 0x8000,                                                                                       // 12341
	            0x48000000: 0x808200,                                                                                     // 12342
	            0x58000000: 0x200,                                                                                        // 12343
	            0x68000000: 0x808002,                                                                                     // 12344
	            0x78000000: 0x2,                                                                                          // 12345
	            0x88000000: 0x800200,                                                                                     // 12346
	            0x98000000: 0x8200,                                                                                       // 12347
	            0xa8000000: 0x808000,                                                                                     // 12348
	            0xb8000000: 0x800202,                                                                                     // 12349
	            0xc8000000: 0x800002,                                                                                     // 12350
	            0xd8000000: 0x8002,                                                                                       // 12351
	            0xe8000000: 0x202,                                                                                        // 12352
	            0xf8000000: 0x800000,                                                                                     // 12353
	            0x1: 0x8000,                                                                                              // 12354
	            0x10000001: 0x2,                                                                                          // 12355
	            0x20000001: 0x808200,                                                                                     // 12356
	            0x30000001: 0x800000,                                                                                     // 12357
	            0x40000001: 0x808002,                                                                                     // 12358
	            0x50000001: 0x8200,                                                                                       // 12359
	            0x60000001: 0x200,                                                                                        // 12360
	            0x70000001: 0x800202,                                                                                     // 12361
	            0x80000001: 0x808202,                                                                                     // 12362
	            0x90000001: 0x808000,                                                                                     // 12363
	            0xa0000001: 0x800002,                                                                                     // 12364
	            0xb0000001: 0x8202,                                                                                       // 12365
	            0xc0000001: 0x202,                                                                                        // 12366
	            0xd0000001: 0x800200,                                                                                     // 12367
	            0xe0000001: 0x8002,                                                                                       // 12368
	            0xf0000001: 0x0,                                                                                          // 12369
	            0x8000001: 0x808202,                                                                                      // 12370
	            0x18000001: 0x808000,                                                                                     // 12371
	            0x28000001: 0x800000,                                                                                     // 12372
	            0x38000001: 0x200,                                                                                        // 12373
	            0x48000001: 0x8000,                                                                                       // 12374
	            0x58000001: 0x800002,                                                                                     // 12375
	            0x68000001: 0x2,                                                                                          // 12376
	            0x78000001: 0x8202,                                                                                       // 12377
	            0x88000001: 0x8002,                                                                                       // 12378
	            0x98000001: 0x800202,                                                                                     // 12379
	            0xa8000001: 0x202,                                                                                        // 12380
	            0xb8000001: 0x808200,                                                                                     // 12381
	            0xc8000001: 0x800200,                                                                                     // 12382
	            0xd8000001: 0x0,                                                                                          // 12383
	            0xe8000001: 0x8200,                                                                                       // 12384
	            0xf8000001: 0x808002                                                                                      // 12385
	        },                                                                                                            // 12386
	        {                                                                                                             // 12387
	            0x0: 0x40084010,                                                                                          // 12388
	            0x1000000: 0x4000,                                                                                        // 12389
	            0x2000000: 0x80000,                                                                                       // 12390
	            0x3000000: 0x40080010,                                                                                    // 12391
	            0x4000000: 0x40000010,                                                                                    // 12392
	            0x5000000: 0x40084000,                                                                                    // 12393
	            0x6000000: 0x40004000,                                                                                    // 12394
	            0x7000000: 0x10,                                                                                          // 12395
	            0x8000000: 0x84000,                                                                                       // 12396
	            0x9000000: 0x40004010,                                                                                    // 12397
	            0xa000000: 0x40000000,                                                                                    // 12398
	            0xb000000: 0x84010,                                                                                       // 12399
	            0xc000000: 0x80010,                                                                                       // 12400
	            0xd000000: 0x0,                                                                                           // 12401
	            0xe000000: 0x4010,                                                                                        // 12402
	            0xf000000: 0x40080000,                                                                                    // 12403
	            0x800000: 0x40004000,                                                                                     // 12404
	            0x1800000: 0x84010,                                                                                       // 12405
	            0x2800000: 0x10,                                                                                          // 12406
	            0x3800000: 0x40004010,                                                                                    // 12407
	            0x4800000: 0x40084010,                                                                                    // 12408
	            0x5800000: 0x40000000,                                                                                    // 12409
	            0x6800000: 0x80000,                                                                                       // 12410
	            0x7800000: 0x40080010,                                                                                    // 12411
	            0x8800000: 0x80010,                                                                                       // 12412
	            0x9800000: 0x0,                                                                                           // 12413
	            0xa800000: 0x4000,                                                                                        // 12414
	            0xb800000: 0x40080000,                                                                                    // 12415
	            0xc800000: 0x40000010,                                                                                    // 12416
	            0xd800000: 0x84000,                                                                                       // 12417
	            0xe800000: 0x40084000,                                                                                    // 12418
	            0xf800000: 0x4010,                                                                                        // 12419
	            0x10000000: 0x0,                                                                                          // 12420
	            0x11000000: 0x40080010,                                                                                   // 12421
	            0x12000000: 0x40004010,                                                                                   // 12422
	            0x13000000: 0x40084000,                                                                                   // 12423
	            0x14000000: 0x40080000,                                                                                   // 12424
	            0x15000000: 0x10,                                                                                         // 12425
	            0x16000000: 0x84010,                                                                                      // 12426
	            0x17000000: 0x4000,                                                                                       // 12427
	            0x18000000: 0x4010,                                                                                       // 12428
	            0x19000000: 0x80000,                                                                                      // 12429
	            0x1a000000: 0x80010,                                                                                      // 12430
	            0x1b000000: 0x40000010,                                                                                   // 12431
	            0x1c000000: 0x84000,                                                                                      // 12432
	            0x1d000000: 0x40004000,                                                                                   // 12433
	            0x1e000000: 0x40000000,                                                                                   // 12434
	            0x1f000000: 0x40084010,                                                                                   // 12435
	            0x10800000: 0x84010,                                                                                      // 12436
	            0x11800000: 0x80000,                                                                                      // 12437
	            0x12800000: 0x40080000,                                                                                   // 12438
	            0x13800000: 0x4000,                                                                                       // 12439
	            0x14800000: 0x40004000,                                                                                   // 12440
	            0x15800000: 0x40084010,                                                                                   // 12441
	            0x16800000: 0x10,                                                                                         // 12442
	            0x17800000: 0x40000000,                                                                                   // 12443
	            0x18800000: 0x40084000,                                                                                   // 12444
	            0x19800000: 0x40000010,                                                                                   // 12445
	            0x1a800000: 0x40004010,                                                                                   // 12446
	            0x1b800000: 0x80010,                                                                                      // 12447
	            0x1c800000: 0x0,                                                                                          // 12448
	            0x1d800000: 0x4010,                                                                                       // 12449
	            0x1e800000: 0x40080010,                                                                                   // 12450
	            0x1f800000: 0x84000                                                                                       // 12451
	        },                                                                                                            // 12452
	        {                                                                                                             // 12453
	            0x0: 0x104,                                                                                               // 12454
	            0x100000: 0x0,                                                                                            // 12455
	            0x200000: 0x4000100,                                                                                      // 12456
	            0x300000: 0x10104,                                                                                        // 12457
	            0x400000: 0x10004,                                                                                        // 12458
	            0x500000: 0x4000004,                                                                                      // 12459
	            0x600000: 0x4010104,                                                                                      // 12460
	            0x700000: 0x4010000,                                                                                      // 12461
	            0x800000: 0x4000000,                                                                                      // 12462
	            0x900000: 0x4010100,                                                                                      // 12463
	            0xa00000: 0x10100,                                                                                        // 12464
	            0xb00000: 0x4010004,                                                                                      // 12465
	            0xc00000: 0x4000104,                                                                                      // 12466
	            0xd00000: 0x10000,                                                                                        // 12467
	            0xe00000: 0x4,                                                                                            // 12468
	            0xf00000: 0x100,                                                                                          // 12469
	            0x80000: 0x4010100,                                                                                       // 12470
	            0x180000: 0x4010004,                                                                                      // 12471
	            0x280000: 0x0,                                                                                            // 12472
	            0x380000: 0x4000100,                                                                                      // 12473
	            0x480000: 0x4000004,                                                                                      // 12474
	            0x580000: 0x10000,                                                                                        // 12475
	            0x680000: 0x10004,                                                                                        // 12476
	            0x780000: 0x104,                                                                                          // 12477
	            0x880000: 0x4,                                                                                            // 12478
	            0x980000: 0x100,                                                                                          // 12479
	            0xa80000: 0x4010000,                                                                                      // 12480
	            0xb80000: 0x10104,                                                                                        // 12481
	            0xc80000: 0x10100,                                                                                        // 12482
	            0xd80000: 0x4000104,                                                                                      // 12483
	            0xe80000: 0x4010104,                                                                                      // 12484
	            0xf80000: 0x4000000,                                                                                      // 12485
	            0x1000000: 0x4010100,                                                                                     // 12486
	            0x1100000: 0x10004,                                                                                       // 12487
	            0x1200000: 0x10000,                                                                                       // 12488
	            0x1300000: 0x4000100,                                                                                     // 12489
	            0x1400000: 0x100,                                                                                         // 12490
	            0x1500000: 0x4010104,                                                                                     // 12491
	            0x1600000: 0x4000004,                                                                                     // 12492
	            0x1700000: 0x0,                                                                                           // 12493
	            0x1800000: 0x4000104,                                                                                     // 12494
	            0x1900000: 0x4000000,                                                                                     // 12495
	            0x1a00000: 0x4,                                                                                           // 12496
	            0x1b00000: 0x10100,                                                                                       // 12497
	            0x1c00000: 0x4010000,                                                                                     // 12498
	            0x1d00000: 0x104,                                                                                         // 12499
	            0x1e00000: 0x10104,                                                                                       // 12500
	            0x1f00000: 0x4010004,                                                                                     // 12501
	            0x1080000: 0x4000000,                                                                                     // 12502
	            0x1180000: 0x104,                                                                                         // 12503
	            0x1280000: 0x4010100,                                                                                     // 12504
	            0x1380000: 0x0,                                                                                           // 12505
	            0x1480000: 0x10004,                                                                                       // 12506
	            0x1580000: 0x4000100,                                                                                     // 12507
	            0x1680000: 0x100,                                                                                         // 12508
	            0x1780000: 0x4010004,                                                                                     // 12509
	            0x1880000: 0x10000,                                                                                       // 12510
	            0x1980000: 0x4010104,                                                                                     // 12511
	            0x1a80000: 0x10104,                                                                                       // 12512
	            0x1b80000: 0x4000004,                                                                                     // 12513
	            0x1c80000: 0x4000104,                                                                                     // 12514
	            0x1d80000: 0x4010000,                                                                                     // 12515
	            0x1e80000: 0x4,                                                                                           // 12516
	            0x1f80000: 0x10100                                                                                        // 12517
	        },                                                                                                            // 12518
	        {                                                                                                             // 12519
	            0x0: 0x80401000,                                                                                          // 12520
	            0x10000: 0x80001040,                                                                                      // 12521
	            0x20000: 0x401040,                                                                                        // 12522
	            0x30000: 0x80400000,                                                                                      // 12523
	            0x40000: 0x0,                                                                                             // 12524
	            0x50000: 0x401000,                                                                                        // 12525
	            0x60000: 0x80000040,                                                                                      // 12526
	            0x70000: 0x400040,                                                                                        // 12527
	            0x80000: 0x80000000,                                                                                      // 12528
	            0x90000: 0x400000,                                                                                        // 12529
	            0xa0000: 0x40,                                                                                            // 12530
	            0xb0000: 0x80001000,                                                                                      // 12531
	            0xc0000: 0x80400040,                                                                                      // 12532
	            0xd0000: 0x1040,                                                                                          // 12533
	            0xe0000: 0x1000,                                                                                          // 12534
	            0xf0000: 0x80401040,                                                                                      // 12535
	            0x8000: 0x80001040,                                                                                       // 12536
	            0x18000: 0x40,                                                                                            // 12537
	            0x28000: 0x80400040,                                                                                      // 12538
	            0x38000: 0x80001000,                                                                                      // 12539
	            0x48000: 0x401000,                                                                                        // 12540
	            0x58000: 0x80401040,                                                                                      // 12541
	            0x68000: 0x0,                                                                                             // 12542
	            0x78000: 0x80400000,                                                                                      // 12543
	            0x88000: 0x1000,                                                                                          // 12544
	            0x98000: 0x80401000,                                                                                      // 12545
	            0xa8000: 0x400000,                                                                                        // 12546
	            0xb8000: 0x1040,                                                                                          // 12547
	            0xc8000: 0x80000000,                                                                                      // 12548
	            0xd8000: 0x400040,                                                                                        // 12549
	            0xe8000: 0x401040,                                                                                        // 12550
	            0xf8000: 0x80000040,                                                                                      // 12551
	            0x100000: 0x400040,                                                                                       // 12552
	            0x110000: 0x401000,                                                                                       // 12553
	            0x120000: 0x80000040,                                                                                     // 12554
	            0x130000: 0x0,                                                                                            // 12555
	            0x140000: 0x1040,                                                                                         // 12556
	            0x150000: 0x80400040,                                                                                     // 12557
	            0x160000: 0x80401000,                                                                                     // 12558
	            0x170000: 0x80001040,                                                                                     // 12559
	            0x180000: 0x80401040,                                                                                     // 12560
	            0x190000: 0x80000000,                                                                                     // 12561
	            0x1a0000: 0x80400000,                                                                                     // 12562
	            0x1b0000: 0x401040,                                                                                       // 12563
	            0x1c0000: 0x80001000,                                                                                     // 12564
	            0x1d0000: 0x400000,                                                                                       // 12565
	            0x1e0000: 0x40,                                                                                           // 12566
	            0x1f0000: 0x1000,                                                                                         // 12567
	            0x108000: 0x80400000,                                                                                     // 12568
	            0x118000: 0x80401040,                                                                                     // 12569
	            0x128000: 0x0,                                                                                            // 12570
	            0x138000: 0x401000,                                                                                       // 12571
	            0x148000: 0x400040,                                                                                       // 12572
	            0x158000: 0x80000000,                                                                                     // 12573
	            0x168000: 0x80001040,                                                                                     // 12574
	            0x178000: 0x40,                                                                                           // 12575
	            0x188000: 0x80000040,                                                                                     // 12576
	            0x198000: 0x1000,                                                                                         // 12577
	            0x1a8000: 0x80001000,                                                                                     // 12578
	            0x1b8000: 0x80400040,                                                                                     // 12579
	            0x1c8000: 0x1040,                                                                                         // 12580
	            0x1d8000: 0x80401000,                                                                                     // 12581
	            0x1e8000: 0x400000,                                                                                       // 12582
	            0x1f8000: 0x401040                                                                                        // 12583
	        },                                                                                                            // 12584
	        {                                                                                                             // 12585
	            0x0: 0x80,                                                                                                // 12586
	            0x1000: 0x1040000,                                                                                        // 12587
	            0x2000: 0x40000,                                                                                          // 12588
	            0x3000: 0x20000000,                                                                                       // 12589
	            0x4000: 0x20040080,                                                                                       // 12590
	            0x5000: 0x1000080,                                                                                        // 12591
	            0x6000: 0x21000080,                                                                                       // 12592
	            0x7000: 0x40080,                                                                                          // 12593
	            0x8000: 0x1000000,                                                                                        // 12594
	            0x9000: 0x20040000,                                                                                       // 12595
	            0xa000: 0x20000080,                                                                                       // 12596
	            0xb000: 0x21040080,                                                                                       // 12597
	            0xc000: 0x21040000,                                                                                       // 12598
	            0xd000: 0x0,                                                                                              // 12599
	            0xe000: 0x1040080,                                                                                        // 12600
	            0xf000: 0x21000000,                                                                                       // 12601
	            0x800: 0x1040080,                                                                                         // 12602
	            0x1800: 0x21000080,                                                                                       // 12603
	            0x2800: 0x80,                                                                                             // 12604
	            0x3800: 0x1040000,                                                                                        // 12605
	            0x4800: 0x40000,                                                                                          // 12606
	            0x5800: 0x20040080,                                                                                       // 12607
	            0x6800: 0x21040000,                                                                                       // 12608
	            0x7800: 0x20000000,                                                                                       // 12609
	            0x8800: 0x20040000,                                                                                       // 12610
	            0x9800: 0x0,                                                                                              // 12611
	            0xa800: 0x21040080,                                                                                       // 12612
	            0xb800: 0x1000080,                                                                                        // 12613
	            0xc800: 0x20000080,                                                                                       // 12614
	            0xd800: 0x21000000,                                                                                       // 12615
	            0xe800: 0x1000000,                                                                                        // 12616
	            0xf800: 0x40080,                                                                                          // 12617
	            0x10000: 0x40000,                                                                                         // 12618
	            0x11000: 0x80,                                                                                            // 12619
	            0x12000: 0x20000000,                                                                                      // 12620
	            0x13000: 0x21000080,                                                                                      // 12621
	            0x14000: 0x1000080,                                                                                       // 12622
	            0x15000: 0x21040000,                                                                                      // 12623
	            0x16000: 0x20040080,                                                                                      // 12624
	            0x17000: 0x1000000,                                                                                       // 12625
	            0x18000: 0x21040080,                                                                                      // 12626
	            0x19000: 0x21000000,                                                                                      // 12627
	            0x1a000: 0x1040000,                                                                                       // 12628
	            0x1b000: 0x20040000,                                                                                      // 12629
	            0x1c000: 0x40080,                                                                                         // 12630
	            0x1d000: 0x20000080,                                                                                      // 12631
	            0x1e000: 0x0,                                                                                             // 12632
	            0x1f000: 0x1040080,                                                                                       // 12633
	            0x10800: 0x21000080,                                                                                      // 12634
	            0x11800: 0x1000000,                                                                                       // 12635
	            0x12800: 0x1040000,                                                                                       // 12636
	            0x13800: 0x20040080,                                                                                      // 12637
	            0x14800: 0x20000000,                                                                                      // 12638
	            0x15800: 0x1040080,                                                                                       // 12639
	            0x16800: 0x80,                                                                                            // 12640
	            0x17800: 0x21040000,                                                                                      // 12641
	            0x18800: 0x40080,                                                                                         // 12642
	            0x19800: 0x21040080,                                                                                      // 12643
	            0x1a800: 0x0,                                                                                             // 12644
	            0x1b800: 0x21000000,                                                                                      // 12645
	            0x1c800: 0x1000080,                                                                                       // 12646
	            0x1d800: 0x40000,                                                                                         // 12647
	            0x1e800: 0x20040000,                                                                                      // 12648
	            0x1f800: 0x20000080                                                                                       // 12649
	        },                                                                                                            // 12650
	        {                                                                                                             // 12651
	            0x0: 0x10000008,                                                                                          // 12652
	            0x100: 0x2000,                                                                                            // 12653
	            0x200: 0x10200000,                                                                                        // 12654
	            0x300: 0x10202008,                                                                                        // 12655
	            0x400: 0x10002000,                                                                                        // 12656
	            0x500: 0x200000,                                                                                          // 12657
	            0x600: 0x200008,                                                                                          // 12658
	            0x700: 0x10000000,                                                                                        // 12659
	            0x800: 0x0,                                                                                               // 12660
	            0x900: 0x10002008,                                                                                        // 12661
	            0xa00: 0x202000,                                                                                          // 12662
	            0xb00: 0x8,                                                                                               // 12663
	            0xc00: 0x10200008,                                                                                        // 12664
	            0xd00: 0x202008,                                                                                          // 12665
	            0xe00: 0x2008,                                                                                            // 12666
	            0xf00: 0x10202000,                                                                                        // 12667
	            0x80: 0x10200000,                                                                                         // 12668
	            0x180: 0x10202008,                                                                                        // 12669
	            0x280: 0x8,                                                                                               // 12670
	            0x380: 0x200000,                                                                                          // 12671
	            0x480: 0x202008,                                                                                          // 12672
	            0x580: 0x10000008,                                                                                        // 12673
	            0x680: 0x10002000,                                                                                        // 12674
	            0x780: 0x2008,                                                                                            // 12675
	            0x880: 0x200008,                                                                                          // 12676
	            0x980: 0x2000,                                                                                            // 12677
	            0xa80: 0x10002008,                                                                                        // 12678
	            0xb80: 0x10200008,                                                                                        // 12679
	            0xc80: 0x0,                                                                                               // 12680
	            0xd80: 0x10202000,                                                                                        // 12681
	            0xe80: 0x202000,                                                                                          // 12682
	            0xf80: 0x10000000,                                                                                        // 12683
	            0x1000: 0x10002000,                                                                                       // 12684
	            0x1100: 0x10200008,                                                                                       // 12685
	            0x1200: 0x10202008,                                                                                       // 12686
	            0x1300: 0x2008,                                                                                           // 12687
	            0x1400: 0x200000,                                                                                         // 12688
	            0x1500: 0x10000000,                                                                                       // 12689
	            0x1600: 0x10000008,                                                                                       // 12690
	            0x1700: 0x202000,                                                                                         // 12691
	            0x1800: 0x202008,                                                                                         // 12692
	            0x1900: 0x0,                                                                                              // 12693
	            0x1a00: 0x8,                                                                                              // 12694
	            0x1b00: 0x10200000,                                                                                       // 12695
	            0x1c00: 0x2000,                                                                                           // 12696
	            0x1d00: 0x10002008,                                                                                       // 12697
	            0x1e00: 0x10202000,                                                                                       // 12698
	            0x1f00: 0x200008,                                                                                         // 12699
	            0x1080: 0x8,                                                                                              // 12700
	            0x1180: 0x202000,                                                                                         // 12701
	            0x1280: 0x200000,                                                                                         // 12702
	            0x1380: 0x10000008,                                                                                       // 12703
	            0x1480: 0x10002000,                                                                                       // 12704
	            0x1580: 0x2008,                                                                                           // 12705
	            0x1680: 0x10202008,                                                                                       // 12706
	            0x1780: 0x10200000,                                                                                       // 12707
	            0x1880: 0x10202000,                                                                                       // 12708
	            0x1980: 0x10200008,                                                                                       // 12709
	            0x1a80: 0x2000,                                                                                           // 12710
	            0x1b80: 0x202008,                                                                                         // 12711
	            0x1c80: 0x200008,                                                                                         // 12712
	            0x1d80: 0x0,                                                                                              // 12713
	            0x1e80: 0x10000000,                                                                                       // 12714
	            0x1f80: 0x10002008                                                                                        // 12715
	        },                                                                                                            // 12716
	        {                                                                                                             // 12717
	            0x0: 0x100000,                                                                                            // 12718
	            0x10: 0x2000401,                                                                                          // 12719
	            0x20: 0x400,                                                                                              // 12720
	            0x30: 0x100401,                                                                                           // 12721
	            0x40: 0x2100401,                                                                                          // 12722
	            0x50: 0x0,                                                                                                // 12723
	            0x60: 0x1,                                                                                                // 12724
	            0x70: 0x2100001,                                                                                          // 12725
	            0x80: 0x2000400,                                                                                          // 12726
	            0x90: 0x100001,                                                                                           // 12727
	            0xa0: 0x2000001,                                                                                          // 12728
	            0xb0: 0x2100400,                                                                                          // 12729
	            0xc0: 0x2100000,                                                                                          // 12730
	            0xd0: 0x401,                                                                                              // 12731
	            0xe0: 0x100400,                                                                                           // 12732
	            0xf0: 0x2000000,                                                                                          // 12733
	            0x8: 0x2100001,                                                                                           // 12734
	            0x18: 0x0,                                                                                                // 12735
	            0x28: 0x2000401,                                                                                          // 12736
	            0x38: 0x2100400,                                                                                          // 12737
	            0x48: 0x100000,                                                                                           // 12738
	            0x58: 0x2000001,                                                                                          // 12739
	            0x68: 0x2000000,                                                                                          // 12740
	            0x78: 0x401,                                                                                              // 12741
	            0x88: 0x100401,                                                                                           // 12742
	            0x98: 0x2000400,                                                                                          // 12743
	            0xa8: 0x2100000,                                                                                          // 12744
	            0xb8: 0x100001,                                                                                           // 12745
	            0xc8: 0x400,                                                                                              // 12746
	            0xd8: 0x2100401,                                                                                          // 12747
	            0xe8: 0x1,                                                                                                // 12748
	            0xf8: 0x100400,                                                                                           // 12749
	            0x100: 0x2000000,                                                                                         // 12750
	            0x110: 0x100000,                                                                                          // 12751
	            0x120: 0x2000401,                                                                                         // 12752
	            0x130: 0x2100001,                                                                                         // 12753
	            0x140: 0x100001,                                                                                          // 12754
	            0x150: 0x2000400,                                                                                         // 12755
	            0x160: 0x2100400,                                                                                         // 12756
	            0x170: 0x100401,                                                                                          // 12757
	            0x180: 0x401,                                                                                             // 12758
	            0x190: 0x2100401,                                                                                         // 12759
	            0x1a0: 0x100400,                                                                                          // 12760
	            0x1b0: 0x1,                                                                                               // 12761
	            0x1c0: 0x0,                                                                                               // 12762
	            0x1d0: 0x2100000,                                                                                         // 12763
	            0x1e0: 0x2000001,                                                                                         // 12764
	            0x1f0: 0x400,                                                                                             // 12765
	            0x108: 0x100400,                                                                                          // 12766
	            0x118: 0x2000401,                                                                                         // 12767
	            0x128: 0x2100001,                                                                                         // 12768
	            0x138: 0x1,                                                                                               // 12769
	            0x148: 0x2000000,                                                                                         // 12770
	            0x158: 0x100000,                                                                                          // 12771
	            0x168: 0x401,                                                                                             // 12772
	            0x178: 0x2100400,                                                                                         // 12773
	            0x188: 0x2000001,                                                                                         // 12774
	            0x198: 0x2100000,                                                                                         // 12775
	            0x1a8: 0x0,                                                                                               // 12776
	            0x1b8: 0x2100401,                                                                                         // 12777
	            0x1c8: 0x100401,                                                                                          // 12778
	            0x1d8: 0x400,                                                                                             // 12779
	            0x1e8: 0x2000400,                                                                                         // 12780
	            0x1f8: 0x100001                                                                                           // 12781
	        },                                                                                                            // 12782
	        {                                                                                                             // 12783
	            0x0: 0x8000820,                                                                                           // 12784
	            0x1: 0x20000,                                                                                             // 12785
	            0x2: 0x8000000,                                                                                           // 12786
	            0x3: 0x20,                                                                                                // 12787
	            0x4: 0x20020,                                                                                             // 12788
	            0x5: 0x8020820,                                                                                           // 12789
	            0x6: 0x8020800,                                                                                           // 12790
	            0x7: 0x800,                                                                                               // 12791
	            0x8: 0x8020000,                                                                                           // 12792
	            0x9: 0x8000800,                                                                                           // 12793
	            0xa: 0x20800,                                                                                             // 12794
	            0xb: 0x8020020,                                                                                           // 12795
	            0xc: 0x820,                                                                                               // 12796
	            0xd: 0x0,                                                                                                 // 12797
	            0xe: 0x8000020,                                                                                           // 12798
	            0xf: 0x20820,                                                                                             // 12799
	            0x80000000: 0x800,                                                                                        // 12800
	            0x80000001: 0x8020820,                                                                                    // 12801
	            0x80000002: 0x8000820,                                                                                    // 12802
	            0x80000003: 0x8000000,                                                                                    // 12803
	            0x80000004: 0x8020000,                                                                                    // 12804
	            0x80000005: 0x20800,                                                                                      // 12805
	            0x80000006: 0x20820,                                                                                      // 12806
	            0x80000007: 0x20,                                                                                         // 12807
	            0x80000008: 0x8000020,                                                                                    // 12808
	            0x80000009: 0x820,                                                                                        // 12809
	            0x8000000a: 0x20020,                                                                                      // 12810
	            0x8000000b: 0x8020800,                                                                                    // 12811
	            0x8000000c: 0x0,                                                                                          // 12812
	            0x8000000d: 0x8020020,                                                                                    // 12813
	            0x8000000e: 0x8000800,                                                                                    // 12814
	            0x8000000f: 0x20000,                                                                                      // 12815
	            0x10: 0x20820,                                                                                            // 12816
	            0x11: 0x8020800,                                                                                          // 12817
	            0x12: 0x20,                                                                                               // 12818
	            0x13: 0x800,                                                                                              // 12819
	            0x14: 0x8000800,                                                                                          // 12820
	            0x15: 0x8000020,                                                                                          // 12821
	            0x16: 0x8020020,                                                                                          // 12822
	            0x17: 0x20000,                                                                                            // 12823
	            0x18: 0x0,                                                                                                // 12824
	            0x19: 0x20020,                                                                                            // 12825
	            0x1a: 0x8020000,                                                                                          // 12826
	            0x1b: 0x8000820,                                                                                          // 12827
	            0x1c: 0x8020820,                                                                                          // 12828
	            0x1d: 0x20800,                                                                                            // 12829
	            0x1e: 0x820,                                                                                              // 12830
	            0x1f: 0x8000000,                                                                                          // 12831
	            0x80000010: 0x20000,                                                                                      // 12832
	            0x80000011: 0x800,                                                                                        // 12833
	            0x80000012: 0x8020020,                                                                                    // 12834
	            0x80000013: 0x20820,                                                                                      // 12835
	            0x80000014: 0x20,                                                                                         // 12836
	            0x80000015: 0x8020000,                                                                                    // 12837
	            0x80000016: 0x8000000,                                                                                    // 12838
	            0x80000017: 0x8000820,                                                                                    // 12839
	            0x80000018: 0x8020820,                                                                                    // 12840
	            0x80000019: 0x8000020,                                                                                    // 12841
	            0x8000001a: 0x8000800,                                                                                    // 12842
	            0x8000001b: 0x0,                                                                                          // 12843
	            0x8000001c: 0x20800,                                                                                      // 12844
	            0x8000001d: 0x820,                                                                                        // 12845
	            0x8000001e: 0x20020,                                                                                      // 12846
	            0x8000001f: 0x8020800                                                                                     // 12847
	        }                                                                                                             // 12848
	    ];                                                                                                                // 12849
                                                                                                                       // 12850
	    // Masks that select the SBOX input                                                                               // 12851
	    var SBOX_MASK = [                                                                                                 // 12852
	        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,                                                               // 12853
	        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f                                                                // 12854
	    ];                                                                                                                // 12855
                                                                                                                       // 12856
	    /**                                                                                                               // 12857
	     * DES block cipher algorithm.                                                                                    // 12858
	     */                                                                                                               // 12859
	    var DES = C_algo.DES = BlockCipher.extend({                                                                       // 12860
	        _doReset: function () {                                                                                       // 12861
	            // Shortcuts                                                                                              // 12862
	            var key = this._key;                                                                                      // 12863
	            var keyWords = key.words;                                                                                 // 12864
                                                                                                                       // 12865
	            // Select 56 bits according to PC1                                                                        // 12866
	            var keyBits = [];                                                                                         // 12867
	            for (var i = 0; i < 56; i++) {                                                                            // 12868
	                var keyBitPos = PC1[i] - 1;                                                                           // 12869
	                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;                               // 12870
	            }                                                                                                         // 12871
                                                                                                                       // 12872
	            // Assemble 16 subkeys                                                                                    // 12873
	            var subKeys = this._subKeys = [];                                                                         // 12874
	            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {                                                          // 12875
	                // Create subkey                                                                                      // 12876
	                var subKey = subKeys[nSubKey] = [];                                                                   // 12877
                                                                                                                       // 12878
	                // Shortcut                                                                                           // 12879
	                var bitShift = BIT_SHIFTS[nSubKey];                                                                   // 12880
                                                                                                                       // 12881
	                // Select 48 bits according to PC2                                                                    // 12882
	                for (var i = 0; i < 24; i++) {                                                                        // 12883
	                    // Select from the left 28 key bits                                                               // 12884
	                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);                   // 12885
                                                                                                                       // 12886
	                    // Select from the right 28 key bits                                                              // 12887
	                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
	                }                                                                                                     // 12889
                                                                                                                       // 12890
	                // Since each subkey is applied to an expanded 32-bit input,                                          // 12891
	                // the subkey can be broken into 8 values scaled to 32-bits,                                          // 12892
	                // which allows the key to be used without expansion                                                  // 12893
	                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);                                                    // 12894
	                for (var i = 1; i < 7; i++) {                                                                         // 12895
	                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);                                                      // 12896
	                }                                                                                                     // 12897
	                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);                                                    // 12898
	            }                                                                                                         // 12899
                                                                                                                       // 12900
	            // Compute inverse subkeys                                                                                // 12901
	            var invSubKeys = this._invSubKeys = [];                                                                   // 12902
	            for (var i = 0; i < 16; i++) {                                                                            // 12903
	                invSubKeys[i] = subKeys[15 - i];                                                                      // 12904
	            }                                                                                                         // 12905
	        },                                                                                                            // 12906
                                                                                                                       // 12907
	        encryptBlock: function (M, offset) {                                                                          // 12908
	            this._doCryptBlock(M, offset, this._subKeys);                                                             // 12909
	        },                                                                                                            // 12910
                                                                                                                       // 12911
	        decryptBlock: function (M, offset) {                                                                          // 12912
	            this._doCryptBlock(M, offset, this._invSubKeys);                                                          // 12913
	        },                                                                                                            // 12914
                                                                                                                       // 12915
	        _doCryptBlock: function (M, offset, subKeys) {                                                                // 12916
	            // Get input                                                                                              // 12917
	            this._lBlock = M[offset];                                                                                 // 12918
	            this._rBlock = M[offset + 1];                                                                             // 12919
                                                                                                                       // 12920
	            // Initial permutation                                                                                    // 12921
	            exchangeLR.call(this, 4,  0x0f0f0f0f);                                                                    // 12922
	            exchangeLR.call(this, 16, 0x0000ffff);                                                                    // 12923
	            exchangeRL.call(this, 2,  0x33333333);                                                                    // 12924
	            exchangeRL.call(this, 8,  0x00ff00ff);                                                                    // 12925
	            exchangeLR.call(this, 1,  0x55555555);                                                                    // 12926
                                                                                                                       // 12927
	            // Rounds                                                                                                 // 12928
	            for (var round = 0; round < 16; round++) {                                                                // 12929
	                // Shortcuts                                                                                          // 12930
	                var subKey = subKeys[round];                                                                          // 12931
	                var lBlock = this._lBlock;                                                                            // 12932
	                var rBlock = this._rBlock;                                                                            // 12933
                                                                                                                       // 12934
	                // Feistel function                                                                                   // 12935
	                var f = 0;                                                                                            // 12936
	                for (var i = 0; i < 8; i++) {                                                                         // 12937
	                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];                                      // 12938
	                }                                                                                                     // 12939
	                this._lBlock = rBlock;                                                                                // 12940
	                this._rBlock = lBlock ^ f;                                                                            // 12941
	            }                                                                                                         // 12942
                                                                                                                       // 12943
	            // Undo swap from last round                                                                              // 12944
	            var t = this._lBlock;                                                                                     // 12945
	            this._lBlock = this._rBlock;                                                                              // 12946
	            this._rBlock = t;                                                                                         // 12947
                                                                                                                       // 12948
	            // Final permutation                                                                                      // 12949
	            exchangeLR.call(this, 1,  0x55555555);                                                                    // 12950
	            exchangeRL.call(this, 8,  0x00ff00ff);                                                                    // 12951
	            exchangeRL.call(this, 2,  0x33333333);                                                                    // 12952
	            exchangeLR.call(this, 16, 0x0000ffff);                                                                    // 12953
	            exchangeLR.call(this, 4,  0x0f0f0f0f);                                                                    // 12954
                                                                                                                       // 12955
	            // Set output                                                                                             // 12956
	            M[offset] = this._lBlock;                                                                                 // 12957
	            M[offset + 1] = this._rBlock;                                                                             // 12958
	        },                                                                                                            // 12959
                                                                                                                       // 12960
	        keySize: 64/32,                                                                                               // 12961
                                                                                                                       // 12962
	        ivSize: 64/32,                                                                                                // 12963
                                                                                                                       // 12964
	        blockSize: 64/32                                                                                              // 12965
	    });                                                                                                               // 12966
                                                                                                                       // 12967
	    // Swap bits across the left and right words                                                                      // 12968
	    function exchangeLR(offset, mask) {                                                                               // 12969
	        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;                                                    // 12970
	        this._rBlock ^= t;                                                                                            // 12971
	        this._lBlock ^= t << offset;                                                                                  // 12972
	    }                                                                                                                 // 12973
                                                                                                                       // 12974
	    function exchangeRL(offset, mask) {                                                                               // 12975
	        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;                                                    // 12976
	        this._lBlock ^= t;                                                                                            // 12977
	        this._rBlock ^= t << offset;                                                                                  // 12978
	    }                                                                                                                 // 12979
                                                                                                                       // 12980
	    /**                                                                                                               // 12981
	     * Shortcut functions to the cipher's object interface.                                                           // 12982
	     *                                                                                                                // 12983
	     * @example                                                                                                       // 12984
	     *                                                                                                                // 12985
	     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);                                                  // 12986
	     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);                                               // 12987
	     */                                                                                                               // 12988
	    C.DES = BlockCipher._createHelper(DES);                                                                           // 12989
                                                                                                                       // 12990
	    /**                                                                                                               // 12991
	     * Triple-DES block cipher algorithm.                                                                             // 12992
	     */                                                                                                               // 12993
	    var TripleDES = C_algo.TripleDES = BlockCipher.extend({                                                           // 12994
	        _doReset: function () {                                                                                       // 12995
	            // Shortcuts                                                                                              // 12996
	            var key = this._key;                                                                                      // 12997
	            var keyWords = key.words;                                                                                 // 12998
                                                                                                                       // 12999
	            // Create DES instances                                                                                   // 13000
	            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));                                 // 13001
	            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));                                 // 13002
	            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));                                 // 13003
	        },                                                                                                            // 13004
                                                                                                                       // 13005
	        encryptBlock: function (M, offset) {                                                                          // 13006
	            this._des1.encryptBlock(M, offset);                                                                       // 13007
	            this._des2.decryptBlock(M, offset);                                                                       // 13008
	            this._des3.encryptBlock(M, offset);                                                                       // 13009
	        },                                                                                                            // 13010
                                                                                                                       // 13011
	        decryptBlock: function (M, offset) {                                                                          // 13012
	            this._des3.decryptBlock(M, offset);                                                                       // 13013
	            this._des2.encryptBlock(M, offset);                                                                       // 13014
	            this._des1.decryptBlock(M, offset);                                                                       // 13015
	        },                                                                                                            // 13016
                                                                                                                       // 13017
	        keySize: 192/32,                                                                                              // 13018
                                                                                                                       // 13019
	        ivSize: 64/32,                                                                                                // 13020
                                                                                                                       // 13021
	        blockSize: 64/32                                                                                              // 13022
	    });                                                                                                               // 13023
                                                                                                                       // 13024
	    /**                                                                                                               // 13025
	     * Shortcut functions to the cipher's object interface.                                                           // 13026
	     *                                                                                                                // 13027
	     * @example                                                                                                       // 13028
	     *                                                                                                                // 13029
	     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);                                            // 13030
	     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);                                         // 13031
	     */                                                                                                               // 13032
	    C.TripleDES = BlockCipher._createHelper(TripleDES);                                                               // 13033
	}());                                                                                                                 // 13034
                                                                                                                       // 13035
                                                                                                                       // 13036
	return CryptoJS.TripleDES;                                                                                            // 13037
                                                                                                                       // 13038
}));                                                                                                                   // 13039
},{"./cipher-core":51,"./core":52,"./enc-base64":53,"./evpkdf":55,"./md5":60}],83:[function(require,module,exports){   // 13040
;(function (root, factory) {                                                                                           // 13041
	if (typeof exports === "object") {                                                                                    // 13042
		// CommonJS                                                                                                          // 13043
		module.exports = exports = factory(require("./core"));                                                               // 13044
	}                                                                                                                     // 13045
	else if (typeof define === "function" && define.amd) {                                                                // 13046
		// AMD                                                                                                               // 13047
		define(["./core"], factory);                                                                                         // 13048
	}                                                                                                                     // 13049
	else {                                                                                                                // 13050
		// Global (browser)                                                                                                  // 13051
		factory(root.CryptoJS);                                                                                              // 13052
	}                                                                                                                     // 13053
}(this, function (CryptoJS) {                                                                                          // 13054
                                                                                                                       // 13055
	(function (undefined) {                                                                                               // 13056
	    // Shortcuts                                                                                                      // 13057
	    var C = CryptoJS;                                                                                                 // 13058
	    var C_lib = C.lib;                                                                                                // 13059
	    var Base = C_lib.Base;                                                                                            // 13060
	    var X32WordArray = C_lib.WordArray;                                                                               // 13061
                                                                                                                       // 13062
	    /**                                                                                                               // 13063
	     * x64 namespace.                                                                                                 // 13064
	     */                                                                                                               // 13065
	    var C_x64 = C.x64 = {};                                                                                           // 13066
                                                                                                                       // 13067
	    /**                                                                                                               // 13068
	     * A 64-bit word.                                                                                                 // 13069
	     */                                                                                                               // 13070
	    var X64Word = C_x64.Word = Base.extend({                                                                          // 13071
	        /**                                                                                                           // 13072
	         * Initializes a newly created 64-bit word.                                                                   // 13073
	         *                                                                                                            // 13074
	         * @param {number} high The high 32 bits.                                                                     // 13075
	         * @param {number} low The low 32 bits.                                                                       // 13076
	         *                                                                                                            // 13077
	         * @example                                                                                                   // 13078
	         *                                                                                                            // 13079
	         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);                                        // 13080
	         */                                                                                                           // 13081
	        init: function (high, low) {                                                                                  // 13082
	            this.high = high;                                                                                         // 13083
	            this.low = low;                                                                                           // 13084
	        }                                                                                                             // 13085
                                                                                                                       // 13086
	        /**                                                                                                           // 13087
	         * Bitwise NOTs this word.                                                                                    // 13088
	         *                                                                                                            // 13089
	         * @return {X64Word} A new x64-Word object after negating.                                                    // 13090
	         *                                                                                                            // 13091
	         * @example                                                                                                   // 13092
	         *                                                                                                            // 13093
	         *     var negated = x64Word.not();                                                                           // 13094
	         */                                                                                                           // 13095
	        // not: function () {                                                                                         // 13096
	            // var high = ~this.high;                                                                                 // 13097
	            // var low = ~this.low;                                                                                   // 13098
                                                                                                                       // 13099
	            // return X64Word.create(high, low);                                                                      // 13100
	        // },                                                                                                         // 13101
                                                                                                                       // 13102
	        /**                                                                                                           // 13103
	         * Bitwise ANDs this word with the passed word.                                                               // 13104
	         *                                                                                                            // 13105
	         * @param {X64Word} word The x64-Word to AND with this word.                                                  // 13106
	         *                                                                                                            // 13107
	         * @return {X64Word} A new x64-Word object after ANDing.                                                      // 13108
	         *                                                                                                            // 13109
	         * @example                                                                                                   // 13110
	         *                                                                                                            // 13111
	         *     var anded = x64Word.and(anotherX64Word);                                                               // 13112
	         */                                                                                                           // 13113
	        // and: function (word) {                                                                                     // 13114
	            // var high = this.high & word.high;                                                                      // 13115
	            // var low = this.low & word.low;                                                                         // 13116
                                                                                                                       // 13117
	            // return X64Word.create(high, low);                                                                      // 13118
	        // },                                                                                                         // 13119
                                                                                                                       // 13120
	        /**                                                                                                           // 13121
	         * Bitwise ORs this word with the passed word.                                                                // 13122
	         *                                                                                                            // 13123
	         * @param {X64Word} word The x64-Word to OR with this word.                                                   // 13124
	         *                                                                                                            // 13125
	         * @return {X64Word} A new x64-Word object after ORing.                                                       // 13126
	         *                                                                                                            // 13127
	         * @example                                                                                                   // 13128
	         *                                                                                                            // 13129
	         *     var ored = x64Word.or(anotherX64Word);                                                                 // 13130
	         */                                                                                                           // 13131
	        // or: function (word) {                                                                                      // 13132
	            // var high = this.high | word.high;                                                                      // 13133
	            // var low = this.low | word.low;                                                                         // 13134
                                                                                                                       // 13135
	            // return X64Word.create(high, low);                                                                      // 13136
	        // },                                                                                                         // 13137
                                                                                                                       // 13138
	        /**                                                                                                           // 13139
	         * Bitwise XORs this word with the passed word.                                                               // 13140
	         *                                                                                                            // 13141
	         * @param {X64Word} word The x64-Word to XOR with this word.                                                  // 13142
	         *                                                                                                            // 13143
	         * @return {X64Word} A new x64-Word object after XORing.                                                      // 13144
	         *                                                                                                            // 13145
	         * @example                                                                                                   // 13146
	         *                                                                                                            // 13147
	         *     var xored = x64Word.xor(anotherX64Word);                                                               // 13148
	         */                                                                                                           // 13149
	        // xor: function (word) {                                                                                     // 13150
	            // var high = this.high ^ word.high;                                                                      // 13151
	            // var low = this.low ^ word.low;                                                                         // 13152
                                                                                                                       // 13153
	            // return X64Word.create(high, low);                                                                      // 13154
	        // },                                                                                                         // 13155
                                                                                                                       // 13156
	        /**                                                                                                           // 13157
	         * Shifts this word n bits to the left.                                                                       // 13158
	         *                                                                                                            // 13159
	         * @param {number} n The number of bits to shift.                                                             // 13160
	         *                                                                                                            // 13161
	         * @return {X64Word} A new x64-Word object after shifting.                                                    // 13162
	         *                                                                                                            // 13163
	         * @example                                                                                                   // 13164
	         *                                                                                                            // 13165
	         *     var shifted = x64Word.shiftL(25);                                                                      // 13166
	         */                                                                                                           // 13167
	        // shiftL: function (n) {                                                                                     // 13168
	            // if (n < 32) {                                                                                          // 13169
	                // var high = (this.high << n) | (this.low >>> (32 - n));                                             // 13170
	                // var low = this.low << n;                                                                           // 13171
	            // } else {                                                                                               // 13172
	                // var high = this.low << (n - 32);                                                                   // 13173
	                // var low = 0;                                                                                       // 13174
	            // }                                                                                                      // 13175
                                                                                                                       // 13176
	            // return X64Word.create(high, low);                                                                      // 13177
	        // },                                                                                                         // 13178
                                                                                                                       // 13179
	        /**                                                                                                           // 13180
	         * Shifts this word n bits to the right.                                                                      // 13181
	         *                                                                                                            // 13182
	         * @param {number} n The number of bits to shift.                                                             // 13183
	         *                                                                                                            // 13184
	         * @return {X64Word} A new x64-Word object after shifting.                                                    // 13185
	         *                                                                                                            // 13186
	         * @example                                                                                                   // 13187
	         *                                                                                                            // 13188
	         *     var shifted = x64Word.shiftR(7);                                                                       // 13189
	         */                                                                                                           // 13190
	        // shiftR: function (n) {                                                                                     // 13191
	            // if (n < 32) {                                                                                          // 13192
	                // var low = (this.low >>> n) | (this.high << (32 - n));                                              // 13193
	                // var high = this.high >>> n;                                                                        // 13194
	            // } else {                                                                                               // 13195
	                // var low = this.high >>> (n - 32);                                                                  // 13196
	                // var high = 0;                                                                                      // 13197
	            // }                                                                                                      // 13198
                                                                                                                       // 13199
	            // return X64Word.create(high, low);                                                                      // 13200
	        // },                                                                                                         // 13201
                                                                                                                       // 13202
	        /**                                                                                                           // 13203
	         * Rotates this word n bits to the left.                                                                      // 13204
	         *                                                                                                            // 13205
	         * @param {number} n The number of bits to rotate.                                                            // 13206
	         *                                                                                                            // 13207
	         * @return {X64Word} A new x64-Word object after rotating.                                                    // 13208
	         *                                                                                                            // 13209
	         * @example                                                                                                   // 13210
	         *                                                                                                            // 13211
	         *     var rotated = x64Word.rotL(25);                                                                        // 13212
	         */                                                                                                           // 13213
	        // rotL: function (n) {                                                                                       // 13214
	            // return this.shiftL(n).or(this.shiftR(64 - n));                                                         // 13215
	        // },                                                                                                         // 13216
                                                                                                                       // 13217
	        /**                                                                                                           // 13218
	         * Rotates this word n bits to the right.                                                                     // 13219
	         *                                                                                                            // 13220
	         * @param {number} n The number of bits to rotate.                                                            // 13221
	         *                                                                                                            // 13222
	         * @return {X64Word} A new x64-Word object after rotating.                                                    // 13223
	         *                                                                                                            // 13224
	         * @example                                                                                                   // 13225
	         *                                                                                                            // 13226
	         *     var rotated = x64Word.rotR(7);                                                                         // 13227
	         */                                                                                                           // 13228
	        // rotR: function (n) {                                                                                       // 13229
	            // return this.shiftR(n).or(this.shiftL(64 - n));                                                         // 13230
	        // },                                                                                                         // 13231
                                                                                                                       // 13232
	        /**                                                                                                           // 13233
	         * Adds this word with the passed word.                                                                       // 13234
	         *                                                                                                            // 13235
	         * @param {X64Word} word The x64-Word to add with this word.                                                  // 13236
	         *                                                                                                            // 13237
	         * @return {X64Word} A new x64-Word object after adding.                                                      // 13238
	         *                                                                                                            // 13239
	         * @example                                                                                                   // 13240
	         *                                                                                                            // 13241
	         *     var added = x64Word.add(anotherX64Word);                                                               // 13242
	         */                                                                                                           // 13243
	        // add: function (word) {                                                                                     // 13244
	            // var low = (this.low + word.low) | 0;                                                                   // 13245
	            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;                                                    // 13246
	            // var high = (this.high + word.high + carry) | 0;                                                        // 13247
                                                                                                                       // 13248
	            // return X64Word.create(high, low);                                                                      // 13249
	        // }                                                                                                          // 13250
	    });                                                                                                               // 13251
                                                                                                                       // 13252
	    /**                                                                                                               // 13253
	     * An array of 64-bit words.                                                                                      // 13254
	     *                                                                                                                // 13255
	     * @property {Array} words The array of CryptoJS.x64.Word objects.                                                // 13256
	     * @property {number} sigBytes The number of significant bytes in this word array.                                // 13257
	     */                                                                                                               // 13258
	    var X64WordArray = C_x64.WordArray = Base.extend({                                                                // 13259
	        /**                                                                                                           // 13260
	         * Initializes a newly created word array.                                                                    // 13261
	         *                                                                                                            // 13262
	         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.                                     // 13263
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.                          // 13264
	         *                                                                                                            // 13265
	         * @example                                                                                                   // 13266
	         *                                                                                                            // 13267
	         *     var wordArray = CryptoJS.x64.WordArray.create();                                                       // 13268
	         *                                                                                                            // 13269
	         *     var wordArray = CryptoJS.x64.WordArray.create([                                                        // 13270
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),                                                  // 13271
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)                                                   // 13272
	         *     ]);                                                                                                    // 13273
	         *                                                                                                            // 13274
	         *     var wordArray = CryptoJS.x64.WordArray.create([                                                        // 13275
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),                                                  // 13276
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)                                                   // 13277
	         *     ], 10);                                                                                                // 13278
	         */                                                                                                           // 13279
	        init: function (words, sigBytes) {                                                                            // 13280
	            words = this.words = words || [];                                                                         // 13281
                                                                                                                       // 13282
	            if (sigBytes != undefined) {                                                                              // 13283
	                this.sigBytes = sigBytes;                                                                             // 13284
	            } else {                                                                                                  // 13285
	                this.sigBytes = words.length * 8;                                                                     // 13286
	            }                                                                                                         // 13287
	        },                                                                                                            // 13288
                                                                                                                       // 13289
	        /**                                                                                                           // 13290
	         * Converts this 64-bit word array to a 32-bit word array.                                                    // 13291
	         *                                                                                                            // 13292
	         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.                            // 13293
	         *                                                                                                            // 13294
	         * @example                                                                                                   // 13295
	         *                                                                                                            // 13296
	         *     var x32WordArray = x64WordArray.toX32();                                                               // 13297
	         */                                                                                                           // 13298
	        toX32: function () {                                                                                          // 13299
	            // Shortcuts                                                                                              // 13300
	            var x64Words = this.words;                                                                                // 13301
	            var x64WordsLength = x64Words.length;                                                                     // 13302
                                                                                                                       // 13303
	            // Convert                                                                                                // 13304
	            var x32Words = [];                                                                                        // 13305
	            for (var i = 0; i < x64WordsLength; i++) {                                                                // 13306
	                var x64Word = x64Words[i];                                                                            // 13307
	                x32Words.push(x64Word.high);                                                                          // 13308
	                x32Words.push(x64Word.low);                                                                           // 13309
	            }                                                                                                         // 13310
                                                                                                                       // 13311
	            return X32WordArray.create(x32Words, this.sigBytes);                                                      // 13312
	        },                                                                                                            // 13313
                                                                                                                       // 13314
	        /**                                                                                                           // 13315
	         * Creates a copy of this word array.                                                                         // 13316
	         *                                                                                                            // 13317
	         * @return {X64WordArray} The clone.                                                                          // 13318
	         *                                                                                                            // 13319
	         * @example                                                                                                   // 13320
	         *                                                                                                            // 13321
	         *     var clone = x64WordArray.clone();                                                                      // 13322
	         */                                                                                                           // 13323
	        clone: function () {                                                                                          // 13324
	            var clone = Base.clone.call(this);                                                                        // 13325
                                                                                                                       // 13326
	            // Clone "words" array                                                                                    // 13327
	            var words = clone.words = this.words.slice(0);                                                            // 13328
                                                                                                                       // 13329
	            // Clone each X64Word object                                                                              // 13330
	            var wordsLength = words.length;                                                                           // 13331
	            for (var i = 0; i < wordsLength; i++) {                                                                   // 13332
	                words[i] = words[i].clone();                                                                          // 13333
	            }                                                                                                         // 13334
                                                                                                                       // 13335
	            return clone;                                                                                             // 13336
	        }                                                                                                             // 13337
	    });                                                                                                               // 13338
	}());                                                                                                                 // 13339
                                                                                                                       // 13340
                                                                                                                       // 13341
	return CryptoJS;                                                                                                      // 13342
                                                                                                                       // 13343
}));                                                                                                                   // 13344
},{"./core":52}],84:[function(require,module,exports){                                                                 // 13345
/*! https://mths.be/utf8js v2.1.2 by @mathias */                                                                       // 13346
;(function(root) {                                                                                                     // 13347
                                                                                                                       // 13348
	// Detect free variables `exports`                                                                                    // 13349
	var freeExports = typeof exports == 'object' && exports;                                                              // 13350
                                                                                                                       // 13351
	// Detect free variable `module`                                                                                      // 13352
	var freeModule = typeof module == 'object' && module &&                                                               // 13353
		module.exports == freeExports && module;                                                                             // 13354
                                                                                                                       // 13355
	// Detect free variable `global`, from Node.js or Browserified code,                                                  // 13356
	// and use it as `root`                                                                                               // 13357
	var freeGlobal = typeof global == 'object' && global;                                                                 // 13358
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {                                           // 13359
		root = freeGlobal;                                                                                                   // 13360
	}                                                                                                                     // 13361
                                                                                                                       // 13362
	/*--------------------------------------------------------------------------*/                                        // 13363
                                                                                                                       // 13364
	var stringFromCharCode = String.fromCharCode;                                                                         // 13365
                                                                                                                       // 13366
	// Taken from https://mths.be/punycode                                                                                // 13367
	function ucs2decode(string) {                                                                                         // 13368
		var output = [];                                                                                                     // 13369
		var counter = 0;                                                                                                     // 13370
		var length = string.length;                                                                                          // 13371
		var value;                                                                                                           // 13372
		var extra;                                                                                                           // 13373
		while (counter < length) {                                                                                           // 13374
			value = string.charCodeAt(counter++);                                                                               // 13375
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {                                                       // 13376
				// high surrogate, and there is a next character                                                                   // 13377
				extra = string.charCodeAt(counter++);                                                                              // 13378
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate                                                                 // 13379
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);                                                 // 13380
				} else {                                                                                                           // 13381
					// unmatched surrogate; only append this code unit, in case the next                                              // 13382
					// code unit is the high surrogate of a surrogate pair                                                            // 13383
					output.push(value);                                                                                               // 13384
					counter--;                                                                                                        // 13385
				}                                                                                                                  // 13386
			} else {                                                                                                            // 13387
				output.push(value);                                                                                                // 13388
			}                                                                                                                   // 13389
		}                                                                                                                    // 13390
		return output;                                                                                                       // 13391
	}                                                                                                                     // 13392
                                                                                                                       // 13393
	// Taken from https://mths.be/punycode                                                                                // 13394
	function ucs2encode(array) {                                                                                          // 13395
		var length = array.length;                                                                                           // 13396
		var index = -1;                                                                                                      // 13397
		var value;                                                                                                           // 13398
		var output = '';                                                                                                     // 13399
		while (++index < length) {                                                                                           // 13400
			value = array[index];                                                                                               // 13401
			if (value > 0xFFFF) {                                                                                               // 13402
				value -= 0x10000;                                                                                                  // 13403
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);                                                       // 13404
				value = 0xDC00 | value & 0x3FF;                                                                                    // 13405
			}                                                                                                                   // 13406
			output += stringFromCharCode(value);                                                                                // 13407
		}                                                                                                                    // 13408
		return output;                                                                                                       // 13409
	}                                                                                                                     // 13410
                                                                                                                       // 13411
	function checkScalarValue(codePoint) {                                                                                // 13412
		if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {                                                                    // 13413
			throw Error(                                                                                                        // 13414
				'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +                                                       // 13415
				' is not a scalar value'                                                                                           // 13416
			);                                                                                                                  // 13417
		}                                                                                                                    // 13418
	}                                                                                                                     // 13419
	/*--------------------------------------------------------------------------*/                                        // 13420
                                                                                                                       // 13421
	function createByte(codePoint, shift) {                                                                               // 13422
		return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);                                                     // 13423
	}                                                                                                                     // 13424
                                                                                                                       // 13425
	function encodeCodePoint(codePoint) {                                                                                 // 13426
		if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence                                                              // 13427
			return stringFromCharCode(codePoint);                                                                               // 13428
		}                                                                                                                    // 13429
		var symbol = '';                                                                                                     // 13430
		if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence                                                              // 13431
			symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);                                                      // 13432
		}                                                                                                                    // 13433
		else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence                                                         // 13434
			checkScalarValue(codePoint);                                                                                        // 13435
			symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);                                                     // 13436
			symbol += createByte(codePoint, 6);                                                                                 // 13437
		}                                                                                                                    // 13438
		else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence                                                         // 13439
			symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);                                                     // 13440
			symbol += createByte(codePoint, 12);                                                                                // 13441
			symbol += createByte(codePoint, 6);                                                                                 // 13442
		}                                                                                                                    // 13443
		symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);                                                             // 13444
		return symbol;                                                                                                       // 13445
	}                                                                                                                     // 13446
                                                                                                                       // 13447
	function utf8encode(string) {                                                                                         // 13448
		var codePoints = ucs2decode(string);                                                                                 // 13449
		var length = codePoints.length;                                                                                      // 13450
		var index = -1;                                                                                                      // 13451
		var codePoint;                                                                                                       // 13452
		var byteString = '';                                                                                                 // 13453
		while (++index < length) {                                                                                           // 13454
			codePoint = codePoints[index];                                                                                      // 13455
			byteString += encodeCodePoint(codePoint);                                                                           // 13456
		}                                                                                                                    // 13457
		return byteString;                                                                                                   // 13458
	}                                                                                                                     // 13459
                                                                                                                       // 13460
	/*--------------------------------------------------------------------------*/                                        // 13461
                                                                                                                       // 13462
	function readContinuationByte() {                                                                                     // 13463
		if (byteIndex >= byteCount) {                                                                                        // 13464
			throw Error('Invalid byte index');                                                                                  // 13465
		}                                                                                                                    // 13466
                                                                                                                       // 13467
		var continuationByte = byteArray[byteIndex] & 0xFF;                                                                  // 13468
		byteIndex++;                                                                                                         // 13469
                                                                                                                       // 13470
		if ((continuationByte & 0xC0) == 0x80) {                                                                             // 13471
			return continuationByte & 0x3F;                                                                                     // 13472
		}                                                                                                                    // 13473
                                                                                                                       // 13474
		// If we end up here, it’s not a continuation byte                                                                   // 13475
		throw Error('Invalid continuation byte');                                                                            // 13476
	}                                                                                                                     // 13477
                                                                                                                       // 13478
	function decodeSymbol() {                                                                                             // 13479
		var byte1;                                                                                                           // 13480
		var byte2;                                                                                                           // 13481
		var byte3;                                                                                                           // 13482
		var byte4;                                                                                                           // 13483
		var codePoint;                                                                                                       // 13484
                                                                                                                       // 13485
		if (byteIndex > byteCount) {                                                                                         // 13486
			throw Error('Invalid byte index');                                                                                  // 13487
		}                                                                                                                    // 13488
                                                                                                                       // 13489
		if (byteIndex == byteCount) {                                                                                        // 13490
			return false;                                                                                                       // 13491
		}                                                                                                                    // 13492
                                                                                                                       // 13493
		// Read first byte                                                                                                   // 13494
		byte1 = byteArray[byteIndex] & 0xFF;                                                                                 // 13495
		byteIndex++;                                                                                                         // 13496
                                                                                                                       // 13497
		// 1-byte sequence (no continuation bytes)                                                                           // 13498
		if ((byte1 & 0x80) == 0) {                                                                                           // 13499
			return byte1;                                                                                                       // 13500
		}                                                                                                                    // 13501
                                                                                                                       // 13502
		// 2-byte sequence                                                                                                   // 13503
		if ((byte1 & 0xE0) == 0xC0) {                                                                                        // 13504
			byte2 = readContinuationByte();                                                                                     // 13505
			codePoint = ((byte1 & 0x1F) << 6) | byte2;                                                                          // 13506
			if (codePoint >= 0x80) {                                                                                            // 13507
				return codePoint;                                                                                                  // 13508
			} else {                                                                                                            // 13509
				throw Error('Invalid continuation byte');                                                                          // 13510
			}                                                                                                                   // 13511
		}                                                                                                                    // 13512
                                                                                                                       // 13513
		// 3-byte sequence (may include unpaired surrogates)                                                                 // 13514
		if ((byte1 & 0xF0) == 0xE0) {                                                                                        // 13515
			byte2 = readContinuationByte();                                                                                     // 13516
			byte3 = readContinuationByte();                                                                                     // 13517
			codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;                                                          // 13518
			if (codePoint >= 0x0800) {                                                                                          // 13519
				checkScalarValue(codePoint);                                                                                       // 13520
				return codePoint;                                                                                                  // 13521
			} else {                                                                                                            // 13522
				throw Error('Invalid continuation byte');                                                                          // 13523
			}                                                                                                                   // 13524
		}                                                                                                                    // 13525
                                                                                                                       // 13526
		// 4-byte sequence                                                                                                   // 13527
		if ((byte1 & 0xF8) == 0xF0) {                                                                                        // 13528
			byte2 = readContinuationByte();                                                                                     // 13529
			byte3 = readContinuationByte();                                                                                     // 13530
			byte4 = readContinuationByte();                                                                                     // 13531
			codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |                                                            // 13532
				(byte3 << 0x06) | byte4;                                                                                           // 13533
			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {                                                               // 13534
				return codePoint;                                                                                                  // 13535
			}                                                                                                                   // 13536
		}                                                                                                                    // 13537
                                                                                                                       // 13538
		throw Error('Invalid UTF-8 detected');                                                                               // 13539
	}                                                                                                                     // 13540
                                                                                                                       // 13541
	var byteArray;                                                                                                        // 13542
	var byteCount;                                                                                                        // 13543
	var byteIndex;                                                                                                        // 13544
	function utf8decode(byteString) {                                                                                     // 13545
		byteArray = ucs2decode(byteString);                                                                                  // 13546
		byteCount = byteArray.length;                                                                                        // 13547
		byteIndex = 0;                                                                                                       // 13548
		var codePoints = [];                                                                                                 // 13549
		var tmp;                                                                                                             // 13550
		while ((tmp = decodeSymbol()) !== false) {                                                                           // 13551
			codePoints.push(tmp);                                                                                               // 13552
		}                                                                                                                    // 13553
		return ucs2encode(codePoints);                                                                                       // 13554
	}                                                                                                                     // 13555
                                                                                                                       // 13556
	/*--------------------------------------------------------------------------*/                                        // 13557
                                                                                                                       // 13558
	var utf8 = {                                                                                                          // 13559
		'version': '2.1.2',                                                                                                  // 13560
		'encode': utf8encode,                                                                                                // 13561
		'decode': utf8decode                                                                                                 // 13562
	};                                                                                                                    // 13563
                                                                                                                       // 13564
	// Some AMD build optimizers, like r.js, check for specific condition patterns                                        // 13565
	// like the following:                                                                                                // 13566
	if (                                                                                                                  // 13567
		typeof define == 'function' &&                                                                                       // 13568
		typeof define.amd == 'object' &&                                                                                     // 13569
		define.amd                                                                                                           // 13570
	) {                                                                                                                   // 13571
		define(function() {                                                                                                  // 13572
			return utf8;                                                                                                        // 13573
		});                                                                                                                  // 13574
	}	else if (freeExports && !freeExports.nodeType) {                                                                    // 13575
		if (freeModule) { // in Node.js or RingoJS v0.8.0+                                                                   // 13576
			freeModule.exports = utf8;                                                                                          // 13577
		} else { // in Narwhal or RingoJS v0.7.0-                                                                            // 13578
			var object = {};                                                                                                    // 13579
			var hasOwnProperty = object.hasOwnProperty;                                                                         // 13580
			for (var key in utf8) {                                                                                             // 13581
				hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);                                                  // 13582
			}                                                                                                                   // 13583
		}                                                                                                                    // 13584
	} else { // in Rhino or a web browser                                                                                 // 13585
		root.utf8 = utf8;                                                                                                    // 13586
	}                                                                                                                     // 13587
                                                                                                                       // 13588
}(this));                                                                                                              // 13589
                                                                                                                       // 13590
},{}],85:[function(require,module,exports){                                                                            // 13591
module.exports = XMLHttpRequest;                                                                                       // 13592
                                                                                                                       // 13593
},{}],"bignumber.js":[function(require,module,exports){                                                                // 13594
/*! bignumber.js v4.0.0 https://github.com/MikeMcl/bignumber.js/LICENCE */                                             // 13595
                                                                                                                       // 13596
;(function (globalObj) {                                                                                               // 13597
    'use strict';                                                                                                      // 13598
                                                                                                                       // 13599
    /*                                                                                                                 // 13600
      bignumber.js v4.0.0                                                                                              // 13601
      A JavaScript library for arbitrary-precision arithmetic.                                                         // 13602
      https://github.com/MikeMcl/bignumber.js                                                                          // 13603
      Copyright (c) 2017 Michael Mclaughlin <M8ch88l@gmail.com>                                                        // 13604
      MIT Expat Licence                                                                                                // 13605
    */                                                                                                                 // 13606
                                                                                                                       // 13607
                                                                                                                       // 13608
    var BigNumber,                                                                                                     // 13609
        isNumeric = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,                                                            // 13610
        mathceil = Math.ceil,                                                                                          // 13611
        mathfloor = Math.floor,                                                                                        // 13612
        notBool = ' not a boolean or binary digit',                                                                    // 13613
        roundingMode = 'rounding mode',                                                                                // 13614
        tooManyDigits = 'number type has more than 15 significant digits',                                             // 13615
        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',                                 // 13616
        BASE = 1e14,                                                                                                   // 13617
        LOG_BASE = 14,                                                                                                 // 13618
        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1                                                       // 13619
        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1                                                       // 13620
        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],                            // 13621
        SQRT_BASE = 1e7,                                                                                               // 13622
                                                                                                                       // 13623
        /*                                                                                                             // 13624
         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and                     // 13625
         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an                         // 13626
         * exception is thrown (if ERRORS is true).                                                                    // 13627
         */                                                                                                            // 13628
        MAX = 1E9;                                   // 0 to MAX_INT32                                                 // 13629
                                                                                                                       // 13630
                                                                                                                       // 13631
    /*                                                                                                                 // 13632
     * Create and return a BigNumber constructor.                                                                      // 13633
     */                                                                                                                // 13634
    function constructorFactory(config) {                                                                              // 13635
        var div, parseNumeric,                                                                                         // 13636
                                                                                                                       // 13637
            // id tracks the caller function, so its name can be included in error messages.                           // 13638
            id = 0,                                                                                                    // 13639
            P = BigNumber.prototype,                                                                                   // 13640
            ONE = new BigNumber(1),                                                                                    // 13641
                                                                                                                       // 13642
                                                                                                                       // 13643
            /********************************* EDITABLE DEFAULTS **********************************/                   // 13644
                                                                                                                       // 13645
                                                                                                                       // 13646
            /*                                                                                                         // 13647
             * The default values below must be integers within the inclusive ranges stated.                           // 13648
             * The values can also be changed at run-time using BigNumber.config.                                      // 13649
             */                                                                                                        // 13650
                                                                                                                       // 13651
            // The maximum number of decimal places for operations involving division.                                 // 13652
            DECIMAL_PLACES = 20,                     // 0 to MAX                                                       // 13653
                                                                                                                       // 13654
            /*                                                                                                         // 13655
             * The rounding mode used when rounding to the above decimal places, and when using                        // 13656
             * toExponential, toFixed, toFormat and toPrecision, and round (default value).                            // 13657
             * UP         0 Away from zero.                                                                            // 13658
             * DOWN       1 Towards zero.                                                                              // 13659
             * CEIL       2 Towards +Infinity.                                                                         // 13660
             * FLOOR      3 Towards -Infinity.                                                                         // 13661
             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.                                             // 13662
             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.                                           // 13663
             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.                         // 13664
             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.                              // 13665
             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.                              // 13666
             */                                                                                                        // 13667
            ROUNDING_MODE = 4,                       // 0 to 8                                                         // 13668
                                                                                                                       // 13669
            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]                                                              // 13670
                                                                                                                       // 13671
            // The exponent value at and beneath which toString returns exponential notation.                          // 13672
            // Number type: -7                                                                                         // 13673
            TO_EXP_NEG = -7,                         // 0 to -MAX                                                      // 13674
                                                                                                                       // 13675
            // The exponent value at and above which toString returns exponential notation.                            // 13676
            // Number type: 21                                                                                         // 13677
            TO_EXP_POS = 21,                         // 0 to MAX                                                       // 13678
                                                                                                                       // 13679
            // RANGE : [MIN_EXP, MAX_EXP]                                                                              // 13680
                                                                                                                       // 13681
            // The minimum exponent value, beneath which underflow to zero occurs.                                     // 13682
            // Number type: -324  (5e-324)                                                                             // 13683
            MIN_EXP = -1e7,                          // -1 to -MAX                                                     // 13684
                                                                                                                       // 13685
            // The maximum exponent value, above which overflow to Infinity occurs.                                    // 13686
            // Number type:  308  (1.7976931348623157e+308)                                                            // 13687
            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.                               // 13688
            MAX_EXP = 1e7,                           // 1 to MAX                                                       // 13689
                                                                                                                       // 13690
            // Whether BigNumber Errors are ever thrown.                                                               // 13691
            ERRORS = true,                           // true or false                                                  // 13692
                                                                                                                       // 13693
            // Change to intValidatorNoErrors if ERRORS is false.                                                      // 13694
            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors                    // 13695
                                                                                                                       // 13696
            // Whether to use cryptographically-secure random number generation, if available.                         // 13697
            CRYPTO = false,                          // true or false                                                  // 13698
                                                                                                                       // 13699
            /*                                                                                                         // 13700
             * The modulo mode used when calculating the modulus: a mod n.                                             // 13701
             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.                    // 13702
             * The remainder (r) is calculated as: r = a - n * q.                                                      // 13703
             *                                                                                                         // 13704
             * UP        0 The remainder is positive if the dividend is negative, else is negative.                    // 13705
             * DOWN      1 The remainder has the same sign as the dividend.                                            // 13706
             *             This modulo mode is commonly known as 'truncated division' and is                           // 13707
             *             equivalent to (a % n) in JavaScript.                                                        // 13708
             * FLOOR     3 The remainder has the same sign as the divisor (Python %).                                  // 13709
             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.                                // 13710
             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).                                        // 13711
             *             The remainder is always positive.                                                           // 13712
             *                                                                                                         // 13713
             * The truncated division, floored division, Euclidian division and IEEE 754 remainder                     // 13714
             * modes are commonly used for the modulus operation.                                                      // 13715
             * Although the other rounding modes can also be used, they may not give useful results.                   // 13716
             */                                                                                                        // 13717
            MODULO_MODE = 1,                         // 0 to 9                                                         // 13718
                                                                                                                       // 13719
            // The maximum number of significant digits of the result of the toPower operation.                        // 13720
            // If POW_PRECISION is 0, there will be unlimited significant digits.                                      // 13721
            POW_PRECISION = 0,                       // 0 to MAX                                                       // 13722
                                                                                                                       // 13723
            // The format specification used by the BigNumber.prototype.toFormat method.                               // 13724
            FORMAT = {                                                                                                 // 13725
                decimalSeparator: '.',                                                                                 // 13726
                groupSeparator: ',',                                                                                   // 13727
                groupSize: 3,                                                                                          // 13728
                secondaryGroupSize: 0,                                                                                 // 13729
                fractionGroupSeparator: '\xA0',      // non-breaking space                                             // 13730
                fractionGroupSize: 0                                                                                   // 13731
            };                                                                                                         // 13732
                                                                                                                       // 13733
                                                                                                                       // 13734
        /******************************************************************************************/                   // 13735
                                                                                                                       // 13736
                                                                                                                       // 13737
        // CONSTRUCTOR                                                                                                 // 13738
                                                                                                                       // 13739
                                                                                                                       // 13740
        /*                                                                                                             // 13741
         * The BigNumber constructor and exported function.                                                            // 13742
         * Create and return a new instance of a BigNumber object.                                                     // 13743
         *                                                                                                             // 13744
         * n {number|string|BigNumber} A numeric value.                                                                // 13745
         * [b] {number} The base of n. Integer, 2 to 64 inclusive.                                                     // 13746
         */                                                                                                            // 13747
        function BigNumber( n, b ) {                                                                                   // 13748
            var c, e, i, num, len, str,                                                                                // 13749
                x = this;                                                                                              // 13750
                                                                                                                       // 13751
            // Enable constructor usage without new.                                                                   // 13752
            if ( !( x instanceof BigNumber ) ) {                                                                       // 13753
                                                                                                                       // 13754
                // 'BigNumber() constructor call without new: {n}'                                                     // 13755
                if (ERRORS) raise( 26, 'constructor call without new', n );                                            // 13756
                return new BigNumber( n, b );                                                                          // 13757
            }                                                                                                          // 13758
                                                                                                                       // 13759
            // 'new BigNumber() base not an integer: {b}'                                                              // 13760
            // 'new BigNumber() base out of range: {b}'                                                                // 13761
            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {                                                  // 13762
                                                                                                                       // 13763
                // Duplicate.                                                                                          // 13764
                if ( n instanceof BigNumber ) {                                                                        // 13765
                    x.s = n.s;                                                                                         // 13766
                    x.e = n.e;                                                                                         // 13767
                    x.c = ( n = n.c ) ? n.slice() : n;                                                                 // 13768
                    id = 0;                                                                                            // 13769
                    return;                                                                                            // 13770
                }                                                                                                      // 13771
                                                                                                                       // 13772
                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {                                                  // 13773
                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;                                                              // 13774
                                                                                                                       // 13775
                    // Fast path for integers.                                                                         // 13776
                    if ( n === ~~n ) {                                                                                 // 13777
                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );                                                   // 13778
                        x.e = e;                                                                                       // 13779
                        x.c = [n];                                                                                     // 13780
                        id = 0;                                                                                        // 13781
                        return;                                                                                        // 13782
                    }                                                                                                  // 13783
                                                                                                                       // 13784
                    str = n + '';                                                                                      // 13785
                } else {                                                                                               // 13786
                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );                         // 13787
                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;                                   // 13788
                }                                                                                                      // 13789
            } else {                                                                                                   // 13790
                b = b | 0;                                                                                             // 13791
                str = n + '';                                                                                          // 13792
                                                                                                                       // 13793
                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.                               // 13794
                // Allow exponential notation to be used with base 10 argument.                                        // 13795
                if ( b == 10 ) {                                                                                       // 13796
                    x = new BigNumber( n instanceof BigNumber ? n : str );                                             // 13797
                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );                                        // 13798
                }                                                                                                      // 13799
                                                                                                                       // 13800
                // Avoid potential interpretation of Infinity and NaN as base 44+ values.                              // 13801
                // Any number in exponential form will fail due to the [Ee][+-].                                       // 13802
                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||                                                   // 13803
                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +                                 // 13804
                    '(?:\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {                                           // 13805
                    return parseNumeric( x, str, num, b );                                                             // 13806
                }                                                                                                      // 13807
                                                                                                                       // 13808
                if (num) {                                                                                             // 13809
                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;                                                  // 13810
                                                                                                                       // 13811
                    if ( ERRORS && str.replace( /^0\.0*|\./, '' ).length > 15 ) {                                      // 13812
                                                                                                                       // 13813
                        // 'new BigNumber() number type has more than 15 significant digits: {n}'                      // 13814
                        raise( id, tooManyDigits, n );                                                                 // 13815
                    }                                                                                                  // 13816
                                                                                                                       // 13817
                    // Prevent later check for length on converted number.                                             // 13818
                    num = false;                                                                                       // 13819
                } else {                                                                                               // 13820
                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;                                   // 13821
                }                                                                                                      // 13822
                                                                                                                       // 13823
                str = convertBase( str, 10, b, x.s );                                                                  // 13824
            }                                                                                                          // 13825
                                                                                                                       // 13826
            // Decimal point?                                                                                          // 13827
            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );                                         // 13828
                                                                                                                       // 13829
            // Exponential form?                                                                                       // 13830
            if ( ( i = str.search( /e/i ) ) > 0 ) {                                                                    // 13831
                                                                                                                       // 13832
                // Determine exponent.                                                                                 // 13833
                if ( e < 0 ) e = i;                                                                                    // 13834
                e += +str.slice( i + 1 );                                                                              // 13835
                str = str.substring( 0, i );                                                                           // 13836
            } else if ( e < 0 ) {                                                                                      // 13837
                                                                                                                       // 13838
                // Integer.                                                                                            // 13839
                e = str.length;                                                                                        // 13840
            }                                                                                                          // 13841
                                                                                                                       // 13842
            // Determine leading zeros.                                                                                // 13843
            for ( i = 0; str.charCodeAt(i) === 48; i++ );                                                              // 13844
                                                                                                                       // 13845
            // Determine trailing zeros.                                                                               // 13846
            for ( len = str.length; str.charCodeAt(--len) === 48; );                                                   // 13847
            str = str.slice( i, len + 1 );                                                                             // 13848
                                                                                                                       // 13849
            if (str) {                                                                                                 // 13850
                len = str.length;                                                                                      // 13851
                                                                                                                       // 13852
                // Disallow numbers with over 15 significant digits if number type.                                    // 13853
                // 'new BigNumber() number type has more than 15 significant digits: {n}'                              // 13854
                if ( num && ERRORS && len > 15 && ( n > MAX_SAFE_INTEGER || n !== mathfloor(n) ) ) {                   // 13855
                    raise( id, tooManyDigits, x.s * n );                                                               // 13856
                }                                                                                                      // 13857
                                                                                                                       // 13858
                e = e - i - 1;                                                                                         // 13859
                                                                                                                       // 13860
                 // Overflow?                                                                                          // 13861
                if ( e > MAX_EXP ) {                                                                                   // 13862
                                                                                                                       // 13863
                    // Infinity.                                                                                       // 13864
                    x.c = x.e = null;                                                                                  // 13865
                                                                                                                       // 13866
                // Underflow?                                                                                          // 13867
                } else if ( e < MIN_EXP ) {                                                                            // 13868
                                                                                                                       // 13869
                    // Zero.                                                                                           // 13870
                    x.c = [ x.e = 0 ];                                                                                 // 13871
                } else {                                                                                               // 13872
                    x.e = e;                                                                                           // 13873
                    x.c = [];                                                                                          // 13874
                                                                                                                       // 13875
                    // Transform base                                                                                  // 13876
                                                                                                                       // 13877
                    // e is the base 10 exponent.                                                                      // 13878
                    // i is where to slice str to get the first element of the coefficient array.                      // 13879
                    i = ( e + 1 ) % LOG_BASE;                                                                          // 13880
                    if ( e < 0 ) i += LOG_BASE;                                                                        // 13881
                                                                                                                       // 13882
                    if ( i < len ) {                                                                                   // 13883
                        if (i) x.c.push( +str.slice( 0, i ) );                                                         // 13884
                                                                                                                       // 13885
                        for ( len -= LOG_BASE; i < len; ) {                                                            // 13886
                            x.c.push( +str.slice( i, i += LOG_BASE ) );                                                // 13887
                        }                                                                                              // 13888
                                                                                                                       // 13889
                        str = str.slice(i);                                                                            // 13890
                        i = LOG_BASE - str.length;                                                                     // 13891
                    } else {                                                                                           // 13892
                        i -= len;                                                                                      // 13893
                    }                                                                                                  // 13894
                                                                                                                       // 13895
                    for ( ; i--; str += '0' );                                                                         // 13896
                    x.c.push( +str );                                                                                  // 13897
                }                                                                                                      // 13898
            } else {                                                                                                   // 13899
                                                                                                                       // 13900
                // Zero.                                                                                               // 13901
                x.c = [ x.e = 0 ];                                                                                     // 13902
            }                                                                                                          // 13903
                                                                                                                       // 13904
            id = 0;                                                                                                    // 13905
        }                                                                                                              // 13906
                                                                                                                       // 13907
                                                                                                                       // 13908
        // CONSTRUCTOR PROPERTIES                                                                                      // 13909
                                                                                                                       // 13910
                                                                                                                       // 13911
        BigNumber.another = constructorFactory;                                                                        // 13912
                                                                                                                       // 13913
        BigNumber.ROUND_UP = 0;                                                                                        // 13914
        BigNumber.ROUND_DOWN = 1;                                                                                      // 13915
        BigNumber.ROUND_CEIL = 2;                                                                                      // 13916
        BigNumber.ROUND_FLOOR = 3;                                                                                     // 13917
        BigNumber.ROUND_HALF_UP = 4;                                                                                   // 13918
        BigNumber.ROUND_HALF_DOWN = 5;                                                                                 // 13919
        BigNumber.ROUND_HALF_EVEN = 6;                                                                                 // 13920
        BigNumber.ROUND_HALF_CEIL = 7;                                                                                 // 13921
        BigNumber.ROUND_HALF_FLOOR = 8;                                                                                // 13922
        BigNumber.EUCLID = 9;                                                                                          // 13923
                                                                                                                       // 13924
                                                                                                                       // 13925
        /*                                                                                                             // 13926
         * Configure infrequently-changing library-wide settings.                                                      // 13927
         *                                                                                                             // 13928
         * Accept an object or an argument list, with one or many of the following properties or                       // 13929
         * parameters respectively:                                                                                    // 13930
         *                                                                                                             // 13931
         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive                                                     // 13932
         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive                                                       // 13933
         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or                                      // 13934
         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]                              // 13935
         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or                             // 13936
         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]                     // 13937
         *   ERRORS          {boolean|number}   true, false, 1 or 0                                                    // 13938
         *   CRYPTO          {boolean|number}   true, false, 1 or 0                                                    // 13939
         *   MODULO_MODE     {number}           0 to 9 inclusive                                                       // 13940
         *   POW_PRECISION   {number}           0 to MAX inclusive                                                     // 13941
         *   FORMAT          {object}           See BigNumber.prototype.toFormat                                       // 13942
         *      decimalSeparator       {string}                                                                        // 13943
         *      groupSeparator         {string}                                                                        // 13944
         *      groupSize              {number}                                                                        // 13945
         *      secondaryGroupSize     {number}                                                                        // 13946
         *      fractionGroupSeparator {string}                                                                        // 13947
         *      fractionGroupSize      {number}                                                                        // 13948
         *                                                                                                             // 13949
         * (The values assigned to the above FORMAT object properties are not checked for validity.)                   // 13950
         *                                                                                                             // 13951
         * E.g.                                                                                                        // 13952
         * BigNumber.config(20, 4) is equivalent to                                                                    // 13953
         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })                                                // 13954
         *                                                                                                             // 13955
         * Ignore properties/parameters set to null or undefined.                                                      // 13956
         * Return an object with the properties current values.                                                        // 13957
         */                                                                                                            // 13958
        BigNumber.config = BigNumber.set = function () {                                                               // 13959
            var v, p,                                                                                                  // 13960
                i = 0,                                                                                                 // 13961
                r = {},                                                                                                // 13962
                a = arguments,                                                                                         // 13963
                o = a[0],                                                                                              // 13964
                has = o && typeof o == 'object'                                                                        // 13965
                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }                            // 13966
                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };                                // 13967
                                                                                                                       // 13968
            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.                                                    // 13969
            // 'config() DECIMAL_PLACES not an integer: {v}'                                                           // 13970
            // 'config() DECIMAL_PLACES out of range: {v}'                                                             // 13971
            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {                                      // 13972
                DECIMAL_PLACES = v | 0;                                                                                // 13973
            }                                                                                                          // 13974
            r[p] = DECIMAL_PLACES;                                                                                     // 13975
                                                                                                                       // 13976
            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.                                                       // 13977
            // 'config() ROUNDING_MODE not an integer: {v}'                                                            // 13978
            // 'config() ROUNDING_MODE out of range: {v}'                                                              // 13979
            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {                                         // 13980
                ROUNDING_MODE = v | 0;                                                                                 // 13981
            }                                                                                                          // 13982
            r[p] = ROUNDING_MODE;                                                                                      // 13983
                                                                                                                       // 13984
            // EXPONENTIAL_AT {number|number[]}                                                                        // 13985
            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].                    // 13986
            // 'config() EXPONENTIAL_AT not an integer: {v}'                                                           // 13987
            // 'config() EXPONENTIAL_AT out of range: {v}'                                                             // 13988
            if ( has( p = 'EXPONENTIAL_AT' ) ) {                                                                       // 13989
                                                                                                                       // 13990
                if ( isArray(v) ) {                                                                                    // 13991
                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {                     // 13992
                        TO_EXP_NEG = v[0] | 0;                                                                         // 13993
                        TO_EXP_POS = v[1] | 0;                                                                         // 13994
                    }                                                                                                  // 13995
                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {                                                       // 13996
                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );                                             // 13997
                }                                                                                                      // 13998
            }                                                                                                          // 13999
            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];                                                                         // 14000
                                                                                                                       // 14001
            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or                                      // 14002
            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].                                             // 14003
            // 'config() RANGE not an integer: {v}'                                                                    // 14004
            // 'config() RANGE cannot be zero: {v}'                                                                    // 14005
            // 'config() RANGE out of range: {v}'                                                                      // 14006
            if ( has( p = 'RANGE' ) ) {                                                                                // 14007
                                                                                                                       // 14008
                if ( isArray(v) ) {                                                                                    // 14009
                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {                    // 14010
                        MIN_EXP = v[0] | 0;                                                                            // 14011
                        MAX_EXP = v[1] | 0;                                                                            // 14012
                    }                                                                                                  // 14013
                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {                                                       // 14014
                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );                                      // 14015
                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );                                             // 14016
                }                                                                                                      // 14017
            }                                                                                                          // 14018
            r[p] = [ MIN_EXP, MAX_EXP ];                                                                               // 14019
                                                                                                                       // 14020
            // ERRORS {boolean|number} true, false, 1 or 0.                                                            // 14021
            // 'config() ERRORS not a boolean or binary digit: {v}'                                                    // 14022
            if ( has( p = 'ERRORS' ) ) {                                                                               // 14023
                                                                                                                       // 14024
                if ( v === !!v || v === 1 || v === 0 ) {                                                               // 14025
                    id = 0;                                                                                            // 14026
                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;                     // 14027
                } else if (ERRORS) {                                                                                   // 14028
                    raise( 2, p + notBool, v );                                                                        // 14029
                }                                                                                                      // 14030
            }                                                                                                          // 14031
            r[p] = ERRORS;                                                                                             // 14032
                                                                                                                       // 14033
            // CRYPTO {boolean|number} true, false, 1 or 0.                                                            // 14034
            // 'config() CRYPTO not a boolean or binary digit: {v}'                                                    // 14035
            // 'config() crypto unavailable: {crypto}'                                                                 // 14036
            if ( has( p = 'CRYPTO' ) ) {                                                                               // 14037
                                                                                                                       // 14038
                if ( v === true || v === false || v === 1 || v === 0 ) {                                               // 14039
                    if (v) {                                                                                           // 14040
                        v = typeof crypto == 'undefined';                                                              // 14041
                        if ( !v && crypto && (crypto.getRandomValues || crypto.randomBytes)) {                         // 14042
                            CRYPTO = true;                                                                             // 14043
                        } else if (ERRORS) {                                                                           // 14044
                            raise( 2, 'crypto unavailable', v ? void 0 : crypto );                                     // 14045
                        } else {                                                                                       // 14046
                            CRYPTO = false;                                                                            // 14047
                        }                                                                                              // 14048
                    } else {                                                                                           // 14049
                        CRYPTO = false;                                                                                // 14050
                    }                                                                                                  // 14051
                } else if (ERRORS) {                                                                                   // 14052
                    raise( 2, p + notBool, v );                                                                        // 14053
                }                                                                                                      // 14054
            }                                                                                                          // 14055
            r[p] = CRYPTO;                                                                                             // 14056
                                                                                                                       // 14057
            // MODULO_MODE {number} Integer, 0 to 9 inclusive.                                                         // 14058
            // 'config() MODULO_MODE not an integer: {v}'                                                              // 14059
            // 'config() MODULO_MODE out of range: {v}'                                                                // 14060
            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {                                           // 14061
                MODULO_MODE = v | 0;                                                                                   // 14062
            }                                                                                                          // 14063
            r[p] = MODULO_MODE;                                                                                        // 14064
                                                                                                                       // 14065
            // POW_PRECISION {number} Integer, 0 to MAX inclusive.                                                     // 14066
            // 'config() POW_PRECISION not an integer: {v}'                                                            // 14067
            // 'config() POW_PRECISION out of range: {v}'                                                              // 14068
            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {                                       // 14069
                POW_PRECISION = v | 0;                                                                                 // 14070
            }                                                                                                          // 14071
            r[p] = POW_PRECISION;                                                                                      // 14072
                                                                                                                       // 14073
            // FORMAT {object}                                                                                         // 14074
            // 'config() FORMAT not an object: {v}'                                                                    // 14075
            if ( has( p = 'FORMAT' ) ) {                                                                               // 14076
                                                                                                                       // 14077
                if ( typeof v == 'object' ) {                                                                          // 14078
                    FORMAT = v;                                                                                        // 14079
                } else if (ERRORS) {                                                                                   // 14080
                    raise( 2, p + ' not an object', v );                                                               // 14081
                }                                                                                                      // 14082
            }                                                                                                          // 14083
            r[p] = FORMAT;                                                                                             // 14084
                                                                                                                       // 14085
            return r;                                                                                                  // 14086
        };                                                                                                             // 14087
                                                                                                                       // 14088
                                                                                                                       // 14089
        /*                                                                                                             // 14090
         * Return a new BigNumber whose value is the maximum of the arguments.                                         // 14091
         *                                                                                                             // 14092
         * arguments {number|string|BigNumber}                                                                         // 14093
         */                                                                                                            // 14094
        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };                                           // 14095
                                                                                                                       // 14096
                                                                                                                       // 14097
        /*                                                                                                             // 14098
         * Return a new BigNumber whose value is the minimum of the arguments.                                         // 14099
         *                                                                                                             // 14100
         * arguments {number|string|BigNumber}                                                                         // 14101
         */                                                                                                            // 14102
        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };                                           // 14103
                                                                                                                       // 14104
                                                                                                                       // 14105
        /*                                                                                                             // 14106
         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,                      // 14107
         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing                        // 14108
         * zeros are produced).                                                                                        // 14109
         *                                                                                                             // 14110
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 14111
         *                                                                                                             // 14112
         * 'random() decimal places not an integer: {dp}'                                                              // 14113
         * 'random() decimal places out of range: {dp}'                                                                // 14114
         * 'random() crypto unavailable: {crypto}'                                                                     // 14115
         */                                                                                                            // 14116
        BigNumber.random = (function () {                                                                              // 14117
            var pow2_53 = 0x20000000000000;                                                                            // 14118
                                                                                                                       // 14119
            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.                                             // 14120
            // Check if Math.random() produces more than 32 bits of randomness.                                        // 14121
            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.                    // 14122
            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.                                             // 14123
            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff                                                  // 14124
              ? function () { return mathfloor( Math.random() * pow2_53 ); }                                           // 14125
              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +                                   // 14126
                  (Math.random() * 0x800000 | 0); };                                                                   // 14127
                                                                                                                       // 14128
            return function (dp) {                                                                                     // 14129
                var a, b, e, k, v,                                                                                     // 14130
                    i = 0,                                                                                             // 14131
                    c = [],                                                                                            // 14132
                    rand = new BigNumber(ONE);                                                                         // 14133
                                                                                                                       // 14134
                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;                            // 14135
                k = mathceil( dp / LOG_BASE );                                                                         // 14136
                                                                                                                       // 14137
                if (CRYPTO) {                                                                                          // 14138
                                                                                                                       // 14139
                    // Browsers supporting crypto.getRandomValues.                                                     // 14140
                    if (crypto.getRandomValues) {                                                                      // 14141
                                                                                                                       // 14142
                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );                                       // 14143
                                                                                                                       // 14144
                        for ( ; i < k; ) {                                                                             // 14145
                                                                                                                       // 14146
                            // 53 bits:                                                                                // 14147
                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)                                   // 14148
                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000                             // 14149
                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)                                              // 14150
                            //                                     11111 11111111 11111111                             // 14151
                            // 0x20000 is 2^21.                                                                        // 14152
                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);                                                    // 14153
                                                                                                                       // 14154
                            // Rejection sampling:                                                                     // 14155
                            // 0 <= v < 9007199254740992                                                               // 14156
                            // Probability that v >= 9e15, is                                                          // 14157
                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251                              // 14158
                            if ( v >= 9e15 ) {                                                                         // 14159
                                b = crypto.getRandomValues( new Uint32Array(2) );                                      // 14160
                                a[i] = b[0];                                                                           // 14161
                                a[i + 1] = b[1];                                                                       // 14162
                            } else {                                                                                   // 14163
                                                                                                                       // 14164
                                // 0 <= v <= 8999999999999999                                                          // 14165
                                // 0 <= (v % 1e14) <= 99999999999999                                                   // 14166
                                c.push( v % 1e14 );                                                                    // 14167
                                i += 2;                                                                                // 14168
                            }                                                                                          // 14169
                        }                                                                                              // 14170
                        i = k / 2;                                                                                     // 14171
                                                                                                                       // 14172
                    // Node.js supporting crypto.randomBytes.                                                          // 14173
                    } else if (crypto.randomBytes) {                                                                   // 14174
                                                                                                                       // 14175
                        // buffer                                                                                      // 14176
                        a = crypto.randomBytes( k *= 7 );                                                              // 14177
                                                                                                                       // 14178
                        for ( ; i < k; ) {                                                                             // 14179
                                                                                                                       // 14180
                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40                                          // 14181
                            // 0x100000000 is 2^32, 0x1000000 is 2^24                                                  // 14182
                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111                             // 14183
                            // 0 <= v < 9007199254740992                                                               // 14184
                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +                   // 14185
                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +                              // 14186
                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];                                   // 14187
                                                                                                                       // 14188
                            if ( v >= 9e15 ) {                                                                         // 14189
                                crypto.randomBytes(7).copy( a, i );                                                    // 14190
                            } else {                                                                                   // 14191
                                                                                                                       // 14192
                                // 0 <= (v % 1e14) <= 99999999999999                                                   // 14193
                                c.push( v % 1e14 );                                                                    // 14194
                                i += 7;                                                                                // 14195
                            }                                                                                          // 14196
                        }                                                                                              // 14197
                        i = k / 7;                                                                                     // 14198
                    } else {                                                                                           // 14199
                        CRYPTO = false;                                                                                // 14200
                        if (ERRORS) raise( 14, 'crypto unavailable', crypto );                                         // 14201
                    }                                                                                                  // 14202
                }                                                                                                      // 14203
                                                                                                                       // 14204
                // Use Math.random.                                                                                    // 14205
                if (!CRYPTO) {                                                                                         // 14206
                                                                                                                       // 14207
                    for ( ; i < k; ) {                                                                                 // 14208
                        v = random53bitInt();                                                                          // 14209
                        if ( v < 9e15 ) c[i++] = v % 1e14;                                                             // 14210
                    }                                                                                                  // 14211
                }                                                                                                      // 14212
                                                                                                                       // 14213
                k = c[--i];                                                                                            // 14214
                dp %= LOG_BASE;                                                                                        // 14215
                                                                                                                       // 14216
                // Convert trailing digits to zeros according to dp.                                                   // 14217
                if ( k && dp ) {                                                                                       // 14218
                    v = POWS_TEN[LOG_BASE - dp];                                                                       // 14219
                    c[i] = mathfloor( k / v ) * v;                                                                     // 14220
                }                                                                                                      // 14221
                                                                                                                       // 14222
                // Remove trailing elements which are zero.                                                            // 14223
                for ( ; c[i] === 0; c.pop(), i-- );                                                                    // 14224
                                                                                                                       // 14225
                // Zero?                                                                                               // 14226
                if ( i < 0 ) {                                                                                         // 14227
                    c = [ e = 0 ];                                                                                     // 14228
                } else {                                                                                               // 14229
                                                                                                                       // 14230
                    // Remove leading elements which are zero and adjust exponent accordingly.                         // 14231
                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);                                              // 14232
                                                                                                                       // 14233
                    // Count the digits of the first element of c to determine leading zeros, and...                   // 14234
                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);                                                     // 14235
                                                                                                                       // 14236
                    // adjust the exponent accordingly.                                                                // 14237
                    if ( i < LOG_BASE ) e -= LOG_BASE - i;                                                             // 14238
                }                                                                                                      // 14239
                                                                                                                       // 14240
                rand.e = e;                                                                                            // 14241
                rand.c = c;                                                                                            // 14242
                return rand;                                                                                           // 14243
            };                                                                                                         // 14244
        })();                                                                                                          // 14245
                                                                                                                       // 14246
                                                                                                                       // 14247
        // PRIVATE FUNCTIONS                                                                                           // 14248
                                                                                                                       // 14249
                                                                                                                       // 14250
        // Convert a numeric string of baseIn to a numeric string of baseOut.                                          // 14251
        function convertBase( str, baseOut, baseIn, sign ) {                                                           // 14252
            var d, e, k, r, x, xc, y,                                                                                  // 14253
                i = str.indexOf( '.' ),                                                                                // 14254
                dp = DECIMAL_PLACES,                                                                                   // 14255
                rm = ROUNDING_MODE;                                                                                    // 14256
                                                                                                                       // 14257
            if ( baseIn < 37 ) str = str.toLowerCase();                                                                // 14258
                                                                                                                       // 14259
            // Non-integer.                                                                                            // 14260
            if ( i >= 0 ) {                                                                                            // 14261
                k = POW_PRECISION;                                                                                     // 14262
                                                                                                                       // 14263
                // Unlimited precision.                                                                                // 14264
                POW_PRECISION = 0;                                                                                     // 14265
                str = str.replace( '.', '' );                                                                          // 14266
                y = new BigNumber(baseIn);                                                                             // 14267
                x = y.pow( str.length - i );                                                                           // 14268
                POW_PRECISION = k;                                                                                     // 14269
                                                                                                                       // 14270
                // Convert str as if an integer, then restore the fraction part by dividing the                        // 14271
                // result by its base raised to a power.                                                               // 14272
                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );                             // 14273
                y.e = y.c.length;                                                                                      // 14274
            }                                                                                                          // 14275
                                                                                                                       // 14276
            // Convert the number as integer.                                                                          // 14277
            xc = toBaseOut( str, baseIn, baseOut );                                                                    // 14278
            e = k = xc.length;                                                                                         // 14279
                                                                                                                       // 14280
            // Remove trailing zeros.                                                                                  // 14281
            for ( ; xc[--k] == 0; xc.pop() );                                                                          // 14282
            if ( !xc[0] ) return '0';                                                                                  // 14283
                                                                                                                       // 14284
            if ( i < 0 ) {                                                                                             // 14285
                --e;                                                                                                   // 14286
            } else {                                                                                                   // 14287
                x.c = xc;                                                                                              // 14288
                x.e = e;                                                                                               // 14289
                                                                                                                       // 14290
                // sign is needed for correct rounding.                                                                // 14291
                x.s = sign;                                                                                            // 14292
                x = div( x, y, dp, rm, baseOut );                                                                      // 14293
                xc = x.c;                                                                                              // 14294
                r = x.r;                                                                                               // 14295
                e = x.e;                                                                                               // 14296
            }                                                                                                          // 14297
                                                                                                                       // 14298
            d = e + dp + 1;                                                                                            // 14299
                                                                                                                       // 14300
            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.                    // 14301
            i = xc[d];                                                                                                 // 14302
            k = baseOut / 2;                                                                                           // 14303
            r = r || d < 0 || xc[d + 1] != null;                                                                       // 14304
                                                                                                                       // 14305
            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )                                // 14306
                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||                               // 14307
                         rm == ( x.s < 0 ? 8 : 7 ) );                                                                  // 14308
                                                                                                                       // 14309
            if ( d < 1 || !xc[0] ) {                                                                                   // 14310
                                                                                                                       // 14311
                // 1^-dp or 0.                                                                                         // 14312
                str = r ? toFixedPoint( '1', -dp ) : '0';                                                              // 14313
            } else {                                                                                                   // 14314
                xc.length = d;                                                                                         // 14315
                                                                                                                       // 14316
                if (r) {                                                                                               // 14317
                                                                                                                       // 14318
                    // Rounding up may mean the previous digit has to be rounded up and so on.                         // 14319
                    for ( --baseOut; ++xc[--d] > baseOut; ) {                                                          // 14320
                        xc[d] = 0;                                                                                     // 14321
                                                                                                                       // 14322
                        if ( !d ) {                                                                                    // 14323
                            ++e;                                                                                       // 14324
                            xc.unshift(1);                                                                             // 14325
                        }                                                                                              // 14326
                    }                                                                                                  // 14327
                }                                                                                                      // 14328
                                                                                                                       // 14329
                // Determine trailing zeros.                                                                           // 14330
                for ( k = xc.length; !xc[--k]; );                                                                      // 14331
                                                                                                                       // 14332
                // E.g. [4, 11, 15] becomes 4bf.                                                                       // 14333
                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );                                    // 14334
                str = toFixedPoint( str, e );                                                                          // 14335
            }                                                                                                          // 14336
                                                                                                                       // 14337
            // The caller will add the sign.                                                                           // 14338
            return str;                                                                                                // 14339
        }                                                                                                              // 14340
                                                                                                                       // 14341
                                                                                                                       // 14342
        // Perform division in the specified base. Called by div and convertBase.                                      // 14343
        div = (function () {                                                                                           // 14344
                                                                                                                       // 14345
            // Assume non-zero x and k.                                                                                // 14346
            function multiply( x, k, base ) {                                                                          // 14347
                var m, temp, xlo, xhi,                                                                                 // 14348
                    carry = 0,                                                                                         // 14349
                    i = x.length,                                                                                      // 14350
                    klo = k % SQRT_BASE,                                                                               // 14351
                    khi = k / SQRT_BASE | 0;                                                                           // 14352
                                                                                                                       // 14353
                for ( x = x.slice(); i--; ) {                                                                          // 14354
                    xlo = x[i] % SQRT_BASE;                                                                            // 14355
                    xhi = x[i] / SQRT_BASE | 0;                                                                        // 14356
                    m = khi * xlo + xhi * klo;                                                                         // 14357
                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;                                      // 14358
                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;                                   // 14359
                    x[i] = temp % base;                                                                                // 14360
                }                                                                                                      // 14361
                                                                                                                       // 14362
                if (carry) x.unshift(carry);                                                                           // 14363
                                                                                                                       // 14364
                return x;                                                                                              // 14365
            }                                                                                                          // 14366
                                                                                                                       // 14367
            function compare( a, b, aL, bL ) {                                                                         // 14368
                var i, cmp;                                                                                            // 14369
                                                                                                                       // 14370
                if ( aL != bL ) {                                                                                      // 14371
                    cmp = aL > bL ? 1 : -1;                                                                            // 14372
                } else {                                                                                               // 14373
                                                                                                                       // 14374
                    for ( i = cmp = 0; i < aL; i++ ) {                                                                 // 14375
                                                                                                                       // 14376
                        if ( a[i] != b[i] ) {                                                                          // 14377
                            cmp = a[i] > b[i] ? 1 : -1;                                                                // 14378
                            break;                                                                                     // 14379
                        }                                                                                              // 14380
                    }                                                                                                  // 14381
                }                                                                                                      // 14382
                return cmp;                                                                                            // 14383
            }                                                                                                          // 14384
                                                                                                                       // 14385
            function subtract( a, b, aL, base ) {                                                                      // 14386
                var i = 0;                                                                                             // 14387
                                                                                                                       // 14388
                // Subtract b from a.                                                                                  // 14389
                for ( ; aL--; ) {                                                                                      // 14390
                    a[aL] -= i;                                                                                        // 14391
                    i = a[aL] < b[aL] ? 1 : 0;                                                                         // 14392
                    a[aL] = i * base + a[aL] - b[aL];                                                                  // 14393
                }                                                                                                      // 14394
                                                                                                                       // 14395
                // Remove leading zeros.                                                                               // 14396
                for ( ; !a[0] && a.length > 1; a.shift() );                                                            // 14397
            }                                                                                                          // 14398
                                                                                                                       // 14399
            // x: dividend, y: divisor.                                                                                // 14400
            return function ( x, y, dp, rm, base ) {                                                                   // 14401
                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,                              // 14402
                    yL, yz,                                                                                            // 14403
                    s = x.s == y.s ? 1 : -1,                                                                           // 14404
                    xc = x.c,                                                                                          // 14405
                    yc = y.c;                                                                                          // 14406
                                                                                                                       // 14407
                // Either NaN, Infinity or 0?                                                                          // 14408
                if ( !xc || !xc[0] || !yc || !yc[0] ) {                                                                // 14409
                                                                                                                       // 14410
                    return new BigNumber(                                                                              // 14411
                                                                                                                       // 14412
                      // Return NaN if either NaN, or both Infinity or 0.                                              // 14413
                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :                                      // 14414
                                                                                                                       // 14415
                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.                     // 14416
                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0                                                        // 14417
                    );                                                                                                 // 14418
                }                                                                                                      // 14419
                                                                                                                       // 14420
                q = new BigNumber(s);                                                                                  // 14421
                qc = q.c = [];                                                                                         // 14422
                e = x.e - y.e;                                                                                         // 14423
                s = dp + e + 1;                                                                                        // 14424
                                                                                                                       // 14425
                if ( !base ) {                                                                                         // 14426
                    base = BASE;                                                                                       // 14427
                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );                                       // 14428
                    s = s / LOG_BASE | 0;                                                                              // 14429
                }                                                                                                      // 14430
                                                                                                                       // 14431
                // Result exponent may be one less then the current value of e.                                        // 14432
                // The coefficients of the BigNumbers from convertBase may have trailing zeros.                        // 14433
                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );                                                           // 14434
                if ( yc[i] > ( xc[i] || 0 ) ) e--;                                                                     // 14435
                                                                                                                       // 14436
                if ( s < 0 ) {                                                                                         // 14437
                    qc.push(1);                                                                                        // 14438
                    more = true;                                                                                       // 14439
                } else {                                                                                               // 14440
                    xL = xc.length;                                                                                    // 14441
                    yL = yc.length;                                                                                    // 14442
                    i = 0;                                                                                             // 14443
                    s += 2;                                                                                            // 14444
                                                                                                                       // 14445
                    // Normalise xc and yc so highest order digit of yc is >= base / 2.                                // 14446
                                                                                                                       // 14447
                    n = mathfloor( base / ( yc[0] + 1 ) );                                                             // 14448
                                                                                                                       // 14449
                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.                         // 14450
                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {                                                  // 14451
                    if ( n > 1 ) {                                                                                     // 14452
                        yc = multiply( yc, n, base );                                                                  // 14453
                        xc = multiply( xc, n, base );                                                                  // 14454
                        yL = yc.length;                                                                                // 14455
                        xL = xc.length;                                                                                // 14456
                    }                                                                                                  // 14457
                                                                                                                       // 14458
                    xi = yL;                                                                                           // 14459
                    rem = xc.slice( 0, yL );                                                                           // 14460
                    remL = rem.length;                                                                                 // 14461
                                                                                                                       // 14462
                    // Add zeros to make remainder as long as divisor.                                                 // 14463
                    for ( ; remL < yL; rem[remL++] = 0 );                                                              // 14464
                    yz = yc.slice();                                                                                   // 14465
                    yz.unshift(0);                                                                                     // 14466
                    yc0 = yc[0];                                                                                       // 14467
                    if ( yc[1] >= base / 2 ) yc0++;                                                                    // 14468
                    // Not necessary, but to prevent trial digit n > base, when using base 3.                          // 14469
                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;                                              // 14470
                                                                                                                       // 14471
                    do {                                                                                               // 14472
                        n = 0;                                                                                         // 14473
                                                                                                                       // 14474
                        // Compare divisor and remainder.                                                              // 14475
                        cmp = compare( yc, rem, yL, remL );                                                            // 14476
                                                                                                                       // 14477
                        // If divisor < remainder.                                                                     // 14478
                        if ( cmp < 0 ) {                                                                               // 14479
                                                                                                                       // 14480
                            // Calculate trial digit, n.                                                               // 14481
                                                                                                                       // 14482
                            rem0 = rem[0];                                                                             // 14483
                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );                                    // 14484
                                                                                                                       // 14485
                            // n is how many times the divisor goes into the current remainder.                        // 14486
                            n = mathfloor( rem0 / yc0 );                                                               // 14487
                                                                                                                       // 14488
                            //  Algorithm:                                                                             // 14489
                            //  1. product = divisor * trial digit (n)                                                 // 14490
                            //  2. if product > remainder: product -= divisor, n--                                     // 14491
                            //  3. remainder -= product                                                                // 14492
                            //  4. if product was < remainder at 2:                                                    // 14493
                            //    5. compare new remainder and divisor                                                 // 14494
                            //    6. If remainder > divisor: remainder -= divisor, n++                                 // 14495
                                                                                                                       // 14496
                            if ( n > 1 ) {                                                                             // 14497
                                                                                                                       // 14498
                                // n may be > base only when base is 3.                                                // 14499
                                if (n >= base) n = base - 1;                                                           // 14500
                                                                                                                       // 14501
                                // product = divisor * trial digit.                                                    // 14502
                                prod = multiply( yc, n, base );                                                        // 14503
                                prodL = prod.length;                                                                   // 14504
                                remL = rem.length;                                                                     // 14505
                                                                                                                       // 14506
                                // Compare product and remainder.                                                      // 14507
                                // If product > remainder.                                                             // 14508
                                // Trial digit n too high.                                                             // 14509
                                // n is 1 too high about 5% of the time, and is not known to have                      // 14510
                                // ever been more than 1 too high.                                                     // 14511
                                while ( compare( prod, rem, prodL, remL ) == 1 ) {                                     // 14512
                                    n--;                                                                               // 14513
                                                                                                                       // 14514
                                    // Subtract divisor from product.                                                  // 14515
                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );                               // 14516
                                    prodL = prod.length;                                                               // 14517
                                    cmp = 1;                                                                           // 14518
                                }                                                                                      // 14519
                            } else {                                                                                   // 14520
                                                                                                                       // 14521
                                // n is 0 or 1, cmp is -1.                                                             // 14522
                                // If n is 0, there is no need to compare yc and rem again below,                      // 14523
                                // so change cmp to 1 to avoid it.                                                     // 14524
                                // If n is 1, leave cmp as -1, so yc and rem are compared again.                       // 14525
                                if ( n == 0 ) {                                                                        // 14526
                                                                                                                       // 14527
                                    // divisor < remainder, so n must be at least 1.                                   // 14528
                                    cmp = n = 1;                                                                       // 14529
                                }                                                                                      // 14530
                                                                                                                       // 14531
                                // product = divisor                                                                   // 14532
                                prod = yc.slice();                                                                     // 14533
                                prodL = prod.length;                                                                   // 14534
                            }                                                                                          // 14535
                                                                                                                       // 14536
                            if ( prodL < remL ) prod.unshift(0);                                                       // 14537
                                                                                                                       // 14538
                            // Subtract product from remainder.                                                        // 14539
                            subtract( rem, prod, remL, base );                                                         // 14540
                            remL = rem.length;                                                                         // 14541
                                                                                                                       // 14542
                             // If product was < remainder.                                                            // 14543
                            if ( cmp == -1 ) {                                                                         // 14544
                                                                                                                       // 14545
                                // Compare divisor and new remainder.                                                  // 14546
                                // If divisor < new remainder, subtract divisor from remainder.                        // 14547
                                // Trial digit n too low.                                                              // 14548
                                // n is 1 too low about 5% of the time, and very rarely 2 too low.                     // 14549
                                while ( compare( yc, rem, yL, remL ) < 1 ) {                                           // 14550
                                    n++;                                                                               // 14551
                                                                                                                       // 14552
                                    // Subtract divisor from remainder.                                                // 14553
                                    subtract( rem, yL < remL ? yz : yc, remL, base );                                  // 14554
                                    remL = rem.length;                                                                 // 14555
                                }                                                                                      // 14556
                            }                                                                                          // 14557
                        } else if ( cmp === 0 ) {                                                                      // 14558
                            n++;                                                                                       // 14559
                            rem = [0];                                                                                 // 14560
                        } // else cmp === 1 and n will be 0                                                            // 14561
                                                                                                                       // 14562
                        // Add the next digit, n, to the result array.                                                 // 14563
                        qc[i++] = n;                                                                                   // 14564
                                                                                                                       // 14565
                        // Update the remainder.                                                                       // 14566
                        if ( rem[0] ) {                                                                                // 14567
                            rem[remL++] = xc[xi] || 0;                                                                 // 14568
                        } else {                                                                                       // 14569
                            rem = [ xc[xi] ];                                                                          // 14570
                            remL = 1;                                                                                  // 14571
                        }                                                                                              // 14572
                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );                                                // 14573
                                                                                                                       // 14574
                    more = rem[0] != null;                                                                             // 14575
                                                                                                                       // 14576
                    // Leading zero?                                                                                   // 14577
                    if ( !qc[0] ) qc.shift();                                                                          // 14578
                }                                                                                                      // 14579
                                                                                                                       // 14580
                if ( base == BASE ) {                                                                                  // 14581
                                                                                                                       // 14582
                    // To calculate q.e, first get the number of digits of qc[0].                                      // 14583
                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );                                                   // 14584
                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );                                     // 14585
                                                                                                                       // 14586
                // Caller is convertBase.                                                                              // 14587
                } else {                                                                                               // 14588
                    q.e = e;                                                                                           // 14589
                    q.r = +more;                                                                                       // 14590
                }                                                                                                      // 14591
                                                                                                                       // 14592
                return q;                                                                                              // 14593
            };                                                                                                         // 14594
        })();                                                                                                          // 14595
                                                                                                                       // 14596
                                                                                                                       // 14597
        /*                                                                                                             // 14598
         * Return a string representing the value of BigNumber n in fixed-point or exponential                         // 14599
         * notation rounded to the specified decimal places or significant digits.                                     // 14600
         *                                                                                                             // 14601
         * n is a BigNumber.                                                                                           // 14602
         * i is the index of the last digit required (i.e. the digit that may be rounded up).                          // 14603
         * rm is the rounding mode.                                                                                    // 14604
         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.                             // 14605
         */                                                                                                            // 14606
        function format( n, i, rm, caller ) {                                                                          // 14607
            var c0, e, ne, len, str;                                                                                   // 14608
                                                                                                                       // 14609
            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )                                            // 14610
              ? rm | 0 : ROUNDING_MODE;                                                                                // 14611
                                                                                                                       // 14612
            if ( !n.c ) return n.toString();                                                                           // 14613
            c0 = n.c[0];                                                                                               // 14614
            ne = n.e;                                                                                                  // 14615
                                                                                                                       // 14616
            if ( i == null ) {                                                                                         // 14617
                str = coeffToString( n.c );                                                                            // 14618
                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG                                                 // 14619
                  ? toExponential( str, ne )                                                                           // 14620
                  : toFixedPoint( str, ne );                                                                           // 14621
            } else {                                                                                                   // 14622
                n = round( new BigNumber(n), i, rm );                                                                  // 14623
                                                                                                                       // 14624
                // n.e may have changed if the value was rounded up.                                                   // 14625
                e = n.e;                                                                                               // 14626
                                                                                                                       // 14627
                str = coeffToString( n.c );                                                                            // 14628
                len = str.length;                                                                                      // 14629
                                                                                                                       // 14630
                // toPrecision returns exponential notation if the number of significant digits                        // 14631
                // specified is less than the number of digits necessary to represent the integer                      // 14632
                // part of the value in fixed-point notation.                                                          // 14633
                                                                                                                       // 14634
                // Exponential notation.                                                                               // 14635
                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {                                 // 14636
                                                                                                                       // 14637
                    // Append zeros?                                                                                   // 14638
                    for ( ; len < i; str += '0', len++ );                                                              // 14639
                    str = toExponential( str, e );                                                                     // 14640
                                                                                                                       // 14641
                // Fixed-point notation.                                                                               // 14642
                } else {                                                                                               // 14643
                    i -= ne;                                                                                           // 14644
                    str = toFixedPoint( str, e );                                                                      // 14645
                                                                                                                       // 14646
                    // Append zeros?                                                                                   // 14647
                    if ( e + 1 > len ) {                                                                               // 14648
                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );                                            // 14649
                    } else {                                                                                           // 14650
                        i += e - len;                                                                                  // 14651
                        if ( i > 0 ) {                                                                                 // 14652
                            if ( e + 1 == len ) str += '.';                                                            // 14653
                            for ( ; i--; str += '0' );                                                                 // 14654
                        }                                                                                              // 14655
                    }                                                                                                  // 14656
                }                                                                                                      // 14657
            }                                                                                                          // 14658
                                                                                                                       // 14659
            return n.s < 0 && c0 ? '-' + str : str;                                                                    // 14660
        }                                                                                                              // 14661
                                                                                                                       // 14662
                                                                                                                       // 14663
        // Handle BigNumber.max and BigNumber.min.                                                                     // 14664
        function maxOrMin( args, method ) {                                                                            // 14665
            var m, n,                                                                                                  // 14666
                i = 0;                                                                                                 // 14667
                                                                                                                       // 14668
            if ( isArray( args[0] ) ) args = args[0];                                                                  // 14669
            m = new BigNumber( args[0] );                                                                              // 14670
                                                                                                                       // 14671
            for ( ; ++i < args.length; ) {                                                                             // 14672
                n = new BigNumber( args[i] );                                                                          // 14673
                                                                                                                       // 14674
                // If any number is NaN, return NaN.                                                                   // 14675
                if ( !n.s ) {                                                                                          // 14676
                    m = n;                                                                                             // 14677
                    break;                                                                                             // 14678
                } else if ( method.call( m, n ) ) {                                                                    // 14679
                    m = n;                                                                                             // 14680
                }                                                                                                      // 14681
            }                                                                                                          // 14682
                                                                                                                       // 14683
            return m;                                                                                                  // 14684
        }                                                                                                              // 14685
                                                                                                                       // 14686
                                                                                                                       // 14687
        /*                                                                                                             // 14688
         * Return true if n is an integer in range, otherwise throw.                                                   // 14689
         * Use for argument validation when ERRORS is true.                                                            // 14690
         */                                                                                                            // 14691
        function intValidatorWithErrors( n, min, max, caller, name ) {                                                 // 14692
            if ( n < min || n > max || n != truncate(n) ) {                                                            // 14693
                raise( caller, ( name || 'decimal places' ) +                                                          // 14694
                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );                                   // 14695
            }                                                                                                          // 14696
                                                                                                                       // 14697
            return true;                                                                                               // 14698
        }                                                                                                              // 14699
                                                                                                                       // 14700
                                                                                                                       // 14701
        /*                                                                                                             // 14702
         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.                     // 14703
         * Called by minus, plus and times.                                                                            // 14704
         */                                                                                                            // 14705
        function normalise( n, c, e ) {                                                                                // 14706
            var i = 1,                                                                                                 // 14707
                j = c.length;                                                                                          // 14708
                                                                                                                       // 14709
             // Remove trailing zeros.                                                                                 // 14710
            for ( ; !c[--j]; c.pop() );                                                                                // 14711
                                                                                                                       // 14712
            // Calculate the base 10 exponent. First get the number of digits of c[0].                                 // 14713
            for ( j = c[0]; j >= 10; j /= 10, i++ );                                                                   // 14714
                                                                                                                       // 14715
            // Overflow?                                                                                               // 14716
            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {                                                            // 14717
                                                                                                                       // 14718
                // Infinity.                                                                                           // 14719
                n.c = n.e = null;                                                                                      // 14720
                                                                                                                       // 14721
            // Underflow?                                                                                              // 14722
            } else if ( e < MIN_EXP ) {                                                                                // 14723
                                                                                                                       // 14724
                // Zero.                                                                                               // 14725
                n.c = [ n.e = 0 ];                                                                                     // 14726
            } else {                                                                                                   // 14727
                n.e = e;                                                                                               // 14728
                n.c = c;                                                                                               // 14729
            }                                                                                                          // 14730
                                                                                                                       // 14731
            return n;                                                                                                  // 14732
        }                                                                                                              // 14733
                                                                                                                       // 14734
                                                                                                                       // 14735
        // Handle values that fail the validity test in BigNumber.                                                     // 14736
        parseNumeric = (function () {                                                                                  // 14737
            var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,                                                            // 14738
                dotAfter = /^([^.]+)\.$/,                                                                              // 14739
                dotBefore = /^\.([^.]+)$/,                                                                             // 14740
                isInfinityOrNaN = /^-?(Infinity|NaN)$/,                                                                // 14741
                whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;                                                       // 14742
                                                                                                                       // 14743
            return function ( x, str, num, b ) {                                                                       // 14744
                var base,                                                                                              // 14745
                    s = num ? str : str.replace( whitespaceOrPlus, '' );                                               // 14746
                                                                                                                       // 14747
                // No exception on ±Infinity or NaN.                                                                   // 14748
                if ( isInfinityOrNaN.test(s) ) {                                                                       // 14749
                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;                                                            // 14750
                } else {                                                                                               // 14751
                    if ( !num ) {                                                                                      // 14752
                                                                                                                       // 14753
                        // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i                                                  // 14754
                        s = s.replace( basePrefix, function ( m, p1, p2 ) {                                            // 14755
                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;                          // 14756
                            return !b || b == base ? p1 : m;                                                           // 14757
                        });                                                                                            // 14758
                                                                                                                       // 14759
                        if (b) {                                                                                       // 14760
                            base = b;                                                                                  // 14761
                                                                                                                       // 14762
                            // E.g. '1.' to '1', '.1' to '0.1'                                                         // 14763
                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );                              // 14764
                        }                                                                                              // 14765
                                                                                                                       // 14766
                        if ( str != s ) return new BigNumber( s, base );                                               // 14767
                    }                                                                                                  // 14768
                                                                                                                       // 14769
                    // 'new BigNumber() not a number: {n}'                                                             // 14770
                    // 'new BigNumber() not a base {b} number: {n}'                                                    // 14771
                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );                     // 14772
                    x.s = null;                                                                                        // 14773
                }                                                                                                      // 14774
                                                                                                                       // 14775
                x.c = x.e = null;                                                                                      // 14776
                id = 0;                                                                                                // 14777
            }                                                                                                          // 14778
        })();                                                                                                          // 14779
                                                                                                                       // 14780
                                                                                                                       // 14781
        // Throw a BigNumber Error.                                                                                    // 14782
        function raise( caller, msg, val ) {                                                                           // 14783
            var error = new Error( [                                                                                   // 14784
                'new BigNumber',     // 0                                                                              // 14785
                'cmp',               // 1                                                                              // 14786
                'config',            // 2                                                                              // 14787
                'div',               // 3                                                                              // 14788
                'divToInt',          // 4                                                                              // 14789
                'eq',                // 5                                                                              // 14790
                'gt',                // 6                                                                              // 14791
                'gte',               // 7                                                                              // 14792
                'lt',                // 8                                                                              // 14793
                'lte',               // 9                                                                              // 14794
                'minus',             // 10                                                                             // 14795
                'mod',               // 11                                                                             // 14796
                'plus',              // 12                                                                             // 14797
                'precision',         // 13                                                                             // 14798
                'random',            // 14                                                                             // 14799
                'round',             // 15                                                                             // 14800
                'shift',             // 16                                                                             // 14801
                'times',             // 17                                                                             // 14802
                'toDigits',          // 18                                                                             // 14803
                'toExponential',     // 19                                                                             // 14804
                'toFixed',           // 20                                                                             // 14805
                'toFormat',          // 21                                                                             // 14806
                'toFraction',        // 22                                                                             // 14807
                'pow',               // 23                                                                             // 14808
                'toPrecision',       // 24                                                                             // 14809
                'toString',          // 25                                                                             // 14810
                'BigNumber'          // 26                                                                             // 14811
            ][caller] + '() ' + msg + ': ' + val );                                                                    // 14812
                                                                                                                       // 14813
            error.name = 'BigNumber Error';                                                                            // 14814
            id = 0;                                                                                                    // 14815
            throw error;                                                                                               // 14816
        }                                                                                                              // 14817
                                                                                                                       // 14818
                                                                                                                       // 14819
        /*                                                                                                             // 14820
         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.                         // 14821
         * If r is truthy, it is known that there are more digits after the rounding digit.                            // 14822
         */                                                                                                            // 14823
        function round( x, sd, rm, r ) {                                                                               // 14824
            var d, i, j, k, n, ni, rd,                                                                                 // 14825
                xc = x.c,                                                                                              // 14826
                pows10 = POWS_TEN;                                                                                     // 14827
                                                                                                                       // 14828
            // if x is not Infinity or NaN...                                                                          // 14829
            if (xc) {                                                                                                  // 14830
                                                                                                                       // 14831
                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.                    // 14832
                // n is a base 1e14 number, the value of the element of array x.c containing rd.                       // 14833
                // ni is the index of n within x.c.                                                                    // 14834
                // d is the number of digits of n.                                                                     // 14835
                // i is the index of rd within n including leading zeros.                                              // 14836
                // j is the actual index of rd within n (if < 0, rd is a leading zero).                                // 14837
                out: {                                                                                                 // 14838
                                                                                                                       // 14839
                    // Get the number of digits of the first element of xc.                                            // 14840
                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );                                                   // 14841
                    i = sd - d;                                                                                        // 14842
                                                                                                                       // 14843
                    // If the rounding digit is in the first element of xc...                                          // 14844
                    if ( i < 0 ) {                                                                                     // 14845
                        i += LOG_BASE;                                                                                 // 14846
                        j = sd;                                                                                        // 14847
                        n = xc[ ni = 0 ];                                                                              // 14848
                                                                                                                       // 14849
                        // Get the rounding digit at index j of n.                                                     // 14850
                        rd = n / pows10[ d - j - 1 ] % 10 | 0;                                                         // 14851
                    } else {                                                                                           // 14852
                        ni = mathceil( ( i + 1 ) / LOG_BASE );                                                         // 14853
                                                                                                                       // 14854
                        if ( ni >= xc.length ) {                                                                       // 14855
                                                                                                                       // 14856
                            if (r) {                                                                                   // 14857
                                                                                                                       // 14858
                                // Needed by sqrt.                                                                     // 14859
                                for ( ; xc.length <= ni; xc.push(0) );                                                 // 14860
                                n = rd = 0;                                                                            // 14861
                                d = 1;                                                                                 // 14862
                                i %= LOG_BASE;                                                                         // 14863
                                j = i - LOG_BASE + 1;                                                                  // 14864
                            } else {                                                                                   // 14865
                                break out;                                                                             // 14866
                            }                                                                                          // 14867
                        } else {                                                                                       // 14868
                            n = k = xc[ni];                                                                            // 14869
                                                                                                                       // 14870
                            // Get the number of digits of n.                                                          // 14871
                            for ( d = 1; k >= 10; k /= 10, d++ );                                                      // 14872
                                                                                                                       // 14873
                            // Get the index of rd within n.                                                           // 14874
                            i %= LOG_BASE;                                                                             // 14875
                                                                                                                       // 14876
                            // Get the index of rd within n, adjusted for leading zeros.                               // 14877
                            // The number of leading zeros of n is given by LOG_BASE - d.                              // 14878
                            j = i - LOG_BASE + d;                                                                      // 14879
                                                                                                                       // 14880
                            // Get the rounding digit at index j of n.                                                 // 14881
                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;                                         // 14882
                        }                                                                                              // 14883
                    }                                                                                                  // 14884
                                                                                                                       // 14885
                    r = r || sd < 0 ||                                                                                 // 14886
                                                                                                                       // 14887
                    // Are there any non-zero digits after the rounding digit?                                         // 14888
                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right                   // 14889
                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.                    // 14890
                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );                                   // 14891
                                                                                                                       // 14892
                    r = rm < 4                                                                                         // 14893
                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )                                        // 14894
                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&                                              // 14895
                                                                                                                       // 14896
                        // Check whether the digit to the left of the rounding digit is odd.                           // 14897
                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||                       // 14898
                          rm == ( x.s < 0 ? 8 : 7 ) );                                                                 // 14899
                                                                                                                       // 14900
                    if ( sd < 1 || !xc[0] ) {                                                                          // 14901
                        xc.length = 0;                                                                                 // 14902
                                                                                                                       // 14903
                        if (r) {                                                                                       // 14904
                                                                                                                       // 14905
                            // Convert sd to decimal places.                                                           // 14906
                            sd -= x.e + 1;                                                                             // 14907
                                                                                                                       // 14908
                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.                                                        // 14909
                            xc[0] = pows10[ ( LOG_BASE - sd % LOG_BASE ) % LOG_BASE ];                                 // 14910
                            x.e = -sd || 0;                                                                            // 14911
                        } else {                                                                                       // 14912
                                                                                                                       // 14913
                            // Zero.                                                                                   // 14914
                            xc[0] = x.e = 0;                                                                           // 14915
                        }                                                                                              // 14916
                                                                                                                       // 14917
                        return x;                                                                                      // 14918
                    }                                                                                                  // 14919
                                                                                                                       // 14920
                    // Remove excess digits.                                                                           // 14921
                    if ( i == 0 ) {                                                                                    // 14922
                        xc.length = ni;                                                                                // 14923
                        k = 1;                                                                                         // 14924
                        ni--;                                                                                          // 14925
                    } else {                                                                                           // 14926
                        xc.length = ni + 1;                                                                            // 14927
                        k = pows10[ LOG_BASE - i ];                                                                    // 14928
                                                                                                                       // 14929
                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.                                        // 14930
                        // j > 0 means i > number of leading zeros of n.                                               // 14931
                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;                         // 14932
                    }                                                                                                  // 14933
                                                                                                                       // 14934
                    // Round up?                                                                                       // 14935
                    if (r) {                                                                                           // 14936
                                                                                                                       // 14937
                        for ( ; ; ) {                                                                                  // 14938
                                                                                                                       // 14939
                            // If the digit to be rounded up is in the first element of xc...                          // 14940
                            if ( ni == 0 ) {                                                                           // 14941
                                                                                                                       // 14942
                                // i will be the length of xc[0] before k is added.                                    // 14943
                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );                                       // 14944
                                j = xc[0] += k;                                                                        // 14945
                                for ( k = 1; j >= 10; j /= 10, k++ );                                                  // 14946
                                                                                                                       // 14947
                                // if i != k the length has increased.                                                 // 14948
                                if ( i != k ) {                                                                        // 14949
                                    x.e++;                                                                             // 14950
                                    if ( xc[0] == BASE ) xc[0] = 1;                                                    // 14951
                                }                                                                                      // 14952
                                                                                                                       // 14953
                                break;                                                                                 // 14954
                            } else {                                                                                   // 14955
                                xc[ni] += k;                                                                           // 14956
                                if ( xc[ni] != BASE ) break;                                                           // 14957
                                xc[ni--] = 0;                                                                          // 14958
                                k = 1;                                                                                 // 14959
                            }                                                                                          // 14960
                        }                                                                                              // 14961
                    }                                                                                                  // 14962
                                                                                                                       // 14963
                    // Remove trailing zeros.                                                                          // 14964
                    for ( i = xc.length; xc[--i] === 0; xc.pop() );                                                    // 14965
                }                                                                                                      // 14966
                                                                                                                       // 14967
                // Overflow? Infinity.                                                                                 // 14968
                if ( x.e > MAX_EXP ) {                                                                                 // 14969
                    x.c = x.e = null;                                                                                  // 14970
                                                                                                                       // 14971
                // Underflow? Zero.                                                                                    // 14972
                } else if ( x.e < MIN_EXP ) {                                                                          // 14973
                    x.c = [ x.e = 0 ];                                                                                 // 14974
                }                                                                                                      // 14975
            }                                                                                                          // 14976
                                                                                                                       // 14977
            return x;                                                                                                  // 14978
        }                                                                                                              // 14979
                                                                                                                       // 14980
                                                                                                                       // 14981
        // PROTOTYPE/INSTANCE METHODS                                                                                  // 14982
                                                                                                                       // 14983
                                                                                                                       // 14984
        /*                                                                                                             // 14985
         * Return a new BigNumber whose value is the absolute value of this BigNumber.                                 // 14986
         */                                                                                                            // 14987
        P.absoluteValue = P.abs = function () {                                                                        // 14988
            var x = new BigNumber(this);                                                                               // 14989
            if ( x.s < 0 ) x.s = 1;                                                                                    // 14990
            return x;                                                                                                  // 14991
        };                                                                                                             // 14992
                                                                                                                       // 14993
                                                                                                                       // 14994
        /*                                                                                                             // 14995
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole                        // 14996
         * number in the direction of Infinity.                                                                        // 14997
         */                                                                                                            // 14998
        P.ceil = function () {                                                                                         // 14999
            return round( new BigNumber(this), this.e + 1, 2 );                                                        // 15000
        };                                                                                                             // 15001
                                                                                                                       // 15002
                                                                                                                       // 15003
        /*                                                                                                             // 15004
         * Return                                                                                                      // 15005
         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),                              // 15006
         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),                                // 15007
         * 0 if they have the same value,                                                                              // 15008
         * or null if the value of either is NaN.                                                                      // 15009
         */                                                                                                            // 15010
        P.comparedTo = P.cmp = function ( y, b ) {                                                                     // 15011
            id = 1;                                                                                                    // 15012
            return compare( this, new BigNumber( y, b ) );                                                             // 15013
        };                                                                                                             // 15014
                                                                                                                       // 15015
                                                                                                                       // 15016
        /*                                                                                                             // 15017
         * Return the number of decimal places of the value of this BigNumber, or null if the value                    // 15018
         * of this BigNumber is ±Infinity or NaN.                                                                      // 15019
         */                                                                                                            // 15020
        P.decimalPlaces = P.dp = function () {                                                                         // 15021
            var n, v,                                                                                                  // 15022
                c = this.c;                                                                                            // 15023
                                                                                                                       // 15024
            if ( !c ) return null;                                                                                     // 15025
            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;                                   // 15026
                                                                                                                       // 15027
            // Subtract the number of trailing zeros of the last number.                                               // 15028
            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );                                                       // 15029
            if ( n < 0 ) n = 0;                                                                                        // 15030
                                                                                                                       // 15031
            return n;                                                                                                  // 15032
        };                                                                                                             // 15033
                                                                                                                       // 15034
                                                                                                                       // 15035
        /*                                                                                                             // 15036
         *  n / 0 = I                                                                                                  // 15037
         *  n / N = N                                                                                                  // 15038
         *  n / I = 0                                                                                                  // 15039
         *  0 / n = 0                                                                                                  // 15040
         *  0 / 0 = N                                                                                                  // 15041
         *  0 / N = N                                                                                                  // 15042
         *  0 / I = 0                                                                                                  // 15043
         *  N / n = N                                                                                                  // 15044
         *  N / 0 = N                                                                                                  // 15045
         *  N / N = N                                                                                                  // 15046
         *  N / I = N                                                                                                  // 15047
         *  I / n = I                                                                                                  // 15048
         *  I / 0 = I                                                                                                  // 15049
         *  I / N = N                                                                                                  // 15050
         *  I / I = N                                                                                                  // 15051
         *                                                                                                             // 15052
         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of                   // 15053
         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.                                     // 15054
         */                                                                                                            // 15055
        P.dividedBy = P.div = function ( y, b ) {                                                                      // 15056
            id = 3;                                                                                                    // 15057
            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );                                  // 15058
        };                                                                                                             // 15059
                                                                                                                       // 15060
                                                                                                                       // 15061
        /*                                                                                                             // 15062
         * Return a new BigNumber whose value is the integer part of dividing the value of this                        // 15063
         * BigNumber by the value of BigNumber(y, b).                                                                  // 15064
         */                                                                                                            // 15065
        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {                                                        // 15066
            id = 4;                                                                                                    // 15067
            return div( this, new BigNumber( y, b ), 0, 1 );                                                           // 15068
        };                                                                                                             // 15069
                                                                                                                       // 15070
                                                                                                                       // 15071
        /*                                                                                                             // 15072
         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),                        // 15073
         * otherwise returns false.                                                                                    // 15074
         */                                                                                                            // 15075
        P.equals = P.eq = function ( y, b ) {                                                                          // 15076
            id = 5;                                                                                                    // 15077
            return compare( this, new BigNumber( y, b ) ) === 0;                                                       // 15078
        };                                                                                                             // 15079
                                                                                                                       // 15080
                                                                                                                       // 15081
        /*                                                                                                             // 15082
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole                        // 15083
         * number in the direction of -Infinity.                                                                       // 15084
         */                                                                                                            // 15085
        P.floor = function () {                                                                                        // 15086
            return round( new BigNumber(this), this.e + 1, 3 );                                                        // 15087
        };                                                                                                             // 15088
                                                                                                                       // 15089
                                                                                                                       // 15090
        /*                                                                                                             // 15091
         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),                    // 15092
         * otherwise returns false.                                                                                    // 15093
         */                                                                                                            // 15094
        P.greaterThan = P.gt = function ( y, b ) {                                                                     // 15095
            id = 6;                                                                                                    // 15096
            return compare( this, new BigNumber( y, b ) ) > 0;                                                         // 15097
        };                                                                                                             // 15098
                                                                                                                       // 15099
                                                                                                                       // 15100
        /*                                                                                                             // 15101
         * Return true if the value of this BigNumber is greater than or equal to the value of                         // 15102
         * BigNumber(y, b), otherwise returns false.                                                                   // 15103
         */                                                                                                            // 15104
        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {                                                           // 15105
            id = 7;                                                                                                    // 15106
            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;                                    // 15107
                                                                                                                       // 15108
        };                                                                                                             // 15109
                                                                                                                       // 15110
                                                                                                                       // 15111
        /*                                                                                                             // 15112
         * Return true if the value of this BigNumber is a finite number, otherwise returns false.                     // 15113
         */                                                                                                            // 15114
        P.isFinite = function () {                                                                                     // 15115
            return !!this.c;                                                                                           // 15116
        };                                                                                                             // 15117
                                                                                                                       // 15118
                                                                                                                       // 15119
        /*                                                                                                             // 15120
         * Return true if the value of this BigNumber is an integer, otherwise return false.                           // 15121
         */                                                                                                            // 15122
        P.isInteger = P.isInt = function () {                                                                          // 15123
            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;                                      // 15124
        };                                                                                                             // 15125
                                                                                                                       // 15126
                                                                                                                       // 15127
        /*                                                                                                             // 15128
         * Return true if the value of this BigNumber is NaN, otherwise returns false.                                 // 15129
         */                                                                                                            // 15130
        P.isNaN = function () {                                                                                        // 15131
            return !this.s;                                                                                            // 15132
        };                                                                                                             // 15133
                                                                                                                       // 15134
                                                                                                                       // 15135
        /*                                                                                                             // 15136
         * Return true if the value of this BigNumber is negative, otherwise returns false.                            // 15137
         */                                                                                                            // 15138
        P.isNegative = P.isNeg = function () {                                                                         // 15139
            return this.s < 0;                                                                                         // 15140
        };                                                                                                             // 15141
                                                                                                                       // 15142
                                                                                                                       // 15143
        /*                                                                                                             // 15144
         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.                             // 15145
         */                                                                                                            // 15146
        P.isZero = function () {                                                                                       // 15147
            return !!this.c && this.c[0] == 0;                                                                         // 15148
        };                                                                                                             // 15149
                                                                                                                       // 15150
                                                                                                                       // 15151
        /*                                                                                                             // 15152
         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),                       // 15153
         * otherwise returns false.                                                                                    // 15154
         */                                                                                                            // 15155
        P.lessThan = P.lt = function ( y, b ) {                                                                        // 15156
            id = 8;                                                                                                    // 15157
            return compare( this, new BigNumber( y, b ) ) < 0;                                                         // 15158
        };                                                                                                             // 15159
                                                                                                                       // 15160
                                                                                                                       // 15161
        /*                                                                                                             // 15162
         * Return true if the value of this BigNumber is less than or equal to the value of                            // 15163
         * BigNumber(y, b), otherwise returns false.                                                                   // 15164
         */                                                                                                            // 15165
        P.lessThanOrEqualTo = P.lte = function ( y, b ) {                                                              // 15166
            id = 9;                                                                                                    // 15167
            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;                                   // 15168
        };                                                                                                             // 15169
                                                                                                                       // 15170
                                                                                                                       // 15171
        /*                                                                                                             // 15172
         *  n - 0 = n                                                                                                  // 15173
         *  n - N = N                                                                                                  // 15174
         *  n - I = -I                                                                                                 // 15175
         *  0 - n = -n                                                                                                 // 15176
         *  0 - 0 = 0                                                                                                  // 15177
         *  0 - N = N                                                                                                  // 15178
         *  0 - I = -I                                                                                                 // 15179
         *  N - n = N                                                                                                  // 15180
         *  N - 0 = N                                                                                                  // 15181
         *  N - N = N                                                                                                  // 15182
         *  N - I = N                                                                                                  // 15183
         *  I - n = I                                                                                                  // 15184
         *  I - 0 = I                                                                                                  // 15185
         *  I - N = N                                                                                                  // 15186
         *  I - I = N                                                                                                  // 15187
         *                                                                                                             // 15188
         * Return a new BigNumber whose value is the value of this BigNumber minus the value of                        // 15189
         * BigNumber(y, b).                                                                                            // 15190
         */                                                                                                            // 15191
        P.minus = P.sub = function ( y, b ) {                                                                          // 15192
            var i, j, t, xLTy,                                                                                         // 15193
                x = this,                                                                                              // 15194
                a = x.s;                                                                                               // 15195
                                                                                                                       // 15196
            id = 10;                                                                                                   // 15197
            y = new BigNumber( y, b );                                                                                 // 15198
            b = y.s;                                                                                                   // 15199
                                                                                                                       // 15200
            // Either NaN?                                                                                             // 15201
            if ( !a || !b ) return new BigNumber(NaN);                                                                 // 15202
                                                                                                                       // 15203
            // Signs differ?                                                                                           // 15204
            if ( a != b ) {                                                                                            // 15205
                y.s = -b;                                                                                              // 15206
                return x.plus(y);                                                                                      // 15207
            }                                                                                                          // 15208
                                                                                                                       // 15209
            var xe = x.e / LOG_BASE,                                                                                   // 15210
                ye = y.e / LOG_BASE,                                                                                   // 15211
                xc = x.c,                                                                                              // 15212
                yc = y.c;                                                                                              // 15213
                                                                                                                       // 15214
            if ( !xe || !ye ) {                                                                                        // 15215
                                                                                                                       // 15216
                // Either Infinity?                                                                                    // 15217
                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );                         // 15218
                                                                                                                       // 15219
                // Either zero?                                                                                        // 15220
                if ( !xc[0] || !yc[0] ) {                                                                              // 15221
                                                                                                                       // 15222
                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.                        // 15223
                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :                                        // 15224
                                                                                                                       // 15225
                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity                                    // 15226
                      ROUNDING_MODE == 3 ? -0 : 0 );                                                                   // 15227
                }                                                                                                      // 15228
            }                                                                                                          // 15229
                                                                                                                       // 15230
            xe = bitFloor(xe);                                                                                         // 15231
            ye = bitFloor(ye);                                                                                         // 15232
            xc = xc.slice();                                                                                           // 15233
                                                                                                                       // 15234
            // Determine which is the bigger number.                                                                   // 15235
            if ( a = xe - ye ) {                                                                                       // 15236
                                                                                                                       // 15237
                if ( xLTy = a < 0 ) {                                                                                  // 15238
                    a = -a;                                                                                            // 15239
                    t = xc;                                                                                            // 15240
                } else {                                                                                               // 15241
                    ye = xe;                                                                                           // 15242
                    t = yc;                                                                                            // 15243
                }                                                                                                      // 15244
                                                                                                                       // 15245
                t.reverse();                                                                                           // 15246
                                                                                                                       // 15247
                // Prepend zeros to equalise exponents.                                                                // 15248
                for ( b = a; b--; t.push(0) );                                                                         // 15249
                t.reverse();                                                                                           // 15250
            } else {                                                                                                   // 15251
                                                                                                                       // 15252
                // Exponents equal. Check digit by digit.                                                              // 15253
                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;                                          // 15254
                                                                                                                       // 15255
                for ( a = b = 0; b < j; b++ ) {                                                                        // 15256
                                                                                                                       // 15257
                    if ( xc[b] != yc[b] ) {                                                                            // 15258
                        xLTy = xc[b] < yc[b];                                                                          // 15259
                        break;                                                                                         // 15260
                    }                                                                                                  // 15261
                }                                                                                                      // 15262
            }                                                                                                          // 15263
                                                                                                                       // 15264
            // x < y? Point xc to the array of the bigger number.                                                      // 15265
            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;                                                             // 15266
                                                                                                                       // 15267
            b = ( j = yc.length ) - ( i = xc.length );                                                                 // 15268
                                                                                                                       // 15269
            // Append zeros to xc if shorter.                                                                          // 15270
            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.                     // 15271
            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );                                                                   // 15272
            b = BASE - 1;                                                                                              // 15273
                                                                                                                       // 15274
            // Subtract yc from xc.                                                                                    // 15275
            for ( ; j > a; ) {                                                                                         // 15276
                                                                                                                       // 15277
                if ( xc[--j] < yc[j] ) {                                                                               // 15278
                    for ( i = j; i && !xc[--i]; xc[i] = b );                                                           // 15279
                    --xc[i];                                                                                           // 15280
                    xc[j] += BASE;                                                                                     // 15281
                }                                                                                                      // 15282
                                                                                                                       // 15283
                xc[j] -= yc[j];                                                                                        // 15284
            }                                                                                                          // 15285
                                                                                                                       // 15286
            // Remove leading zeros and adjust exponent accordingly.                                                   // 15287
            for ( ; xc[0] == 0; xc.shift(), --ye );                                                                    // 15288
                                                                                                                       // 15289
            // Zero?                                                                                                   // 15290
            if ( !xc[0] ) {                                                                                            // 15291
                                                                                                                       // 15292
                // Following IEEE 754 (2008) 6.3,                                                                      // 15293
                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.                                       // 15294
                y.s = ROUNDING_MODE == 3 ? -1 : 1;                                                                     // 15295
                y.c = [ y.e = 0 ];                                                                                     // 15296
                return y;                                                                                              // 15297
            }                                                                                                          // 15298
                                                                                                                       // 15299
            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity                             // 15300
            // for finite x and y.                                                                                     // 15301
            return normalise( y, xc, ye );                                                                             // 15302
        };                                                                                                             // 15303
                                                                                                                       // 15304
                                                                                                                       // 15305
        /*                                                                                                             // 15306
         *   n % 0 =  N                                                                                                // 15307
         *   n % N =  N                                                                                                // 15308
         *   n % I =  n                                                                                                // 15309
         *   0 % n =  0                                                                                                // 15310
         *  -0 % n = -0                                                                                                // 15311
         *   0 % 0 =  N                                                                                                // 15312
         *   0 % N =  N                                                                                                // 15313
         *   0 % I =  0                                                                                                // 15314
         *   N % n =  N                                                                                                // 15315
         *   N % 0 =  N                                                                                                // 15316
         *   N % N =  N                                                                                                // 15317
         *   N % I =  N                                                                                                // 15318
         *   I % n =  N                                                                                                // 15319
         *   I % 0 =  N                                                                                                // 15320
         *   I % N =  N                                                                                                // 15321
         *   I % I =  N                                                                                                // 15322
         *                                                                                                             // 15323
         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of                       // 15324
         * BigNumber(y, b). The result depends on the value of MODULO_MODE.                                            // 15325
         */                                                                                                            // 15326
        P.modulo = P.mod = function ( y, b ) {                                                                         // 15327
            var q, s,                                                                                                  // 15328
                x = this;                                                                                              // 15329
                                                                                                                       // 15330
            id = 11;                                                                                                   // 15331
            y = new BigNumber( y, b );                                                                                 // 15332
                                                                                                                       // 15333
            // Return NaN if x is Infinity or NaN, or y is NaN or zero.                                                // 15334
            if ( !x.c || !y.s || y.c && !y.c[0] ) {                                                                    // 15335
                return new BigNumber(NaN);                                                                             // 15336
                                                                                                                       // 15337
            // Return x if y is Infinity or x is zero.                                                                 // 15338
            } else if ( !y.c || x.c && !x.c[0] ) {                                                                     // 15339
                return new BigNumber(x);                                                                               // 15340
            }                                                                                                          // 15341
                                                                                                                       // 15342
            if ( MODULO_MODE == 9 ) {                                                                                  // 15343
                                                                                                                       // 15344
                // Euclidian division: q = sign(y) * floor(x / abs(y))                                                 // 15345
                // r = x - qy    where  0 <= r < abs(y)                                                                // 15346
                s = y.s;                                                                                               // 15347
                y.s = 1;                                                                                               // 15348
                q = div( x, y, 0, 3 );                                                                                 // 15349
                y.s = s;                                                                                               // 15350
                q.s *= s;                                                                                              // 15351
            } else {                                                                                                   // 15352
                q = div( x, y, 0, MODULO_MODE );                                                                       // 15353
            }                                                                                                          // 15354
                                                                                                                       // 15355
            return x.minus( q.times(y) );                                                                              // 15356
        };                                                                                                             // 15357
                                                                                                                       // 15358
                                                                                                                       // 15359
        /*                                                                                                             // 15360
         * Return a new BigNumber whose value is the value of this BigNumber negated,                                  // 15361
         * i.e. multiplied by -1.                                                                                      // 15362
         */                                                                                                            // 15363
        P.negated = P.neg = function () {                                                                              // 15364
            var x = new BigNumber(this);                                                                               // 15365
            x.s = -x.s || null;                                                                                        // 15366
            return x;                                                                                                  // 15367
        };                                                                                                             // 15368
                                                                                                                       // 15369
                                                                                                                       // 15370
        /*                                                                                                             // 15371
         *  n + 0 = n                                                                                                  // 15372
         *  n + N = N                                                                                                  // 15373
         *  n + I = I                                                                                                  // 15374
         *  0 + n = n                                                                                                  // 15375
         *  0 + 0 = 0                                                                                                  // 15376
         *  0 + N = N                                                                                                  // 15377
         *  0 + I = I                                                                                                  // 15378
         *  N + n = N                                                                                                  // 15379
         *  N + 0 = N                                                                                                  // 15380
         *  N + N = N                                                                                                  // 15381
         *  N + I = N                                                                                                  // 15382
         *  I + n = I                                                                                                  // 15383
         *  I + 0 = I                                                                                                  // 15384
         *  I + N = N                                                                                                  // 15385
         *  I + I = I                                                                                                  // 15386
         *                                                                                                             // 15387
         * Return a new BigNumber whose value is the value of this BigNumber plus the value of                         // 15388
         * BigNumber(y, b).                                                                                            // 15389
         */                                                                                                            // 15390
        P.plus = P.add = function ( y, b ) {                                                                           // 15391
            var t,                                                                                                     // 15392
                x = this,                                                                                              // 15393
                a = x.s;                                                                                               // 15394
                                                                                                                       // 15395
            id = 12;                                                                                                   // 15396
            y = new BigNumber( y, b );                                                                                 // 15397
            b = y.s;                                                                                                   // 15398
                                                                                                                       // 15399
            // Either NaN?                                                                                             // 15400
            if ( !a || !b ) return new BigNumber(NaN);                                                                 // 15401
                                                                                                                       // 15402
            // Signs differ?                                                                                           // 15403
             if ( a != b ) {                                                                                           // 15404
                y.s = -b;                                                                                              // 15405
                return x.minus(y);                                                                                     // 15406
            }                                                                                                          // 15407
                                                                                                                       // 15408
            var xe = x.e / LOG_BASE,                                                                                   // 15409
                ye = y.e / LOG_BASE,                                                                                   // 15410
                xc = x.c,                                                                                              // 15411
                yc = y.c;                                                                                              // 15412
                                                                                                                       // 15413
            if ( !xe || !ye ) {                                                                                        // 15414
                                                                                                                       // 15415
                // Return ±Infinity if either ±Infinity.                                                               // 15416
                if ( !xc || !yc ) return new BigNumber( a / 0 );                                                       // 15417
                                                                                                                       // 15418
                // Either zero?                                                                                        // 15419
                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.                            // 15420
                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );                         // 15421
            }                                                                                                          // 15422
                                                                                                                       // 15423
            xe = bitFloor(xe);                                                                                         // 15424
            ye = bitFloor(ye);                                                                                         // 15425
            xc = xc.slice();                                                                                           // 15426
                                                                                                                       // 15427
            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.                            // 15428
            if ( a = xe - ye ) {                                                                                       // 15429
                if ( a > 0 ) {                                                                                         // 15430
                    ye = xe;                                                                                           // 15431
                    t = yc;                                                                                            // 15432
                } else {                                                                                               // 15433
                    a = -a;                                                                                            // 15434
                    t = xc;                                                                                            // 15435
                }                                                                                                      // 15436
                                                                                                                       // 15437
                t.reverse();                                                                                           // 15438
                for ( ; a--; t.push(0) );                                                                              // 15439
                t.reverse();                                                                                           // 15440
            }                                                                                                          // 15441
                                                                                                                       // 15442
            a = xc.length;                                                                                             // 15443
            b = yc.length;                                                                                             // 15444
                                                                                                                       // 15445
            // Point xc to the longer array, and b to the shorter length.                                              // 15446
            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;                                                           // 15447
                                                                                                                       // 15448
            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.                          // 15449
            for ( a = 0; b; ) {                                                                                        // 15450
                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;                                                        // 15451
                xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;                                                             // 15452
            }                                                                                                          // 15453
                                                                                                                       // 15454
            if (a) {                                                                                                   // 15455
                xc.unshift(a);                                                                                         // 15456
                ++ye;                                                                                                  // 15457
            }                                                                                                          // 15458
                                                                                                                       // 15459
            // No need to check for zero, as +x + +y != 0 && -x + -y != 0                                              // 15460
            // ye = MAX_EXP + 1 possible                                                                               // 15461
            return normalise( y, xc, ye );                                                                             // 15462
        };                                                                                                             // 15463
                                                                                                                       // 15464
                                                                                                                       // 15465
        /*                                                                                                             // 15466
         * Return the number of significant digits of the value of this BigNumber.                                     // 15467
         *                                                                                                             // 15468
         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.                     // 15469
         */                                                                                                            // 15470
        P.precision = P.sd = function (z) {                                                                            // 15471
            var n, v,                                                                                                  // 15472
                x = this,                                                                                              // 15473
                c = x.c;                                                                                               // 15474
                                                                                                                       // 15475
            // 'precision() argument not a boolean or binary digit: {z}'                                               // 15476
            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {                                                      // 15477
                if (ERRORS) raise( 13, 'argument' + notBool, z );                                                      // 15478
                if ( z != !!z ) z = null;                                                                              // 15479
            }                                                                                                          // 15480
                                                                                                                       // 15481
            if ( !c ) return null;                                                                                     // 15482
            v = c.length - 1;                                                                                          // 15483
            n = v * LOG_BASE + 1;                                                                                      // 15484
                                                                                                                       // 15485
            if ( v = c[v] ) {                                                                                          // 15486
                                                                                                                       // 15487
                // Subtract the number of trailing zeros of the last element.                                          // 15488
                for ( ; v % 10 == 0; v /= 10, n-- );                                                                   // 15489
                                                                                                                       // 15490
                // Add the number of digits of the first element.                                                      // 15491
                for ( v = c[0]; v >= 10; v /= 10, n++ );                                                               // 15492
            }                                                                                                          // 15493
                                                                                                                       // 15494
            if ( z && x.e + 1 > n ) n = x.e + 1;                                                                       // 15495
                                                                                                                       // 15496
            return n;                                                                                                  // 15497
        };                                                                                                             // 15498
                                                                                                                       // 15499
                                                                                                                       // 15500
        /*                                                                                                             // 15501
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of                   // 15502
         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if                         // 15503
         * omitted.                                                                                                    // 15504
         *                                                                                                             // 15505
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 15506
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15507
         *                                                                                                             // 15508
         * 'round() decimal places out of range: {dp}'                                                                 // 15509
         * 'round() decimal places not an integer: {dp}'                                                               // 15510
         * 'round() rounding mode not an integer: {rm}'                                                                // 15511
         * 'round() rounding mode out of range: {rm}'                                                                  // 15512
         */                                                                                                            // 15513
        P.round = function ( dp, rm ) {                                                                                // 15514
            var n = new BigNumber(this);                                                                               // 15515
                                                                                                                       // 15516
            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {                                                        // 15517
                round( n, ~~dp + this.e + 1, rm == null ||                                                             // 15518
                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );                                // 15519
            }                                                                                                          // 15520
                                                                                                                       // 15521
            return n;                                                                                                  // 15522
        };                                                                                                             // 15523
                                                                                                                       // 15524
                                                                                                                       // 15525
        /*                                                                                                             // 15526
         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places                       // 15527
         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.                                      // 15528
         *                                                                                                             // 15529
         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.                                        // 15530
         *                                                                                                             // 15531
         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity                      // 15532
         * otherwise.                                                                                                  // 15533
         *                                                                                                             // 15534
         * 'shift() argument not an integer: {k}'                                                                      // 15535
         * 'shift() argument out of range: {k}'                                                                        // 15536
         */                                                                                                            // 15537
        P.shift = function (k) {                                                                                       // 15538
            var n = this;                                                                                              // 15539
            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )                                // 15540
                                                                                                                       // 15541
              // k < 1e+21, or truncate(k) will produce exponential notation.                                          // 15542
              ? n.times( '1e' + truncate(k) )                                                                          // 15543
              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )                      // 15544
                ? n.s * ( k < 0 ? 0 : 1 / 0 )                                                                          // 15545
                : n );                                                                                                 // 15546
        };                                                                                                             // 15547
                                                                                                                       // 15548
                                                                                                                       // 15549
        /*                                                                                                             // 15550
         *  sqrt(-n) =  N                                                                                              // 15551
         *  sqrt( N) =  N                                                                                              // 15552
         *  sqrt(-I) =  N                                                                                              // 15553
         *  sqrt( I) =  I                                                                                              // 15554
         *  sqrt( 0) =  0                                                                                              // 15555
         *  sqrt(-0) = -0                                                                                              // 15556
         *                                                                                                             // 15557
         * Return a new BigNumber whose value is the square root of the value of this BigNumber,                       // 15558
         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.                                                      // 15559
         */                                                                                                            // 15560
        P.squareRoot = P.sqrt = function () {                                                                          // 15561
            var m, n, r, rep, t,                                                                                       // 15562
                x = this,                                                                                              // 15563
                c = x.c,                                                                                               // 15564
                s = x.s,                                                                                               // 15565
                e = x.e,                                                                                               // 15566
                dp = DECIMAL_PLACES + 4,                                                                               // 15567
                half = new BigNumber('0.5');                                                                           // 15568
                                                                                                                       // 15569
            // Negative/NaN/Infinity/zero?                                                                             // 15570
            if ( s !== 1 || !c || !c[0] ) {                                                                            // 15571
                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );                           // 15572
            }                                                                                                          // 15573
                                                                                                                       // 15574
            // Initial estimate.                                                                                       // 15575
            s = Math.sqrt( +x );                                                                                       // 15576
                                                                                                                       // 15577
            // Math.sqrt underflow/overflow?                                                                           // 15578
            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.                                 // 15579
            if ( s == 0 || s == 1 / 0 ) {                                                                              // 15580
                n = coeffToString(c);                                                                                  // 15581
                if ( ( n.length + e ) % 2 == 0 ) n += '0';                                                             // 15582
                s = Math.sqrt(n);                                                                                      // 15583
                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );                                                    // 15584
                                                                                                                       // 15585
                if ( s == 1 / 0 ) {                                                                                    // 15586
                    n = '1e' + e;                                                                                      // 15587
                } else {                                                                                               // 15588
                    n = s.toExponential();                                                                             // 15589
                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;                                                          // 15590
                }                                                                                                      // 15591
                                                                                                                       // 15592
                r = new BigNumber(n);                                                                                  // 15593
            } else {                                                                                                   // 15594
                r = new BigNumber( s + '' );                                                                           // 15595
            }                                                                                                          // 15596
                                                                                                                       // 15597
            // Check for zero.                                                                                         // 15598
            // r could be zero if MIN_EXP is changed after the this value was created.                                 // 15599
            // This would cause a division by zero (x/t) and hence Infinity below, which would cause                   // 15600
            // coeffToString to throw.                                                                                 // 15601
            if ( r.c[0] ) {                                                                                            // 15602
                e = r.e;                                                                                               // 15603
                s = e + dp;                                                                                            // 15604
                if ( s < 3 ) s = 0;                                                                                    // 15605
                                                                                                                       // 15606
                // Newton-Raphson iteration.                                                                           // 15607
                for ( ; ; ) {                                                                                          // 15608
                    t = r;                                                                                             // 15609
                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );                                                    // 15610
                                                                                                                       // 15611
                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =                                                // 15612
                         coeffToString( r.c ) ).slice( 0, s ) ) {                                                      // 15613
                                                                                                                       // 15614
                        // The exponent of r may here be one less than the final result exponent,                      // 15615
                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits                     // 15616
                        // are indexed correctly.                                                                      // 15617
                        if ( r.e < e ) --s;                                                                            // 15618
                        n = n.slice( s - 3, s + 1 );                                                                   // 15619
                                                                                                                       // 15620
                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits                    // 15621
                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the                        // 15622
                        // iteration.                                                                                  // 15623
                        if ( n == '9999' || !rep && n == '4999' ) {                                                    // 15624
                                                                                                                       // 15625
                            // On the first iteration only, check to see if rounding up gives the                      // 15626
                            // exact result as the nines may infinitely repeat.                                        // 15627
                            if ( !rep ) {                                                                              // 15628
                                round( t, t.e + DECIMAL_PLACES + 2, 0 );                                               // 15629
                                                                                                                       // 15630
                                if ( t.times(t).eq(x) ) {                                                              // 15631
                                    r = t;                                                                             // 15632
                                    break;                                                                             // 15633
                                }                                                                                      // 15634
                            }                                                                                          // 15635
                                                                                                                       // 15636
                            dp += 4;                                                                                   // 15637
                            s += 4;                                                                                    // 15638
                            rep = 1;                                                                                   // 15639
                        } else {                                                                                       // 15640
                                                                                                                       // 15641
                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact                         // 15642
                            // result. If not, then there are further digits and m will be truthy.                     // 15643
                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {                                         // 15644
                                                                                                                       // 15645
                                // Truncate to the first rounding digit.                                               // 15646
                                round( r, r.e + DECIMAL_PLACES + 2, 1 );                                               // 15647
                                m = !r.times(r).eq(x);                                                                 // 15648
                            }                                                                                          // 15649
                                                                                                                       // 15650
                            break;                                                                                     // 15651
                        }                                                                                              // 15652
                    }                                                                                                  // 15653
                }                                                                                                      // 15654
            }                                                                                                          // 15655
                                                                                                                       // 15656
            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );                                             // 15657
        };                                                                                                             // 15658
                                                                                                                       // 15659
                                                                                                                       // 15660
        /*                                                                                                             // 15661
         *  n * 0 = 0                                                                                                  // 15662
         *  n * N = N                                                                                                  // 15663
         *  n * I = I                                                                                                  // 15664
         *  0 * n = 0                                                                                                  // 15665
         *  0 * 0 = 0                                                                                                  // 15666
         *  0 * N = N                                                                                                  // 15667
         *  0 * I = N                                                                                                  // 15668
         *  N * n = N                                                                                                  // 15669
         *  N * 0 = N                                                                                                  // 15670
         *  N * N = N                                                                                                  // 15671
         *  N * I = N                                                                                                  // 15672
         *  I * n = I                                                                                                  // 15673
         *  I * 0 = N                                                                                                  // 15674
         *  I * N = N                                                                                                  // 15675
         *  I * I = I                                                                                                  // 15676
         *                                                                                                             // 15677
         * Return a new BigNumber whose value is the value of this BigNumber times the value of                        // 15678
         * BigNumber(y, b).                                                                                            // 15679
         */                                                                                                            // 15680
        P.times = P.mul = function ( y, b ) {                                                                          // 15681
            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,                                                    // 15682
                base, sqrtBase,                                                                                        // 15683
                x = this,                                                                                              // 15684
                xc = x.c,                                                                                              // 15685
                yc = ( id = 17, y = new BigNumber( y, b ) ).c;                                                         // 15686
                                                                                                                       // 15687
            // Either NaN, ±Infinity or ±0?                                                                            // 15688
            if ( !xc || !yc || !xc[0] || !yc[0] ) {                                                                    // 15689
                                                                                                                       // 15690
                // Return NaN if either is NaN, or one is 0 and the other is Infinity.                                 // 15691
                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {                                    // 15692
                    y.c = y.e = y.s = null;                                                                            // 15693
                } else {                                                                                               // 15694
                    y.s *= x.s;                                                                                        // 15695
                                                                                                                       // 15696
                    // Return ±Infinity if either is ±Infinity.                                                        // 15697
                    if ( !xc || !yc ) {                                                                                // 15698
                        y.c = y.e = null;                                                                              // 15699
                                                                                                                       // 15700
                    // Return ±0 if either is ±0.                                                                      // 15701
                    } else {                                                                                           // 15702
                        y.c = [0];                                                                                     // 15703
                        y.e = 0;                                                                                       // 15704
                    }                                                                                                  // 15705
                }                                                                                                      // 15706
                                                                                                                       // 15707
                return y;                                                                                              // 15708
            }                                                                                                          // 15709
                                                                                                                       // 15710
            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );                                               // 15711
            y.s *= x.s;                                                                                                // 15712
            xcL = xc.length;                                                                                           // 15713
            ycL = yc.length;                                                                                           // 15714
                                                                                                                       // 15715
            // Ensure xc points to longer array and xcL to its length.                                                 // 15716
            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;                                   // 15717
                                                                                                                       // 15718
            // Initialise the result array with zeros.                                                                 // 15719
            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );                                                           // 15720
                                                                                                                       // 15721
            base = BASE;                                                                                               // 15722
            sqrtBase = SQRT_BASE;                                                                                      // 15723
                                                                                                                       // 15724
            for ( i = ycL; --i >= 0; ) {                                                                               // 15725
                c = 0;                                                                                                 // 15726
                ylo = yc[i] % sqrtBase;                                                                                // 15727
                yhi = yc[i] / sqrtBase | 0;                                                                            // 15728
                                                                                                                       // 15729
                for ( k = xcL, j = i + k; j > i; ) {                                                                   // 15730
                    xlo = xc[--k] % sqrtBase;                                                                          // 15731
                    xhi = xc[k] / sqrtBase | 0;                                                                        // 15732
                    m = yhi * xlo + xhi * ylo;                                                                         // 15733
                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;                                     // 15734
                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;                                         // 15735
                    zc[j--] = xlo % base;                                                                              // 15736
                }                                                                                                      // 15737
                                                                                                                       // 15738
                zc[j] = c;                                                                                             // 15739
            }                                                                                                          // 15740
                                                                                                                       // 15741
            if (c) {                                                                                                   // 15742
                ++e;                                                                                                   // 15743
            } else {                                                                                                   // 15744
                zc.shift();                                                                                            // 15745
            }                                                                                                          // 15746
                                                                                                                       // 15747
            return normalise( y, zc, e );                                                                              // 15748
        };                                                                                                             // 15749
                                                                                                                       // 15750
                                                                                                                       // 15751
        /*                                                                                                             // 15752
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of                   // 15753
         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.                            // 15754
         *                                                                                                             // 15755
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.                                              // 15756
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15757
         *                                                                                                             // 15758
         * 'toDigits() precision out of range: {sd}'                                                                   // 15759
         * 'toDigits() precision not an integer: {sd}'                                                                 // 15760
         * 'toDigits() rounding mode not an integer: {rm}'                                                             // 15761
         * 'toDigits() rounding mode out of range: {rm}'                                                               // 15762
         */                                                                                                            // 15763
        P.toDigits = function ( sd, rm ) {                                                                             // 15764
            var n = new BigNumber(this);                                                                               // 15765
            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;                             // 15766
            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;                     // 15767
            return sd ? round( n, sd, rm ) : n;                                                                        // 15768
        };                                                                                                             // 15769
                                                                                                                       // 15770
                                                                                                                       // 15771
        /*                                                                                                             // 15772
         * Return a string representing the value of this BigNumber in exponential notation and                        // 15773
         * rounded using ROUNDING_MODE to dp fixed decimal places.                                                     // 15774
         *                                                                                                             // 15775
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 15776
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15777
         *                                                                                                             // 15778
         * 'toExponential() decimal places not an integer: {dp}'                                                       // 15779
         * 'toExponential() decimal places out of range: {dp}'                                                         // 15780
         * 'toExponential() rounding mode not an integer: {rm}'                                                        // 15781
         * 'toExponential() rounding mode out of range: {rm}'                                                          // 15782
         */                                                                                                            // 15783
        P.toExponential = function ( dp, rm ) {                                                                        // 15784
            return format( this,                                                                                       // 15785
              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );                                  // 15786
        };                                                                                                             // 15787
                                                                                                                       // 15788
                                                                                                                       // 15789
        /*                                                                                                             // 15790
         * Return a string representing the value of this BigNumber in fixed-point notation rounding                   // 15791
         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.                       // 15792
         *                                                                                                             // 15793
         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',                                             // 15794
         * but e.g. (-0.00001).toFixed(0) is '-0'.                                                                     // 15795
         *                                                                                                             // 15796
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 15797
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15798
         *                                                                                                             // 15799
         * 'toFixed() decimal places not an integer: {dp}'                                                             // 15800
         * 'toFixed() decimal places out of range: {dp}'                                                               // 15801
         * 'toFixed() rounding mode not an integer: {rm}'                                                              // 15802
         * 'toFixed() rounding mode out of range: {rm}'                                                                // 15803
         */                                                                                                            // 15804
        P.toFixed = function ( dp, rm ) {                                                                              // 15805
            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )                                            // 15806
              ? ~~dp + this.e + 1 : null, rm, 20 );                                                                    // 15807
        };                                                                                                             // 15808
                                                                                                                       // 15809
                                                                                                                       // 15810
        /*                                                                                                             // 15811
         * Return a string representing the value of this BigNumber in fixed-point notation rounded                    // 15812
         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties                   // 15813
         * of the FORMAT object (see BigNumber.config).                                                                // 15814
         *                                                                                                             // 15815
         * FORMAT = {                                                                                                  // 15816
         *      decimalSeparator : '.',                                                                                // 15817
         *      groupSeparator : ',',                                                                                  // 15818
         *      groupSize : 3,                                                                                         // 15819
         *      secondaryGroupSize : 0,                                                                                // 15820
         *      fractionGroupSeparator : '\xA0',    // non-breaking space                                              // 15821
         *      fractionGroupSize : 0                                                                                  // 15822
         * };                                                                                                          // 15823
         *                                                                                                             // 15824
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 15825
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15826
         *                                                                                                             // 15827
         * 'toFormat() decimal places not an integer: {dp}'                                                            // 15828
         * 'toFormat() decimal places out of range: {dp}'                                                              // 15829
         * 'toFormat() rounding mode not an integer: {rm}'                                                             // 15830
         * 'toFormat() rounding mode out of range: {rm}'                                                               // 15831
         */                                                                                                            // 15832
        P.toFormat = function ( dp, rm ) {                                                                             // 15833
            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )                                         // 15834
              ? ~~dp + this.e + 1 : null, rm, 21 );                                                                    // 15835
                                                                                                                       // 15836
            if ( this.c ) {                                                                                            // 15837
                var i,                                                                                                 // 15838
                    arr = str.split('.'),                                                                              // 15839
                    g1 = +FORMAT.groupSize,                                                                            // 15840
                    g2 = +FORMAT.secondaryGroupSize,                                                                   // 15841
                    groupSeparator = FORMAT.groupSeparator,                                                            // 15842
                    intPart = arr[0],                                                                                  // 15843
                    fractionPart = arr[1],                                                                             // 15844
                    isNeg = this.s < 0,                                                                                // 15845
                    intDigits = isNeg ? intPart.slice(1) : intPart,                                                    // 15846
                    len = intDigits.length;                                                                            // 15847
                                                                                                                       // 15848
                if (g2) i = g1, g1 = g2, g2 = i, len -= i;                                                             // 15849
                                                                                                                       // 15850
                if ( g1 > 0 && len > 0 ) {                                                                             // 15851
                    i = len % g1 || g1;                                                                                // 15852
                    intPart = intDigits.substr( 0, i );                                                                // 15853
                                                                                                                       // 15854
                    for ( ; i < len; i += g1 ) {                                                                       // 15855
                        intPart += groupSeparator + intDigits.substr( i, g1 );                                         // 15856
                    }                                                                                                  // 15857
                                                                                                                       // 15858
                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);                                      // 15859
                    if (isNeg) intPart = '-' + intPart;                                                                // 15860
                }                                                                                                      // 15861
                                                                                                                       // 15862
                str = fractionPart                                                                                     // 15863
                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )                           // 15864
                    ? fractionPart.replace( new RegExp( '\\d{' + g2 + '}\\B', 'g' ),                                   // 15865
                      '$&' + FORMAT.fractionGroupSeparator )                                                           // 15866
                    : fractionPart )                                                                                   // 15867
                  : intPart;                                                                                           // 15868
            }                                                                                                          // 15869
                                                                                                                       // 15870
            return str;                                                                                                // 15871
        };                                                                                                             // 15872
                                                                                                                       // 15873
                                                                                                                       // 15874
        /*                                                                                                             // 15875
         * Return a string array representing the value of this BigNumber as a simple fraction with                    // 15876
         * an integer numerator and an integer denominator. The denominator will be a positive                         // 15877
         * non-zero value less than or equal to the specified maximum denominator. If a maximum                        // 15878
         * denominator is not specified, the denominator will be the lowest value necessary to                         // 15879
         * represent the number exactly.                                                                               // 15880
         *                                                                                                             // 15881
         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.                        // 15882
         *                                                                                                             // 15883
         * 'toFraction() max denominator not an integer: {md}'                                                         // 15884
         * 'toFraction() max denominator out of range: {md}'                                                           // 15885
         */                                                                                                            // 15886
        P.toFraction = function (md) {                                                                                 // 15887
            var arr, d0, d2, e, exp, n, n0, q, s,                                                                      // 15888
                k = ERRORS,                                                                                            // 15889
                x = this,                                                                                              // 15890
                xc = x.c,                                                                                              // 15891
                d = new BigNumber(ONE),                                                                                // 15892
                n1 = d0 = new BigNumber(ONE),                                                                          // 15893
                d1 = n0 = new BigNumber(ONE);                                                                          // 15894
                                                                                                                       // 15895
            if ( md != null ) {                                                                                        // 15896
                ERRORS = false;                                                                                        // 15897
                n = new BigNumber(md);                                                                                 // 15898
                ERRORS = k;                                                                                            // 15899
                                                                                                                       // 15900
                if ( !( k = n.isInt() ) || n.lt(ONE) ) {                                                               // 15901
                                                                                                                       // 15902
                    if (ERRORS) {                                                                                      // 15903
                        raise( 22,                                                                                     // 15904
                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );                        // 15905
                    }                                                                                                  // 15906
                                                                                                                       // 15907
                    // ERRORS is false:                                                                                // 15908
                    // If md is a finite non-integer >= 1, round it to an integer and use it.                          // 15909
                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;                                      // 15910
                }                                                                                                      // 15911
            }                                                                                                          // 15912
                                                                                                                       // 15913
            if ( !xc ) return x.toString();                                                                            // 15914
            s = coeffToString(xc);                                                                                     // 15915
                                                                                                                       // 15916
            // Determine initial denominator.                                                                          // 15917
            // d is a power of 10 and the minimum max denominator that specifies the value exactly.                    // 15918
            e = d.e = s.length - x.e - 1;                                                                              // 15919
            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];                                    // 15920
            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;                                                         // 15921
                                                                                                                       // 15922
            exp = MAX_EXP;                                                                                             // 15923
            MAX_EXP = 1 / 0;                                                                                           // 15924
            n = new BigNumber(s);                                                                                      // 15925
                                                                                                                       // 15926
            // n0 = d1 = 0                                                                                             // 15927
            n0.c[0] = 0;                                                                                               // 15928
                                                                                                                       // 15929
            for ( ; ; )  {                                                                                             // 15930
                q = div( n, d, 0, 1 );                                                                                 // 15931
                d2 = d0.plus( q.times(d1) );                                                                           // 15932
                if ( d2.cmp(md) == 1 ) break;                                                                          // 15933
                d0 = d1;                                                                                               // 15934
                d1 = d2;                                                                                               // 15935
                n1 = n0.plus( q.times( d2 = n1 ) );                                                                    // 15936
                n0 = d2;                                                                                               // 15937
                d = n.minus( q.times( d2 = d ) );                                                                      // 15938
                n = d2;                                                                                                // 15939
            }                                                                                                          // 15940
                                                                                                                       // 15941
            d2 = div( md.minus(d0), d1, 0, 1 );                                                                        // 15942
            n0 = n0.plus( d2.times(n1) );                                                                              // 15943
            d0 = d0.plus( d2.times(d1) );                                                                              // 15944
            n0.s = n1.s = x.s;                                                                                         // 15945
            e *= 2;                                                                                                    // 15946
                                                                                                                       // 15947
            // Determine which fraction is closer to x, n0/d0 or n1/d1                                                 // 15948
            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(                                                  // 15949
                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1                                                 // 15950
                    ? [ n1.toString(), d1.toString() ]                                                                 // 15951
                    : [ n0.toString(), d0.toString() ];                                                                // 15952
                                                                                                                       // 15953
            MAX_EXP = exp;                                                                                             // 15954
            return arr;                                                                                                // 15955
        };                                                                                                             // 15956
                                                                                                                       // 15957
                                                                                                                       // 15958
        /*                                                                                                             // 15959
         * Return the value of this BigNumber converted to a number primitive.                                         // 15960
         */                                                                                                            // 15961
        P.toNumber = function () {                                                                                     // 15962
            return +this;                                                                                              // 15963
        };                                                                                                             // 15964
                                                                                                                       // 15965
                                                                                                                       // 15966
        /*                                                                                                             // 15967
         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.                        // 15968
         * If m is present, return the result modulo m.                                                                // 15969
         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.                                       // 15970
         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using                             // 15971
         * ROUNDING_MODE.                                                                                              // 15972
         *                                                                                                             // 15973
         * The modular power operation works efficiently when x, n, and m are positive integers,                       // 15974
         * otherwise it is equivalent to calculating x.toPower(n).modulo(m) (with POW_PRECISION 0).                    // 15975
         *                                                                                                             // 15976
         * n {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.                                        // 15977
         * [m] {number|string|BigNumber} The modulus.                                                                  // 15978
         *                                                                                                             // 15979
         * 'pow() exponent not an integer: {n}'                                                                        // 15980
         * 'pow() exponent out of range: {n}'                                                                          // 15981
         *                                                                                                             // 15982
         * Performs 54 loop iterations for n of 9007199254740991.                                                      // 15983
         */                                                                                                            // 15984
        P.toPower = P.pow = function ( n, m ) {                                                                        // 15985
            var k, y, z,                                                                                               // 15986
                i = mathfloor( n < 0 ? -n : +n ),                                                                      // 15987
                x = this;                                                                                              // 15988
                                                                                                                       // 15989
            if ( m != null ) {                                                                                         // 15990
                id = 23;                                                                                               // 15991
                m = new BigNumber(m);                                                                                  // 15992
            }                                                                                                          // 15993
                                                                                                                       // 15994
            // Pass ±Infinity to Math.pow if exponent is out of range.                                                 // 15995
            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&                              // 15996
              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||                                                  // 15997
                parseFloat(n) != n && !( n = NaN ) ) || n == 0 ) {                                                     // 15998
                k = Math.pow( +x, n );                                                                                 // 15999
                return new BigNumber( m ? k % m : k );                                                                 // 16000
            }                                                                                                          // 16001
                                                                                                                       // 16002
            if (m) {                                                                                                   // 16003
                if ( n > 1 && x.gt(ONE) && x.isInt() && m.gt(ONE) && m.isInt() ) {                                     // 16004
                    x = x.mod(m);                                                                                      // 16005
                } else {                                                                                               // 16006
                    z = m;                                                                                             // 16007
                                                                                                                       // 16008
                    // Nullify m so only a single mod operation is performed at the end.                               // 16009
                    m = null;                                                                                          // 16010
                }                                                                                                      // 16011
            } else if (POW_PRECISION) {                                                                                // 16012
                                                                                                                       // 16013
                // Truncating each coefficient array to a length of k after each multiplication                        // 16014
                // equates to truncating significant digits to POW_PRECISION + [28, 41],                               // 16015
                // i.e. there will be a minimum of 28 guard digits retained.                                           // 16016
                // (Using + 1.5 would give [9, 21] guard digits.)                                                      // 16017
                k = mathceil( POW_PRECISION / LOG_BASE + 2 );                                                          // 16018
            }                                                                                                          // 16019
                                                                                                                       // 16020
            y = new BigNumber(ONE);                                                                                    // 16021
                                                                                                                       // 16022
            for ( ; ; ) {                                                                                              // 16023
                if ( i % 2 ) {                                                                                         // 16024
                    y = y.times(x);                                                                                    // 16025
                    if ( !y.c ) break;                                                                                 // 16026
                    if (k) {                                                                                           // 16027
                        if ( y.c.length > k ) y.c.length = k;                                                          // 16028
                    } else if (m) {                                                                                    // 16029
                        y = y.mod(m);                                                                                  // 16030
                    }                                                                                                  // 16031
                }                                                                                                      // 16032
                                                                                                                       // 16033
                i = mathfloor( i / 2 );                                                                                // 16034
                if ( !i ) break;                                                                                       // 16035
                x = x.times(x);                                                                                        // 16036
                if (k) {                                                                                               // 16037
                    if ( x.c && x.c.length > k ) x.c.length = k;                                                       // 16038
                } else if (m) {                                                                                        // 16039
                    x = x.mod(m);                                                                                      // 16040
                }                                                                                                      // 16041
            }                                                                                                          // 16042
                                                                                                                       // 16043
            if (m) return y;                                                                                           // 16044
            if ( n < 0 ) y = ONE.div(y);                                                                               // 16045
                                                                                                                       // 16046
            return z ? y.mod(z) : k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;                                    // 16047
        };                                                                                                             // 16048
                                                                                                                       // 16049
                                                                                                                       // 16050
        /*                                                                                                             // 16051
         * Return a string representing the value of this BigNumber rounded to sd significant digits                   // 16052
         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits                            // 16053
         * necessary to represent the integer part of the value in fixed-point notation, then use                      // 16054
         * exponential notation.                                                                                       // 16055
         *                                                                                                             // 16056
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.                                              // 16057
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 16058
         *                                                                                                             // 16059
         * 'toPrecision() precision not an integer: {sd}'                                                              // 16060
         * 'toPrecision() precision out of range: {sd}'                                                                // 16061
         * 'toPrecision() rounding mode not an integer: {rm}'                                                          // 16062
         * 'toPrecision() rounding mode out of range: {rm}'                                                            // 16063
         */                                                                                                            // 16064
        P.toPrecision = function ( sd, rm ) {                                                                          // 16065
            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )                               // 16066
              ? sd | 0 : null, rm, 24 );                                                                               // 16067
        };                                                                                                             // 16068
                                                                                                                       // 16069
                                                                                                                       // 16070
        /*                                                                                                             // 16071
         * Return a string representing the value of this BigNumber in base b, or base 10 if b is                      // 16072
         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and                   // 16073
         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent                       // 16074
         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than                   // 16075
         * TO_EXP_NEG, return exponential notation.                                                                    // 16076
         *                                                                                                             // 16077
         * [b] {number} Integer, 2 to 64 inclusive.                                                                    // 16078
         *                                                                                                             // 16079
         * 'toString() base not an integer: {b}'                                                                       // 16080
         * 'toString() base out of range: {b}'                                                                         // 16081
         */                                                                                                            // 16082
        P.toString = function (b) {                                                                                    // 16083
            var str,                                                                                                   // 16084
                n = this,                                                                                              // 16085
                s = n.s,                                                                                               // 16086
                e = n.e;                                                                                               // 16087
                                                                                                                       // 16088
            // Infinity or NaN?                                                                                        // 16089
            if ( e === null ) {                                                                                        // 16090
                                                                                                                       // 16091
                if (s) {                                                                                               // 16092
                    str = 'Infinity';                                                                                  // 16093
                    if ( s < 0 ) str = '-' + str;                                                                      // 16094
                } else {                                                                                               // 16095
                    str = 'NaN';                                                                                       // 16096
                }                                                                                                      // 16097
            } else {                                                                                                   // 16098
                str = coeffToString( n.c );                                                                            // 16099
                                                                                                                       // 16100
                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {                                              // 16101
                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS                                                           // 16102
                      ? toExponential( str, e )                                                                        // 16103
                      : toFixedPoint( str, e );                                                                        // 16104
                } else {                                                                                               // 16105
                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );                                         // 16106
                }                                                                                                      // 16107
                                                                                                                       // 16108
                if ( s < 0 && n.c[0] ) str = '-' + str;                                                                // 16109
            }                                                                                                          // 16110
                                                                                                                       // 16111
            return str;                                                                                                // 16112
        };                                                                                                             // 16113
                                                                                                                       // 16114
                                                                                                                       // 16115
        /*                                                                                                             // 16116
         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole                      // 16117
         * number.                                                                                                     // 16118
         */                                                                                                            // 16119
        P.truncated = P.trunc = function () {                                                                          // 16120
            return round( new BigNumber(this), this.e + 1, 1 );                                                        // 16121
        };                                                                                                             // 16122
                                                                                                                       // 16123
                                                                                                                       // 16124
        /*                                                                                                             // 16125
         * Return as toString, but do not accept a base argument, and include the minus sign for                       // 16126
         * negative zero.                                                                                              // 16127
         */                                                                                                            // 16128
        P.valueOf = P.toJSON = function () {                                                                           // 16129
            var str,                                                                                                   // 16130
                n = this,                                                                                              // 16131
                e = n.e;                                                                                               // 16132
                                                                                                                       // 16133
            if ( e === null ) return n.toString();                                                                     // 16134
                                                                                                                       // 16135
            str = coeffToString( n.c );                                                                                // 16136
                                                                                                                       // 16137
            str = e <= TO_EXP_NEG || e >= TO_EXP_POS                                                                   // 16138
                ? toExponential( str, e )                                                                              // 16139
                : toFixedPoint( str, e );                                                                              // 16140
                                                                                                                       // 16141
            return n.s < 0 ? '-' + str : str;                                                                          // 16142
        };                                                                                                             // 16143
                                                                                                                       // 16144
                                                                                                                       // 16145
        P.isBigNumber = true;                                                                                          // 16146
                                                                                                                       // 16147
        if ( config != null ) BigNumber.config(config);                                                                // 16148
                                                                                                                       // 16149
        return BigNumber;                                                                                              // 16150
    }                                                                                                                  // 16151
                                                                                                                       // 16152
                                                                                                                       // 16153
    // PRIVATE HELPER FUNCTIONS                                                                                        // 16154
                                                                                                                       // 16155
                                                                                                                       // 16156
    function bitFloor(n) {                                                                                             // 16157
        var i = n | 0;                                                                                                 // 16158
        return n > 0 || n === i ? i : i - 1;                                                                           // 16159
    }                                                                                                                  // 16160
                                                                                                                       // 16161
                                                                                                                       // 16162
    // Return a coefficient array as a string of base 10 digits.                                                       // 16163
    function coeffToString(a) {                                                                                        // 16164
        var s, z,                                                                                                      // 16165
            i = 1,                                                                                                     // 16166
            j = a.length,                                                                                              // 16167
            r = a[0] + '';                                                                                             // 16168
                                                                                                                       // 16169
        for ( ; i < j; ) {                                                                                             // 16170
            s = a[i++] + '';                                                                                           // 16171
            z = LOG_BASE - s.length;                                                                                   // 16172
            for ( ; z--; s = '0' + s );                                                                                // 16173
            r += s;                                                                                                    // 16174
        }                                                                                                              // 16175
                                                                                                                       // 16176
        // Determine trailing zeros.                                                                                   // 16177
        for ( j = r.length; r.charCodeAt(--j) === 48; );                                                               // 16178
        return r.slice( 0, j + 1 || 1 );                                                                               // 16179
    }                                                                                                                  // 16180
                                                                                                                       // 16181
                                                                                                                       // 16182
    // Compare the value of BigNumbers x and y.                                                                        // 16183
    function compare( x, y ) {                                                                                         // 16184
        var a, b,                                                                                                      // 16185
            xc = x.c,                                                                                                  // 16186
            yc = y.c,                                                                                                  // 16187
            i = x.s,                                                                                                   // 16188
            j = y.s,                                                                                                   // 16189
            k = x.e,                                                                                                   // 16190
            l = y.e;                                                                                                   // 16191
                                                                                                                       // 16192
        // Either NaN?                                                                                                 // 16193
        if ( !i || !j ) return null;                                                                                   // 16194
                                                                                                                       // 16195
        a = xc && !xc[0];                                                                                              // 16196
        b = yc && !yc[0];                                                                                              // 16197
                                                                                                                       // 16198
        // Either zero?                                                                                                // 16199
        if ( a || b ) return a ? b ? 0 : -j : i;                                                                       // 16200
                                                                                                                       // 16201
        // Signs differ?                                                                                               // 16202
        if ( i != j ) return i;                                                                                        // 16203
                                                                                                                       // 16204
        a = i < 0;                                                                                                     // 16205
        b = k == l;                                                                                                    // 16206
                                                                                                                       // 16207
        // Either Infinity?                                                                                            // 16208
        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;                                                             // 16209
                                                                                                                       // 16210
        // Compare exponents.                                                                                          // 16211
        if ( !b ) return k > l ^ a ? 1 : -1;                                                                           // 16212
                                                                                                                       // 16213
        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;                                                             // 16214
                                                                                                                       // 16215
        // Compare digit by digit.                                                                                     // 16216
        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;                             // 16217
                                                                                                                       // 16218
        // Compare lengths.                                                                                            // 16219
        return k == l ? 0 : k > l ^ a ? 1 : -1;                                                                        // 16220
    }                                                                                                                  // 16221
                                                                                                                       // 16222
                                                                                                                       // 16223
    /*                                                                                                                 // 16224
     * Return true if n is a valid number in range, otherwise false.                                                   // 16225
     * Use for argument validation when ERRORS is false.                                                               // 16226
     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.                                                       // 16227
     */                                                                                                                // 16228
    function intValidatorNoErrors( n, min, max ) {                                                                     // 16229
        return ( n = truncate(n) ) >= min && n <= max;                                                                 // 16230
    }                                                                                                                  // 16231
                                                                                                                       // 16232
                                                                                                                       // 16233
    function isArray(obj) {                                                                                            // 16234
        return Object.prototype.toString.call(obj) == '[object Array]';                                                // 16235
    }                                                                                                                  // 16236
                                                                                                                       // 16237
                                                                                                                       // 16238
    /*                                                                                                                 // 16239
     * Convert string of baseIn to an array of numbers of baseOut.                                                     // 16240
     * Eg. convertBase('255', 10, 16) returns [15, 15].                                                                // 16241
     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].                                                                // 16242
     */                                                                                                                // 16243
    function toBaseOut( str, baseIn, baseOut ) {                                                                       // 16244
        var j,                                                                                                         // 16245
            arr = [0],                                                                                                 // 16246
            arrL,                                                                                                      // 16247
            i = 0,                                                                                                     // 16248
            len = str.length;                                                                                          // 16249
                                                                                                                       // 16250
        for ( ; i < len; ) {                                                                                           // 16251
            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );                                                    // 16252
            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );                                                     // 16253
                                                                                                                       // 16254
            for ( ; j < arr.length; j++ ) {                                                                            // 16255
                                                                                                                       // 16256
                if ( arr[j] > baseOut - 1 ) {                                                                          // 16257
                    if ( arr[j + 1] == null ) arr[j + 1] = 0;                                                          // 16258
                    arr[j + 1] += arr[j] / baseOut | 0;                                                                // 16259
                    arr[j] %= baseOut;                                                                                 // 16260
                }                                                                                                      // 16261
            }                                                                                                          // 16262
        }                                                                                                              // 16263
                                                                                                                       // 16264
        return arr.reverse();                                                                                          // 16265
    }                                                                                                                  // 16266
                                                                                                                       // 16267
                                                                                                                       // 16268
    function toExponential( str, e ) {                                                                                 // 16269
        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +                                         // 16270
          ( e < 0 ? 'e' : 'e+' ) + e;                                                                                  // 16271
    }                                                                                                                  // 16272
                                                                                                                       // 16273
                                                                                                                       // 16274
    function toFixedPoint( str, e ) {                                                                                  // 16275
        var len, z;                                                                                                    // 16276
                                                                                                                       // 16277
        // Negative exponent?                                                                                          // 16278
        if ( e < 0 ) {                                                                                                 // 16279
                                                                                                                       // 16280
            // Prepend zeros.                                                                                          // 16281
            for ( z = '0.'; ++e; z += '0' );                                                                           // 16282
            str = z + str;                                                                                             // 16283
                                                                                                                       // 16284
        // Positive exponent                                                                                           // 16285
        } else {                                                                                                       // 16286
            len = str.length;                                                                                          // 16287
                                                                                                                       // 16288
            // Append zeros.                                                                                           // 16289
            if ( ++e > len ) {                                                                                         // 16290
                for ( z = '0', e -= len; --e; z += '0' );                                                              // 16291
                str += z;                                                                                              // 16292
            } else if ( e < len ) {                                                                                    // 16293
                str = str.slice( 0, e ) + '.' + str.slice(e);                                                          // 16294
            }                                                                                                          // 16295
        }                                                                                                              // 16296
                                                                                                                       // 16297
        return str;                                                                                                    // 16298
    }                                                                                                                  // 16299
                                                                                                                       // 16300
                                                                                                                       // 16301
    function truncate(n) {                                                                                             // 16302
        n = parseFloat(n);                                                                                             // 16303
        return n < 0 ? mathceil(n) : mathfloor(n);                                                                     // 16304
    }                                                                                                                  // 16305
                                                                                                                       // 16306
                                                                                                                       // 16307
    // EXPORT                                                                                                          // 16308
                                                                                                                       // 16309
                                                                                                                       // 16310
    BigNumber = constructorFactory();                                                                                  // 16311
    BigNumber.default = BigNumber.BigNumber = BigNumber;                                                               // 16312
                                                                                                                       // 16313
                                                                                                                       // 16314
    // AMD.                                                                                                            // 16315
    if ( typeof define == 'function' && define.amd ) {                                                                 // 16316
        define( function () { return BigNumber; } );                                                                   // 16317
                                                                                                                       // 16318
    // Node.js and other environments that support module.exports.                                                     // 16319
    } else if ( typeof module != 'undefined' && module.exports ) {                                                     // 16320
        module.exports = BigNumber;                                                                                    // 16321
                                                                                                                       // 16322
    // Browser.                                                                                                        // 16323
    } else {                                                                                                           // 16324
        if ( !globalObj ) globalObj = typeof self != 'undefined' ? self : Function('return this')();                   // 16325
        globalObj.BigNumber = BigNumber;                                                                               // 16326
    }                                                                                                                  // 16327
})(this);                                                                                                              // 16328
                                                                                                                       // 16329
},{}],"web3":[function(require,module,exports){                                                                        // 16330
var Web3 = require('./lib/web3');                                                                                      // 16331
                                                                                                                       // 16332
// dont override global variable                                                                                       // 16333
if (typeof window !== 'undefined' && typeof window.Web3 === 'undefined') {                                             // 16334
    window.Web3 = Web3;                                                                                                // 16335
}                                                                                                                      // 16336
                                                                                                                       // 16337
module.exports = Web3;                                                                                                 // 16338
                                                                                                                       // 16339
},{"./lib/web3":22}]},{},["web3"])                                                                                     // 16340
//# sourceMappingURL=web3.js.map                                                                                       // 16341
                                                                                                                       // 16342
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/ethereum_web3/package-init.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* jshint ignore:start */                                                                                              // 1
                                                                                                                       // 2
                                                                                                                       // 3
// Browser environment                                                                                                 // 4
if(typeof window !== 'undefined') {                                                                                    // 5
    Web3 = (typeof window.Web3 !== 'undefined') ? window.Web3 : require('web3');                                       // 6
    BigNumber = (typeof window.BigNumber !== 'undefined') ? window.BigNumber : require('bignumber.js');                // 7
}                                                                                                                      // 8
                                                                                                                       // 9
                                                                                                                       // 10
// Node environment                                                                                                    // 11
if(typeof global !== 'undefined') {                                                                                    // 12
    Web3 = (typeof global.Web3 !== 'undefined') ? global.Web3 : require('web3');                                       // 13
    BigNumber = (typeof global.BigNumber !== 'undefined') ? global.BigNumber : require('bignumber.js');                // 14
}                                                                                                                      // 15
                                                                                                                       // 16
/* jshint ignore:end */                                                                                                // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['ethereum:web3'] = {}, {
  Web3: Web3,
  BigNumber: BigNumber
});

})();
