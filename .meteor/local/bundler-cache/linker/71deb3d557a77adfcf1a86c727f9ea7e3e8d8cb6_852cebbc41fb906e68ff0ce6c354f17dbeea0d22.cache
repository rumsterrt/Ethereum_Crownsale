[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Mongo = Package.mongo.Mongo;\nvar HTTP = Package.http.HTTP;\nvar Spacebars = Package.spacebars.Spacebars;\nvar Template = Package['templating-runtime'].Template;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar BigNumber = Package['ethereum:web3'].BigNumber;\nvar Web3 = Package['ethereum:web3'].Web3;\nvar PersistentMinimongo = Package['frozeman:persistent-minimongo'].PersistentMinimongo;\nvar LocalStore = Package['frozeman:storage'].LocalStore;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar EthTools, optionalLength, options;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ethereum_tools/ethtools.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\nTemplate Controllers                                                                                                   // 2\n                                                                                                                       // 3\n@module Packages                                                                                                       // 4\n*/                                                                                                                     // 5\n                                                                                                                       // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\nHelper functions for ethereum dapps                                                                                    // 9\n                                                                                                                       // 10\n@class [packages] ethereum:tools                                                                                       // 11\n@constructor                                                                                                           // 12\n*/                                                                                                                     // 13\n                                                                                                                       // 14\nvar isMeteorPackage = true;                                                                                            // 15\n                                                                                                                       // 16\n// setup LocalStore if not available                                                                                   // 17\nif(typeof LocalStore === 'undefined') {                                                                                // 18\n    isMeteorPackage = false;                                                                                           // 19\n    LocalStore = {                                                                                                     // 20\n        get: function(){},                                                                                             // 21\n        set: function(){}                                                                                              // 22\n    };                                                                                                                 // 23\n}                                                                                                                      // 24\n                                                                                                                       // 25\n// stup Tracker if not available                                                                                       // 26\nif(typeof Tracker === 'undefined')                                                                                     // 27\n    Tracker = {                                                                                                        // 28\n        Dependency: function(){                                                                                        // 29\n            return {                                                                                                   // 30\n                depend: function(){},                                                                                  // 31\n                changed: function(){}                                                                                  // 32\n            }                                                                                                          // 33\n        }                                                                                                              // 34\n    };                                                                                                                 // 35\n                                                                                                                       // 36\nvar dependency = new Tracker.Dependency;                                                                               // 37\n                                                                                                                       // 38\n/**                                                                                                                    // 39\nCheck for supported currencies                                                                                         // 40\n                                                                                                                       // 41\n@method supportedCurrencies                                                                                            // 42\n@param {String} unit                                                                                                   // 43\n@return {String}                                                                                                       // 44\n*/                                                                                                                     // 45\nvar supportedCurrencies = function(unit){                                                                              // 46\n    return (unit === 'usd' ||                                                                                          // 47\n           unit === 'eur' ||                                                                                           // 48\n           unit === 'btc' ||                                                                                           // 49\n           unit === 'gbp' ||                                                                                           // 50\n           unit === 'brl');                                                                                            // 51\n};                                                                                                                     // 52\n                                                                                                                       // 53\n/**                                                                                                                    // 54\nGets the ether unit if not set from localstorage                                                                       // 55\n                                                                                                                       // 56\n@method getUnit                                                                                                        // 57\n@param {String} unit                                                                                                   // 58\n@return {String}                                                                                                       // 59\n*/                                                                                                                     // 60\nvar getUnit = function(unit){                                                                                          // 61\n    if(!_.isString(unit)) {                                                                                            // 62\n        unit = LocalStore.get('dapp_etherUnit');                                                                       // 63\n                                                                                                                       // 64\n        if(!unit) {                                                                                                    // 65\n            unit = 'ether';                                                                                            // 66\n            LocalStore.set('dapp_etherUnit', unit);                                                                    // 67\n        }                                                                                                              // 68\n    }                                                                                                                  // 69\n                                                                                                                       // 70\n    return unit;                                                                                                       // 71\n};                                                                                                                     // 72\n                                                                                                                       // 73\n                                                                                                                       // 74\n                                                                                                                       // 75\n/**                                                                                                                    // 76\nHelper functions for ethereum dapps                                                                                    // 77\n                                                                                                                       // 78\n@class EthTools                                                                                                        // 79\n@constructor                                                                                                           // 80\n*/                                                                                                                     // 81\n                                                                                                                       // 82\nEthTools = {                                                                                                           // 83\n    lang: 'en'                                                                                                         // 84\n};                                                                                                                     // 85\n                                                                                                                       // 86\nif(isMeteorPackage) {                                                                                                  // 87\n                                                                                                                       // 88\n    /**                                                                                                                // 89\n    Sets the default unit used by all EthTools functions, if no unit is provided.                                      // 90\n                                                                                                                       // 91\n        EthTools.setUnit('ether')                                                                                      // 92\n                                                                                                                       // 93\n    @method setUnit                                                                                                    // 94\n    @param {String} unit the unit like 'ether', or 'eur'                                                               // 95\n    @param {Boolean}                                                                                                   // 96\n    **/                                                                                                                // 97\n    EthTools.setUnit = function(unit){                                                                                 // 98\n        if(supportedCurrencies(unit)) {                                                                                // 99\n            LocalStore.set('dapp_etherUnit', unit);                                                                    // 100\n            return true;                                                                                               // 101\n        } else {                                                                                                       // 102\n            try {                                                                                                      // 103\n                web3.toWei(1, unit);                                                                                   // 104\n                LocalStore.set('dapp_etherUnit', unit);                                                                // 105\n                return true;                                                                                           // 106\n            } catch(e) {                                                                                               // 107\n                return false;                                                                                          // 108\n            }                                                                                                          // 109\n        }                                                                                                              // 110\n    };                                                                                                                 // 111\n                                                                                                                       // 112\n    /**                                                                                                                // 113\n    Get the default unit used by all EthTools functions, if no unit is provided.                                       // 114\n                                                                                                                       // 115\n        EthTools.getUnit()                                                                                             // 116\n                                                                                                                       // 117\n    @method getUnit                                                                                                    // 118\n    @return {String} unit the unit like 'ether', or 'eur'                                                              // 119\n    **/                                                                                                                // 120\n    EthTools.getUnit = function(){                                                                                     // 121\n        return LocalStore.get('dapp_etherUnit');                                                                       // 122\n    };                                                                                                                 // 123\n}                                                                                                                      // 124\n                                                                                                                       // 125\n/**                                                                                                                    // 126\nSets the locale to display numbers in different formats.                                                               // 127\n                                                                                                                       // 128\n    EthTools.setLocale('de')                                                                                           // 129\n                                                                                                                       // 130\n@method language                                                                                                       // 131\n@param {String} lang the locale like \"de\" or \"de-DE\"                                                                   // 132\n**/                                                                                                                    // 133\nEthTools.setLocale = function(lang){                                                                                   // 134\n    var lang = lang.substr(0,2).toLowerCase();                                                                         // 135\n    // numeral.language(lang);                                                                                         // 136\n    EthTools.lang = lang;                                                                                              // 137\n                                                                                                                       // 138\n    dependency.changed();                                                                                              // 139\n                                                                                                                       // 140\n    return lang;                                                                                                       // 141\n};                                                                                                                     // 142\n                                                                                                                       // 143\n/**                                                                                                                    // 144\nFormats a given number                                                                                                 // 145\n                                                                                                                       // 146\n    EthTools.formatNumber(10000, \"0.0[000]\")                                                                           // 147\n                                                                                                                       // 148\n@method formatNumber                                                                                                   // 149\n@param {Number|String|BigNumber} number the number to format                                                           // 150\n@param {String} format           the format string e.g. \"0,0.0[000]\" see http://numeraljs.com for more.                // 151\n@return {String} The formated time                                                                                     // 152\n**/                                                                                                                    // 153\nEthTools.formatNumber = function(number, format){                                                                      // 154\n    var length = optionalLength = 0;                                                                                   // 155\n    dependency.depend();                                                                                               // 156\n                                                                                                                       // 157\n    if(!_.isFinite(number) && !(number instanceof BigNumber))                                                          // 158\n        number = 0;                                                                                                    // 159\n                                                                                                                       // 160\n    if(format instanceof Spacebars.kw)                                                                                 // 161\n        format = null;                                                                                                 // 162\n                                                                                                                       // 163\n    if(_.isString(number))                                                                                             // 164\n        number = new BigNumber(number, 10);                                                                            // 165\n    if(_.isFinite(number) && !_.isObject(number))                                                                      // 166\n        number = new BigNumber(number);                                                                                // 167\n                                                                                                                       // 168\n    options = (EthTools.lang === 'en')                                                                                 // 169\n        ?   { decimalSeparator: '.',                                                                                   // 170\n              groupSeparator: ',',                                                                                     // 171\n              groupSize: 3                                                                                             // 172\n            }                                                                                                          // 173\n        :   { decimalSeparator: ',',                                                                                   // 174\n              groupSeparator: ' ',                                                                                     // 175\n              groupSize: 3                                                                                             // 176\n            };                                                                                                         // 177\n    BigNumber.config({ FORMAT: options });                                                                             // 178\n                                                                                                                       // 179\n                                                                                                                       // 180\n    // get segment positions (0,0. | 0 | [0])                                                                          // 181\n    if(format && ~format.indexOf('.')) {                                                                               // 182\n        var decimalPos = format.indexOf('.');                                                                          // 183\n        if(~format.indexOf('[')) {                                                                                     // 184\n            length = format.substr(decimalPos, format.indexOf('[') - decimalPos).replace(/[\\.\\[\\]]/g,'').length;       // 185\n            optionalLength = format.substr(format.indexOf('[')).replace(/[\\[\\]]/g,'').length;                          // 186\n        } else {                                                                                                       // 187\n            length = format.substr(decimalPos).replace(/[\\.\\[\\]]/g,'').length;                                         // 188\n            optionalLength = 0;                                                                                        // 189\n        }                                                                                                              // 190\n    }                                                                                                                  // 191\n    var fullLength = length + optionalLength;                                                                          // 192\n    number = number.toFormat(fullLength ? fullLength : undefined);                                                     // 193\n                                                                                                                       // 194\n    // if segements are detected, rebuild the number string                                                            // 195\n    if(fullLength) {                                                                                                   // 196\n        var beforeDecimal = number.substr(0, number.indexOf(options.decimalSeparator) + 1);                            // 197\n        var afterDecimal = number.replace(beforeDecimal, '').substr(0, length);                                        // 198\n        var afterDecimalOptional = number.replace(beforeDecimal, '').substr(length, optionalLength).replace(/0*$/,'');\n        beforeDecimal = beforeDecimal.replace(options.decimalSeparator, '');                                           // 200\n                                                                                                                       // 201\n        return (!afterDecimal && !afterDecimalOptional)                                                                // 202\n            ? beforeDecimal                                                                                            // 203\n            : beforeDecimal + options.decimalSeparator + afterDecimal + afterDecimalOptional;                          // 204\n                                                                                                                       // 205\n    // otherwise simply return the formated number                                                                     // 206\n    } else {                                                                                                           // 207\n        return number;                                                                                                 // 208\n    }                                                                                                                  // 209\n};                                                                                                                     // 210\n                                                                                                                       // 211\n/**                                                                                                                    // 212\nFormats a number of wei to a balance.                                                                                  // 213\n                                                                                                                       // 214\n    EthTools.formatBalance(myNumber, \"0,0.0[0000] unit\")                                                               // 215\n                                                                                                                       // 216\n@method (formatBalance)                                                                                                // 217\n@param {String} number                                                                                                 // 218\n@param {String} format       the format string                                                                         // 219\n@return {String} The formatted number                                                                                  // 220\n**/                                                                                                                    // 221\nEthTools.formatBalance = function(number, format, unit){                                                               // 222\n    dependency.depend();                                                                                               // 223\n                                                                                                                       // 224\n    if(!_.isFinite(number) && !(number instanceof BigNumber))                                                          // 225\n        number = 0;                                                                                                    // 226\n                                                                                                                       // 227\n    if(format instanceof Spacebars.kw)                                                                                 // 228\n        format = null;                                                                                                 // 229\n                                                                                                                       // 230\n    format = format || '0,0.[00000000]';                                                                               // 231\n                                                                                                                       // 232\n    unit = getUnit(unit);                                                                                              // 233\n                                                                                                                       // 234\n    if(typeof EthTools.ticker !== 'undefined' && supportedCurrencies(unit)) {                                          // 235\n        var ticker = EthTools.ticker.findOne(unit, {fields: {price: 1}});                                              // 236\n                                                                                                                       // 237\n        // convert first to ether                                                                                      // 238\n        number = web3.fromWei(number, 'ether');                                                                        // 239\n                                                                                                                       // 240\n        // then times the currency                                                                                     // 241\n        if(ticker) {                                                                                                   // 242\n            number = (number instanceof BigNumber || _.isObject(number))                                               // 243\n                ? number.times(ticker.price)                                                                           // 244\n                : new BigNumber(String(number), 10).times(ticker.price);                                               // 245\n                                                                                                                       // 246\n        } else {                                                                                                       // 247\n            number = '0';                                                                                              // 248\n        }                                                                                                              // 249\n                                                                                                                       // 250\n    } else {                                                                                                           // 251\n        number = web3.fromWei(number, unit.toLowerCase());                                                             // 252\n    }                                                                                                                  // 253\n                                                                                                                       // 254\n    var isUppercase = (format.indexOf('UNIT') !== -1);                                                                 // 255\n                                                                                                                       // 256\n    var cleanedFormat = format.replace(/ *unit */i,'').replace(/ +/,'');                                               // 257\n    var format = format.replace(cleanedFormat, '__format__');                                                          // 258\n                                                                                                                       // 259\n    if(format.toLowerCase().indexOf('unit') !== -1) {                                                                  // 260\n        return format.replace('__format__', EthTools.formatNumber(number, cleanedFormat)).replace(/unit/i, (isUppercase ? unit.toUpperCase() : unit));\n    } else                                                                                                             // 262\n        return EthTools.formatNumber(number, cleanedFormat);                                                           // 263\n};                                                                                                                     // 264\n                                                                                                                       // 265\n                                                                                                                       // 266\n/**                                                                                                                    // 267\nFormats any of the supported currency to ethereum wei.                                                                 // 268\n                                                                                                                       // 269\n    EthTools.toWei(myNumber, unit)                                                                                     // 270\n                                                                                                                       // 271\n@method (toWei)                                                                                                        // 272\n@param {String} number                                                                                                 // 273\n@return {String} unit                                                                                                  // 274\n**/                                                                                                                    // 275\nEthTools.toWei = function(number, unit){                                                                               // 276\n                                                                                                                       // 277\n    if(!_.isFinite(number) && !(number instanceof BigNumber))                                                          // 278\n        return number;                                                                                                 // 279\n                                                                                                                       // 280\n    unit = getUnit(unit);                                                                                              // 281\n                                                                                                                       // 282\n    if(typeof EthTools.ticker !== 'undefined' && supportedCurrencies(unit)) {                                          // 283\n        var ticker = EthTools.ticker.findOne(unit, {fields: {price: 1}});                                              // 284\n                                                                                                                       // 285\n        // convert first to ether                                                                                      // 286\n        number = web3.toWei(number, 'ether');                                                                          // 287\n                                                                                                                       // 288\n        // then times the currency                                                                                     // 289\n        if(ticker) {                                                                                                   // 290\n            number = (number instanceof BigNumber || _.isObject(number))                                               // 291\n                ? number.dividedBy(ticker.price)                                                                       // 292\n                : new BigNumber(String(number), 10).dividedBy(ticker.price);                                           // 293\n                                                                                                                       // 294\n            // make sure the number is flat                                                                            // 295\n            number = number.round(0).toString(10);                                                                     // 296\n        } else {                                                                                                       // 297\n            number = '0';                                                                                              // 298\n        }                                                                                                              // 299\n                                                                                                                       // 300\n    } else {                                                                                                           // 301\n        number = web3.toWei(number, unit.toLowerCase());                                                               // 302\n                                                                                                                       // 303\n    }                                                                                                                  // 304\n                                                                                                                       // 305\n    return number;                                                                                                     // 306\n};                                                                                                                     // 307\n                                                                                                                       // 308\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ethereum_tools/ticker.js                                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Price ticker                                                                                                        // 1\nEthTools.ticker = new Mongo.Collection('ethereum_price_ticker', {connection: null});                                   // 2\nif(Meteor.isClient)                                                                                                    // 3\n    new PersistentMinimongo(EthTools.ticker);                                                                          // 4\n                                                                                                                       // 5\nEthTools.ticker.start = function(options){                                                                             // 6\n    options = options || {};                                                                                           // 7\n    if (!options.currencies){                                                                                          // 8\n        options.currencies = ['BTC', 'USD', 'EUR'];                                                                    // 9\n    }                                                                                                                  // 10\n    var url = 'https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=' + options.currencies.join(',');           // 11\n    if (options.extraParams) {                                                                                         // 12\n        url += '&extraParams='+ options.extraParams;                                                                   // 13\n    }                                                                                                                  // 14\n                                                                                                                       // 15\n    var updatePrice = function(e, res){                                                                                // 16\n                                                                                                                       // 17\n        if(!e && res && res.statusCode === 200) {                                                                      // 18\n            var content = JSON.parse(res.content);                                                                     // 19\n                                                                                                                       // 20\n            if(content){                                                                                               // 21\n                _.each(content, function(price, key){                                                                  // 22\n                    var name = key.toLowerCase();                                                                      // 23\n                                                                                                                       // 24\n                    // make sure its a number and nothing else!                                                        // 25\n                    if(_.isFinite(price)) {                                                                            // 26\n                        EthTools.ticker.upsert(name, {$set: {                                                          // 27\n                            price: String(price),                                                                      // 28\n                            timestamp: null                                                                            // 29\n                        }});                                                                                           // 30\n                    }                                                                                                  // 31\n                                                                                                                       // 32\n                });                                                                                                    // 33\n            }                                                                                                          // 34\n        } else {                                                                                                       // 35\n            console.warn('Can not connect to https://mini-api.cryptocompare.com to get price ticker data, please check your internet connection.');\n        }                                                                                                              // 37\n    };                                                                                                                 // 38\n                                                                                                                       // 39\n    // update right away                                                                                               // 40\n    HTTP.get(url, updatePrice);                                                                                        // 41\n                                                                                                                       // 42\n    // update prices                                                                                                   // 43\n    Meteor.setInterval(function(){                                                                                     // 44\n        HTTP.get(url, updatePrice);                                                                                    // 45\n    }, 1000 * 30);                                                                                                     // 46\n}                                                                                                                      // 47\n                                                                                                                       // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ethereum_tools/globalHelpers.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\nFormats a number.                                                                                                      // 2\n                                                                                                                       // 3\n    {{dapp_formatNumber myNumber \"0,0.0[0000]\"}}                                                                       // 4\n                                                                                                                       // 5\n@method (dapp_formatNumber)                                                                                            // 6\n@param {String} number                                                                                                 // 7\n@param {String} format       the format string                                                                         // 8\n@return {String} The formatted number                                                                                  // 9\n**/                                                                                                                    // 10\nTemplate.registerHelper('dapp_formatNumber', EthTools.formatNumber);                                                   // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\nFormats a number.                                                                                                      // 14\n                                                                                                                       // 15\n    {{dapp_formatBalance myNumber \"0,0.0[0000]\"}}                                                                      // 16\n                                                                                                                       // 17\n@method (dapp_formatBalance)                                                                                           // 18\n@param {String} number                                                                                                 // 19\n@param {String} format       the format string                                                                         // 20\n@return {String} The formatted number                                                                                  // 21\n**/                                                                                                                    // 22\nTemplate.registerHelper('dapp_formatBalance', EthTools.formatBalance);                                                 // 23\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['ethereum:tools'] = {}, {\n  EthTools: EthTools\n});\n\n})();\n","servePath":"/packages/ethereum_tools.js"}]