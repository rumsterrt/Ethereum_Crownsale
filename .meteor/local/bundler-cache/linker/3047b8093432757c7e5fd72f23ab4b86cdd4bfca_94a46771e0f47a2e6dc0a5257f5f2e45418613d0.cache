[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar PersistentMinimongo;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/frozeman_persistent-minimongo/persistent-minimongo.js                                   //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\n/**                                                                                                 // 1\nPackages                                                                                            // 2\n                                                                                                    // 3\n@module Packages                                                                                    // 4\n*/                                                                                                  // 5\n                                                                                                    // 6\n/**                                                                                                 // 7\nThe PersistentMinimongo package                                                                     // 8\n                                                                                                    // 9\n@class PersistentMinimongo                                                                          // 10\n@constructor                                                                                        // 11\n*/                                                                                                  // 12\n                                                                                                    // 13\n                                                                                                    // 14\n                                                                                                    // 15\n/**                                                                                                 // 16\nIf the localstorage goes over 4.8 MB, trim the collections.                                         // 17\n                                                                                                    // 18\n@property capLocalStorageSize                                                                       // 19\n*/                                                                                                  // 20\nvar capLocalStorageSize = 4.8;                                                                      // 21\n                                                                                                    // 22\n/**                                                                                                 // 23\nIf the localstorage goes over `capLocalStorageSize`, trim the current collection,                   // 24\nwhich wanted to add a new entry, by 50 entries.                                                     // 25\n                                                                                                    // 26\n@property trimCollectionBy                                                                          // 27\n*/                                                                                                  // 28\nvar trimCollectionBy = 50;                                                                          // 29\n                                                                                                    // 30\n                                                                                                    // 31\nPersistentMinimongo = function (collection) {                                                       // 32\n    var self = this;                                                                                // 33\n    if (! (self instanceof PersistentMinimongo))                                                    // 34\n        throw new Error('use \"new\" to construct a PersistentMinimongo');                            // 35\n                                                                                                    // 36\n    self.key = 'minimongo__' + collection._name;                                                    // 37\n    self.col = collection;                                                                          // 38\n    self.stats = { added: 0, removed: 0, changed: 0 };                                              // 39\n                                                                                                    // 40\n    persisters.push(self);                                                                          // 41\n                                                                                                    // 42\n    // Check if the localstorage is to big and reduce the current collection by 50 items, every 30s\n    Meteor.setInterval(function() {                                                                 // 44\n        self.capCollection();                                                                       // 45\n    }, 1000 * 30);                                                                                  // 46\n                                                                                                    // 47\n    // load from storage                                                                            // 48\n    self.refresh(true);                                                                             // 49\n                                                                                                    // 50\n    // Meteor.startup(function () {                                                                 // 51\n    self.col.find({}).observe({                                                                     // 52\n        added: function (doc) {                                                                     // 53\n                                                                                                    // 54\n            // get or initialize tracking list                                                      // 55\n            var list = amplify.store(self.key);                                                     // 56\n            if (! list)                                                                             // 57\n                list = [];                                                                          // 58\n                                                                                                    // 59\n            // add document id to tracking list and store                                           // 60\n            if (! _.contains(list, doc._id)) {                                                      // 61\n                list.push(doc._id);                                                                 // 62\n                amplify.store(self.key, list);                                                      // 63\n            }                                                                                       // 64\n                                                                                                    // 65\n            // store copy of document into local storage, if not already there                      // 66\n            var key = self._makeDataKey(doc._id);                                                   // 67\n            if(! amplify.store(key)) {                                                              // 68\n                amplify.store(key, doc);                                                            // 69\n            }                                                                                       // 70\n                                                                                                    // 71\n            ++self.stats.added;                                                                     // 72\n        },                                                                                          // 73\n                                                                                                    // 74\n        removed: function (doc) {                                                                   // 75\n            var list = amplify.store(self.key);                                                     // 76\n                                                                                                    // 77\n            // if not in list, nothing to do                                                        // 78\n            if(! _.contains(list, doc._id))                                                         // 79\n                return;                                                                             // 80\n                                                                                                    // 81\n            // remove from list                                                                     // 82\n            list = _.without(list, doc._id);                                                        // 83\n                                                                                                    // 84\n            // remove document copy from local storage                                              // 85\n            amplify.store(self._makeDataKey(doc._id), null);                                        // 86\n                                                                                                    // 87\n            // if tracking list is empty, delete; else store updated copy                           // 88\n            amplify.store(self.key, list.length === 0 ? null : list);                               // 89\n                                                                                                    // 90\n            ++self.stats.removed;                                                                   // 91\n        },                                                                                          // 92\n                                                                                                    // 93\n        changed: function (newDoc, oldDoc) {                                                        // 94\n            // update document in local storage                                                     // 95\n            amplify.store(self._makeDataKey(newDoc._id), newDoc);                                   // 96\n            ++self.stats.changed;                                                                   // 97\n        }                                                                                           // 98\n    });                                                                                             // 99\n    // });                                                                                          // 100\n};                                                                                                  // 101\n                                                                                                    // 102\nPersistentMinimongo.prototype = {                                                                   // 103\n    constructor: PersistentMinimongo,                                                               // 104\n    _getStats: function () {                                                                        // 105\n        return this.stats;                                                                          // 106\n    },                                                                                              // 107\n    _getKey: function () {                                                                          // 108\n        return this.key;                                                                            // 109\n    },                                                                                              // 110\n    _makeDataKey: function (id) {                                                                   // 111\n        return this.key + '__' + id;                                                                // 112\n    },                                                                                              // 113\n    /**                                                                                             // 114\n    Refresh the local storage                                                                       // 115\n                                                                                                    // 116\n    @method refresh                                                                                 // 117\n    @return {String}                                                                                // 118\n    */                                                                                              // 119\n    refresh: function (init) {                                                                      // 120\n        var self = this;                                                                            // 121\n        var list = amplify.store(self.key);                                                         // 122\n                                                                                                    // 123\n        self.stats.added = 0;                                                                       // 124\n                                                                                                    // 125\n                                                                                                    // 126\n        if (!! list) {                                                                              // 127\n            var length = list.length;                                                               // 128\n            list = _.filter(list, function (id) {                                                   // 129\n                var doc = amplify.store(self._makeDataKey(id));                                     // 130\n                if(!! doc) {                                                                        // 131\n                    var id = doc._id;                                                               // 132\n                    delete doc._id;                                                                 // 133\n                    self.col.upsert({_id: id}, {$set: doc});                                        // 134\n                }                                                                                   // 135\n                                                                                                    // 136\n                return !! doc;                                                                      // 137\n            });                                                                                     // 138\n                                                                                                    // 139\n            // if not initializing, check for deletes                                               // 140\n            if(! init) {                                                                            // 141\n                _.each(self.col.find({}).fetch(), function (doc) {                                  // 142\n                    if(! _.contains(list, doc._id))                                                 // 143\n                        self.col.remove({ _id: doc._id});                                           // 144\n                });                                                                                 // 145\n            }                                                                                       // 146\n                                                                                                    // 147\n            // if initializing, save cleaned list (if changed)                                      // 148\n            if(init && length != list.length)                                                       // 149\n                amplify.store(self.key, list.length === 0 ? null : list);                           // 150\n        }                                                                                           // 151\n    },                                                                                              // 152\n    /**                                                                                             // 153\n    Gets the current localstorage size in MB                                                        // 154\n                                                                                                    // 155\n    @method localStorageSize                                                                        // 156\n    @return {String} total localstorage size in MB                                                  // 157\n    */                                                                                              // 158\n    localStorageSize: function() {                                                                  // 159\n                                                                                                    // 160\n        // function toSizeMB(info) {                                                                // 161\n        //   info.size = toMB(info.size).toFixed(2) + ' MB';                                        // 162\n        //   return info;                                                                           // 163\n        // }                                                                                        // 164\n                                                                                                    // 165\n        // var sizes = Object.keys(localStorage).map(toSize).map(toSizeMB);                         // 166\n        // console.table(sizes);                                                                    // 167\n                                                                                                    // 168\n        var size = 0;                                                                               // 169\n        if(localStorage) {                                                                          // 170\n            _.each(Object.keys(localStorage), function(key){                                        // 171\n                size += localStorage[key].length * 2 / 1024 / 1024;                                 // 172\n            });                                                                                     // 173\n        }                                                                                           // 174\n                                                                                                    // 175\n        return size;                                                                                // 176\n    },                                                                                              // 177\n    /**                                                                                             // 178\n    Check if the localstorage is to big and reduce the current collection by 50 items               // 179\n                                                                                                    // 180\n    @method localStorageSize                                                                        // 181\n    @return {String}                                                                                // 182\n    */                                                                                              // 183\n    capCollection: function(){                                                                      // 184\n        var _this = this;                                                                           // 185\n                                                                                                    // 186\n        if(_this.localStorageSize() > capLocalStorageSize) {                                        // 187\n            console.log(_this.localStorageSize(), _this.col.find({}).count());                      // 188\n            // find the first 50 entries and remove them                                            // 189\n            _.each(_this.col.find({}, {limit: trimCollectionBy}).fetch(), function(item){           // 190\n                _this.col.remove(item._id);                                                         // 191\n            });                                                                                     // 192\n        }                                                                                           // 193\n    }                                                                                               // 194\n};                                                                                                  // 195\n                                                                                                    // 196\nvar persisters = [];                                                                                // 197\nvar lpTimer = null;                                                                                 // 198\n                                                                                                    // 199\n// React on manual local storage changes                                                            // 200\nMeteor.startup(function () {                                                                        // 201\n    $(window).bind('storage', function (e) {                                                        // 202\n        Meteor.clearTimeout(lpTimer);                                                               // 203\n        lpTimer = Meteor.setTimeout(function () {                                                   // 204\n            _.each(persisters, function (lp) {                                                      // 205\n                lp.refresh(false);                                                                  // 206\n            });                                                                                     // 207\n        }, 250);                                                                                    // 208\n    });                                                                                             // 209\n});                                                                                                 // 210\n                                                                                                    // 211\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['frozeman:persistent-minimongo'] = {}, {\n  PersistentMinimongo: PersistentMinimongo\n});\n\n})();\n","servePath":"/packages/frozeman_persistent-minimongo.js"}]