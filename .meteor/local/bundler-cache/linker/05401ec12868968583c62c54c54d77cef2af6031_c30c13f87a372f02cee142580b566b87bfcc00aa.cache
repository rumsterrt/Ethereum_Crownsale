[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar meteorInstall = Package['modules-runtime'].meteorInstall;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"modules\":{\"client.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/client.js                                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire(\"./install-packages.js\");                                                                                      // 1\nrequire(\"./stubs.js\");                                                                                                 // 2\nrequire(\"./process.js\");                                                                                               // 3\nrequire(\"./reify.js\");                                                                                                 // 4\n                                                                                                                       // 5\nexports.addStyles = require(\"./css\").addStyles;                                                                        // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"css.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/css.js                                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar doc = document;                                                                                                    // 1\nvar head = doc.getElementsByTagName(\"head\").item(0);                                                                   // 2\n                                                                                                                       // 3\nexports.addStyles = function (css) {                                                                                   // 4\n  var style = doc.createElement(\"style\");                                                                              // 5\n                                                                                                                       // 6\n  style.setAttribute(\"type\", \"text/css\");                                                                              // 7\n                                                                                                                       // 8\n  // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx                                                   // 9\n  var internetExplorerSheetObject =                                                                                    // 10\n    style.sheet || // Edge/IE11.                                                                                       // 11\n    style.styleSheet; // Older IEs.                                                                                    // 12\n                                                                                                                       // 13\n  if (internetExplorerSheetObject) {                                                                                   // 14\n    internetExplorerSheetObject.cssText = css;                                                                         // 15\n  } else {                                                                                                             // 16\n    style.appendChild(doc.createTextNode(css));                                                                        // 17\n  }                                                                                                                    // 18\n                                                                                                                       // 19\n  return head.appendChild(style);                                                                                      // 20\n};                                                                                                                     // 21\n                                                                                                                       // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"install-packages.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/install-packages.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction install(name, mainModule) {                                                                                   // 1\n  var meteorDir = {};                                                                                                  // 2\n                                                                                                                       // 3\n  // Given a package name <name>, install a stub module in the                                                         // 4\n  // /node_modules/meteor directory called <name>.js, so that                                                          // 5\n  // require.resolve(\"meteor/<name>\") will always return                                                               // 6\n  // /node_modules/meteor/<name>.js instead of something like                                                          // 7\n  // /node_modules/meteor/<name>/index.js, in the rare but possible event                                              // 8\n  // that the package contains a file called index.js (#6590).                                                         // 9\n                                                                                                                       // 10\n  if (typeof mainModule === \"string\") {                                                                                // 11\n    // Set up an alias from /node_modules/meteor/<package>.js to the main                                              // 12\n    // module, e.g. meteor/<package>/index.js.                                                                         // 13\n    meteorDir[name + \".js\"] = mainModule;                                                                              // 14\n  } else {                                                                                                             // 15\n    // back compat with old Meteor packages                                                                            // 16\n    meteorDir[name + \".js\"] = function (r, e, module) {                                                                // 17\n      module.exports = Package[name];                                                                                  // 18\n    };                                                                                                                 // 19\n  }                                                                                                                    // 20\n                                                                                                                       // 21\n  meteorInstall({                                                                                                      // 22\n    node_modules: {                                                                                                    // 23\n      meteor: meteorDir                                                                                                // 24\n    }                                                                                                                  // 25\n  });                                                                                                                  // 26\n}                                                                                                                      // 27\n                                                                                                                       // 28\n// This file will be modified during computeJsOutputFilesMap to include                                                // 29\n// install(<name>) calls for every Meteor package.                                                                     // 30\n                                                                                                                       // 31\ninstall(\"meteor\");                                                                                                     // 32\ninstall(\"meteor-base\");                                                                                                // 33\ninstall(\"mobile-experience\");                                                                                          // 34\ninstall(\"babel-compiler\");                                                                                             // 35\ninstall(\"ecmascript\");                                                                                                 // 36\ninstall(\"underscore\");                                                                                                 // 37\ninstall(\"base64\");                                                                                                     // 38\ninstall(\"modules-runtime\");                                                                                            // 39\ninstall(\"modules\", \"meteor/modules/client.js\");                                                                        // 40\ninstall(\"ecmascript-runtime\");                                                                                         // 41\ninstall(\"es5-shim\", \"meteor/es5-shim/client.js\");                                                                      // 42\ninstall(\"promise\", \"meteor/promise/client.js\");                                                                        // 43\ninstall(\"babel-runtime\", \"meteor/babel-runtime/babel-runtime.js\");                                                     // 44\ninstall(\"ecmascript-runtime-client\", \"meteor/ecmascript-runtime-client/runtime.js\");                                   // 45\ninstall(\"ejson\", \"meteor/ejson/ejson.js\");                                                                             // 46\ninstall(\"diff-sequence\");                                                                                              // 47\ninstall(\"geojson-utils\", \"meteor/geojson-utils/main.js\");                                                              // 48\ninstall(\"id-map\");                                                                                                     // 49\ninstall(\"random\");                                                                                                     // 50\ninstall(\"mongo-id\");                                                                                                   // 51\ninstall(\"ordered-dict\");                                                                                               // 52\ninstall(\"tracker\");                                                                                                    // 53\ninstall(\"minimongo\", \"meteor/minimongo/minimongo_client.js\");                                                          // 54\ninstall(\"check\", \"meteor/check/match.js\");                                                                             // 55\ninstall(\"retry\");                                                                                                      // 56\ninstall(\"callback-hook\");                                                                                              // 57\ninstall(\"ddp-common\");                                                                                                 // 58\ninstall(\"reload\");                                                                                                     // 59\ninstall(\"ddp-client\", \"meteor/ddp-client/namespace.js\");                                                               // 60\ninstall(\"ddp\");                                                                                                        // 61\ninstall(\"ddp-server\");                                                                                                 // 62\ninstall(\"allow-deny\");                                                                                                 // 63\ninstall(\"mongo-dev-server\");                                                                                           // 64\ninstall(\"insecure\");                                                                                                   // 65\ninstall(\"mongo\");                                                                                                      // 66\ninstall(\"blaze-html-templates\");                                                                                       // 67\ninstall(\"reactive-var\");                                                                                               // 68\ninstall(\"standard-minifier-css\");                                                                                      // 69\ninstall(\"standard-minifier-js\");                                                                                       // 70\ninstall(\"shell-server\");                                                                                               // 71\ninstall(\"autopublish\");                                                                                                // 72\ninstall(\"tmeasday:check-npm-versions\", \"meteor/tmeasday:check-npm-versions/check-npm-versions.js\");                    // 73\ninstall(\"react-meteor-data\", \"meteor/react-meteor-data/react-meteor-data.jsx\");                                        // 74\ninstall(\"ethereum:web3\");                                                                                              // 75\ninstall(\"url\");                                                                                                        // 76\ninstall(\"http\");                                                                                                       // 77\ninstall(\"observe-sequence\");                                                                                           // 78\ninstall(\"deps\");                                                                                                       // 79\ninstall(\"htmljs\");                                                                                                     // 80\ninstall(\"jquery\", \"meteor/jquery/main.js\");                                                                            // 81\ninstall(\"blaze\");                                                                                                      // 82\ninstall(\"spacebars\");                                                                                                  // 83\ninstall(\"templating-compiler\");                                                                                        // 84\ninstall(\"templating-runtime\");                                                                                         // 85\ninstall(\"templating\");                                                                                                 // 86\ninstall(\"3stack:bignumber\");                                                                                           // 87\ninstall(\"amplify\");                                                                                                    // 88\ninstall(\"frozeman:persistent-minimongo\");                                                                              // 89\ninstall(\"localstorage\");                                                                                               // 90\ninstall(\"frozeman:storage\");                                                                                           // 91\ninstall(\"ethereum:tools\");                                                                                             // 92\ninstall(\"ethereum:blocks\");                                                                                            // 93\ninstall(\"less\");                                                                                                       // 94\ninstall(\"ethereum:dapp-styles\");                                                                                       // 95\ninstall(\"webapp\", \"meteor/webapp/webapp_client.js\");                                                                   // 96\ninstall(\"livedata\");                                                                                                   // 97\ninstall(\"dynamic-import\", \"meteor/dynamic-import/client.js\");                                                          // 98\ninstall(\"hot-code-push\");                                                                                              // 99\ninstall(\"launch-screen\");                                                                                              // 100\ninstall(\"ui\");                                                                                                         // 101\ninstall(\"autoupdate\");                                                                                                 // 102\n                                                                                                                       // 103\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"process.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/process.js                                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nif (! global.process) {                                                                                                // 1\n  try {                                                                                                                // 2\n    // The application can run `npm install process` to provide its own                                                // 3\n    // process stub; otherwise this module will provide a partial stub.                                                // 4\n    global.process = require(\"process\");                                                                               // 5\n  } catch (missing) {                                                                                                  // 6\n    global.process = {};                                                                                               // 7\n  }                                                                                                                    // 8\n}                                                                                                                      // 9\n                                                                                                                       // 10\nvar proc = global.process;                                                                                             // 11\n                                                                                                                       // 12\nif (Meteor.isServer) {                                                                                                 // 13\n  // Make require(\"process\") work on the server in all versions of Node.                                               // 14\n  meteorInstall({                                                                                                      // 15\n    node_modules: {                                                                                                    // 16\n      \"process.js\": function (r, e, module) {                                                                          // 17\n        module.exports = proc;                                                                                         // 18\n      }                                                                                                                // 19\n    }                                                                                                                  // 20\n  });                                                                                                                  // 21\n} else {                                                                                                               // 22\n  proc.platform = \"browser\";                                                                                           // 23\n  proc.nextTick = proc.nextTick || Meteor._setImmediate;                                                               // 24\n}                                                                                                                      // 25\n                                                                                                                       // 26\nif (typeof proc.env !== \"object\") {                                                                                    // 27\n  proc.env = {};                                                                                                       // 28\n}                                                                                                                      // 29\n                                                                                                                       // 30\nvar hasOwn = Object.prototype.hasOwnProperty;                                                                          // 31\nfor (var key in meteorEnv) {                                                                                           // 32\n  if (hasOwn.call(meteorEnv, key)) {                                                                                   // 33\n    proc.env[key] = meteorEnv[key];                                                                                    // 34\n  }                                                                                                                    // 35\n}                                                                                                                      // 36\n                                                                                                                       // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"reify.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/reify.js                                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Module = module.constructor;                                                                                       // 1\nvar Mp = Module.prototype;                                                                                             // 2\nrequire(\"reify/lib/runtime\").enable(Mp);                                                                               // 3\nMp.importSync = Mp.importSync || Mp.import;                                                                            // 4\nMp.import = Mp.import || Mp.importSync;                                                                                // 5\n                                                                                                                       // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"stubs.js\":function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/stubs.js                                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar haveStubs = false;                                                                                                 // 1\ntry {                                                                                                                  // 2\n  require.resolve(\"meteor-node-stubs\");                                                                                // 3\n  haveStubs = true;                                                                                                    // 4\n} catch (noStubs) {}                                                                                                   // 5\n                                                                                                                       // 6\nif (haveStubs) {                                                                                                       // 7\n  // When meteor-node-stubs is installed in the application's root                                                     // 8\n  // node_modules directory, requiring it here installs aliases for stubs                                              // 9\n  // for all Node built-in modules, such as fs, util, and http.                                                        // 10\n  require(\"meteor-node-stubs\");                                                                                        // 11\n}                                                                                                                      // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"node_modules\":{\"reify\":{\"lib\":{\"runtime\":{\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/modules/node_modules/reify/lib/runtime/index.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\n// This module should be compatible with PhantomJS v1, just like the other files                                       // 3\n// in reify/lib/runtime. Node 4+ features like const/let and arrow functions are                                       // 4\n// not acceptable here, and importing any npm packages should be contemplated                                          // 5\n// with extreme skepticism.                                                                                            // 6\n                                                                                                                       // 7\nvar utils = require(\"./utils.js\");                                                                                     // 8\nvar Entry = require(\"./entry.js\");                                                                                     // 9\n                                                                                                                       // 10\n// The exports.enable method can be used to enable the Reify runtime for                                               // 11\n// specific module objects, or for Module.prototype (where implemented),                                               // 12\n// to make the runtime available throughout the entire module system.                                                  // 13\nexports.enable = function (mod) {                                                                                      // 14\n  if (typeof mod.export !== \"function\" ||                                                                              // 15\n      typeof mod.importSync !== \"function\") {                                                                          // 16\n    mod.export = moduleExport;                                                                                         // 17\n    mod.exportDefault = moduleExportDefault;                                                                           // 18\n    mod.runSetters = runSetters;                                                                                       // 19\n    mod.watch = moduleWatch;                                                                                           // 20\n                                                                                                                       // 21\n    // Used for copying the properties of a namespace object to                                                        // 22\n    // mod.exports to implement `export * from \"module\"` syntax.                                                       // 23\n    mod.makeNsSetter = moduleMakeNsSetter;                                                                             // 24\n                                                                                                                       // 25\n    // To be deprecated:                                                                                               // 26\n    mod.runModuleSetters = runSetters;                                                                                 // 27\n    mod.importSync = importSync;                                                                                       // 28\n                                                                                                                       // 29\n    return true;                                                                                                       // 30\n  }                                                                                                                    // 31\n                                                                                                                       // 32\n  return false;                                                                                                        // 33\n};                                                                                                                     // 34\n                                                                                                                       // 35\nfunction moduleWatch(exported, setters, key) {                                                                         // 36\n  utils.setESModule(this.exports);                                                                                     // 37\n  Entry.getOrCreate(this.exports, this);                                                                               // 38\n                                                                                                                       // 39\n  if (utils.isObject(setters)) {                                                                                       // 40\n    Entry.getOrCreate(exported).addSetters(this, setters, key);                                                        // 41\n  }                                                                                                                    // 42\n}                                                                                                                      // 43\n                                                                                                                       // 44\n// If key is provided, it will be used to identify the given setters so                                                // 45\n// that they can be replaced if module.importSync is called again with the                                             // 46\n// same key. This avoids potential memory leaks from import declarations                                               // 47\n// inside loops. The compiler generates these keys automatically (and                                                  // 48\n// deterministically) when compiling nested import declarations.                                                       // 49\nfunction importSync(id, setters, key) {                                                                                // 50\n  return this.watch(this.require(id), setters, key);                                                                   // 51\n}                                                                                                                      // 52\n                                                                                                                       // 53\n// Register getter functions for local variables in the scope of an export                                             // 54\n// statement. Pass true as the second argument to indicate that the getter                                             // 55\n// functions always return the same values.                                                                            // 56\nfunction moduleExport(getters, constant) {                                                                             // 57\n  utils.setESModule(this.exports);                                                                                     // 58\n  var entry = Entry.getOrCreate(this.exports, this);                                                                   // 59\n  entry.addGetters(getters, constant);                                                                                 // 60\n  if (this.loaded) {                                                                                                   // 61\n    // If the module has already been evaluated, then we need to trigger                                               // 62\n    // another round of entry.runSetters calls, which begins by calling                                                // 63\n    // entry.runModuleGetters(module).                                                                                 // 64\n    entry.runSetters();                                                                                                // 65\n  }                                                                                                                    // 66\n}                                                                                                                      // 67\n                                                                                                                       // 68\n// Register a getter function that always returns the given value.                                                     // 69\nfunction moduleExportDefault(value) {                                                                                  // 70\n  return this.export({                                                                                                 // 71\n    default: function () {                                                                                             // 72\n      return value;                                                                                                    // 73\n    }                                                                                                                  // 74\n  }, true);                                                                                                            // 75\n}                                                                                                                      // 76\n                                                                                                                       // 77\n// Platform-specific code should find a way to call this method whenever                                               // 78\n// the module system is about to return module.exports from require. This                                              // 79\n// might happen more than once per module, in case of dependency cycles,                                               // 80\n// so we want Module.prototype.runSetters to run each time.                                                            // 81\nfunction runSetters(valueToPassThrough) {                                                                              // 82\n  var entry = Entry.get(this.exports);                                                                                 // 83\n  if (entry !== null) {                                                                                                // 84\n    entry.runSetters();                                                                                                // 85\n  }                                                                                                                    // 86\n                                                                                                                       // 87\n  if (this.loaded) {                                                                                                   // 88\n    // If this module has finished loading, then we must create an Entry                                               // 89\n    // object here, so that we can add this module to entry.ownerModules                                               // 90\n    // by passing it as the second argument to Entry.getOrCreate.                                                      // 91\n    Entry.getOrCreate(this.exports, this);                                                                             // 92\n  }                                                                                                                    // 93\n                                                                                                                       // 94\n  // Assignments to exported local variables get wrapped with calls to                                                 // 95\n  // module.runSetters, so module.runSetters returns the                                                               // 96\n  // valueToPassThrough parameter to allow the value of the original                                                   // 97\n  // expression to pass through. For example,                                                                          // 98\n  //                                                                                                                   // 99\n  //   export var a = 1;                                                                                               // 100\n  //   console.log(a += 3);                                                                                            // 101\n  //                                                                                                                   // 102\n  // becomes                                                                                                           // 103\n  //                                                                                                                   // 104\n  //   module.export(\"a\", () => a);                                                                                    // 105\n  //   var a = 1;                                                                                                      // 106\n  //   console.log(module.runSetters(a += 3));                                                                         // 107\n  //                                                                                                                   // 108\n  // This ensures module.runSetters runs immediately after the assignment,                                             // 109\n  // and does not interfere with the larger computation.                                                               // 110\n  return valueToPassThrough;                                                                                           // 111\n}                                                                                                                      // 112\n                                                                                                                       // 113\n// Returns a function that takes a namespace object and copies the                                                     // 114\n// properties of the namespace to module.exports, excluding any \"default\"                                              // 115\n// property, which is useful for implementing `export * from \"module\"`.                                                // 116\nfunction moduleMakeNsSetter() {                                                                                        // 117\n  var module = this;                                                                                                   // 118\n  // Discussion of why the \"default\" property is skipped:                                                              // 119\n  // https://github.com/tc39/ecma262/issues/948                                                                        // 120\n  return function (namespace) {                                                                                        // 121\n    Object.keys(namespace).forEach(function (key) {                                                                    // 122\n      if (key !== \"default\") {                                                                                         // 123\n        utils.copyKey(key, module.exports, namespace);                                                                 // 124\n      }                                                                                                                // 125\n    });                                                                                                                // 126\n  };                                                                                                                   // 127\n}                                                                                                                      // 128\n                                                                                                                       // 129\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"utils.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/modules/node_modules/reify/lib/runtime/utils.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\n// This module should be compatible with PhantomJS v1, just like the other files                                       // 3\n// in reify/lib/runtime. Node 4+ features like const/let and arrow functions are                                       // 4\n// not acceptable here, and importing any npm packages should be contemplated                                          // 5\n// with extreme skepticism.                                                                                            // 6\n                                                                                                                       // 7\nvar useSetPrototypeOf = typeof Object.setPrototypeOf === \"function\";                                                   // 8\nvar useSymbol = typeof Symbol === \"function\";                                                                          // 9\n                                                                                                                       // 10\nvar esStrKey = \"__esModule\";                                                                                           // 11\nvar esSymKey = useSymbol ? Symbol.for(esStrKey) : null;                                                                // 12\nvar useToStringTag = useSymbol && typeof Symbol.toStringTag === \"symbol\";                                              // 13\nvar useGetOwnPropDesc =                                                                                                // 14\n  typeof Object.getOwnPropertyDescriptor === \"function\";                                                               // 15\nvar hasOwn = Object.prototype.hasOwnProperty;                                                                          // 16\n                                                                                                                       // 17\nfunction copyKey(key, target, source) {                                                                                // 18\n  if (useGetOwnPropDesc) {                                                                                             // 19\n    var desc = Object.getOwnPropertyDescriptor(source, key);                                                           // 20\n    desc.configurable = true; // Allow redefinition.                                                                   // 21\n    Object.defineProperty(target, key, desc);                                                                          // 22\n  } else {                                                                                                             // 23\n    target[key] = source[key];                                                                                         // 24\n  }                                                                                                                    // 25\n}                                                                                                                      // 26\n                                                                                                                       // 27\nexports.copyKey = copyKey;                                                                                             // 28\n                                                                                                                       // 29\n// Returns obj[key] unless that property is defined by a getter function,                                              // 30\n// in which case the getter function is returned.                                                                      // 31\nexports.valueOrGetter = function (obj, key) {                                                                          // 32\n  if (useGetOwnPropDesc && hasOwn.call(obj, key)) {                                                                    // 33\n    var desc = Object.getOwnPropertyDescriptor(obj, key);                                                              // 34\n    if (typeof desc.get === \"function\") {                                                                              // 35\n      return desc.get;                                                                                                 // 36\n    }                                                                                                                  // 37\n  }                                                                                                                    // 38\n                                                                                                                       // 39\n  return obj[key];                                                                                                     // 40\n};                                                                                                                     // 41\n                                                                                                                       // 42\nfunction getESModule(exported) {                                                                                       // 43\n  if (isObjectLike(exported)) {                                                                                        // 44\n    if (useSymbol && hasOwn.call(exported, esSymKey)) {                                                                // 45\n      return !! exported[esSymKey];                                                                                    // 46\n    }                                                                                                                  // 47\n                                                                                                                       // 48\n    if (hasOwn.call(exported, esStrKey)) {                                                                             // 49\n      return !! exported[esStrKey];                                                                                    // 50\n    }                                                                                                                  // 51\n  }                                                                                                                    // 52\n                                                                                                                       // 53\n  return false;                                                                                                        // 54\n}                                                                                                                      // 55\n                                                                                                                       // 56\nexports.getESModule = getESModule;                                                                                     // 57\n                                                                                                                       // 58\nfunction setESModule(exported) {                                                                                       // 59\n  if (isObjectLike(exported)) {                                                                                        // 60\n    if (useSymbol) {                                                                                                   // 61\n      exported[esSymKey] = true;                                                                                       // 62\n    } else if (! exported[esStrKey]) {                                                                                 // 63\n      // Other module runtime systems may set exported.__esModule such                                                 // 64\n      // that it can't be redefined, so we call Object.defineProperty only                                             // 65\n      // when exported.__esModule is not already true.                                                                 // 66\n      Object.defineProperty(exported, esStrKey, {                                                                      // 67\n        configurable: true,                                                                                            // 68\n        enumerable: false,                                                                                             // 69\n        value: true,                                                                                                   // 70\n        writable: false                                                                                                // 71\n      });                                                                                                              // 72\n    }                                                                                                                  // 73\n  }                                                                                                                    // 74\n}                                                                                                                      // 75\n                                                                                                                       // 76\nexports.setESModule = setESModule;                                                                                     // 77\n                                                                                                                       // 78\nfunction isObject(value) {                                                                                             // 79\n  return typeof value === \"object\" && value !== null;                                                                  // 80\n}                                                                                                                      // 81\n                                                                                                                       // 82\nexports.isObject = isObject;                                                                                           // 83\n                                                                                                                       // 84\nfunction isObjectLike(value) {                                                                                         // 85\n  var type = typeof value;                                                                                             // 86\n  return type === \"function\" || (type === \"object\" && value !== null);                                                 // 87\n}                                                                                                                      // 88\n                                                                                                                       // 89\nexports.isObjectLike = isObjectLike;                                                                                   // 90\n                                                                                                                       // 91\nfunction createNamespace() {                                                                                           // 92\n  var namespace = Object.create(null);                                                                                 // 93\n                                                                                                                       // 94\n  if (useToStringTag) {                                                                                                // 95\n    Object.defineProperty(namespace, Symbol.toStringTag, {                                                             // 96\n      value: \"Module\",                                                                                                 // 97\n      configurable: false,                                                                                             // 98\n      enumerable: false,                                                                                               // 99\n      writable: false                                                                                                  // 100\n    });                                                                                                                // 101\n  }                                                                                                                    // 102\n                                                                                                                       // 103\n  setESModule(namespace);                                                                                              // 104\n                                                                                                                       // 105\n  return namespace;                                                                                                    // 106\n}                                                                                                                      // 107\n                                                                                                                       // 108\nexports.createNamespace = createNamespace;                                                                             // 109\n                                                                                                                       // 110\nfunction setPrototypeOf(object, proto) {                                                                               // 111\n  if (useSetPrototypeOf) {                                                                                             // 112\n    Object.setPrototypeOf(object, proto);                                                                              // 113\n  } else {                                                                                                             // 114\n    object.__proto__ = proto;                                                                                          // 115\n  }                                                                                                                    // 116\n  return object;                                                                                                       // 117\n}                                                                                                                      // 118\n                                                                                                                       // 119\nexports.setPrototypeOf = setPrototypeOf;                                                                               // 120\n                                                                                                                       // 121\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"entry.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/modules/node_modules/reify/lib/runtime/entry.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\n// This module should be compatible with PhantomJS v1, just like the other files                                       // 3\n// in reify/lib/runtime. Node 4+ features like const/let and arrow functions are                                       // 4\n// not acceptable here, and importing any npm packages should be contemplated                                          // 5\n// with extreme skepticism.                                                                                            // 6\n                                                                                                                       // 7\nvar utils = require(\"./utils.js\");                                                                                     // 8\n                                                                                                                       // 9\nvar GETTER_ERROR = {};                                                                                                 // 10\nvar NAN = {};                                                                                                          // 11\nvar UNDEFINED = {};                                                                                                    // 12\nvar hasOwn = Object.prototype.hasOwnProperty;                                                                          // 13\nvar keySalt = 0;                                                                                                       // 14\n                                                                                                                       // 15\nfunction Entry(exported) {                                                                                             // 16\n  // The module.exports of the module this Entry is managing.                                                          // 17\n  this.exports = exported;                                                                                             // 18\n  // Getters for local variables exported from the managed module.                                                     // 19\n  this.getters = Object.create(null);                                                                                  // 20\n  // Setters for assigning to local variables in parent modules.                                                       // 21\n  this.setters = Object.create(null);                                                                                  // 22\n  // The normalized namespace object that importers receive when they use                                              // 23\n  // `import * as namespace from \"...\"` syntax.                                                                        // 24\n  this.namespace = utils.createNamespace();                                                                            // 25\n  // Map from module.id string to module object for each module this Entry                                             // 26\n  // is managing.                                                                                                      // 27\n  this.ownerModules = Object.create(null);                                                                             // 28\n  // Boolean indicating whether all the modules this Entry is managing                                                 // 29\n  // have finished loading yet. Call entry.hasLoaded() to compute.                                                     // 30\n  this._loaded = false;                                                                                                // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\nvar Ep = utils.setPrototypeOf(Entry.prototype, null);                                                                  // 34\n                                                                                                                       // 35\nvar weakEntryMap = typeof WeakMap === \"function\"                                                                       // 36\n  ? new WeakMap                                                                                                        // 37\n  : new (function FakeWeakMap() {                                                                                      // 38\n    // A barely functional WeakMap polyfill, just in case. This                                                        // 39\n    // implementation needs to be logically correct only in the specific                                               // 40\n    // ways that the Entry class uses it. It isn't even \"weak\" in the                                                  // 41\n    // garbage-collection sense of the word, but that's fine.                                                          // 42\n    var keys = [];                                                                                                     // 43\n    var values = [];                                                                                                   // 44\n                                                                                                                       // 45\n    this.get = function (obj) {                                                                                        // 46\n      var index = keys.indexOf(obj);                                                                                   // 47\n      if (index >= 0) {                                                                                                // 48\n        return values[index];                                                                                          // 49\n      }                                                                                                                // 50\n    };                                                                                                                 // 51\n                                                                                                                       // 52\n    this.set = function (obj, value) {                                                                                 // 53\n      var index = keys.indexOf(obj);                                                                                   // 54\n      if (index >= 0) {                                                                                                // 55\n        values[index] = value;                                                                                         // 56\n      } else {                                                                                                         // 57\n        keys.push(obj);                                                                                                // 58\n        values.push(value);                                                                                            // 59\n      }                                                                                                                // 60\n    };                                                                                                                 // 61\n  });                                                                                                                  // 62\n                                                                                                                       // 63\nEntry.get = function (exported) {                                                                                      // 64\n  if (utils.isObjectLike(exported)) {                                                                                  // 65\n    var entry = weakEntryMap.get(exported);                                                                            // 66\n    if (entry !== void 0) {                                                                                            // 67\n      return entry;                                                                                                    // 68\n    }                                                                                                                  // 69\n  }                                                                                                                    // 70\n  return null;                                                                                                         // 71\n};                                                                                                                     // 72\n                                                                                                                       // 73\nEntry.getOrCreate = function (exported, mod) {                                                                         // 74\n  var entry = getOrCreate(exported);                                                                                   // 75\n                                                                                                                       // 76\n  if (utils.isObject(mod)) {                                                                                           // 77\n    entry.ownerModules[mod.id] = mod;                                                                                  // 78\n  }                                                                                                                    // 79\n                                                                                                                       // 80\n  return entry;                                                                                                        // 81\n};                                                                                                                     // 82\n                                                                                                                       // 83\nfunction getOrCreate(exported) {                                                                                       // 84\n  if (! utils.isObjectLike(exported)) {                                                                                // 85\n    // In case the child module modified module.exports, create a temporary                                            // 86\n    // Entry object so that we can call the entry.addSetters method once,                                              // 87\n    // which will trigger entry.runSetters(names), so that module.importSync                                           // 88\n    // behaves as expected.                                                                                            // 89\n    return new Entry(exported);                                                                                        // 90\n  }                                                                                                                    // 91\n                                                                                                                       // 92\n  var entry = weakEntryMap.get(exported);                                                                              // 93\n  if (entry !== void 0) {                                                                                              // 94\n    return entry;                                                                                                      // 95\n  }                                                                                                                    // 96\n                                                                                                                       // 97\n  var entry = new Entry(exported);                                                                                     // 98\n  weakEntryMap.set(exported, entry);                                                                                   // 99\n  return entry;                                                                                                        // 100\n};                                                                                                                     // 101\n                                                                                                                       // 102\nfunction safeKeys(obj) {                                                                                               // 103\n  var keys = Object.keys(obj);                                                                                         // 104\n  var esModuleIndex = keys.indexOf(\"__esModule\");                                                                      // 105\n  if (esModuleIndex >= 0) {                                                                                            // 106\n    keys.splice(esModuleIndex, 1);                                                                                     // 107\n  }                                                                                                                    // 108\n  return keys;                                                                                                         // 109\n}                                                                                                                      // 110\n                                                                                                                       // 111\nEp.addGetters = function (getters, constant) {                                                                         // 112\n  var names = safeKeys(getters);                                                                                       // 113\n  var nameCount = names.length;                                                                                        // 114\n  constant = !! constant;                                                                                              // 115\n                                                                                                                       // 116\n  for (var i = 0; i < nameCount; ++i) {                                                                                // 117\n    var name = names[i];                                                                                               // 118\n    var getter = getters[name];                                                                                        // 119\n                                                                                                                       // 120\n    if (typeof getter === \"function\" &&                                                                                // 121\n        // Should this throw if this.getters[name] exists?                                                             // 122\n        ! (name in this.getters)) {                                                                                    // 123\n      this.getters[name] = getter;                                                                                     // 124\n      getter.constant = constant;                                                                                      // 125\n      getter.runCount = 0;                                                                                             // 126\n    }                                                                                                                  // 127\n  }                                                                                                                    // 128\n};                                                                                                                     // 129\n                                                                                                                       // 130\nEp.addSetters = function (parent, setters, key) {                                                                      // 131\n  var names = safeKeys(setters);                                                                                       // 132\n  var nameCount = names.length;                                                                                        // 133\n                                                                                                                       // 134\n  if (! nameCount) {                                                                                                   // 135\n    return;                                                                                                            // 136\n  }                                                                                                                    // 137\n                                                                                                                       // 138\n  // If no key is provided, make a unique key. Otherwise, make sure the key is                                         // 139\n  // distinct from keys provided by other parent modules.                                                              // 140\n  key = key === void 0                                                                                                 // 141\n    ? makeUniqueKey()                                                                                                  // 142\n    : parent.id + \":\" + key;                                                                                           // 143\n                                                                                                                       // 144\n  for (var i = 0; i < nameCount; ++i) {                                                                                // 145\n    var name = names[i];                                                                                               // 146\n    var setter = setters[name];                                                                                        // 147\n                                                                                                                       // 148\n    if (typeof setter === \"function\") {                                                                                // 149\n      setter.parent = parent;                                                                                          // 150\n      if (! (name in this.setters)) {                                                                                  // 151\n        this.setters[name] = Object.create(null);                                                                      // 152\n      }                                                                                                                // 153\n      this.setters[name][key] = setter;                                                                                // 154\n    }                                                                                                                  // 155\n  }                                                                                                                    // 156\n                                                                                                                       // 157\n  this.runSetters(names);                                                                                              // 158\n};                                                                                                                     // 159\n                                                                                                                       // 160\nEp.runGetters = function (names) {                                                                                     // 161\n  // Before running getters, copy anything added to the exports object                                                 // 162\n  // over to the namespace. Values returned by getters take precedence                                                 // 163\n  // over these values, but we don't want to miss anything.                                                            // 164\n  syncExportsToNamespace(this, names);                                                                                 // 165\n                                                                                                                       // 166\n  if (names === void 0 ||                                                                                              // 167\n      names.indexOf(\"*\") >= 0) {                                                                                       // 168\n    names = Object.keys(this.getters);                                                                                 // 169\n  }                                                                                                                    // 170\n                                                                                                                       // 171\n  var nameCount = names.length;                                                                                        // 172\n                                                                                                                       // 173\n  for (var i = 0; i < nameCount; ++i) {                                                                                // 174\n    var name = names[i];                                                                                               // 175\n    var value = runGetter(this, name);                                                                                 // 176\n                                                                                                                       // 177\n    // If the getter is run without error, update both entry.namespace and                                             // 178\n    // module.exports with the current value so that CommonJS require                                                  // 179\n    // calls remain consistent with module.watch.                                                                      // 180\n    if (value !== GETTER_ERROR) {                                                                                      // 181\n      this.namespace[name] = value;                                                                                    // 182\n      this.exports[name] = value;                                                                                      // 183\n    }                                                                                                                  // 184\n  }                                                                                                                    // 185\n};                                                                                                                     // 186\n                                                                                                                       // 187\nfunction syncExportsToNamespace(entry, names) {                                                                        // 188\n  var setDefault = false;                                                                                              // 189\n                                                                                                                       // 190\n  if (! utils.getESModule(entry.exports)) {                                                                            // 191\n    // If the module entry is managing overrides module.exports, that                                                  // 192\n    // value should be exposed as the .default property of the namespace,                                              // 193\n    // unless module.exports is marked as an ECMASCript module.                                                        // 194\n    entry.namespace.default = entry.exports;                                                                           // 195\n    setDefault = true;                                                                                                 // 196\n  }                                                                                                                    // 197\n                                                                                                                       // 198\n  if (! utils.isObjectLike(entry.exports)) {                                                                           // 199\n    return;                                                                                                            // 200\n  }                                                                                                                    // 201\n                                                                                                                       // 202\n  if (names === void 0 ||                                                                                              // 203\n      names.indexOf(\"*\") >= 0) {                                                                                       // 204\n    names = Object.keys(entry.exports);                                                                                // 205\n  }                                                                                                                    // 206\n                                                                                                                       // 207\n  names.forEach(function (key) {                                                                                       // 208\n    // Don't set any properties for which a getter function exists in                                                  // 209\n    // entry.getters, don't accidentally override entry.namespace.default,                                             // 210\n    // and only copy own properties from entry.exports.                                                                // 211\n    if (! hasOwn.call(entry.getters, key) &&                                                                           // 212\n        ! (setDefault && key === \"default\") &&                                                                         // 213\n        hasOwn.call(entry.exports, key)) {                                                                             // 214\n      utils.copyKey(key, entry.namespace, entry.exports);                                                              // 215\n    }                                                                                                                  // 216\n  });                                                                                                                  // 217\n}                                                                                                                      // 218\n                                                                                                                       // 219\n// Called by module.runSetters once the module this Entry is managing has                                              // 220\n// finished loading.                                                                                                   // 221\nEp.hasLoaded = function () {                                                                                           // 222\n  if (this._loaded) {                                                                                                  // 223\n    return true;                                                                                                       // 224\n  }                                                                                                                    // 225\n                                                                                                                       // 226\n  var ids = Object.keys(this.ownerModules);                                                                            // 227\n  var idCount = ids.length;                                                                                            // 228\n                                                                                                                       // 229\n  for (var i = 0; i < idCount; ++i) {                                                                                  // 230\n    var owner = this.ownerModules[ids[i]];                                                                             // 231\n    if (! owner.loaded && owner.exports === this.exports) {                                                            // 232\n      // At least one owner module whose exports are still ===                                                         // 233\n      // this.exports has not finished loading, so this this Entry cannot                                              // 234\n      // be marked as loaded yet.                                                                                      // 235\n      return false;                                                                                                    // 236\n    }                                                                                                                  // 237\n  }                                                                                                                    // 238\n                                                                                                                       // 239\n  // Set entry._loaded = true only if all the modules in                                                               // 240\n  // entry.ownerModules that are still associated with entry.exports have                                              // 241\n  // finished loading.                                                                                                 // 242\n  return this._loaded = true;                                                                                          // 243\n};                                                                                                                     // 244\n                                                                                                                       // 245\n// Called whenever module.exports might have changed, to trigger any                                                   // 246\n// setters associated with the newly exported values. The names parameter                                              // 247\n// is optional; without it, all getters and setters will run.                                                          // 248\nEp.runSetters = function (names) {                                                                                     // 249\n  // Make sure entry.namespace and module.exports are up to date before we                                             // 250\n  // call getExportByName(entry, name).                                                                                // 251\n  this.runGetters(names);                                                                                              // 252\n                                                                                                                       // 253\n  // Lazily-initialized object mapping parent module identifiers to parent                                             // 254\n  // module objects whose setters we might need to run.                                                                // 255\n  var parents;                                                                                                         // 256\n                                                                                                                       // 257\n  forEachSetter(this, names, function (setter, name, value) {                                                          // 258\n    if (parents === void 0) {                                                                                          // 259\n      parents = Object.create(null);                                                                                   // 260\n    }                                                                                                                  // 261\n    parents[setter.parent.id] = setter.parent;                                                                         // 262\n                                                                                                                       // 263\n    // The param order for setters is `value` then `name` because the `name`                                           // 264\n    // param is only used by namespace exports.                                                                        // 265\n    setter(value, name);                                                                                               // 266\n  });                                                                                                                  // 267\n                                                                                                                       // 268\n  if (! parents) {                                                                                                     // 269\n    return;                                                                                                            // 270\n  }                                                                                                                    // 271\n                                                                                                                       // 272\n  // If any of the setters updated the module.exports of a parent module,                                              // 273\n  // or updated local variables that are exported by that parent module,                                               // 274\n  // then we must re-run any setters registered by that parent module.                                                 // 275\n  var parentIDs = Object.keys(parents);                                                                                // 276\n  var parentIDCount = parentIDs.length;                                                                                // 277\n                                                                                                                       // 278\n  for (var i = 0; i < parentIDCount; ++i) {                                                                            // 279\n    // What happens if parents[parentIDs[id]] === module, or if                                                        // 280\n    // longer cycles exist in the parent chain? Thanks to our setter.last                                              // 281\n    // bookkeeping above, the runSetters broadcast will only proceed                                                   // 282\n    // as far as there are any actual changes to report.                                                               // 283\n    var parent = parents[parentIDs[i]];                                                                                // 284\n    var parentEntry = Entry.get(parent.exports);                                                                       // 285\n    if (parentEntry) {                                                                                                 // 286\n      parentEntry.runSetters();                                                                                        // 287\n    }                                                                                                                  // 288\n  }                                                                                                                    // 289\n};                                                                                                                     // 290\n                                                                                                                       // 291\nfunction callSetterIfNecessary(setter, name, value, callback) {                                                        // 292\n  if (name === \"__esModule\") {                                                                                         // 293\n    // Ignore setters asking for module.exports.__esModule.                                                            // 294\n    return;                                                                                                            // 295\n  }                                                                                                                    // 296\n                                                                                                                       // 297\n  var shouldCall = false;                                                                                              // 298\n                                                                                                                       // 299\n  if (setter.last === void 0) {                                                                                        // 300\n    setter.last = Object.create(null);                                                                                 // 301\n    // Always call the setter if it has never been called before.                                                      // 302\n    shouldCall = true;                                                                                                 // 303\n  }                                                                                                                    // 304\n                                                                                                                       // 305\n  function changed(name, value) {                                                                                      // 306\n    var valueToCompare = value;                                                                                        // 307\n    if (valueToCompare !== valueToCompare) {                                                                           // 308\n      valueToCompare = NAN;                                                                                            // 309\n    } else if (valueToCompare === void 0) {                                                                            // 310\n      valueToCompare = UNDEFINED;                                                                                      // 311\n    }                                                                                                                  // 312\n                                                                                                                       // 313\n    if (setter.last[name] === valueToCompare) {                                                                        // 314\n      return false;                                                                                                    // 315\n    }                                                                                                                  // 316\n                                                                                                                       // 317\n    setter.last[name] = valueToCompare;                                                                                // 318\n    return true;                                                                                                       // 319\n  }                                                                                                                    // 320\n                                                                                                                       // 321\n  if (name === \"*\") {                                                                                                  // 322\n    var keys = safeKeys(value);                                                                                        // 323\n    var keyCount = keys.length;                                                                                        // 324\n    for (var i = 0; i < keyCount; ++i) {                                                                               // 325\n      var key = keys[i];                                                                                               // 326\n      // Evaluating value[key] is risky because the property might be                                                  // 327\n      // defined by a getter function that logs a deprecation warning (or                                              // 328\n      // worse) when evaluated. For example, Node uses this trick to                                                   // 329\n      // display a deprecation warning whenever crypto.createCredentials                                               // 330\n      // is accessed. Fortunately, when value[key] is defined by a getter                                              // 331\n      // function, it's enough to check whether the getter function itself                                             // 332\n      // has changed, since we are careful elsewhere to preserve getters                                               // 333\n      // rather than prematurely evaluating them.                                                                      // 334\n      if (changed(key, utils.valueOrGetter(value, key))) {                                                             // 335\n        shouldCall = true;                                                                                             // 336\n      }                                                                                                                // 337\n    }                                                                                                                  // 338\n  } else if (changed(name, value)) {                                                                                   // 339\n    shouldCall = true;                                                                                                 // 340\n  }                                                                                                                    // 341\n                                                                                                                       // 342\n  if (shouldCall) {                                                                                                    // 343\n    // Only invoke the callback if we have not called this setter                                                      // 344\n    // (with a value of this name) before, or the current value is                                                     // 345\n    // different from the last value we passed to this setter.                                                         // 346\n    return callback(setter, name, value);                                                                              // 347\n  }                                                                                                                    // 348\n}                                                                                                                      // 349\n                                                                                                                       // 350\n// Invoke the given callback once for every (setter, name, value) that needs to                                        // 351\n// be called. Note that forEachSetter does not call any setters itself, only the                                       // 352\n// given callback.                                                                                                     // 353\nfunction forEachSetter(entry, names, callback) {                                                                       // 354\n  var needToCheckNames = true;                                                                                         // 355\n                                                                                                                       // 356\n  if (names === void 0) {                                                                                              // 357\n    names = Object.keys(entry.setters);                                                                                // 358\n    needToCheckNames = false;                                                                                          // 359\n  }                                                                                                                    // 360\n                                                                                                                       // 361\n  var nameCount = names.length;                                                                                        // 362\n                                                                                                                       // 363\n  for (var i = 0; i < nameCount; ++i) {                                                                                // 364\n    var name = names[i];                                                                                               // 365\n                                                                                                                       // 366\n    if (needToCheckNames &&                                                                                            // 367\n        ! hasOwn.call(entry.setters, name)) {                                                                          // 368\n      continue;                                                                                                        // 369\n    }                                                                                                                  // 370\n                                                                                                                       // 371\n    var setters = entry.setters[name];                                                                                 // 372\n    var keys = Object.keys(setters);                                                                                   // 373\n    var keyCount = keys.length;                                                                                        // 374\n                                                                                                                       // 375\n    for (var j = 0; j < keyCount; ++j) {                                                                               // 376\n      var key = keys[j];                                                                                               // 377\n      var value = getExportByName(entry, name);                                                                        // 378\n                                                                                                                       // 379\n      callSetterIfNecessary(setters[key], name, value, callback);                                                      // 380\n                                                                                                                       // 381\n      var getter = entry.getters[name];                                                                                // 382\n      if (typeof getter === \"function\" &&                                                                              // 383\n          // Sometimes a getter function will throw because it's called                                                // 384\n          // before the variable it's supposed to return has been                                                      // 385\n          // initialized, so we need to know that the getter function has                                              // 386\n          // run to completion at least once.                                                                          // 387\n          getter.runCount > 0 &&                                                                                       // 388\n          getter.constant) {                                                                                           // 389\n        // If we happen to know that this getter function has run                                                      // 390\n        // successfully, and will never return a different value, then we                                              // 391\n        // can forget the corresponding setter, because we've already                                                  // 392\n        // reported that constant value. Note that we can't forget the                                                 // 393\n        // getter, because we need to remember the original value in case                                              // 394\n        // anyone tampers with entry.exports[name].                                                                    // 395\n        delete setters[key];                                                                                           // 396\n      }                                                                                                                // 397\n    }                                                                                                                  // 398\n  }                                                                                                                    // 399\n}                                                                                                                      // 400\n                                                                                                                       // 401\nfunction getExportByName(entry, name) {                                                                                // 402\n  if (name === \"*\") {                                                                                                  // 403\n    return entry.namespace;                                                                                            // 404\n  }                                                                                                                    // 405\n                                                                                                                       // 406\n  if (hasOwn.call(entry.namespace, name)) {                                                                            // 407\n    return entry.namespace[name];                                                                                      // 408\n  }                                                                                                                    // 409\n                                                                                                                       // 410\n  var exported = entry.exports;                                                                                        // 411\n                                                                                                                       // 412\n  if (name === \"default\" &&                                                                                            // 413\n      ! (utils.getESModule(exported) &&                                                                                // 414\n         \"default\" in exported)) {                                                                                     // 415\n    return exported;                                                                                                   // 416\n  }                                                                                                                    // 417\n                                                                                                                       // 418\n  if (exported == null) {                                                                                              // 419\n    return;                                                                                                            // 420\n  }                                                                                                                    // 421\n                                                                                                                       // 422\n  return exported[name];                                                                                               // 423\n}                                                                                                                      // 424\n                                                                                                                       // 425\nfunction makeUniqueKey() {                                                                                             // 426\n  return Math.random()                                                                                                 // 427\n    .toString(36)                                                                                                      // 428\n    // Add an incrementing salt to help track key ordering and also                                                    // 429\n    // absolutely guarantee we never return the same key twice.                                                        // 430\n    .replace(\"0.\", ++keySalt + \"$\");                                                                                   // 431\n}                                                                                                                      // 432\n                                                                                                                       // 433\nfunction runGetter(entry, name) {                                                                                      // 434\n  var getter = entry.getters[name];                                                                                    // 435\n  try {                                                                                                                // 436\n    var result = getter();                                                                                             // 437\n    ++getter.runCount;                                                                                                 // 438\n    return result;                                                                                                     // 439\n  } catch (e) {}                                                                                                       // 440\n  return GETTER_ERROR;                                                                                                 // 441\n}                                                                                                                      // 442\n                                                                                                                       // 443\nmodule.exports = Entry;                                                                                                // 444\n                                                                                                                       // 445\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},\"react\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/package.json                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"react\";                                                                                                // 1\nexports.version = \"15.6.1\";                                                                                            // 2\nexports.main = \"react.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"react.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/react.js                                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nmodule.exports = require('./lib/React');                                                                               // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"React.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/React.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _assign = require('object-assign');                                                                                // 13\n                                                                                                                       // 14\nvar ReactBaseClasses = require('./ReactBaseClasses');                                                                  // 15\nvar ReactChildren = require('./ReactChildren');                                                                        // 16\nvar ReactDOMFactories = require('./ReactDOMFactories');                                                                // 17\nvar ReactElement = require('./ReactElement');                                                                          // 18\nvar ReactPropTypes = require('./ReactPropTypes');                                                                      // 19\nvar ReactVersion = require('./ReactVersion');                                                                          // 20\n                                                                                                                       // 21\nvar createReactClass = require('./createClass');                                                                       // 22\nvar onlyChild = require('./onlyChild');                                                                                // 23\n                                                                                                                       // 24\nvar createElement = ReactElement.createElement;                                                                        // 25\nvar createFactory = ReactElement.createFactory;                                                                        // 26\nvar cloneElement = ReactElement.cloneElement;                                                                          // 27\n                                                                                                                       // 28\nif (process.env.NODE_ENV !== 'production') {                                                                           // 29\n  var lowPriorityWarning = require('./lowPriorityWarning');                                                            // 30\n  var canDefineProperty = require('./canDefineProperty');                                                              // 31\n  var ReactElementValidator = require('./ReactElementValidator');                                                      // 32\n  var didWarnPropTypesDeprecated = false;                                                                              // 33\n  createElement = ReactElementValidator.createElement;                                                                 // 34\n  createFactory = ReactElementValidator.createFactory;                                                                 // 35\n  cloneElement = ReactElementValidator.cloneElement;                                                                   // 36\n}                                                                                                                      // 37\n                                                                                                                       // 38\nvar __spread = _assign;                                                                                                // 39\nvar createMixin = function (mixin) {                                                                                   // 40\n  return mixin;                                                                                                        // 41\n};                                                                                                                     // 42\n                                                                                                                       // 43\nif (process.env.NODE_ENV !== 'production') {                                                                           // 44\n  var warnedForSpread = false;                                                                                         // 45\n  var warnedForCreateMixin = false;                                                                                    // 46\n  __spread = function () {                                                                                             // 47\n    lowPriorityWarning(warnedForSpread, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.');\n    warnedForSpread = true;                                                                                            // 49\n    return _assign.apply(null, arguments);                                                                             // 50\n  };                                                                                                                   // 51\n                                                                                                                       // 52\n  createMixin = function (mixin) {                                                                                     // 53\n    lowPriorityWarning(warnedForCreateMixin, 'React.createMixin is deprecated and should not be used. ' + 'In React v16.0, it will be removed. ' + 'You can use this mixin directly instead. ' + 'See https://fb.me/createmixin-was-never-implemented for more info.');\n    warnedForCreateMixin = true;                                                                                       // 55\n    return mixin;                                                                                                      // 56\n  };                                                                                                                   // 57\n}                                                                                                                      // 58\n                                                                                                                       // 59\nvar React = {                                                                                                          // 60\n  // Modern                                                                                                            // 61\n                                                                                                                       // 62\n  Children: {                                                                                                          // 63\n    map: ReactChildren.map,                                                                                            // 64\n    forEach: ReactChildren.forEach,                                                                                    // 65\n    count: ReactChildren.count,                                                                                        // 66\n    toArray: ReactChildren.toArray,                                                                                    // 67\n    only: onlyChild                                                                                                    // 68\n  },                                                                                                                   // 69\n                                                                                                                       // 70\n  Component: ReactBaseClasses.Component,                                                                               // 71\n  PureComponent: ReactBaseClasses.PureComponent,                                                                       // 72\n                                                                                                                       // 73\n  createElement: createElement,                                                                                        // 74\n  cloneElement: cloneElement,                                                                                          // 75\n  isValidElement: ReactElement.isValidElement,                                                                         // 76\n                                                                                                                       // 77\n  // Classic                                                                                                           // 78\n                                                                                                                       // 79\n  PropTypes: ReactPropTypes,                                                                                           // 80\n  createClass: createReactClass,                                                                                       // 81\n  createFactory: createFactory,                                                                                        // 82\n  createMixin: createMixin,                                                                                            // 83\n                                                                                                                       // 84\n  // This looks DOM specific but these are actually isomorphic helpers                                                 // 85\n  // since they are just generating DOM strings.                                                                       // 86\n  DOM: ReactDOMFactories,                                                                                              // 87\n                                                                                                                       // 88\n  version: ReactVersion,                                                                                               // 89\n                                                                                                                       // 90\n  // Deprecated hook for JSX spread, don't use this for anything.                                                      // 91\n  __spread: __spread                                                                                                   // 92\n};                                                                                                                     // 93\n                                                                                                                       // 94\nif (process.env.NODE_ENV !== 'production') {                                                                           // 95\n  var warnedForCreateClass = false;                                                                                    // 96\n  if (canDefineProperty) {                                                                                             // 97\n    Object.defineProperty(React, 'PropTypes', {                                                                        // 98\n      get: function () {                                                                                               // 99\n        lowPriorityWarning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated,' + ' and will be removed in  React v16.0.' + ' Use the latest available v15.* prop-types package from npm instead.' + ' For info on usage, compatibility, migration and more, see ' + 'https://fb.me/prop-types-docs');\n        didWarnPropTypesDeprecated = true;                                                                             // 101\n        return ReactPropTypes;                                                                                         // 102\n      }                                                                                                                // 103\n    });                                                                                                                // 104\n                                                                                                                       // 105\n    Object.defineProperty(React, 'createClass', {                                                                      // 106\n      get: function () {                                                                                               // 107\n        lowPriorityWarning(warnedForCreateClass, 'Accessing createClass via the main React package is deprecated,' + ' and will be removed in React v16.0.' + \" Use a plain JavaScript class instead. If you're not yet \" + 'ready to migrate, create-react-class v15.* is available ' + 'on npm as a temporary, drop-in replacement. ' + 'For more info see https://fb.me/react-create-class');\n        warnedForCreateClass = true;                                                                                   // 109\n        return createReactClass;                                                                                       // 110\n      }                                                                                                                // 111\n    });                                                                                                                // 112\n  }                                                                                                                    // 113\n                                                                                                                       // 114\n  // React.DOM factories are deprecated. Wrap these methods so that                                                    // 115\n  // invocations of the React.DOM namespace and alert users to switch                                                  // 116\n  // to the `react-dom-factories` package.                                                                             // 117\n  React.DOM = {};                                                                                                      // 118\n  var warnedForFactories = false;                                                                                      // 119\n  Object.keys(ReactDOMFactories).forEach(function (factory) {                                                          // 120\n    React.DOM[factory] = function () {                                                                                 // 121\n      if (!warnedForFactories) {                                                                                       // 122\n        lowPriorityWarning(false, 'Accessing factories like React.DOM.%s has been deprecated ' + 'and will be removed in v16.0+. Use the ' + 'react-dom-factories package instead. ' + ' Version 1.0 provides a drop-in replacement.' + ' For more info, see https://fb.me/react-dom-factories', factory);\n        warnedForFactories = true;                                                                                     // 124\n      }                                                                                                                // 125\n      return ReactDOMFactories[factory].apply(ReactDOMFactories, arguments);                                           // 126\n    };                                                                                                                 // 127\n  });                                                                                                                  // 128\n}                                                                                                                      // 129\n                                                                                                                       // 130\nmodule.exports = React;                                                                                                // 131\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactBaseClasses.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactBaseClasses.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _prodInvariant = require('./reactProdInvariant'),                                                                  // 13\n    _assign = require('object-assign');                                                                                // 14\n                                                                                                                       // 15\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');                                                          // 16\n                                                                                                                       // 17\nvar canDefineProperty = require('./canDefineProperty');                                                                // 18\nvar emptyObject = require('fbjs/lib/emptyObject');                                                                     // 19\nvar invariant = require('fbjs/lib/invariant');                                                                         // 20\nvar lowPriorityWarning = require('./lowPriorityWarning');                                                              // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * Base class helpers for the updating state of a component.                                                           // 24\n */                                                                                                                    // 25\nfunction ReactComponent(props, context, updater) {                                                                     // 26\n  this.props = props;                                                                                                  // 27\n  this.context = context;                                                                                              // 28\n  this.refs = emptyObject;                                                                                             // 29\n  // We initialize the default updater but the real one gets injected by the                                           // 30\n  // renderer.                                                                                                         // 31\n  this.updater = updater || ReactNoopUpdateQueue;                                                                      // 32\n}                                                                                                                      // 33\n                                                                                                                       // 34\nReactComponent.prototype.isReactComponent = {};                                                                        // 35\n                                                                                                                       // 36\n/**                                                                                                                    // 37\n * Sets a subset of the state. Always use this to mutate                                                               // 38\n * state. You should treat `this.state` as immutable.                                                                  // 39\n *                                                                                                                     // 40\n * There is no guarantee that `this.state` will be immediately updated, so                                             // 41\n * accessing `this.state` after calling this method may return the old value.                                          // 42\n *                                                                                                                     // 43\n * There is no guarantee that calls to `setState` will run synchronously,                                              // 44\n * as they may eventually be batched together.  You can provide an optional                                            // 45\n * callback that will be executed when the call to setState is actually                                                // 46\n * completed.                                                                                                          // 47\n *                                                                                                                     // 48\n * When a function is provided to setState, it will be called at some point in                                         // 49\n * the future (not synchronously). It will be called with the up to date                                               // 50\n * component arguments (state, props, context). These values can be different                                          // 51\n * from this.* because your function may be called after receiveProps but before                                       // 52\n * shouldComponentUpdate, and this new state, props, and context will not yet be                                       // 53\n * assigned to this.                                                                                                   // 54\n *                                                                                                                     // 55\n * @param {object|function} partialState Next partial state or function to                                             // 56\n *        produce next partial state to be merged with current state.                                                  // 57\n * @param {?function} callback Called after state is updated.                                                          // 58\n * @final                                                                                                              // 59\n * @protected                                                                                                          // 60\n */                                                                                                                    // 61\nReactComponent.prototype.setState = function (partialState, callback) {                                                // 62\n  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;\n  this.updater.enqueueSetState(this, partialState);                                                                    // 64\n  if (callback) {                                                                                                      // 65\n    this.updater.enqueueCallback(this, callback, 'setState');                                                          // 66\n  }                                                                                                                    // 67\n};                                                                                                                     // 68\n                                                                                                                       // 69\n/**                                                                                                                    // 70\n * Forces an update. This should only be invoked when it is known with                                                 // 71\n * certainty that we are **not** in a DOM transaction.                                                                 // 72\n *                                                                                                                     // 73\n * You may want to call this when you know that some deeper aspect of the                                              // 74\n * component's state has changed but `setState` was not called.                                                        // 75\n *                                                                                                                     // 76\n * This will not invoke `shouldComponentUpdate`, but it will invoke                                                    // 77\n * `componentWillUpdate` and `componentDidUpdate`.                                                                     // 78\n *                                                                                                                     // 79\n * @param {?function} callback Called after update is complete.                                                        // 80\n * @final                                                                                                              // 81\n * @protected                                                                                                          // 82\n */                                                                                                                    // 83\nReactComponent.prototype.forceUpdate = function (callback) {                                                           // 84\n  this.updater.enqueueForceUpdate(this);                                                                               // 85\n  if (callback) {                                                                                                      // 86\n    this.updater.enqueueCallback(this, callback, 'forceUpdate');                                                       // 87\n  }                                                                                                                    // 88\n};                                                                                                                     // 89\n                                                                                                                       // 90\n/**                                                                                                                    // 91\n * Deprecated APIs. These APIs used to exist on classic React classes but since                                        // 92\n * we would like to deprecate them, we're not going to move them over to this                                          // 93\n * modern base class. Instead, we define a getter that warns if it's accessed.                                         // 94\n */                                                                                                                    // 95\nif (process.env.NODE_ENV !== 'production') {                                                                           // 96\n  var deprecatedAPIs = {                                                                                               // 97\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };                                                                                                                   // 100\n  var defineDeprecationWarning = function (methodName, info) {                                                         // 101\n    if (canDefineProperty) {                                                                                           // 102\n      Object.defineProperty(ReactComponent.prototype, methodName, {                                                    // 103\n        get: function () {                                                                                             // 104\n          lowPriorityWarning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);  // 105\n          return undefined;                                                                                            // 106\n        }                                                                                                              // 107\n      });                                                                                                              // 108\n    }                                                                                                                  // 109\n  };                                                                                                                   // 110\n  for (var fnName in deprecatedAPIs) {                                                                                 // 111\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {                                                                       // 112\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);                                                        // 113\n    }                                                                                                                  // 114\n  }                                                                                                                    // 115\n}                                                                                                                      // 116\n                                                                                                                       // 117\n/**                                                                                                                    // 118\n * Base class helpers for the updating state of a component.                                                           // 119\n */                                                                                                                    // 120\nfunction ReactPureComponent(props, context, updater) {                                                                 // 121\n  // Duplicated from ReactComponent.                                                                                   // 122\n  this.props = props;                                                                                                  // 123\n  this.context = context;                                                                                              // 124\n  this.refs = emptyObject;                                                                                             // 125\n  // We initialize the default updater but the real one gets injected by the                                           // 126\n  // renderer.                                                                                                         // 127\n  this.updater = updater || ReactNoopUpdateQueue;                                                                      // 128\n}                                                                                                                      // 129\n                                                                                                                       // 130\nfunction ComponentDummy() {}                                                                                           // 131\nComponentDummy.prototype = ReactComponent.prototype;                                                                   // 132\nReactPureComponent.prototype = new ComponentDummy();                                                                   // 133\nReactPureComponent.prototype.constructor = ReactPureComponent;                                                         // 134\n// Avoid an extra prototype jump for these methods.                                                                    // 135\n_assign(ReactPureComponent.prototype, ReactComponent.prototype);                                                       // 136\nReactPureComponent.prototype.isPureReactComponent = true;                                                              // 137\n                                                                                                                       // 138\nmodule.exports = {                                                                                                     // 139\n  Component: ReactComponent,                                                                                           // 140\n  PureComponent: ReactPureComponent                                                                                    // 141\n};                                                                                                                     // 142\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"reactProdInvariant.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/reactProdInvariant.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * WARNING: DO NOT manually require this module.                                                                       // 14\n * This is a replacement for `invariant(...)` used by the error code system                                            // 15\n * and will _only_ be required by the corresponding babel pass.                                                        // 16\n * It always throws.                                                                                                   // 17\n */                                                                                                                    // 18\n                                                                                                                       // 19\nfunction reactProdInvariant(code) {                                                                                    // 20\n  var argCount = arguments.length - 1;                                                                                 // 21\n                                                                                                                       // 22\n  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;\n                                                                                                                       // 24\n  for (var argIdx = 0; argIdx < argCount; argIdx++) {                                                                  // 25\n    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);                                                 // 26\n  }                                                                                                                    // 27\n                                                                                                                       // 28\n  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';\n                                                                                                                       // 30\n  var error = new Error(message);                                                                                      // 31\n  error.name = 'Invariant Violation';                                                                                  // 32\n  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame                                         // 33\n                                                                                                                       // 34\n  throw error;                                                                                                         // 35\n}                                                                                                                      // 36\n                                                                                                                       // 37\nmodule.exports = reactProdInvariant;                                                                                   // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactNoopUpdateQueue.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactNoopUpdateQueue.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2015-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar warning = require('fbjs/lib/warning');                                                                             // 13\n                                                                                                                       // 14\nfunction warnNoop(publicInstance, callerName) {                                                                        // 15\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 16\n    var constructor = publicInstance.constructor;                                                                      // 17\n    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;\n  }                                                                                                                    // 19\n}                                                                                                                      // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n * This is the abstract API for an update queue.                                                                       // 23\n */                                                                                                                    // 24\nvar ReactNoopUpdateQueue = {                                                                                           // 25\n  /**                                                                                                                  // 26\n   * Checks whether or not this composite component is mounted.                                                        // 27\n   * @param {ReactClass} publicInstance The instance we want to test.                                                  // 28\n   * @return {boolean} True if mounted, false otherwise.                                                               // 29\n   * @protected                                                                                                        // 30\n   * @final                                                                                                            // 31\n   */                                                                                                                  // 32\n  isMounted: function (publicInstance) {                                                                               // 33\n    return false;                                                                                                      // 34\n  },                                                                                                                   // 35\n                                                                                                                       // 36\n  /**                                                                                                                  // 37\n   * Enqueue a callback that will be executed after all the pending updates                                            // 38\n   * have processed.                                                                                                   // 39\n   *                                                                                                                   // 40\n   * @param {ReactClass} publicInstance The instance to use as `this` context.                                         // 41\n   * @param {?function} callback Called after state is updated.                                                        // 42\n   * @internal                                                                                                         // 43\n   */                                                                                                                  // 44\n  enqueueCallback: function (publicInstance, callback) {},                                                             // 45\n                                                                                                                       // 46\n  /**                                                                                                                  // 47\n   * Forces an update. This should only be invoked when it is known with                                               // 48\n   * certainty that we are **not** in a DOM transaction.                                                               // 49\n   *                                                                                                                   // 50\n   * You may want to call this when you know that some deeper aspect of the                                            // 51\n   * component's state has changed but `setState` was not called.                                                      // 52\n   *                                                                                                                   // 53\n   * This will not invoke `shouldComponentUpdate`, but it will invoke                                                  // 54\n   * `componentWillUpdate` and `componentDidUpdate`.                                                                   // 55\n   *                                                                                                                   // 56\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 57\n   * @internal                                                                                                         // 58\n   */                                                                                                                  // 59\n  enqueueForceUpdate: function (publicInstance) {                                                                      // 60\n    warnNoop(publicInstance, 'forceUpdate');                                                                           // 61\n  },                                                                                                                   // 62\n                                                                                                                       // 63\n  /**                                                                                                                  // 64\n   * Replaces all of the state. Always use this or `setState` to mutate state.                                         // 65\n   * You should treat `this.state` as immutable.                                                                       // 66\n   *                                                                                                                   // 67\n   * There is no guarantee that `this.state` will be immediately updated, so                                           // 68\n   * accessing `this.state` after calling this method may return the old value.                                        // 69\n   *                                                                                                                   // 70\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 71\n   * @param {object} completeState Next state.                                                                         // 72\n   * @internal                                                                                                         // 73\n   */                                                                                                                  // 74\n  enqueueReplaceState: function (publicInstance, completeState) {                                                      // 75\n    warnNoop(publicInstance, 'replaceState');                                                                          // 76\n  },                                                                                                                   // 77\n                                                                                                                       // 78\n  /**                                                                                                                  // 79\n   * Sets a subset of the state. This only exists because _pendingState is                                             // 80\n   * internal. This provides a merging strategy that is not available to deep                                          // 81\n   * properties which is confusing. TODO: Expose pendingState or don't use it                                          // 82\n   * during the merge.                                                                                                 // 83\n   *                                                                                                                   // 84\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 85\n   * @param {object} partialState Next partial state to be merged with state.                                          // 86\n   * @internal                                                                                                         // 87\n   */                                                                                                                  // 88\n  enqueueSetState: function (publicInstance, partialState) {                                                           // 89\n    warnNoop(publicInstance, 'setState');                                                                              // 90\n  }                                                                                                                    // 91\n};                                                                                                                     // 92\n                                                                                                                       // 93\nmodule.exports = ReactNoopUpdateQueue;                                                                                 // 94\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"canDefineProperty.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/canDefineProperty.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar canDefineProperty = false;                                                                                         // 14\nif (process.env.NODE_ENV !== 'production') {                                                                           // 15\n  try {                                                                                                                // 16\n    // $FlowFixMe https://github.com/facebook/flow/issues/285                                                          // 17\n    Object.defineProperty({}, 'x', { get: function () {} });                                                           // 18\n    canDefineProperty = true;                                                                                          // 19\n  } catch (x) {                                                                                                        // 20\n    // IE will fail on defineProperty                                                                                  // 21\n  }                                                                                                                    // 22\n}                                                                                                                      // 23\n                                                                                                                       // 24\nmodule.exports = canDefineProperty;                                                                                    // 25\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lowPriorityWarning.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/lowPriorityWarning.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * Forked from fbjs/warning:                                                                                           // 14\n * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js\n *                                                                                                                     // 16\n * Only change is we use console.warn instead of console.error,                                                        // 17\n * and do nothing when 'console' is not supported.                                                                     // 18\n * This really simplifies the code.                                                                                    // 19\n * ---                                                                                                                 // 20\n * Similar to invariant but only logs a warning if the condition is not met.                                           // 21\n * This can be used to log issues in development environments in critical                                              // 22\n * paths. Removing the logging code for production environments will keep the                                          // 23\n * same logic and follow the same code paths.                                                                          // 24\n */                                                                                                                    // 25\n                                                                                                                       // 26\nvar lowPriorityWarning = function () {};                                                                               // 27\n                                                                                                                       // 28\nif (process.env.NODE_ENV !== 'production') {                                                                           // 29\n  var printWarning = function (format) {                                                                               // 30\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {          // 31\n      args[_key - 1] = arguments[_key];                                                                                // 32\n    }                                                                                                                  // 33\n                                                                                                                       // 34\n    var argIndex = 0;                                                                                                  // 35\n    var message = 'Warning: ' + format.replace(/%s/g, function () {                                                    // 36\n      return args[argIndex++];                                                                                         // 37\n    });                                                                                                                // 38\n    if (typeof console !== 'undefined') {                                                                              // 39\n      console.warn(message);                                                                                           // 40\n    }                                                                                                                  // 41\n    try {                                                                                                              // 42\n      // --- Welcome to debugging React ---                                                                            // 43\n      // This error was thrown as a convenience so that you can use this stack                                         // 44\n      // to find the callsite that caused this warning to fire.                                                        // 45\n      throw new Error(message);                                                                                        // 46\n    } catch (x) {}                                                                                                     // 47\n  };                                                                                                                   // 48\n                                                                                                                       // 49\n  lowPriorityWarning = function (condition, format) {                                                                  // 50\n    if (format === undefined) {                                                                                        // 51\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');               // 52\n    }                                                                                                                  // 53\n    if (!condition) {                                                                                                  // 54\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];                                                                            // 56\n      }                                                                                                                // 57\n                                                                                                                       // 58\n      printWarning.apply(undefined, [format].concat(args));                                                            // 59\n    }                                                                                                                  // 60\n  };                                                                                                                   // 61\n}                                                                                                                      // 62\n                                                                                                                       // 63\nmodule.exports = lowPriorityWarning;                                                                                   // 64\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactChildren.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactChildren.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar PooledClass = require('./PooledClass');                                                                            // 13\nvar ReactElement = require('./ReactElement');                                                                          // 14\n                                                                                                                       // 15\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 16\nvar traverseAllChildren = require('./traverseAllChildren');                                                            // 17\n                                                                                                                       // 18\nvar twoArgumentPooler = PooledClass.twoArgumentPooler;                                                                 // 19\nvar fourArgumentPooler = PooledClass.fourArgumentPooler;                                                               // 20\n                                                                                                                       // 21\nvar userProvidedKeyEscapeRegex = /\\/+/g;                                                                               // 22\nfunction escapeUserProvidedKey(text) {                                                                                 // 23\n  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');                                                       // 24\n}                                                                                                                      // 25\n                                                                                                                       // 26\n/**                                                                                                                    // 27\n * PooledClass representing the bookkeeping associated with performing a child                                         // 28\n * traversal. Allows avoiding binding callbacks.                                                                       // 29\n *                                                                                                                     // 30\n * @constructor ForEachBookKeeping                                                                                     // 31\n * @param {!function} forEachFunction Function to perform traversal with.                                              // 32\n * @param {?*} forEachContext Context to perform context with.                                                         // 33\n */                                                                                                                    // 34\nfunction ForEachBookKeeping(forEachFunction, forEachContext) {                                                         // 35\n  this.func = forEachFunction;                                                                                         // 36\n  this.context = forEachContext;                                                                                       // 37\n  this.count = 0;                                                                                                      // 38\n}                                                                                                                      // 39\nForEachBookKeeping.prototype.destructor = function () {                                                                // 40\n  this.func = null;                                                                                                    // 41\n  this.context = null;                                                                                                 // 42\n  this.count = 0;                                                                                                      // 43\n};                                                                                                                     // 44\nPooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);                                                       // 45\n                                                                                                                       // 46\nfunction forEachSingleChild(bookKeeping, child, name) {                                                                // 47\n  var func = bookKeeping.func,                                                                                         // 48\n      context = bookKeeping.context;                                                                                   // 49\n                                                                                                                       // 50\n  func.call(context, child, bookKeeping.count++);                                                                      // 51\n}                                                                                                                      // 52\n                                                                                                                       // 53\n/**                                                                                                                    // 54\n * Iterates through children that are typically specified as `props.children`.                                         // 55\n *                                                                                                                     // 56\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach                                 // 57\n *                                                                                                                     // 58\n * The provided forEachFunc(child, index) will be called for each                                                      // 59\n * leaf child.                                                                                                         // 60\n *                                                                                                                     // 61\n * @param {?*} children Children tree container.                                                                       // 62\n * @param {function(*, int)} forEachFunc                                                                               // 63\n * @param {*} forEachContext Context for forEachContext.                                                               // 64\n */                                                                                                                    // 65\nfunction forEachChildren(children, forEachFunc, forEachContext) {                                                      // 66\n  if (children == null) {                                                                                              // 67\n    return children;                                                                                                   // 68\n  }                                                                                                                    // 69\n  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);                                     // 70\n  traverseAllChildren(children, forEachSingleChild, traverseContext);                                                  // 71\n  ForEachBookKeeping.release(traverseContext);                                                                         // 72\n}                                                                                                                      // 73\n                                                                                                                       // 74\n/**                                                                                                                    // 75\n * PooledClass representing the bookkeeping associated with performing a child                                         // 76\n * mapping. Allows avoiding binding callbacks.                                                                         // 77\n *                                                                                                                     // 78\n * @constructor MapBookKeeping                                                                                         // 79\n * @param {!*} mapResult Object containing the ordered map of results.                                                 // 80\n * @param {!function} mapFunction Function to perform mapping with.                                                    // 81\n * @param {?*} mapContext Context to perform mapping with.                                                             // 82\n */                                                                                                                    // 83\nfunction MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {                                               // 84\n  this.result = mapResult;                                                                                             // 85\n  this.keyPrefix = keyPrefix;                                                                                          // 86\n  this.func = mapFunction;                                                                                             // 87\n  this.context = mapContext;                                                                                           // 88\n  this.count = 0;                                                                                                      // 89\n}                                                                                                                      // 90\nMapBookKeeping.prototype.destructor = function () {                                                                    // 91\n  this.result = null;                                                                                                  // 92\n  this.keyPrefix = null;                                                                                               // 93\n  this.func = null;                                                                                                    // 94\n  this.context = null;                                                                                                 // 95\n  this.count = 0;                                                                                                      // 96\n};                                                                                                                     // 97\nPooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);                                                          // 98\n                                                                                                                       // 99\nfunction mapSingleChildIntoContext(bookKeeping, child, childKey) {                                                     // 100\n  var result = bookKeeping.result,                                                                                     // 101\n      keyPrefix = bookKeeping.keyPrefix,                                                                               // 102\n      func = bookKeeping.func,                                                                                         // 103\n      context = bookKeeping.context;                                                                                   // 104\n                                                                                                                       // 105\n                                                                                                                       // 106\n  var mappedChild = func.call(context, child, bookKeeping.count++);                                                    // 107\n  if (Array.isArray(mappedChild)) {                                                                                    // 108\n    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);                    // 109\n  } else if (mappedChild != null) {                                                                                    // 110\n    if (ReactElement.isValidElement(mappedChild)) {                                                                    // 111\n      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,                                                       // 112\n      // Keep both the (mapped) and old keys if they differ, just as                                                   // 113\n      // traverseAllChildren used to do for objects as children                                                        // 114\n      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);\n    }                                                                                                                  // 116\n    result.push(mappedChild);                                                                                          // 117\n  }                                                                                                                    // 118\n}                                                                                                                      // 119\n                                                                                                                       // 120\nfunction mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {                                        // 121\n  var escapedPrefix = '';                                                                                              // 122\n  if (prefix != null) {                                                                                                // 123\n    escapedPrefix = escapeUserProvidedKey(prefix) + '/';                                                               // 124\n  }                                                                                                                    // 125\n  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);                                 // 126\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);                                           // 127\n  MapBookKeeping.release(traverseContext);                                                                             // 128\n}                                                                                                                      // 129\n                                                                                                                       // 130\n/**                                                                                                                    // 131\n * Maps children that are typically specified as `props.children`.                                                     // 132\n *                                                                                                                     // 133\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map                                     // 134\n *                                                                                                                     // 135\n * The provided mapFunction(child, key, index) will be called for each                                                 // 136\n * leaf child.                                                                                                         // 137\n *                                                                                                                     // 138\n * @param {?*} children Children tree container.                                                                       // 139\n * @param {function(*, int)} func The map function.                                                                    // 140\n * @param {*} context Context for mapFunction.                                                                         // 141\n * @return {object} Object containing the ordered map of results.                                                      // 142\n */                                                                                                                    // 143\nfunction mapChildren(children, func, context) {                                                                        // 144\n  if (children == null) {                                                                                              // 145\n    return children;                                                                                                   // 146\n  }                                                                                                                    // 147\n  var result = [];                                                                                                     // 148\n  mapIntoWithKeyPrefixInternal(children, result, null, func, context);                                                 // 149\n  return result;                                                                                                       // 150\n}                                                                                                                      // 151\n                                                                                                                       // 152\nfunction forEachSingleChildDummy(traverseContext, child, name) {                                                       // 153\n  return null;                                                                                                         // 154\n}                                                                                                                      // 155\n                                                                                                                       // 156\n/**                                                                                                                    // 157\n * Count the number of children that are typically specified as                                                        // 158\n * `props.children`.                                                                                                   // 159\n *                                                                                                                     // 160\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count                                   // 161\n *                                                                                                                     // 162\n * @param {?*} children Children tree container.                                                                       // 163\n * @return {number} The number of children.                                                                            // 164\n */                                                                                                                    // 165\nfunction countChildren(children, context) {                                                                            // 166\n  return traverseAllChildren(children, forEachSingleChildDummy, null);                                                 // 167\n}                                                                                                                      // 168\n                                                                                                                       // 169\n/**                                                                                                                    // 170\n * Flatten a children object (typically specified as `props.children`) and                                             // 171\n * return an array with appropriately re-keyed children.                                                               // 172\n *                                                                                                                     // 173\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray                                 // 174\n */                                                                                                                    // 175\nfunction toArray(children) {                                                                                           // 176\n  var result = [];                                                                                                     // 177\n  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);                             // 178\n  return result;                                                                                                       // 179\n}                                                                                                                      // 180\n                                                                                                                       // 181\nvar ReactChildren = {                                                                                                  // 182\n  forEach: forEachChildren,                                                                                            // 183\n  map: mapChildren,                                                                                                    // 184\n  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,                                                          // 185\n  count: countChildren,                                                                                                // 186\n  toArray: toArray                                                                                                     // 187\n};                                                                                                                     // 188\n                                                                                                                       // 189\nmodule.exports = ReactChildren;                                                                                        // 190\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"PooledClass.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/PooledClass.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar invariant = require('fbjs/lib/invariant');                                                                         // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Static poolers. Several custom versions for each potential number of                                                // 19\n * arguments. A completely generic pooler is easy to implement, but would                                              // 20\n * require accessing the `arguments` object. In each of these, `this` refers to                                        // 21\n * the Class itself, not an instance. If any others are needed, simply add them                                        // 22\n * here, or in their own files.                                                                                        // 23\n */                                                                                                                    // 24\nvar oneArgumentPooler = function (copyFieldsFrom) {                                                                    // 25\n  var Klass = this;                                                                                                    // 26\n  if (Klass.instancePool.length) {                                                                                     // 27\n    var instance = Klass.instancePool.pop();                                                                           // 28\n    Klass.call(instance, copyFieldsFrom);                                                                              // 29\n    return instance;                                                                                                   // 30\n  } else {                                                                                                             // 31\n    return new Klass(copyFieldsFrom);                                                                                  // 32\n  }                                                                                                                    // 33\n};                                                                                                                     // 34\n                                                                                                                       // 35\nvar twoArgumentPooler = function (a1, a2) {                                                                            // 36\n  var Klass = this;                                                                                                    // 37\n  if (Klass.instancePool.length) {                                                                                     // 38\n    var instance = Klass.instancePool.pop();                                                                           // 39\n    Klass.call(instance, a1, a2);                                                                                      // 40\n    return instance;                                                                                                   // 41\n  } else {                                                                                                             // 42\n    return new Klass(a1, a2);                                                                                          // 43\n  }                                                                                                                    // 44\n};                                                                                                                     // 45\n                                                                                                                       // 46\nvar threeArgumentPooler = function (a1, a2, a3) {                                                                      // 47\n  var Klass = this;                                                                                                    // 48\n  if (Klass.instancePool.length) {                                                                                     // 49\n    var instance = Klass.instancePool.pop();                                                                           // 50\n    Klass.call(instance, a1, a2, a3);                                                                                  // 51\n    return instance;                                                                                                   // 52\n  } else {                                                                                                             // 53\n    return new Klass(a1, a2, a3);                                                                                      // 54\n  }                                                                                                                    // 55\n};                                                                                                                     // 56\n                                                                                                                       // 57\nvar fourArgumentPooler = function (a1, a2, a3, a4) {                                                                   // 58\n  var Klass = this;                                                                                                    // 59\n  if (Klass.instancePool.length) {                                                                                     // 60\n    var instance = Klass.instancePool.pop();                                                                           // 61\n    Klass.call(instance, a1, a2, a3, a4);                                                                              // 62\n    return instance;                                                                                                   // 63\n  } else {                                                                                                             // 64\n    return new Klass(a1, a2, a3, a4);                                                                                  // 65\n  }                                                                                                                    // 66\n};                                                                                                                     // 67\n                                                                                                                       // 68\nvar standardReleaser = function (instance) {                                                                           // 69\n  var Klass = this;                                                                                                    // 70\n  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;\n  instance.destructor();                                                                                               // 72\n  if (Klass.instancePool.length < Klass.poolSize) {                                                                    // 73\n    Klass.instancePool.push(instance);                                                                                 // 74\n  }                                                                                                                    // 75\n};                                                                                                                     // 76\n                                                                                                                       // 77\nvar DEFAULT_POOL_SIZE = 10;                                                                                            // 78\nvar DEFAULT_POOLER = oneArgumentPooler;                                                                                // 79\n                                                                                                                       // 80\n/**                                                                                                                    // 81\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class                                        // 82\n * itself (statically) not adding any prototypical fields. Any CopyConstructor                                         // 83\n * you give this may have a `poolSize` property, and will look for a                                                   // 84\n * prototypical `destructor` on instances.                                                                             // 85\n *                                                                                                                     // 86\n * @param {Function} CopyConstructor Constructor that can be used to reset.                                            // 87\n * @param {Function} pooler Customizable pooler.                                                                       // 88\n */                                                                                                                    // 89\nvar addPoolingTo = function (CopyConstructor, pooler) {                                                                // 90\n  // Casting as any so that flow ignores the actual implementation and trusts                                          // 91\n  // it to match the type we declared                                                                                  // 92\n  var NewKlass = CopyConstructor;                                                                                      // 93\n  NewKlass.instancePool = [];                                                                                          // 94\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;                                                                       // 95\n  if (!NewKlass.poolSize) {                                                                                            // 96\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;                                                                             // 97\n  }                                                                                                                    // 98\n  NewKlass.release = standardReleaser;                                                                                 // 99\n  return NewKlass;                                                                                                     // 100\n};                                                                                                                     // 101\n                                                                                                                       // 102\nvar PooledClass = {                                                                                                    // 103\n  addPoolingTo: addPoolingTo,                                                                                          // 104\n  oneArgumentPooler: oneArgumentPooler,                                                                                // 105\n  twoArgumentPooler: twoArgumentPooler,                                                                                // 106\n  threeArgumentPooler: threeArgumentPooler,                                                                            // 107\n  fourArgumentPooler: fourArgumentPooler                                                                               // 108\n};                                                                                                                     // 109\n                                                                                                                       // 110\nmodule.exports = PooledClass;                                                                                          // 111\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactElement.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactElement.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _assign = require('object-assign');                                                                                // 13\n                                                                                                                       // 14\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 15\n                                                                                                                       // 16\nvar warning = require('fbjs/lib/warning');                                                                             // 17\nvar canDefineProperty = require('./canDefineProperty');                                                                // 18\nvar hasOwnProperty = Object.prototype.hasOwnProperty;                                                                  // 19\n                                                                                                                       // 20\nvar REACT_ELEMENT_TYPE = require('./ReactElementSymbol');                                                              // 21\n                                                                                                                       // 22\nvar RESERVED_PROPS = {                                                                                                 // 23\n  key: true,                                                                                                           // 24\n  ref: true,                                                                                                           // 25\n  __self: true,                                                                                                        // 26\n  __source: true                                                                                                       // 27\n};                                                                                                                     // 28\n                                                                                                                       // 29\nvar specialPropKeyWarningShown, specialPropRefWarningShown;                                                            // 30\n                                                                                                                       // 31\nfunction hasValidRef(config) {                                                                                         // 32\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 33\n    if (hasOwnProperty.call(config, 'ref')) {                                                                          // 34\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;                                                 // 35\n      if (getter && getter.isReactWarning) {                                                                           // 36\n        return false;                                                                                                  // 37\n      }                                                                                                                // 38\n    }                                                                                                                  // 39\n  }                                                                                                                    // 40\n  return config.ref !== undefined;                                                                                     // 41\n}                                                                                                                      // 42\n                                                                                                                       // 43\nfunction hasValidKey(config) {                                                                                         // 44\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 45\n    if (hasOwnProperty.call(config, 'key')) {                                                                          // 46\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;                                                 // 47\n      if (getter && getter.isReactWarning) {                                                                           // 48\n        return false;                                                                                                  // 49\n      }                                                                                                                // 50\n    }                                                                                                                  // 51\n  }                                                                                                                    // 52\n  return config.key !== undefined;                                                                                     // 53\n}                                                                                                                      // 54\n                                                                                                                       // 55\nfunction defineKeyPropWarningGetter(props, displayName) {                                                              // 56\n  var warnAboutAccessingKey = function () {                                                                            // 57\n    if (!specialPropKeyWarningShown) {                                                                                 // 58\n      specialPropKeyWarningShown = true;                                                                               // 59\n      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;\n    }                                                                                                                  // 61\n  };                                                                                                                   // 62\n  warnAboutAccessingKey.isReactWarning = true;                                                                         // 63\n  Object.defineProperty(props, 'key', {                                                                                // 64\n    get: warnAboutAccessingKey,                                                                                        // 65\n    configurable: true                                                                                                 // 66\n  });                                                                                                                  // 67\n}                                                                                                                      // 68\n                                                                                                                       // 69\nfunction defineRefPropWarningGetter(props, displayName) {                                                              // 70\n  var warnAboutAccessingRef = function () {                                                                            // 71\n    if (!specialPropRefWarningShown) {                                                                                 // 72\n      specialPropRefWarningShown = true;                                                                               // 73\n      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;\n    }                                                                                                                  // 75\n  };                                                                                                                   // 76\n  warnAboutAccessingRef.isReactWarning = true;                                                                         // 77\n  Object.defineProperty(props, 'ref', {                                                                                // 78\n    get: warnAboutAccessingRef,                                                                                        // 79\n    configurable: true                                                                                                 // 80\n  });                                                                                                                  // 81\n}                                                                                                                      // 82\n                                                                                                                       // 83\n/**                                                                                                                    // 84\n * Factory method to create a new React element. This no longer adheres to                                             // 85\n * the class pattern, so do not use new to call it. Also, no instanceof check                                          // 86\n * will work. Instead test $$typeof field against Symbol.for('react.element') to check                                 // 87\n * if something is a React Element.                                                                                    // 88\n *                                                                                                                     // 89\n * @param {*} type                                                                                                     // 90\n * @param {*} key                                                                                                      // 91\n * @param {string|object} ref                                                                                          // 92\n * @param {*} self A *temporary* helper to detect places where `this` is                                               // 93\n * different from the `owner` when React.createElement is called, so that we                                           // 94\n * can warn. We want to get rid of owner and replace string `ref`s with arrow                                          // 95\n * functions, and as long as `this` and owner are the same, there will be no                                           // 96\n * change in behavior.                                                                                                 // 97\n * @param {*} source An annotation object (added by a transpiler or otherwise)                                         // 98\n * indicating filename, line number, and/or other information.                                                         // 99\n * @param {*} owner                                                                                                    // 100\n * @param {*} props                                                                                                    // 101\n * @internal                                                                                                           // 102\n */                                                                                                                    // 103\nvar ReactElement = function (type, key, ref, self, source, owner, props) {                                             // 104\n  var element = {                                                                                                      // 105\n    // This tag allow us to uniquely identify this as a React Element                                                  // 106\n    $$typeof: REACT_ELEMENT_TYPE,                                                                                      // 107\n                                                                                                                       // 108\n    // Built-in properties that belong on the element                                                                  // 109\n    type: type,                                                                                                        // 110\n    key: key,                                                                                                          // 111\n    ref: ref,                                                                                                          // 112\n    props: props,                                                                                                      // 113\n                                                                                                                       // 114\n    // Record the component responsible for creating this element.                                                     // 115\n    _owner: owner                                                                                                      // 116\n  };                                                                                                                   // 117\n                                                                                                                       // 118\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 119\n    // The validation flag is currently mutative. We put it on                                                         // 120\n    // an external backing store so that we can freeze the whole object.                                               // 121\n    // This can be replaced with a WeakMap once they are implemented in                                                // 122\n    // commonly used development environments.                                                                         // 123\n    element._store = {};                                                                                               // 124\n                                                                                                                       // 125\n    // To make comparing ReactElements easier for testing purposes, we make                                            // 126\n    // the validation flag non-enumerable (where possible, which should                                                // 127\n    // include every environment we run tests in), so the test framework                                               // 128\n    // ignores it.                                                                                                     // 129\n    if (canDefineProperty) {                                                                                           // 130\n      Object.defineProperty(element._store, 'validated', {                                                             // 131\n        configurable: false,                                                                                           // 132\n        enumerable: false,                                                                                             // 133\n        writable: true,                                                                                                // 134\n        value: false                                                                                                   // 135\n      });                                                                                                              // 136\n      // self and source are DEV only properties.                                                                      // 137\n      Object.defineProperty(element, '_self', {                                                                        // 138\n        configurable: false,                                                                                           // 139\n        enumerable: false,                                                                                             // 140\n        writable: false,                                                                                               // 141\n        value: self                                                                                                    // 142\n      });                                                                                                              // 143\n      // Two elements created in two different places should be considered                                             // 144\n      // equal for testing purposes and therefore we hide it from enumeration.                                         // 145\n      Object.defineProperty(element, '_source', {                                                                      // 146\n        configurable: false,                                                                                           // 147\n        enumerable: false,                                                                                             // 148\n        writable: false,                                                                                               // 149\n        value: source                                                                                                  // 150\n      });                                                                                                              // 151\n    } else {                                                                                                           // 152\n      element._store.validated = false;                                                                                // 153\n      element._self = self;                                                                                            // 154\n      element._source = source;                                                                                        // 155\n    }                                                                                                                  // 156\n    if (Object.freeze) {                                                                                               // 157\n      Object.freeze(element.props);                                                                                    // 158\n      Object.freeze(element);                                                                                          // 159\n    }                                                                                                                  // 160\n  }                                                                                                                    // 161\n                                                                                                                       // 162\n  return element;                                                                                                      // 163\n};                                                                                                                     // 164\n                                                                                                                       // 165\n/**                                                                                                                    // 166\n * Create and return a new ReactElement of the given type.                                                             // 167\n * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement                                    // 168\n */                                                                                                                    // 169\nReactElement.createElement = function (type, config, children) {                                                       // 170\n  var propName;                                                                                                        // 171\n                                                                                                                       // 172\n  // Reserved names are extracted                                                                                      // 173\n  var props = {};                                                                                                      // 174\n                                                                                                                       // 175\n  var key = null;                                                                                                      // 176\n  var ref = null;                                                                                                      // 177\n  var self = null;                                                                                                     // 178\n  var source = null;                                                                                                   // 179\n                                                                                                                       // 180\n  if (config != null) {                                                                                                // 181\n    if (hasValidRef(config)) {                                                                                         // 182\n      ref = config.ref;                                                                                                // 183\n    }                                                                                                                  // 184\n    if (hasValidKey(config)) {                                                                                         // 185\n      key = '' + config.key;                                                                                           // 186\n    }                                                                                                                  // 187\n                                                                                                                       // 188\n    self = config.__self === undefined ? null : config.__self;                                                         // 189\n    source = config.__source === undefined ? null : config.__source;                                                   // 190\n    // Remaining properties are added to a new props object                                                            // 191\n    for (propName in config) {                                                                                         // 192\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {                         // 193\n        props[propName] = config[propName];                                                                            // 194\n      }                                                                                                                // 195\n    }                                                                                                                  // 196\n  }                                                                                                                    // 197\n                                                                                                                       // 198\n  // Children can be more than one argument, and those are transferred onto                                            // 199\n  // the newly allocated props object.                                                                                 // 200\n  var childrenLength = arguments.length - 2;                                                                           // 201\n  if (childrenLength === 1) {                                                                                          // 202\n    props.children = children;                                                                                         // 203\n  } else if (childrenLength > 1) {                                                                                     // 204\n    var childArray = Array(childrenLength);                                                                            // 205\n    for (var i = 0; i < childrenLength; i++) {                                                                         // 206\n      childArray[i] = arguments[i + 2];                                                                                // 207\n    }                                                                                                                  // 208\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 209\n      if (Object.freeze) {                                                                                             // 210\n        Object.freeze(childArray);                                                                                     // 211\n      }                                                                                                                // 212\n    }                                                                                                                  // 213\n    props.children = childArray;                                                                                       // 214\n  }                                                                                                                    // 215\n                                                                                                                       // 216\n  // Resolve default props                                                                                             // 217\n  if (type && type.defaultProps) {                                                                                     // 218\n    var defaultProps = type.defaultProps;                                                                              // 219\n    for (propName in defaultProps) {                                                                                   // 220\n      if (props[propName] === undefined) {                                                                             // 221\n        props[propName] = defaultProps[propName];                                                                      // 222\n      }                                                                                                                // 223\n    }                                                                                                                  // 224\n  }                                                                                                                    // 225\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 226\n    if (key || ref) {                                                                                                  // 227\n      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {                            // 228\n        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;              // 229\n        if (key) {                                                                                                     // 230\n          defineKeyPropWarningGetter(props, displayName);                                                              // 231\n        }                                                                                                              // 232\n        if (ref) {                                                                                                     // 233\n          defineRefPropWarningGetter(props, displayName);                                                              // 234\n        }                                                                                                              // 235\n      }                                                                                                                // 236\n    }                                                                                                                  // 237\n  }                                                                                                                    // 238\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);                                 // 239\n};                                                                                                                     // 240\n                                                                                                                       // 241\n/**                                                                                                                    // 242\n * Return a function that produces ReactElements of a given type.                                                      // 243\n * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory                                    // 244\n */                                                                                                                    // 245\nReactElement.createFactory = function (type) {                                                                         // 246\n  var factory = ReactElement.createElement.bind(null, type);                                                           // 247\n  // Expose the type on the factory and the prototype so that it can be                                                // 248\n  // easily accessed on elements. E.g. `<Foo />.type === Foo`.                                                         // 249\n  // This should not be named `constructor` since this may not be the function                                         // 250\n  // that created the element, and it may not even be a constructor.                                                   // 251\n  // Legacy hook TODO: Warn if this is accessed                                                                        // 252\n  factory.type = type;                                                                                                 // 253\n  return factory;                                                                                                      // 254\n};                                                                                                                     // 255\n                                                                                                                       // 256\nReactElement.cloneAndReplaceKey = function (oldElement, newKey) {                                                      // 257\n  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n                                                                                                                       // 259\n  return newElement;                                                                                                   // 260\n};                                                                                                                     // 261\n                                                                                                                       // 262\n/**                                                                                                                    // 263\n * Clone and return a new ReactElement using element as the starting point.                                            // 264\n * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement                                     // 265\n */                                                                                                                    // 266\nReactElement.cloneElement = function (element, config, children) {                                                     // 267\n  var propName;                                                                                                        // 268\n                                                                                                                       // 269\n  // Original props are copied                                                                                         // 270\n  var props = _assign({}, element.props);                                                                              // 271\n                                                                                                                       // 272\n  // Reserved names are extracted                                                                                      // 273\n  var key = element.key;                                                                                               // 274\n  var ref = element.ref;                                                                                               // 275\n  // Self is preserved since the owner is preserved.                                                                   // 276\n  var self = element._self;                                                                                            // 277\n  // Source is preserved since cloneElement is unlikely to be targeted by a                                            // 278\n  // transpiler, and the original source is probably a better indicator of the                                         // 279\n  // true owner.                                                                                                       // 280\n  var source = element._source;                                                                                        // 281\n                                                                                                                       // 282\n  // Owner will be preserved, unless ref is overridden                                                                 // 283\n  var owner = element._owner;                                                                                          // 284\n                                                                                                                       // 285\n  if (config != null) {                                                                                                // 286\n    if (hasValidRef(config)) {                                                                                         // 287\n      // Silently steal the ref from the parent.                                                                       // 288\n      ref = config.ref;                                                                                                // 289\n      owner = ReactCurrentOwner.current;                                                                               // 290\n    }                                                                                                                  // 291\n    if (hasValidKey(config)) {                                                                                         // 292\n      key = '' + config.key;                                                                                           // 293\n    }                                                                                                                  // 294\n                                                                                                                       // 295\n    // Remaining properties override existing props                                                                    // 296\n    var defaultProps;                                                                                                  // 297\n    if (element.type && element.type.defaultProps) {                                                                   // 298\n      defaultProps = element.type.defaultProps;                                                                        // 299\n    }                                                                                                                  // 300\n    for (propName in config) {                                                                                         // 301\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {                         // 302\n        if (config[propName] === undefined && defaultProps !== undefined) {                                            // 303\n          // Resolve default props                                                                                     // 304\n          props[propName] = defaultProps[propName];                                                                    // 305\n        } else {                                                                                                       // 306\n          props[propName] = config[propName];                                                                          // 307\n        }                                                                                                              // 308\n      }                                                                                                                // 309\n    }                                                                                                                  // 310\n  }                                                                                                                    // 311\n                                                                                                                       // 312\n  // Children can be more than one argument, and those are transferred onto                                            // 313\n  // the newly allocated props object.                                                                                 // 314\n  var childrenLength = arguments.length - 2;                                                                           // 315\n  if (childrenLength === 1) {                                                                                          // 316\n    props.children = children;                                                                                         // 317\n  } else if (childrenLength > 1) {                                                                                     // 318\n    var childArray = Array(childrenLength);                                                                            // 319\n    for (var i = 0; i < childrenLength; i++) {                                                                         // 320\n      childArray[i] = arguments[i + 2];                                                                                // 321\n    }                                                                                                                  // 322\n    props.children = childArray;                                                                                       // 323\n  }                                                                                                                    // 324\n                                                                                                                       // 325\n  return ReactElement(element.type, key, ref, self, source, owner, props);                                             // 326\n};                                                                                                                     // 327\n                                                                                                                       // 328\n/**                                                                                                                    // 329\n * Verifies the object is a ReactElement.                                                                              // 330\n * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement                                   // 331\n * @param {?object} object                                                                                             // 332\n * @return {boolean} True if `object` is a valid component.                                                            // 333\n * @final                                                                                                              // 334\n */                                                                                                                    // 335\nReactElement.isValidElement = function (object) {                                                                      // 336\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;                      // 337\n};                                                                                                                     // 338\n                                                                                                                       // 339\nmodule.exports = ReactElement;                                                                                         // 340\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactCurrentOwner.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactCurrentOwner.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Keeps track of the current owner.                                                                                   // 15\n *                                                                                                                     // 16\n * The current owner is the component who should own any components that are                                           // 17\n * currently being constructed.                                                                                        // 18\n */                                                                                                                    // 19\nvar ReactCurrentOwner = {                                                                                              // 20\n  /**                                                                                                                  // 21\n   * @internal                                                                                                         // 22\n   * @type {ReactComponent}                                                                                            // 23\n   */                                                                                                                  // 24\n  current: null                                                                                                        // 25\n};                                                                                                                     // 26\n                                                                                                                       // 27\nmodule.exports = ReactCurrentOwner;                                                                                    // 28\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactElementSymbol.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactElementSymbol.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n// The Symbol used to tag the ReactElement type. If there is no native Symbol                                          // 14\n// nor polyfill, then a plain number is used for performance.                                                          // 15\n                                                                                                                       // 16\nvar REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;    // 17\n                                                                                                                       // 18\nmodule.exports = REACT_ELEMENT_TYPE;                                                                                   // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"traverseAllChildren.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/traverseAllChildren.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 13\n                                                                                                                       // 14\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 15\nvar REACT_ELEMENT_TYPE = require('./ReactElementSymbol');                                                              // 16\n                                                                                                                       // 17\nvar getIteratorFn = require('./getIteratorFn');                                                                        // 18\nvar invariant = require('fbjs/lib/invariant');                                                                         // 19\nvar KeyEscapeUtils = require('./KeyEscapeUtils');                                                                      // 20\nvar warning = require('fbjs/lib/warning');                                                                             // 21\n                                                                                                                       // 22\nvar SEPARATOR = '.';                                                                                                   // 23\nvar SUBSEPARATOR = ':';                                                                                                // 24\n                                                                                                                       // 25\n/**                                                                                                                    // 26\n * This is inlined from ReactElement since this file is shared between                                                 // 27\n * isomorphic and renderers. We could extract this to a                                                                // 28\n *                                                                                                                     // 29\n */                                                                                                                    // 30\n                                                                                                                       // 31\n/**                                                                                                                    // 32\n * TODO: Test that a single child and an array with one item have the same key                                         // 33\n * pattern.                                                                                                            // 34\n */                                                                                                                    // 35\n                                                                                                                       // 36\nvar didWarnAboutMaps = false;                                                                                          // 37\n                                                                                                                       // 38\n/**                                                                                                                    // 39\n * Generate a key string that identifies a component within a set.                                                     // 40\n *                                                                                                                     // 41\n * @param {*} component A component that could contain a manual key.                                                   // 42\n * @param {number} index Index that is used if a manual key is not provided.                                           // 43\n * @return {string}                                                                                                    // 44\n */                                                                                                                    // 45\nfunction getComponentKey(component, index) {                                                                           // 46\n  // Do some typechecking here since we call this blindly. We want to ensure                                           // 47\n  // that we don't block potential future ES APIs.                                                                     // 48\n  if (component && typeof component === 'object' && component.key != null) {                                           // 49\n    // Explicit key                                                                                                    // 50\n    return KeyEscapeUtils.escape(component.key);                                                                       // 51\n  }                                                                                                                    // 52\n  // Implicit key determined by the index in the set                                                                   // 53\n  return index.toString(36);                                                                                           // 54\n}                                                                                                                      // 55\n                                                                                                                       // 56\n/**                                                                                                                    // 57\n * @param {?*} children Children tree container.                                                                       // 58\n * @param {!string} nameSoFar Name of the key path so far.                                                             // 59\n * @param {!function} callback Callback to invoke with each child found.                                               // 60\n * @param {?*} traverseContext Used to pass information throughout the traversal                                       // 61\n * process.                                                                                                            // 62\n * @return {!number} The number of children in this subtree.                                                           // 63\n */                                                                                                                    // 64\nfunction traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {                                     // 65\n  var type = typeof children;                                                                                          // 66\n                                                                                                                       // 67\n  if (type === 'undefined' || type === 'boolean') {                                                                    // 68\n    // All of the above are perceived as null.                                                                         // 69\n    children = null;                                                                                                   // 70\n  }                                                                                                                    // 71\n                                                                                                                       // 72\n  if (children === null || type === 'string' || type === 'number' ||                                                   // 73\n  // The following is inlined from ReactElement. This means we can optimize                                            // 74\n  // some checks. React Fiber also inlines this logic for similar purposes.                                            // 75\n  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {                                                     // 76\n    callback(traverseContext, children,                                                                                // 77\n    // If it's the only child, treat the name as if it was wrapped in an array                                         // 78\n    // so that it's consistent if the number of children grows.                                                        // 79\n    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);                                          // 80\n    return 1;                                                                                                          // 81\n  }                                                                                                                    // 82\n                                                                                                                       // 83\n  var child;                                                                                                           // 84\n  var nextName;                                                                                                        // 85\n  var subtreeCount = 0; // Count of children found in the current subtree.                                             // 86\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;                                        // 87\n                                                                                                                       // 88\n  if (Array.isArray(children)) {                                                                                       // 89\n    for (var i = 0; i < children.length; i++) {                                                                        // 90\n      child = children[i];                                                                                             // 91\n      nextName = nextNamePrefix + getComponentKey(child, i);                                                           // 92\n      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);                             // 93\n    }                                                                                                                  // 94\n  } else {                                                                                                             // 95\n    var iteratorFn = getIteratorFn(children);                                                                          // 96\n    if (iteratorFn) {                                                                                                  // 97\n      var iterator = iteratorFn.call(children);                                                                        // 98\n      var step;                                                                                                        // 99\n      if (iteratorFn !== children.entries) {                                                                           // 100\n        var ii = 0;                                                                                                    // 101\n        while (!(step = iterator.next()).done) {                                                                       // 102\n          child = step.value;                                                                                          // 103\n          nextName = nextNamePrefix + getComponentKey(child, ii++);                                                    // 104\n          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);                         // 105\n        }                                                                                                              // 106\n      } else {                                                                                                         // 107\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 108\n          var mapsAsChildrenAddendum = '';                                                                             // 109\n          if (ReactCurrentOwner.current) {                                                                             // 110\n            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();                                         // 111\n            if (mapsAsChildrenOwnerName) {                                                                             // 112\n              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';               // 113\n            }                                                                                                          // 114\n          }                                                                                                            // 115\n          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;\n          didWarnAboutMaps = true;                                                                                     // 117\n        }                                                                                                              // 118\n        // Iterator will provide entry [k,v] tuples rather than values.                                                // 119\n        while (!(step = iterator.next()).done) {                                                                       // 120\n          var entry = step.value;                                                                                      // 121\n          if (entry) {                                                                                                 // 122\n            child = entry[1];                                                                                          // 123\n            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);    // 124\n            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);                       // 125\n          }                                                                                                            // 126\n        }                                                                                                              // 127\n      }                                                                                                                // 128\n    } else if (type === 'object') {                                                                                    // 129\n      var addendum = '';                                                                                               // 130\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 131\n        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';\n        if (children._isReactElement) {                                                                                // 133\n          addendum = \" It looks like you're using an element created by a different \" + 'version of React. Make sure to use only one copy of React.';\n        }                                                                                                              // 135\n        if (ReactCurrentOwner.current) {                                                                               // 136\n          var name = ReactCurrentOwner.current.getName();                                                              // 137\n          if (name) {                                                                                                  // 138\n            addendum += ' Check the render method of `' + name + '`.';                                                 // 139\n          }                                                                                                            // 140\n        }                                                                                                              // 141\n      }                                                                                                                // 142\n      var childrenString = String(children);                                                                           // 143\n      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;\n    }                                                                                                                  // 145\n  }                                                                                                                    // 146\n                                                                                                                       // 147\n  return subtreeCount;                                                                                                 // 148\n}                                                                                                                      // 149\n                                                                                                                       // 150\n/**                                                                                                                    // 151\n * Traverses children that are typically specified as `props.children`, but                                            // 152\n * might also be specified through attributes:                                                                         // 153\n *                                                                                                                     // 154\n * - `traverseAllChildren(this.props.children, ...)`                                                                   // 155\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`                                                          // 156\n *                                                                                                                     // 157\n * The `traverseContext` is an optional argument that is passed through the                                            // 158\n * entire traversal. It can be used to store accumulations or anything else that                                       // 159\n * the callback might find relevant.                                                                                   // 160\n *                                                                                                                     // 161\n * @param {?*} children Children tree object.                                                                          // 162\n * @param {!function} callback To invoke upon traversing each child.                                                   // 163\n * @param {?*} traverseContext Context for traversal.                                                                  // 164\n * @return {!number} The number of children in this subtree.                                                           // 165\n */                                                                                                                    // 166\nfunction traverseAllChildren(children, callback, traverseContext) {                                                    // 167\n  if (children == null) {                                                                                              // 168\n    return 0;                                                                                                          // 169\n  }                                                                                                                    // 170\n                                                                                                                       // 171\n  return traverseAllChildrenImpl(children, '', callback, traverseContext);                                             // 172\n}                                                                                                                      // 173\n                                                                                                                       // 174\nmodule.exports = traverseAllChildren;                                                                                  // 175\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getIteratorFn.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/getIteratorFn.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/* global Symbol */                                                                                                    // 14\n                                                                                                                       // 15\nvar ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;                                                 // 16\nvar FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.                                                        // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * Returns the iterator method function contained on the iterable object.                                              // 20\n *                                                                                                                     // 21\n * Be sure to invoke the function with the iterable as context:                                                        // 22\n *                                                                                                                     // 23\n *     var iteratorFn = getIteratorFn(myIterable);                                                                     // 24\n *     if (iteratorFn) {                                                                                               // 25\n *       var iterator = iteratorFn.call(myIterable);                                                                   // 26\n *       ...                                                                                                           // 27\n *     }                                                                                                               // 28\n *                                                                                                                     // 29\n * @param {?object} maybeIterable                                                                                      // 30\n * @return {?function}                                                                                                 // 31\n */                                                                                                                    // 32\nfunction getIteratorFn(maybeIterable) {                                                                                // 33\n  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n  if (typeof iteratorFn === 'function') {                                                                              // 35\n    return iteratorFn;                                                                                                 // 36\n  }                                                                                                                    // 37\n}                                                                                                                      // 38\n                                                                                                                       // 39\nmodule.exports = getIteratorFn;                                                                                        // 40\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"KeyEscapeUtils.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/KeyEscapeUtils.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Escape and wrap key so it is safe to use as a reactid                                                               // 15\n *                                                                                                                     // 16\n * @param {string} key to be escaped.                                                                                  // 17\n * @return {string} the escaped key.                                                                                   // 18\n */                                                                                                                    // 19\n                                                                                                                       // 20\nfunction escape(key) {                                                                                                 // 21\n  var escapeRegex = /[=:]/g;                                                                                           // 22\n  var escaperLookup = {                                                                                                // 23\n    '=': '=0',                                                                                                         // 24\n    ':': '=2'                                                                                                          // 25\n  };                                                                                                                   // 26\n  var escapedString = ('' + key).replace(escapeRegex, function (match) {                                               // 27\n    return escaperLookup[match];                                                                                       // 28\n  });                                                                                                                  // 29\n                                                                                                                       // 30\n  return '$' + escapedString;                                                                                          // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\n/**                                                                                                                    // 34\n * Unescape and unwrap key for human-readable display                                                                  // 35\n *                                                                                                                     // 36\n * @param {string} key to unescape.                                                                                    // 37\n * @return {string} the unescaped key.                                                                                 // 38\n */                                                                                                                    // 39\nfunction unescape(key) {                                                                                               // 40\n  var unescapeRegex = /(=0|=2)/g;                                                                                      // 41\n  var unescaperLookup = {                                                                                              // 42\n    '=0': '=',                                                                                                         // 43\n    '=2': ':'                                                                                                          // 44\n  };                                                                                                                   // 45\n  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);                           // 46\n                                                                                                                       // 47\n  return ('' + keySubstring).replace(unescapeRegex, function (match) {                                                 // 48\n    return unescaperLookup[match];                                                                                     // 49\n  });                                                                                                                  // 50\n}                                                                                                                      // 51\n                                                                                                                       // 52\nvar KeyEscapeUtils = {                                                                                                 // 53\n  escape: escape,                                                                                                      // 54\n  unescape: unescape                                                                                                   // 55\n};                                                                                                                     // 56\n                                                                                                                       // 57\nmodule.exports = KeyEscapeUtils;                                                                                       // 58\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDOMFactories.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMFactories.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar ReactElement = require('./ReactElement');                                                                          // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Create a factory that creates HTML tag elements.                                                                    // 16\n *                                                                                                                     // 17\n * @private                                                                                                            // 18\n */                                                                                                                    // 19\nvar createDOMFactory = ReactElement.createFactory;                                                                     // 20\nif (process.env.NODE_ENV !== 'production') {                                                                           // 21\n  var ReactElementValidator = require('./ReactElementValidator');                                                      // 22\n  createDOMFactory = ReactElementValidator.createFactory;                                                              // 23\n}                                                                                                                      // 24\n                                                                                                                       // 25\n/**                                                                                                                    // 26\n * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.                                          // 27\n *                                                                                                                     // 28\n * @public                                                                                                             // 29\n */                                                                                                                    // 30\nvar ReactDOMFactories = {                                                                                              // 31\n  a: createDOMFactory('a'),                                                                                            // 32\n  abbr: createDOMFactory('abbr'),                                                                                      // 33\n  address: createDOMFactory('address'),                                                                                // 34\n  area: createDOMFactory('area'),                                                                                      // 35\n  article: createDOMFactory('article'),                                                                                // 36\n  aside: createDOMFactory('aside'),                                                                                    // 37\n  audio: createDOMFactory('audio'),                                                                                    // 38\n  b: createDOMFactory('b'),                                                                                            // 39\n  base: createDOMFactory('base'),                                                                                      // 40\n  bdi: createDOMFactory('bdi'),                                                                                        // 41\n  bdo: createDOMFactory('bdo'),                                                                                        // 42\n  big: createDOMFactory('big'),                                                                                        // 43\n  blockquote: createDOMFactory('blockquote'),                                                                          // 44\n  body: createDOMFactory('body'),                                                                                      // 45\n  br: createDOMFactory('br'),                                                                                          // 46\n  button: createDOMFactory('button'),                                                                                  // 47\n  canvas: createDOMFactory('canvas'),                                                                                  // 48\n  caption: createDOMFactory('caption'),                                                                                // 49\n  cite: createDOMFactory('cite'),                                                                                      // 50\n  code: createDOMFactory('code'),                                                                                      // 51\n  col: createDOMFactory('col'),                                                                                        // 52\n  colgroup: createDOMFactory('colgroup'),                                                                              // 53\n  data: createDOMFactory('data'),                                                                                      // 54\n  datalist: createDOMFactory('datalist'),                                                                              // 55\n  dd: createDOMFactory('dd'),                                                                                          // 56\n  del: createDOMFactory('del'),                                                                                        // 57\n  details: createDOMFactory('details'),                                                                                // 58\n  dfn: createDOMFactory('dfn'),                                                                                        // 59\n  dialog: createDOMFactory('dialog'),                                                                                  // 60\n  div: createDOMFactory('div'),                                                                                        // 61\n  dl: createDOMFactory('dl'),                                                                                          // 62\n  dt: createDOMFactory('dt'),                                                                                          // 63\n  em: createDOMFactory('em'),                                                                                          // 64\n  embed: createDOMFactory('embed'),                                                                                    // 65\n  fieldset: createDOMFactory('fieldset'),                                                                              // 66\n  figcaption: createDOMFactory('figcaption'),                                                                          // 67\n  figure: createDOMFactory('figure'),                                                                                  // 68\n  footer: createDOMFactory('footer'),                                                                                  // 69\n  form: createDOMFactory('form'),                                                                                      // 70\n  h1: createDOMFactory('h1'),                                                                                          // 71\n  h2: createDOMFactory('h2'),                                                                                          // 72\n  h3: createDOMFactory('h3'),                                                                                          // 73\n  h4: createDOMFactory('h4'),                                                                                          // 74\n  h5: createDOMFactory('h5'),                                                                                          // 75\n  h6: createDOMFactory('h6'),                                                                                          // 76\n  head: createDOMFactory('head'),                                                                                      // 77\n  header: createDOMFactory('header'),                                                                                  // 78\n  hgroup: createDOMFactory('hgroup'),                                                                                  // 79\n  hr: createDOMFactory('hr'),                                                                                          // 80\n  html: createDOMFactory('html'),                                                                                      // 81\n  i: createDOMFactory('i'),                                                                                            // 82\n  iframe: createDOMFactory('iframe'),                                                                                  // 83\n  img: createDOMFactory('img'),                                                                                        // 84\n  input: createDOMFactory('input'),                                                                                    // 85\n  ins: createDOMFactory('ins'),                                                                                        // 86\n  kbd: createDOMFactory('kbd'),                                                                                        // 87\n  keygen: createDOMFactory('keygen'),                                                                                  // 88\n  label: createDOMFactory('label'),                                                                                    // 89\n  legend: createDOMFactory('legend'),                                                                                  // 90\n  li: createDOMFactory('li'),                                                                                          // 91\n  link: createDOMFactory('link'),                                                                                      // 92\n  main: createDOMFactory('main'),                                                                                      // 93\n  map: createDOMFactory('map'),                                                                                        // 94\n  mark: createDOMFactory('mark'),                                                                                      // 95\n  menu: createDOMFactory('menu'),                                                                                      // 96\n  menuitem: createDOMFactory('menuitem'),                                                                              // 97\n  meta: createDOMFactory('meta'),                                                                                      // 98\n  meter: createDOMFactory('meter'),                                                                                    // 99\n  nav: createDOMFactory('nav'),                                                                                        // 100\n  noscript: createDOMFactory('noscript'),                                                                              // 101\n  object: createDOMFactory('object'),                                                                                  // 102\n  ol: createDOMFactory('ol'),                                                                                          // 103\n  optgroup: createDOMFactory('optgroup'),                                                                              // 104\n  option: createDOMFactory('option'),                                                                                  // 105\n  output: createDOMFactory('output'),                                                                                  // 106\n  p: createDOMFactory('p'),                                                                                            // 107\n  param: createDOMFactory('param'),                                                                                    // 108\n  picture: createDOMFactory('picture'),                                                                                // 109\n  pre: createDOMFactory('pre'),                                                                                        // 110\n  progress: createDOMFactory('progress'),                                                                              // 111\n  q: createDOMFactory('q'),                                                                                            // 112\n  rp: createDOMFactory('rp'),                                                                                          // 113\n  rt: createDOMFactory('rt'),                                                                                          // 114\n  ruby: createDOMFactory('ruby'),                                                                                      // 115\n  s: createDOMFactory('s'),                                                                                            // 116\n  samp: createDOMFactory('samp'),                                                                                      // 117\n  script: createDOMFactory('script'),                                                                                  // 118\n  section: createDOMFactory('section'),                                                                                // 119\n  select: createDOMFactory('select'),                                                                                  // 120\n  small: createDOMFactory('small'),                                                                                    // 121\n  source: createDOMFactory('source'),                                                                                  // 122\n  span: createDOMFactory('span'),                                                                                      // 123\n  strong: createDOMFactory('strong'),                                                                                  // 124\n  style: createDOMFactory('style'),                                                                                    // 125\n  sub: createDOMFactory('sub'),                                                                                        // 126\n  summary: createDOMFactory('summary'),                                                                                // 127\n  sup: createDOMFactory('sup'),                                                                                        // 128\n  table: createDOMFactory('table'),                                                                                    // 129\n  tbody: createDOMFactory('tbody'),                                                                                    // 130\n  td: createDOMFactory('td'),                                                                                          // 131\n  textarea: createDOMFactory('textarea'),                                                                              // 132\n  tfoot: createDOMFactory('tfoot'),                                                                                    // 133\n  th: createDOMFactory('th'),                                                                                          // 134\n  thead: createDOMFactory('thead'),                                                                                    // 135\n  time: createDOMFactory('time'),                                                                                      // 136\n  title: createDOMFactory('title'),                                                                                    // 137\n  tr: createDOMFactory('tr'),                                                                                          // 138\n  track: createDOMFactory('track'),                                                                                    // 139\n  u: createDOMFactory('u'),                                                                                            // 140\n  ul: createDOMFactory('ul'),                                                                                          // 141\n  'var': createDOMFactory('var'),                                                                                      // 142\n  video: createDOMFactory('video'),                                                                                    // 143\n  wbr: createDOMFactory('wbr'),                                                                                        // 144\n                                                                                                                       // 145\n  // SVG                                                                                                               // 146\n  circle: createDOMFactory('circle'),                                                                                  // 147\n  clipPath: createDOMFactory('clipPath'),                                                                              // 148\n  defs: createDOMFactory('defs'),                                                                                      // 149\n  ellipse: createDOMFactory('ellipse'),                                                                                // 150\n  g: createDOMFactory('g'),                                                                                            // 151\n  image: createDOMFactory('image'),                                                                                    // 152\n  line: createDOMFactory('line'),                                                                                      // 153\n  linearGradient: createDOMFactory('linearGradient'),                                                                  // 154\n  mask: createDOMFactory('mask'),                                                                                      // 155\n  path: createDOMFactory('path'),                                                                                      // 156\n  pattern: createDOMFactory('pattern'),                                                                                // 157\n  polygon: createDOMFactory('polygon'),                                                                                // 158\n  polyline: createDOMFactory('polyline'),                                                                              // 159\n  radialGradient: createDOMFactory('radialGradient'),                                                                  // 160\n  rect: createDOMFactory('rect'),                                                                                      // 161\n  stop: createDOMFactory('stop'),                                                                                      // 162\n  svg: createDOMFactory('svg'),                                                                                        // 163\n  text: createDOMFactory('text'),                                                                                      // 164\n  tspan: createDOMFactory('tspan')                                                                                     // 165\n};                                                                                                                     // 166\n                                                                                                                       // 167\nmodule.exports = ReactDOMFactories;                                                                                    // 168\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactElementValidator.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactElementValidator.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n/**                                                                                                                    // 11\n * ReactElementValidator provides a wrapper around a element factory                                                   // 12\n * which validates the props passed to the element. This is intended to be                                             // 13\n * used only in DEV and could be replaced by a static type checker for languages                                       // 14\n * that support it.                                                                                                    // 15\n */                                                                                                                    // 16\n                                                                                                                       // 17\n'use strict';                                                                                                          // 18\n                                                                                                                       // 19\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 20\nvar ReactComponentTreeHook = require('./ReactComponentTreeHook');                                                      // 21\nvar ReactElement = require('./ReactElement');                                                                          // 22\n                                                                                                                       // 23\nvar checkReactTypeSpec = require('./checkReactTypeSpec');                                                              // 24\n                                                                                                                       // 25\nvar canDefineProperty = require('./canDefineProperty');                                                                // 26\nvar getIteratorFn = require('./getIteratorFn');                                                                        // 27\nvar warning = require('fbjs/lib/warning');                                                                             // 28\nvar lowPriorityWarning = require('./lowPriorityWarning');                                                              // 29\n                                                                                                                       // 30\nfunction getDeclarationErrorAddendum() {                                                                               // 31\n  if (ReactCurrentOwner.current) {                                                                                     // 32\n    var name = ReactCurrentOwner.current.getName();                                                                    // 33\n    if (name) {                                                                                                        // 34\n      return ' Check the render method of `' + name + '`.';                                                            // 35\n    }                                                                                                                  // 36\n  }                                                                                                                    // 37\n  return '';                                                                                                           // 38\n}                                                                                                                      // 39\n                                                                                                                       // 40\nfunction getSourceInfoErrorAddendum(elementProps) {                                                                    // 41\n  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {                    // 42\n    var source = elementProps.__source;                                                                                // 43\n    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');                                                           // 44\n    var lineNumber = source.lineNumber;                                                                                // 45\n    return ' Check your code at ' + fileName + ':' + lineNumber + '.';                                                 // 46\n  }                                                                                                                    // 47\n  return '';                                                                                                           // 48\n}                                                                                                                      // 49\n                                                                                                                       // 50\n/**                                                                                                                    // 51\n * Warn if there's no key explicitly set on dynamic arrays of children or                                              // 52\n * object keys are not valid. This allows us to keep track of children between                                         // 53\n * updates.                                                                                                            // 54\n */                                                                                                                    // 55\nvar ownerHasKeyUseWarning = {};                                                                                        // 56\n                                                                                                                       // 57\nfunction getCurrentComponentErrorInfo(parentType) {                                                                    // 58\n  var info = getDeclarationErrorAddendum();                                                                            // 59\n                                                                                                                       // 60\n  if (!info) {                                                                                                         // 61\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;          // 62\n    if (parentName) {                                                                                                  // 63\n      info = ' Check the top-level render call using <' + parentName + '>.';                                           // 64\n    }                                                                                                                  // 65\n  }                                                                                                                    // 66\n  return info;                                                                                                         // 67\n}                                                                                                                      // 68\n                                                                                                                       // 69\n/**                                                                                                                    // 70\n * Warn if the element doesn't have an explicit key assigned to it.                                                    // 71\n * This element is in an array. The array could grow and shrink or be                                                  // 72\n * reordered. All children that haven't already been validated are required to                                         // 73\n * have a \"key\" property assigned to it. Error statuses are cached so a warning                                        // 74\n * will only be shown once.                                                                                            // 75\n *                                                                                                                     // 76\n * @internal                                                                                                           // 77\n * @param {ReactElement} element Element that requires a key.                                                          // 78\n * @param {*} parentType element's parent's type.                                                                      // 79\n */                                                                                                                    // 80\nfunction validateExplicitKey(element, parentType) {                                                                    // 81\n  if (!element._store || element._store.validated || element.key != null) {                                            // 82\n    return;                                                                                                            // 83\n  }                                                                                                                    // 84\n  element._store.validated = true;                                                                                     // 85\n                                                                                                                       // 86\n  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});                            // 87\n                                                                                                                       // 88\n  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);                                            // 89\n  if (memoizer[currentComponentErrorInfo]) {                                                                           // 90\n    return;                                                                                                            // 91\n  }                                                                                                                    // 92\n  memoizer[currentComponentErrorInfo] = true;                                                                          // 93\n                                                                                                                       // 94\n  // Usually the current owner is the offender, but if it accepts children as a                                        // 95\n  // property, it may be the creator of the child that's responsible for                                               // 96\n  // assigning it a key.                                                                                               // 97\n  var childOwner = '';                                                                                                 // 98\n  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {                                     // 99\n    // Give the component that originally created this child.                                                          // 100\n    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';                                      // 101\n  }                                                                                                                    // 102\n                                                                                                                       // 103\n  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique \"key\" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;\n}                                                                                                                      // 105\n                                                                                                                       // 106\n/**                                                                                                                    // 107\n * Ensure that every element either is passed in a static location, in an                                              // 108\n * array with an explicit keys property defined, or in an object literal                                               // 109\n * with valid key property.                                                                                            // 110\n *                                                                                                                     // 111\n * @internal                                                                                                           // 112\n * @param {ReactNode} node Statically passed child of any type.                                                        // 113\n * @param {*} parentType node's parent's type.                                                                         // 114\n */                                                                                                                    // 115\nfunction validateChildKeys(node, parentType) {                                                                         // 116\n  if (typeof node !== 'object') {                                                                                      // 117\n    return;                                                                                                            // 118\n  }                                                                                                                    // 119\n  if (Array.isArray(node)) {                                                                                           // 120\n    for (var i = 0; i < node.length; i++) {                                                                            // 121\n      var child = node[i];                                                                                             // 122\n      if (ReactElement.isValidElement(child)) {                                                                        // 123\n        validateExplicitKey(child, parentType);                                                                        // 124\n      }                                                                                                                // 125\n    }                                                                                                                  // 126\n  } else if (ReactElement.isValidElement(node)) {                                                                      // 127\n    // This element was passed in a valid location.                                                                    // 128\n    if (node._store) {                                                                                                 // 129\n      node._store.validated = true;                                                                                    // 130\n    }                                                                                                                  // 131\n  } else if (node) {                                                                                                   // 132\n    var iteratorFn = getIteratorFn(node);                                                                              // 133\n    // Entry iterators provide implicit keys.                                                                          // 134\n    if (iteratorFn) {                                                                                                  // 135\n      if (iteratorFn !== node.entries) {                                                                               // 136\n        var iterator = iteratorFn.call(node);                                                                          // 137\n        var step;                                                                                                      // 138\n        while (!(step = iterator.next()).done) {                                                                       // 139\n          if (ReactElement.isValidElement(step.value)) {                                                               // 140\n            validateExplicitKey(step.value, parentType);                                                               // 141\n          }                                                                                                            // 142\n        }                                                                                                              // 143\n      }                                                                                                                // 144\n    }                                                                                                                  // 145\n  }                                                                                                                    // 146\n}                                                                                                                      // 147\n                                                                                                                       // 148\n/**                                                                                                                    // 149\n * Given an element, validate that its props follow the propTypes definition,                                          // 150\n * provided by the type.                                                                                               // 151\n *                                                                                                                     // 152\n * @param {ReactElement} element                                                                                       // 153\n */                                                                                                                    // 154\nfunction validatePropTypes(element) {                                                                                  // 155\n  var componentClass = element.type;                                                                                   // 156\n  if (typeof componentClass !== 'function') {                                                                          // 157\n    return;                                                                                                            // 158\n  }                                                                                                                    // 159\n  var name = componentClass.displayName || componentClass.name;                                                        // 160\n  if (componentClass.propTypes) {                                                                                      // 161\n    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);                          // 162\n  }                                                                                                                    // 163\n  if (typeof componentClass.getDefaultProps === 'function') {                                                          // 164\n    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;\n  }                                                                                                                    // 166\n}                                                                                                                      // 167\n                                                                                                                       // 168\nvar ReactElementValidator = {                                                                                          // 169\n  createElement: function (type, props, children) {                                                                    // 170\n    var validType = typeof type === 'string' || typeof type === 'function';                                            // 171\n    // We warn in this case but don't throw. We expect the element creation to                                         // 172\n    // succeed and there will likely be errors in render.                                                              // 173\n    if (!validType) {                                                                                                  // 174\n      if (typeof type !== 'function' && typeof type !== 'string') {                                                    // 175\n        var info = '';                                                                                                 // 176\n        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {       // 177\n          info += ' You likely forgot to export your component from the file ' + \"it's defined in.\";                   // 178\n        }                                                                                                              // 179\n                                                                                                                       // 180\n        var sourceInfo = getSourceInfoErrorAddendum(props);                                                            // 181\n        if (sourceInfo) {                                                                                              // 182\n          info += sourceInfo;                                                                                          // 183\n        } else {                                                                                                       // 184\n          info += getDeclarationErrorAddendum();                                                                       // 185\n        }                                                                                                              // 186\n                                                                                                                       // 187\n        info += ReactComponentTreeHook.getCurrentStackAddendum();                                                      // 188\n                                                                                                                       // 189\n        var currentSource = props !== null && props !== undefined && props.__source !== undefined ? props.__source : null;\n        ReactComponentTreeHook.pushNonStandardWarningStack(true, currentSource);                                       // 191\n        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;\n        ReactComponentTreeHook.popNonStandardWarningStack();                                                           // 193\n      }                                                                                                                // 194\n    }                                                                                                                  // 195\n                                                                                                                       // 196\n    var element = ReactElement.createElement.apply(this, arguments);                                                   // 197\n                                                                                                                       // 198\n    // The result can be nullish if a mock or a custom function is used.                                               // 199\n    // TODO: Drop this when these are no longer allowed as the type argument.                                          // 200\n    if (element == null) {                                                                                             // 201\n      return element;                                                                                                  // 202\n    }                                                                                                                  // 203\n                                                                                                                       // 204\n    // Skip key warning if the type isn't valid since our key validation logic                                         // 205\n    // doesn't expect a non-string/function type and can throw confusing errors.                                       // 206\n    // We don't want exception behavior to differ between dev and prod.                                                // 207\n    // (Rendering will throw with a helpful message and as soon as the type is                                         // 208\n    // fixed, the key warnings will appear.)                                                                           // 209\n    if (validType) {                                                                                                   // 210\n      for (var i = 2; i < arguments.length; i++) {                                                                     // 211\n        validateChildKeys(arguments[i], type);                                                                         // 212\n      }                                                                                                                // 213\n    }                                                                                                                  // 214\n                                                                                                                       // 215\n    validatePropTypes(element);                                                                                        // 216\n                                                                                                                       // 217\n    return element;                                                                                                    // 218\n  },                                                                                                                   // 219\n                                                                                                                       // 220\n  createFactory: function (type) {                                                                                     // 221\n    var validatedFactory = ReactElementValidator.createElement.bind(null, type);                                       // 222\n    // Legacy hook TODO: Warn if this is accessed                                                                      // 223\n    validatedFactory.type = type;                                                                                      // 224\n                                                                                                                       // 225\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 226\n      if (canDefineProperty) {                                                                                         // 227\n        Object.defineProperty(validatedFactory, 'type', {                                                              // 228\n          enumerable: false,                                                                                           // 229\n          get: function () {                                                                                           // 230\n            lowPriorityWarning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n            Object.defineProperty(this, 'type', {                                                                      // 232\n              value: type                                                                                              // 233\n            });                                                                                                        // 234\n            return type;                                                                                               // 235\n          }                                                                                                            // 236\n        });                                                                                                            // 237\n      }                                                                                                                // 238\n    }                                                                                                                  // 239\n                                                                                                                       // 240\n    return validatedFactory;                                                                                           // 241\n  },                                                                                                                   // 242\n                                                                                                                       // 243\n  cloneElement: function (element, props, children) {                                                                  // 244\n    var newElement = ReactElement.cloneElement.apply(this, arguments);                                                 // 245\n    for (var i = 2; i < arguments.length; i++) {                                                                       // 246\n      validateChildKeys(arguments[i], newElement.type);                                                                // 247\n    }                                                                                                                  // 248\n    validatePropTypes(newElement);                                                                                     // 249\n    return newElement;                                                                                                 // 250\n  }                                                                                                                    // 251\n};                                                                                                                     // 252\n                                                                                                                       // 253\nmodule.exports = ReactElementValidator;                                                                                // 254\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactComponentTreeHook.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactComponentTreeHook.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2016-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 16\n                                                                                                                       // 17\nvar invariant = require('fbjs/lib/invariant');                                                                         // 18\nvar warning = require('fbjs/lib/warning');                                                                             // 19\n                                                                                                                       // 20\nfunction isNative(fn) {                                                                                                // 21\n  // Based on isNative() from Lodash                                                                                   // 22\n  var funcToString = Function.prototype.toString;                                                                      // 23\n  var hasOwnProperty = Object.prototype.hasOwnProperty;                                                                // 24\n  var reIsNative = RegExp('^' + funcToString                                                                           // 25\n  // Take an example native function source for comparison                                                             // 26\n  .call(hasOwnProperty                                                                                                 // 27\n  // Strip regex characters so we can use it for regex                                                                 // 28\n  ).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&'                                                                              // 29\n  // Remove hasOwnProperty from the template to make it generic                                                        // 30\n  ).replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$');                                 // 31\n  try {                                                                                                                // 32\n    var source = funcToString.call(fn);                                                                                // 33\n    return reIsNative.test(source);                                                                                    // 34\n  } catch (err) {                                                                                                      // 35\n    return false;                                                                                                      // 36\n  }                                                                                                                    // 37\n}                                                                                                                      // 38\n                                                                                                                       // 39\nvar canUseCollections =                                                                                                // 40\n// Array.from                                                                                                          // 41\ntypeof Array.from === 'function' &&                                                                                    // 42\n// Map                                                                                                                 // 43\ntypeof Map === 'function' && isNative(Map) &&                                                                          // 44\n// Map.prototype.keys                                                                                                  // 45\nMap.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&                   // 46\n// Set                                                                                                                 // 47\ntypeof Set === 'function' && isNative(Set) &&                                                                          // 48\n// Set.prototype.keys                                                                                                  // 49\nSet.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);                     // 50\n                                                                                                                       // 51\nvar setItem;                                                                                                           // 52\nvar getItem;                                                                                                           // 53\nvar removeItem;                                                                                                        // 54\nvar getItemIDs;                                                                                                        // 55\nvar addRoot;                                                                                                           // 56\nvar removeRoot;                                                                                                        // 57\nvar getRootIDs;                                                                                                        // 58\n                                                                                                                       // 59\nif (canUseCollections) {                                                                                               // 60\n  var itemMap = new Map();                                                                                             // 61\n  var rootIDSet = new Set();                                                                                           // 62\n                                                                                                                       // 63\n  setItem = function (id, item) {                                                                                      // 64\n    itemMap.set(id, item);                                                                                             // 65\n  };                                                                                                                   // 66\n  getItem = function (id) {                                                                                            // 67\n    return itemMap.get(id);                                                                                            // 68\n  };                                                                                                                   // 69\n  removeItem = function (id) {                                                                                         // 70\n    itemMap['delete'](id);                                                                                             // 71\n  };                                                                                                                   // 72\n  getItemIDs = function () {                                                                                           // 73\n    return Array.from(itemMap.keys());                                                                                 // 74\n  };                                                                                                                   // 75\n                                                                                                                       // 76\n  addRoot = function (id) {                                                                                            // 77\n    rootIDSet.add(id);                                                                                                 // 78\n  };                                                                                                                   // 79\n  removeRoot = function (id) {                                                                                         // 80\n    rootIDSet['delete'](id);                                                                                           // 81\n  };                                                                                                                   // 82\n  getRootIDs = function () {                                                                                           // 83\n    return Array.from(rootIDSet.keys());                                                                               // 84\n  };                                                                                                                   // 85\n} else {                                                                                                               // 86\n  var itemByKey = {};                                                                                                  // 87\n  var rootByKey = {};                                                                                                  // 88\n                                                                                                                       // 89\n  // Use non-numeric keys to prevent V8 performance issues:                                                            // 90\n  // https://github.com/facebook/react/pull/7232                                                                       // 91\n  var getKeyFromID = function (id) {                                                                                   // 92\n    return '.' + id;                                                                                                   // 93\n  };                                                                                                                   // 94\n  var getIDFromKey = function (key) {                                                                                  // 95\n    return parseInt(key.substr(1), 10);                                                                                // 96\n  };                                                                                                                   // 97\n                                                                                                                       // 98\n  setItem = function (id, item) {                                                                                      // 99\n    var key = getKeyFromID(id);                                                                                        // 100\n    itemByKey[key] = item;                                                                                             // 101\n  };                                                                                                                   // 102\n  getItem = function (id) {                                                                                            // 103\n    var key = getKeyFromID(id);                                                                                        // 104\n    return itemByKey[key];                                                                                             // 105\n  };                                                                                                                   // 106\n  removeItem = function (id) {                                                                                         // 107\n    var key = getKeyFromID(id);                                                                                        // 108\n    delete itemByKey[key];                                                                                             // 109\n  };                                                                                                                   // 110\n  getItemIDs = function () {                                                                                           // 111\n    return Object.keys(itemByKey).map(getIDFromKey);                                                                   // 112\n  };                                                                                                                   // 113\n                                                                                                                       // 114\n  addRoot = function (id) {                                                                                            // 115\n    var key = getKeyFromID(id);                                                                                        // 116\n    rootByKey[key] = true;                                                                                             // 117\n  };                                                                                                                   // 118\n  removeRoot = function (id) {                                                                                         // 119\n    var key = getKeyFromID(id);                                                                                        // 120\n    delete rootByKey[key];                                                                                             // 121\n  };                                                                                                                   // 122\n  getRootIDs = function () {                                                                                           // 123\n    return Object.keys(rootByKey).map(getIDFromKey);                                                                   // 124\n  };                                                                                                                   // 125\n}                                                                                                                      // 126\n                                                                                                                       // 127\nvar unmountedIDs = [];                                                                                                 // 128\n                                                                                                                       // 129\nfunction purgeDeep(id) {                                                                                               // 130\n  var item = getItem(id);                                                                                              // 131\n  if (item) {                                                                                                          // 132\n    var childIDs = item.childIDs;                                                                                      // 133\n                                                                                                                       // 134\n    removeItem(id);                                                                                                    // 135\n    childIDs.forEach(purgeDeep);                                                                                       // 136\n  }                                                                                                                    // 137\n}                                                                                                                      // 138\n                                                                                                                       // 139\nfunction describeComponentFrame(name, source, ownerName) {                                                             // 140\n  return '\\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');\n}                                                                                                                      // 142\n                                                                                                                       // 143\nfunction getDisplayName(element) {                                                                                     // 144\n  if (element == null) {                                                                                               // 145\n    return '#empty';                                                                                                   // 146\n  } else if (typeof element === 'string' || typeof element === 'number') {                                             // 147\n    return '#text';                                                                                                    // 148\n  } else if (typeof element.type === 'string') {                                                                       // 149\n    return element.type;                                                                                               // 150\n  } else {                                                                                                             // 151\n    return element.type.displayName || element.type.name || 'Unknown';                                                 // 152\n  }                                                                                                                    // 153\n}                                                                                                                      // 154\n                                                                                                                       // 155\nfunction describeID(id) {                                                                                              // 156\n  var name = ReactComponentTreeHook.getDisplayName(id);                                                                // 157\n  var element = ReactComponentTreeHook.getElement(id);                                                                 // 158\n  var ownerID = ReactComponentTreeHook.getOwnerID(id);                                                                 // 159\n  var ownerName;                                                                                                       // 160\n  if (ownerID) {                                                                                                       // 161\n    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);                                                        // 162\n  }                                                                                                                    // 163\n  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;\n  return describeComponentFrame(name, element && element._source, ownerName);                                          // 165\n}                                                                                                                      // 166\n                                                                                                                       // 167\nvar ReactComponentTreeHook = {                                                                                         // 168\n  onSetChildren: function (id, nextChildIDs) {                                                                         // 169\n    var item = getItem(id);                                                                                            // 170\n    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;\n    item.childIDs = nextChildIDs;                                                                                      // 172\n                                                                                                                       // 173\n    for (var i = 0; i < nextChildIDs.length; i++) {                                                                    // 174\n      var nextChildID = nextChildIDs[i];                                                                               // 175\n      var nextChild = getItem(nextChildID);                                                                            // 176\n      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;\n      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;\n      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;\n      if (nextChild.parentID == null) {                                                                                // 180\n        nextChild.parentID = id;                                                                                       // 181\n        // TODO: This shouldn't be necessary but mounting a new root during in                                         // 182\n        // componentWillMount currently causes not-yet-mounted components to                                           // 183\n        // be purged from our tree data so their parent id is missing.                                                 // 184\n      }                                                                                                                // 185\n      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;\n    }                                                                                                                  // 187\n  },                                                                                                                   // 188\n  onBeforeMountComponent: function (id, element, parentID) {                                                           // 189\n    var item = {                                                                                                       // 190\n      element: element,                                                                                                // 191\n      parentID: parentID,                                                                                              // 192\n      text: null,                                                                                                      // 193\n      childIDs: [],                                                                                                    // 194\n      isMounted: false,                                                                                                // 195\n      updateCount: 0                                                                                                   // 196\n    };                                                                                                                 // 197\n    setItem(id, item);                                                                                                 // 198\n  },                                                                                                                   // 199\n  onBeforeUpdateComponent: function (id, element) {                                                                    // 200\n    var item = getItem(id);                                                                                            // 201\n    if (!item || !item.isMounted) {                                                                                    // 202\n      // We may end up here as a result of setState() in componentWillUnmount().                                       // 203\n      // In this case, ignore the element.                                                                             // 204\n      return;                                                                                                          // 205\n    }                                                                                                                  // 206\n    item.element = element;                                                                                            // 207\n  },                                                                                                                   // 208\n  onMountComponent: function (id) {                                                                                    // 209\n    var item = getItem(id);                                                                                            // 210\n    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;\n    item.isMounted = true;                                                                                             // 212\n    var isRoot = item.parentID === 0;                                                                                  // 213\n    if (isRoot) {                                                                                                      // 214\n      addRoot(id);                                                                                                     // 215\n    }                                                                                                                  // 216\n  },                                                                                                                   // 217\n  onUpdateComponent: function (id) {                                                                                   // 218\n    var item = getItem(id);                                                                                            // 219\n    if (!item || !item.isMounted) {                                                                                    // 220\n      // We may end up here as a result of setState() in componentWillUnmount().                                       // 221\n      // In this case, ignore the element.                                                                             // 222\n      return;                                                                                                          // 223\n    }                                                                                                                  // 224\n    item.updateCount++;                                                                                                // 225\n  },                                                                                                                   // 226\n  onUnmountComponent: function (id) {                                                                                  // 227\n    var item = getItem(id);                                                                                            // 228\n    if (item) {                                                                                                        // 229\n      // We need to check if it exists.                                                                                // 230\n      // `item` might not exist if it is inside an error boundary, and a sibling                                       // 231\n      // error boundary child threw while mounting. Then this instance never                                           // 232\n      // got a chance to mount, but it still gets an unmounting event during                                           // 233\n      // the error boundary cleanup.                                                                                   // 234\n      item.isMounted = false;                                                                                          // 235\n      var isRoot = item.parentID === 0;                                                                                // 236\n      if (isRoot) {                                                                                                    // 237\n        removeRoot(id);                                                                                                // 238\n      }                                                                                                                // 239\n    }                                                                                                                  // 240\n    unmountedIDs.push(id);                                                                                             // 241\n  },                                                                                                                   // 242\n  purgeUnmountedComponents: function () {                                                                              // 243\n    if (ReactComponentTreeHook._preventPurging) {                                                                      // 244\n      // Should only be used for testing.                                                                              // 245\n      return;                                                                                                          // 246\n    }                                                                                                                  // 247\n                                                                                                                       // 248\n    for (var i = 0; i < unmountedIDs.length; i++) {                                                                    // 249\n      var id = unmountedIDs[i];                                                                                        // 250\n      purgeDeep(id);                                                                                                   // 251\n    }                                                                                                                  // 252\n    unmountedIDs.length = 0;                                                                                           // 253\n  },                                                                                                                   // 254\n  isMounted: function (id) {                                                                                           // 255\n    var item = getItem(id);                                                                                            // 256\n    return item ? item.isMounted : false;                                                                              // 257\n  },                                                                                                                   // 258\n  getCurrentStackAddendum: function (topElement) {                                                                     // 259\n    var info = '';                                                                                                     // 260\n    if (topElement) {                                                                                                  // 261\n      var name = getDisplayName(topElement);                                                                           // 262\n      var owner = topElement._owner;                                                                                   // 263\n      info += describeComponentFrame(name, topElement._source, owner && owner.getName());                              // 264\n    }                                                                                                                  // 265\n                                                                                                                       // 266\n    var currentOwner = ReactCurrentOwner.current;                                                                      // 267\n    var id = currentOwner && currentOwner._debugID;                                                                    // 268\n                                                                                                                       // 269\n    info += ReactComponentTreeHook.getStackAddendumByID(id);                                                           // 270\n    return info;                                                                                                       // 271\n  },                                                                                                                   // 272\n  getStackAddendumByID: function (id) {                                                                                // 273\n    var info = '';                                                                                                     // 274\n    while (id) {                                                                                                       // 275\n      info += describeID(id);                                                                                          // 276\n      id = ReactComponentTreeHook.getParentID(id);                                                                     // 277\n    }                                                                                                                  // 278\n    return info;                                                                                                       // 279\n  },                                                                                                                   // 280\n  getChildIDs: function (id) {                                                                                         // 281\n    var item = getItem(id);                                                                                            // 282\n    return item ? item.childIDs : [];                                                                                  // 283\n  },                                                                                                                   // 284\n  getDisplayName: function (id) {                                                                                      // 285\n    var element = ReactComponentTreeHook.getElement(id);                                                               // 286\n    if (!element) {                                                                                                    // 287\n      return null;                                                                                                     // 288\n    }                                                                                                                  // 289\n    return getDisplayName(element);                                                                                    // 290\n  },                                                                                                                   // 291\n  getElement: function (id) {                                                                                          // 292\n    var item = getItem(id);                                                                                            // 293\n    return item ? item.element : null;                                                                                 // 294\n  },                                                                                                                   // 295\n  getOwnerID: function (id) {                                                                                          // 296\n    var element = ReactComponentTreeHook.getElement(id);                                                               // 297\n    if (!element || !element._owner) {                                                                                 // 298\n      return null;                                                                                                     // 299\n    }                                                                                                                  // 300\n    return element._owner._debugID;                                                                                    // 301\n  },                                                                                                                   // 302\n  getParentID: function (id) {                                                                                         // 303\n    var item = getItem(id);                                                                                            // 304\n    return item ? item.parentID : null;                                                                                // 305\n  },                                                                                                                   // 306\n  getSource: function (id) {                                                                                           // 307\n    var item = getItem(id);                                                                                            // 308\n    var element = item ? item.element : null;                                                                          // 309\n    var source = element != null ? element._source : null;                                                             // 310\n    return source;                                                                                                     // 311\n  },                                                                                                                   // 312\n  getText: function (id) {                                                                                             // 313\n    var element = ReactComponentTreeHook.getElement(id);                                                               // 314\n    if (typeof element === 'string') {                                                                                 // 315\n      return element;                                                                                                  // 316\n    } else if (typeof element === 'number') {                                                                          // 317\n      return '' + element;                                                                                             // 318\n    } else {                                                                                                           // 319\n      return null;                                                                                                     // 320\n    }                                                                                                                  // 321\n  },                                                                                                                   // 322\n  getUpdateCount: function (id) {                                                                                      // 323\n    var item = getItem(id);                                                                                            // 324\n    return item ? item.updateCount : 0;                                                                                // 325\n  },                                                                                                                   // 326\n                                                                                                                       // 327\n                                                                                                                       // 328\n  getRootIDs: getRootIDs,                                                                                              // 329\n  getRegisteredIDs: getItemIDs,                                                                                        // 330\n                                                                                                                       // 331\n  pushNonStandardWarningStack: function (isCreatingElement, currentSource) {                                           // 332\n    if (typeof console.reactStack !== 'function') {                                                                    // 333\n      return;                                                                                                          // 334\n    }                                                                                                                  // 335\n                                                                                                                       // 336\n    var stack = [];                                                                                                    // 337\n    var currentOwner = ReactCurrentOwner.current;                                                                      // 338\n    var id = currentOwner && currentOwner._debugID;                                                                    // 339\n                                                                                                                       // 340\n    try {                                                                                                              // 341\n      if (isCreatingElement) {                                                                                         // 342\n        stack.push({                                                                                                   // 343\n          name: id ? ReactComponentTreeHook.getDisplayName(id) : null,                                                 // 344\n          fileName: currentSource ? currentSource.fileName : null,                                                     // 345\n          lineNumber: currentSource ? currentSource.lineNumber : null                                                  // 346\n        });                                                                                                            // 347\n      }                                                                                                                // 348\n                                                                                                                       // 349\n      while (id) {                                                                                                     // 350\n        var element = ReactComponentTreeHook.getElement(id);                                                           // 351\n        var parentID = ReactComponentTreeHook.getParentID(id);                                                         // 352\n        var ownerID = ReactComponentTreeHook.getOwnerID(id);                                                           // 353\n        var ownerName = ownerID ? ReactComponentTreeHook.getDisplayName(ownerID) : null;                               // 354\n        var source = element && element._source;                                                                       // 355\n        stack.push({                                                                                                   // 356\n          name: ownerName,                                                                                             // 357\n          fileName: source ? source.fileName : null,                                                                   // 358\n          lineNumber: source ? source.lineNumber : null                                                                // 359\n        });                                                                                                            // 360\n        id = parentID;                                                                                                 // 361\n      }                                                                                                                // 362\n    } catch (err) {                                                                                                    // 363\n      // Internal state is messed up.                                                                                  // 364\n      // Stop building the stack (it's just a nice to have).                                                           // 365\n    }                                                                                                                  // 366\n                                                                                                                       // 367\n    console.reactStack(stack);                                                                                         // 368\n  },                                                                                                                   // 369\n  popNonStandardWarningStack: function () {                                                                            // 370\n    if (typeof console.reactStackEnd !== 'function') {                                                                 // 371\n      return;                                                                                                          // 372\n    }                                                                                                                  // 373\n    console.reactStackEnd();                                                                                           // 374\n  }                                                                                                                    // 375\n};                                                                                                                     // 376\n                                                                                                                       // 377\nmodule.exports = ReactComponentTreeHook;                                                                               // 378\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"checkReactTypeSpec.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/checkReactTypeSpec.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 13\n                                                                                                                       // 14\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');                                              // 15\nvar ReactPropTypesSecret = require('./ReactPropTypesSecret');                                                          // 16\n                                                                                                                       // 17\nvar invariant = require('fbjs/lib/invariant');                                                                         // 18\nvar warning = require('fbjs/lib/warning');                                                                             // 19\n                                                                                                                       // 20\nvar ReactComponentTreeHook;                                                                                            // 21\n                                                                                                                       // 22\nif (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {                                // 23\n  // Temporary hack.                                                                                                   // 24\n  // Inline requires don't work well with Jest:                                                                        // 25\n  // https://github.com/facebook/react/issues/7240                                                                     // 26\n  // Remove the inline requires when we don't need them anymore:                                                       // 27\n  // https://github.com/facebook/react/pull/7178                                                                       // 28\n  ReactComponentTreeHook = require('./ReactComponentTreeHook');                                                        // 29\n}                                                                                                                      // 30\n                                                                                                                       // 31\nvar loggedTypeFailures = {};                                                                                           // 32\n                                                                                                                       // 33\n/**                                                                                                                    // 34\n * Assert that the values match with the type specs.                                                                   // 35\n * Error messages are memorized and will only be shown once.                                                           // 36\n *                                                                                                                     // 37\n * @param {object} typeSpecs Map of name to a ReactPropType                                                            // 38\n * @param {object} values Runtime values that need to be type-checked                                                  // 39\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"                                                    // 40\n * @param {string} componentName Name of the component for error messages.                                             // 41\n * @param {?object} element The React element that is being type-checked                                               // 42\n * @param {?number} debugID The React component instance that is being type-checked                                    // 43\n * @private                                                                                                            // 44\n */                                                                                                                    // 45\nfunction checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {                            // 46\n  for (var typeSpecName in typeSpecs) {                                                                                // 47\n    if (typeSpecs.hasOwnProperty(typeSpecName)) {                                                                      // 48\n      var error;                                                                                                       // 49\n      // Prop type validation may throw. In case they do, we don't want to                                             // 50\n      // fail the render phase where it didn't fail before. So we log it.                                              // 51\n      // After these have been cleaned up, we'll let them throw.                                                       // 52\n      try {                                                                                                            // 53\n        // This is intentionally an invariant that gets caught. It's the same                                          // 54\n        // behavior as without this statement except with a better message.                                            // 55\n        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;\n        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);    // 57\n      } catch (ex) {                                                                                                   // 58\n        error = ex;                                                                                                    // 59\n      }                                                                                                                // 60\n      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {                                          // 62\n        // Only monitor this failure once because there tends to be a lot of the                                       // 63\n        // same error.                                                                                                 // 64\n        loggedTypeFailures[error.message] = true;                                                                      // 65\n                                                                                                                       // 66\n        var componentStackInfo = '';                                                                                   // 67\n                                                                                                                       // 68\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 69\n          if (!ReactComponentTreeHook) {                                                                               // 70\n            ReactComponentTreeHook = require('./ReactComponentTreeHook');                                              // 71\n          }                                                                                                            // 72\n          if (debugID !== null) {                                                                                      // 73\n            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);                                 // 74\n          } else if (element !== null) {                                                                               // 75\n            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);                              // 76\n          }                                                                                                            // 77\n        }                                                                                                              // 78\n                                                                                                                       // 79\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;\n      }                                                                                                                // 81\n    }                                                                                                                  // 82\n  }                                                                                                                    // 83\n}                                                                                                                      // 84\n                                                                                                                       // 85\nmodule.exports = checkReactTypeSpec;                                                                                   // 86\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactPropTypeLocationNames.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactPropTypeLocationNames.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactPropTypeLocationNames = {};                                                                                   // 14\n                                                                                                                       // 15\nif (process.env.NODE_ENV !== 'production') {                                                                           // 16\n  ReactPropTypeLocationNames = {                                                                                       // 17\n    prop: 'prop',                                                                                                      // 18\n    context: 'context',                                                                                                // 19\n    childContext: 'child context'                                                                                      // 20\n  };                                                                                                                   // 21\n}                                                                                                                      // 22\n                                                                                                                       // 23\nmodule.exports = ReactPropTypeLocationNames;                                                                           // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactPropTypesSecret.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactPropTypesSecret.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';                                             // 14\n                                                                                                                       // 15\nmodule.exports = ReactPropTypesSecret;                                                                                 // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactPropTypes.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactPropTypes.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _require = require('./ReactElement'),                                                                              // 13\n    isValidElement = _require.isValidElement;                                                                          // 14\n                                                                                                                       // 15\nvar factory = require('prop-types/factory');                                                                           // 16\n                                                                                                                       // 17\nmodule.exports = factory(isValidElement);                                                                              // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactVersion.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactVersion.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nmodule.exports = '15.6.1';                                                                                             // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"createClass.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/createClass.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _require = require('./ReactBaseClasses'),                                                                          // 13\n    Component = _require.Component;                                                                                    // 14\n                                                                                                                       // 15\nvar _require2 = require('./ReactElement'),                                                                             // 16\n    isValidElement = _require2.isValidElement;                                                                         // 17\n                                                                                                                       // 18\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');                                                          // 19\nvar factory = require('create-react-class/factory');                                                                   // 20\n                                                                                                                       // 21\nmodule.exports = factory(Component, isValidElement, ReactNoopUpdateQueue);                                             // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"onlyChild.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/onlyChild.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n'use strict';                                                                                                          // 10\n                                                                                                                       // 11\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 12\n                                                                                                                       // 13\nvar ReactElement = require('./ReactElement');                                                                          // 14\n                                                                                                                       // 15\nvar invariant = require('fbjs/lib/invariant');                                                                         // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Returns the first child in a collection of children and verifies that there                                         // 19\n * is only one child in the collection.                                                                                // 20\n *                                                                                                                     // 21\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only                                    // 22\n *                                                                                                                     // 23\n * The current implementation of this function assumes that a single child gets                                        // 24\n * passed without a wrapper, but the purpose of this helper function is to                                             // 25\n * abstract away the particular structure of children.                                                                 // 26\n *                                                                                                                     // 27\n * @param {?object} children Child collection structure.                                                               // 28\n * @return {ReactElement} The first and only `ReactElement` contained in the                                           // 29\n * structure.                                                                                                          // 30\n */                                                                                                                    // 31\nfunction onlyChild(children) {                                                                                         // 32\n  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;\n  return children;                                                                                                     // 34\n}                                                                                                                      // 35\n                                                                                                                       // 36\nmodule.exports = onlyChild;                                                                                            // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getNextDebugID.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/getNextDebugID.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar nextDebugID = 1;                                                                                                   // 14\n                                                                                                                       // 15\nfunction getNextDebugID() {                                                                                            // 16\n  return nextDebugID++;                                                                                                // 17\n}                                                                                                                      // 18\n                                                                                                                       // 19\nmodule.exports = getNextDebugID;                                                                                       // 20\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"node_modules\":{\"object-assign\":{\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/object-assign/index.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\nobject-assign                                                                                                          // 2\n(c) Sindre Sorhus                                                                                                      // 3\n@license MIT                                                                                                           // 4\n*/                                                                                                                     // 5\n                                                                                                                       // 6\n'use strict';                                                                                                          // 7\n/* eslint-disable no-unused-vars */                                                                                    // 8\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;                                                              // 9\nvar hasOwnProperty = Object.prototype.hasOwnProperty;                                                                  // 10\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;                                                          // 11\n                                                                                                                       // 12\nfunction toObject(val) {                                                                                               // 13\n\tif (val === null || val === undefined) {                                                                              // 14\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');                                        // 15\n\t}                                                                                                                     // 16\n                                                                                                                       // 17\n\treturn Object(val);                                                                                                   // 18\n}                                                                                                                      // 19\n                                                                                                                       // 20\nfunction shouldUseNative() {                                                                                           // 21\n\ttry {                                                                                                                 // 22\n\t\tif (!Object.assign) {                                                                                                // 23\n\t\t\treturn false;                                                                                                       // 24\n\t\t}                                                                                                                    // 25\n                                                                                                                       // 26\n\t\t// Detect buggy property enumeration order in older V8 versions.                                                     // 27\n                                                                                                                       // 28\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118                                                              // 29\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers                                               // 30\n\t\ttest1[5] = 'de';                                                                                                     // 31\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {                                                                  // 32\n\t\t\treturn false;                                                                                                       // 33\n\t\t}                                                                                                                    // 34\n                                                                                                                       // 35\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056                                                              // 36\n\t\tvar test2 = {};                                                                                                      // 37\n\t\tfor (var i = 0; i < 10; i++) {                                                                                       // 38\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;                                                                            // 39\n\t\t}                                                                                                                    // 40\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {                                                    // 41\n\t\t\treturn test2[n];                                                                                                    // 42\n\t\t});                                                                                                                  // 43\n\t\tif (order2.join('') !== '0123456789') {                                                                              // 44\n\t\t\treturn false;                                                                                                       // 45\n\t\t}                                                                                                                    // 46\n                                                                                                                       // 47\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056                                                              // 48\n\t\tvar test3 = {};                                                                                                      // 49\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {                                                         // 50\n\t\t\ttest3[letter] = letter;                                                                                             // 51\n\t\t});                                                                                                                  // 52\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==                                                               // 53\n\t\t\t\t'abcdefghijklmnopqrst') {                                                                                          // 54\n\t\t\treturn false;                                                                                                       // 55\n\t\t}                                                                                                                    // 56\n                                                                                                                       // 57\n\t\treturn true;                                                                                                         // 58\n\t} catch (err) {                                                                                                       // 59\n\t\t// We don't expect any of the above to throw, but better to be safe.                                                 // 60\n\t\treturn false;                                                                                                        // 61\n\t}                                                                                                                     // 62\n}                                                                                                                      // 63\n                                                                                                                       // 64\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {                                       // 65\n\tvar from;                                                                                                             // 66\n\tvar to = toObject(target);                                                                                            // 67\n\tvar symbols;                                                                                                          // 68\n                                                                                                                       // 69\n\tfor (var s = 1; s < arguments.length; s++) {                                                                          // 70\n\t\tfrom = Object(arguments[s]);                                                                                         // 71\n                                                                                                                       // 72\n\t\tfor (var key in from) {                                                                                              // 73\n\t\t\tif (hasOwnProperty.call(from, key)) {                                                                               // 74\n\t\t\t\tto[key] = from[key];                                                                                               // 75\n\t\t\t}                                                                                                                   // 76\n\t\t}                                                                                                                    // 77\n                                                                                                                       // 78\n\t\tif (getOwnPropertySymbols) {                                                                                         // 79\n\t\t\tsymbols = getOwnPropertySymbols(from);                                                                              // 80\n\t\t\tfor (var i = 0; i < symbols.length; i++) {                                                                          // 81\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {                                                                     // 82\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];                                                                                // 83\n\t\t\t\t}                                                                                                                  // 84\n\t\t\t}                                                                                                                   // 85\n\t\t}                                                                                                                    // 86\n\t}                                                                                                                     // 87\n                                                                                                                       // 88\n\treturn to;                                                                                                            // 89\n};                                                                                                                     // 90\n                                                                                                                       // 91\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"fbjs\":{\"lib\":{\"warning.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/warning.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar emptyFunction = require('./emptyFunction');                                                                        // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Similar to invariant but only logs a warning if the condition is not met.                                           // 16\n * This can be used to log issues in development environments in critical                                              // 17\n * paths. Removing the logging code for production environments will keep the                                          // 18\n * same logic and follow the same code paths.                                                                          // 19\n */                                                                                                                    // 20\n                                                                                                                       // 21\nvar warning = emptyFunction;                                                                                           // 22\n                                                                                                                       // 23\nif (process.env.NODE_ENV !== 'production') {                                                                           // 24\n  var printWarning = function printWarning(format) {                                                                   // 25\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {          // 26\n      args[_key - 1] = arguments[_key];                                                                                // 27\n    }                                                                                                                  // 28\n                                                                                                                       // 29\n    var argIndex = 0;                                                                                                  // 30\n    var message = 'Warning: ' + format.replace(/%s/g, function () {                                                    // 31\n      return args[argIndex++];                                                                                         // 32\n    });                                                                                                                // 33\n    if (typeof console !== 'undefined') {                                                                              // 34\n      console.error(message);                                                                                          // 35\n    }                                                                                                                  // 36\n    try {                                                                                                              // 37\n      // --- Welcome to debugging React ---                                                                            // 38\n      // This error was thrown as a convenience so that you can use this stack                                         // 39\n      // to find the callsite that caused this warning to fire.                                                        // 40\n      throw new Error(message);                                                                                        // 41\n    } catch (x) {}                                                                                                     // 42\n  };                                                                                                                   // 43\n                                                                                                                       // 44\n  warning = function warning(condition, format) {                                                                      // 45\n    if (format === undefined) {                                                                                        // 46\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');               // 47\n    }                                                                                                                  // 48\n                                                                                                                       // 49\n    if (format.indexOf('Failed Composite propType: ') === 0) {                                                         // 50\n      return; // Ignore CompositeComponent proptype check.                                                             // 51\n    }                                                                                                                  // 52\n                                                                                                                       // 53\n    if (!condition) {                                                                                                  // 54\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];                                                                            // 56\n      }                                                                                                                // 57\n                                                                                                                       // 58\n      printWarning.apply(undefined, [format].concat(args));                                                            // 59\n    }                                                                                                                  // 60\n  };                                                                                                                   // 61\n}                                                                                                                      // 62\n                                                                                                                       // 63\nmodule.exports = warning;                                                                                              // 64\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"emptyFunction.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/emptyFunction.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n *                                                                                                                     // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\nfunction makeEmptyFunction(arg) {                                                                                      // 14\n  return function () {                                                                                                 // 15\n    return arg;                                                                                                        // 16\n  };                                                                                                                   // 17\n}                                                                                                                      // 18\n                                                                                                                       // 19\n/**                                                                                                                    // 20\n * This function accepts and discards inputs; it has no side effects. This is                                          // 21\n * primarily useful idiomatically for overridable function endpoints which                                             // 22\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.                                             // 23\n */                                                                                                                    // 24\nvar emptyFunction = function emptyFunction() {};                                                                       // 25\n                                                                                                                       // 26\nemptyFunction.thatReturns = makeEmptyFunction;                                                                         // 27\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);                                                             // 28\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);                                                               // 29\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);                                                               // 30\nemptyFunction.thatReturnsThis = function () {                                                                          // 31\n  return this;                                                                                                         // 32\n};                                                                                                                     // 33\nemptyFunction.thatReturnsArgument = function (arg) {                                                                   // 34\n  return arg;                                                                                                          // 35\n};                                                                                                                     // 36\n                                                                                                                       // 37\nmodule.exports = emptyFunction;                                                                                        // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"emptyObject.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/emptyObject.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar emptyObject = {};                                                                                                  // 13\n                                                                                                                       // 14\nif (process.env.NODE_ENV !== 'production') {                                                                           // 15\n  Object.freeze(emptyObject);                                                                                          // 16\n}                                                                                                                      // 17\n                                                                                                                       // 18\nmodule.exports = emptyObject;                                                                                          // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"invariant.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/invariant.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * Use invariant() to assert state which your program assumes to be true.                                              // 14\n *                                                                                                                     // 15\n * Provide sprintf-style format (only %s is supported) and arguments                                                   // 16\n * to provide information about what broke and what you were                                                           // 17\n * expecting.                                                                                                          // 18\n *                                                                                                                     // 19\n * The invariant message will be stripped in production, but the invariant                                             // 20\n * will remain to ensure logic does not differ in production.                                                          // 21\n */                                                                                                                    // 22\n                                                                                                                       // 23\nvar validateFormat = function validateFormat(format) {};                                                               // 24\n                                                                                                                       // 25\nif (process.env.NODE_ENV !== 'production') {                                                                           // 26\n  validateFormat = function validateFormat(format) {                                                                   // 27\n    if (format === undefined) {                                                                                        // 28\n      throw new Error('invariant requires an error message argument');                                                 // 29\n    }                                                                                                                  // 30\n  };                                                                                                                   // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\nfunction invariant(condition, format, a, b, c, d, e, f) {                                                              // 34\n  validateFormat(format);                                                                                              // 35\n                                                                                                                       // 36\n  if (!condition) {                                                                                                    // 37\n    var error;                                                                                                         // 38\n    if (format === undefined) {                                                                                        // 39\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {                                                                                                           // 41\n      var args = [a, b, c, d, e, f];                                                                                   // 42\n      var argIndex = 0;                                                                                                // 43\n      error = new Error(format.replace(/%s/g, function () {                                                            // 44\n        return args[argIndex++];                                                                                       // 45\n      }));                                                                                                             // 46\n      error.name = 'Invariant Violation';                                                                              // 47\n    }                                                                                                                  // 48\n                                                                                                                       // 49\n    error.framesToPop = 1; // we don't care about invariant's own frame                                                // 50\n    throw error;                                                                                                       // 51\n  }                                                                                                                    // 52\n}                                                                                                                      // 53\n                                                                                                                       // 54\nmodule.exports = invariant;                                                                                            // 55\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"prop-types\":{\"factory.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/prop-types/factory.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n'use strict';                                                                                                          // 10\n                                                                                                                       // 11\n// React 15.5 references this module, and assumes PropTypes are still callable in production.                          // 12\n// Therefore we re-export development-only version with all the PropTypes checks here.                                 // 13\n// However if one is migrating to the `prop-types` npm library, they will go through the                               // 14\n// `index.js` entry point, and it will branch depending on the environment.                                            // 15\nvar factory = require('./factoryWithTypeCheckers');                                                                    // 16\nmodule.exports = function(isValidElement) {                                                                            // 17\n  // It is still allowed in 15.5.                                                                                      // 18\n  var throwOnDirectAccess = false;                                                                                     // 19\n  return factory(isValidElement, throwOnDirectAccess);                                                                 // 20\n};                                                                                                                     // 21\n                                                                                                                       // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"factoryWithTypeCheckers.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/prop-types/factoryWithTypeCheckers.js                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n'use strict';                                                                                                          // 10\n                                                                                                                       // 11\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 12\nvar invariant = require('fbjs/lib/invariant');                                                                         // 13\nvar warning = require('fbjs/lib/warning');                                                                             // 14\n                                                                                                                       // 15\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');                                                      // 16\nvar checkPropTypes = require('./checkPropTypes');                                                                      // 17\n                                                                                                                       // 18\nmodule.exports = function(isValidElement, throwOnDirectAccess) {                                                       // 19\n  /* global Symbol */                                                                                                  // 20\n  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;                                               // 21\n  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.                                                      // 22\n                                                                                                                       // 23\n  /**                                                                                                                  // 24\n   * Returns the iterator method function contained on the iterable object.                                            // 25\n   *                                                                                                                   // 26\n   * Be sure to invoke the function with the iterable as context:                                                      // 27\n   *                                                                                                                   // 28\n   *     var iteratorFn = getIteratorFn(myIterable);                                                                   // 29\n   *     if (iteratorFn) {                                                                                             // 30\n   *       var iterator = iteratorFn.call(myIterable);                                                                 // 31\n   *       ...                                                                                                         // 32\n   *     }                                                                                                             // 33\n   *                                                                                                                   // 34\n   * @param {?object} maybeIterable                                                                                    // 35\n   * @return {?function}                                                                                               // 36\n   */                                                                                                                  // 37\n  function getIteratorFn(maybeIterable) {                                                                              // 38\n    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n    if (typeof iteratorFn === 'function') {                                                                            // 40\n      return iteratorFn;                                                                                               // 41\n    }                                                                                                                  // 42\n  }                                                                                                                    // 43\n                                                                                                                       // 44\n  /**                                                                                                                  // 45\n   * Collection of methods that allow declaration and validation of props that are                                     // 46\n   * supplied to React components. Example usage:                                                                      // 47\n   *                                                                                                                   // 48\n   *   var Props = require('ReactPropTypes');                                                                          // 49\n   *   var MyArticle = React.createClass({                                                                             // 50\n   *     propTypes: {                                                                                                  // 51\n   *       // An optional string prop named \"description\".                                                             // 52\n   *       description: Props.string,                                                                                  // 53\n   *                                                                                                                   // 54\n   *       // A required enum prop named \"category\".                                                                   // 55\n   *       category: Props.oneOf(['News','Photos']).isRequired,                                                        // 56\n   *                                                                                                                   // 57\n   *       // A prop named \"dialog\" that requires an instance of Dialog.                                               // 58\n   *       dialog: Props.instanceOf(Dialog).isRequired                                                                 // 59\n   *     },                                                                                                            // 60\n   *     render: function() { ... }                                                                                    // 61\n   *   });                                                                                                             // 62\n   *                                                                                                                   // 63\n   * A more formal specification of how these methods are used:                                                        // 64\n   *                                                                                                                   // 65\n   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)                                       // 66\n   *   decl := ReactPropTypes.{type}(.isRequired)?                                                                     // 67\n   *                                                                                                                   // 68\n   * Each and every declaration produces a function with the same signature. This                                      // 69\n   * allows the creation of custom validation functions. For example:                                                  // 70\n   *                                                                                                                   // 71\n   *  var MyLink = React.createClass({                                                                                 // 72\n   *    propTypes: {                                                                                                   // 73\n   *      // An optional string or URI prop named \"href\".                                                              // 74\n   *      href: function(props, propName, componentName) {                                                             // 75\n   *        var propValue = props[propName];                                                                           // 76\n   *        if (propValue != null && typeof propValue !== 'string' &&                                                  // 77\n   *            !(propValue instanceof URI)) {                                                                         // 78\n   *          return new Error(                                                                                        // 79\n   *            'Expected a string or an URI for ' + propName + ' in ' +                                               // 80\n   *            componentName                                                                                          // 81\n   *          );                                                                                                       // 82\n   *        }                                                                                                          // 83\n   *      }                                                                                                            // 84\n   *    },                                                                                                             // 85\n   *    render: function() {...}                                                                                       // 86\n   *  });                                                                                                              // 87\n   *                                                                                                                   // 88\n   * @internal                                                                                                         // 89\n   */                                                                                                                  // 90\n                                                                                                                       // 91\n  var ANONYMOUS = '<<anonymous>>';                                                                                     // 92\n                                                                                                                       // 93\n  // Important!                                                                                                        // 94\n  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.                                // 95\n  var ReactPropTypes = {                                                                                               // 96\n    array: createPrimitiveTypeChecker('array'),                                                                        // 97\n    bool: createPrimitiveTypeChecker('boolean'),                                                                       // 98\n    func: createPrimitiveTypeChecker('function'),                                                                      // 99\n    number: createPrimitiveTypeChecker('number'),                                                                      // 100\n    object: createPrimitiveTypeChecker('object'),                                                                      // 101\n    string: createPrimitiveTypeChecker('string'),                                                                      // 102\n    symbol: createPrimitiveTypeChecker('symbol'),                                                                      // 103\n                                                                                                                       // 104\n    any: createAnyTypeChecker(),                                                                                       // 105\n    arrayOf: createArrayOfTypeChecker,                                                                                 // 106\n    element: createElementTypeChecker(),                                                                               // 107\n    instanceOf: createInstanceTypeChecker,                                                                             // 108\n    node: createNodeChecker(),                                                                                         // 109\n    objectOf: createObjectOfTypeChecker,                                                                               // 110\n    oneOf: createEnumTypeChecker,                                                                                      // 111\n    oneOfType: createUnionTypeChecker,                                                                                 // 112\n    shape: createShapeTypeChecker                                                                                      // 113\n  };                                                                                                                   // 114\n                                                                                                                       // 115\n  /**                                                                                                                  // 116\n   * inlined Object.is polyfill to avoid requiring consumers ship their own                                            // 117\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is                        // 118\n   */                                                                                                                  // 119\n  /*eslint-disable no-self-compare*/                                                                                   // 120\n  function is(x, y) {                                                                                                  // 121\n    // SameValue algorithm                                                                                             // 122\n    if (x === y) {                                                                                                     // 123\n      // Steps 1-5, 7-10                                                                                               // 124\n      // Steps 6.b-6.e: +0 != -0                                                                                       // 125\n      return x !== 0 || 1 / x === 1 / y;                                                                               // 126\n    } else {                                                                                                           // 127\n      // Step 6.a: NaN == NaN                                                                                          // 128\n      return x !== x && y !== y;                                                                                       // 129\n    }                                                                                                                  // 130\n  }                                                                                                                    // 131\n  /*eslint-enable no-self-compare*/                                                                                    // 132\n                                                                                                                       // 133\n  /**                                                                                                                  // 134\n   * We use an Error-like object for backward compatibility as people may call                                         // 135\n   * PropTypes directly and inspect their output. However, we don't use real                                           // 136\n   * Errors anymore. We don't inspect their stack anyway, and creating them                                            // 137\n   * is prohibitively expensive if they are created too often, such as what                                            // 138\n   * happens in oneOfType() for any type before the one that matched.                                                  // 139\n   */                                                                                                                  // 140\n  function PropTypeError(message) {                                                                                    // 141\n    this.message = message;                                                                                            // 142\n    this.stack = '';                                                                                                   // 143\n  }                                                                                                                    // 144\n  // Make `instanceof Error` still work for returned errors.                                                           // 145\n  PropTypeError.prototype = Error.prototype;                                                                           // 146\n                                                                                                                       // 147\n  function createChainableTypeChecker(validate) {                                                                      // 148\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 149\n      var manualPropTypeCallCache = {};                                                                                // 150\n      var manualPropTypeWarningCount = 0;                                                                              // 151\n    }                                                                                                                  // 152\n    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {                   // 153\n      componentName = componentName || ANONYMOUS;                                                                      // 154\n      propFullName = propFullName || propName;                                                                         // 155\n                                                                                                                       // 156\n      if (secret !== ReactPropTypesSecret) {                                                                           // 157\n        if (throwOnDirectAccess) {                                                                                     // 158\n          // New behavior only for users of `prop-types` package                                                       // 159\n          invariant(                                                                                                   // 160\n            false,                                                                                                     // 161\n            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +                   // 162\n            'Use `PropTypes.checkPropTypes()` to call them. ' +                                                        // 163\n            'Read more at http://fb.me/use-check-prop-types'                                                           // 164\n          );                                                                                                           // 165\n        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {                          // 166\n          // Old behavior for people using React.PropTypes                                                             // 167\n          var cacheKey = componentName + ':' + propName;                                                               // 168\n          if (                                                                                                         // 169\n            !manualPropTypeCallCache[cacheKey] &&                                                                      // 170\n            // Avoid spamming the console because they are often not actionable except for lib authors                 // 171\n            manualPropTypeWarningCount < 3                                                                             // 172\n          ) {                                                                                                          // 173\n            warning(                                                                                                   // 174\n              false,                                                                                                   // 175\n              'You are manually calling a React.PropTypes validation ' +                                               // 176\n              'function for the `%s` prop on `%s`. This is deprecated ' +                                              // 177\n              'and will throw in the standalone `prop-types` package. ' +                                              // 178\n              'You may be seeing this warning due to a third-party PropTypes ' +                                       // 179\n              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',                        // 180\n              propFullName,                                                                                            // 181\n              componentName                                                                                            // 182\n            );                                                                                                         // 183\n            manualPropTypeCallCache[cacheKey] = true;                                                                  // 184\n            manualPropTypeWarningCount++;                                                                              // 185\n          }                                                                                                            // 186\n        }                                                                                                              // 187\n      }                                                                                                                // 188\n      if (props[propName] == null) {                                                                                   // 189\n        if (isRequired) {                                                                                              // 190\n          if (props[propName] === null) {                                                                              // 191\n            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n          }                                                                                                            // 193\n          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n        }                                                                                                              // 195\n        return null;                                                                                                   // 196\n      } else {                                                                                                         // 197\n        return validate(props, propName, componentName, location, propFullName);                                       // 198\n      }                                                                                                                // 199\n    }                                                                                                                  // 200\n                                                                                                                       // 201\n    var chainedCheckType = checkType.bind(null, false);                                                                // 202\n    chainedCheckType.isRequired = checkType.bind(null, true);                                                          // 203\n                                                                                                                       // 204\n    return chainedCheckType;                                                                                           // 205\n  }                                                                                                                    // 206\n                                                                                                                       // 207\n  function createPrimitiveTypeChecker(expectedType) {                                                                  // 208\n    function validate(props, propName, componentName, location, propFullName, secret) {                                // 209\n      var propValue = props[propName];                                                                                 // 210\n      var propType = getPropType(propValue);                                                                           // 211\n      if (propType !== expectedType) {                                                                                 // 212\n        // `propValue` being instance of, say, date/regexp, pass the 'object'                                          // 213\n        // check, but we can offer a more precise error message here rather than                                       // 214\n        // 'of type `object`'.                                                                                         // 215\n        var preciseType = getPreciseType(propValue);                                                                   // 216\n                                                                                                                       // 217\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n      }                                                                                                                // 219\n      return null;                                                                                                     // 220\n    }                                                                                                                  // 221\n    return createChainableTypeChecker(validate);                                                                       // 222\n  }                                                                                                                    // 223\n                                                                                                                       // 224\n  function createAnyTypeChecker() {                                                                                    // 225\n    return createChainableTypeChecker(emptyFunction.thatReturnsNull);                                                  // 226\n  }                                                                                                                    // 227\n                                                                                                                       // 228\n  function createArrayOfTypeChecker(typeChecker) {                                                                     // 229\n    function validate(props, propName, componentName, location, propFullName) {                                        // 230\n      if (typeof typeChecker !== 'function') {                                                                         // 231\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n      }                                                                                                                // 233\n      var propValue = props[propName];                                                                                 // 234\n      if (!Array.isArray(propValue)) {                                                                                 // 235\n        var propType = getPropType(propValue);                                                                         // 236\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n      }                                                                                                                // 238\n      for (var i = 0; i < propValue.length; i++) {                                                                     // 239\n        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n        if (error instanceof Error) {                                                                                  // 241\n          return error;                                                                                                // 242\n        }                                                                                                              // 243\n      }                                                                                                                // 244\n      return null;                                                                                                     // 245\n    }                                                                                                                  // 246\n    return createChainableTypeChecker(validate);                                                                       // 247\n  }                                                                                                                    // 248\n                                                                                                                       // 249\n  function createElementTypeChecker() {                                                                                // 250\n    function validate(props, propName, componentName, location, propFullName) {                                        // 251\n      var propValue = props[propName];                                                                                 // 252\n      if (!isValidElement(propValue)) {                                                                                // 253\n        var propType = getPropType(propValue);                                                                         // 254\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n      }                                                                                                                // 256\n      return null;                                                                                                     // 257\n    }                                                                                                                  // 258\n    return createChainableTypeChecker(validate);                                                                       // 259\n  }                                                                                                                    // 260\n                                                                                                                       // 261\n  function createInstanceTypeChecker(expectedClass) {                                                                  // 262\n    function validate(props, propName, componentName, location, propFullName) {                                        // 263\n      if (!(props[propName] instanceof expectedClass)) {                                                               // 264\n        var expectedClassName = expectedClass.name || ANONYMOUS;                                                       // 265\n        var actualClassName = getClassName(props[propName]);                                                           // 266\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n      }                                                                                                                // 268\n      return null;                                                                                                     // 269\n    }                                                                                                                  // 270\n    return createChainableTypeChecker(validate);                                                                       // 271\n  }                                                                                                                    // 272\n                                                                                                                       // 273\n  function createEnumTypeChecker(expectedValues) {                                                                     // 274\n    if (!Array.isArray(expectedValues)) {                                                                              // 275\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;\n      return emptyFunction.thatReturnsNull;                                                                            // 277\n    }                                                                                                                  // 278\n                                                                                                                       // 279\n    function validate(props, propName, componentName, location, propFullName) {                                        // 280\n      var propValue = props[propName];                                                                                 // 281\n      for (var i = 0; i < expectedValues.length; i++) {                                                                // 282\n        if (is(propValue, expectedValues[i])) {                                                                        // 283\n          return null;                                                                                                 // 284\n        }                                                                                                              // 285\n      }                                                                                                                // 286\n                                                                                                                       // 287\n      var valuesString = JSON.stringify(expectedValues);                                                               // 288\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n    }                                                                                                                  // 290\n    return createChainableTypeChecker(validate);                                                                       // 291\n  }                                                                                                                    // 292\n                                                                                                                       // 293\n  function createObjectOfTypeChecker(typeChecker) {                                                                    // 294\n    function validate(props, propName, componentName, location, propFullName) {                                        // 295\n      if (typeof typeChecker !== 'function') {                                                                         // 296\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n      }                                                                                                                // 298\n      var propValue = props[propName];                                                                                 // 299\n      var propType = getPropType(propValue);                                                                           // 300\n      if (propType !== 'object') {                                                                                     // 301\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n      }                                                                                                                // 303\n      for (var key in propValue) {                                                                                     // 304\n        if (propValue.hasOwnProperty(key)) {                                                                           // 305\n          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n          if (error instanceof Error) {                                                                                // 307\n            return error;                                                                                              // 308\n          }                                                                                                            // 309\n        }                                                                                                              // 310\n      }                                                                                                                // 311\n      return null;                                                                                                     // 312\n    }                                                                                                                  // 313\n    return createChainableTypeChecker(validate);                                                                       // 314\n  }                                                                                                                    // 315\n                                                                                                                       // 316\n  function createUnionTypeChecker(arrayOfTypeCheckers) {                                                               // 317\n    if (!Array.isArray(arrayOfTypeCheckers)) {                                                                         // 318\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;\n      return emptyFunction.thatReturnsNull;                                                                            // 320\n    }                                                                                                                  // 321\n                                                                                                                       // 322\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {                                                             // 323\n      var checker = arrayOfTypeCheckers[i];                                                                            // 324\n      if (typeof checker !== 'function') {                                                                             // 325\n        warning(                                                                                                       // 326\n          false,                                                                                                       // 327\n          'Invalid argument supplid to oneOfType. Expected an array of check functions, but ' +                        // 328\n          'received %s at index %s.',                                                                                  // 329\n          getPostfixForTypeWarning(checker),                                                                           // 330\n          i                                                                                                            // 331\n        );                                                                                                             // 332\n        return emptyFunction.thatReturnsNull;                                                                          // 333\n      }                                                                                                                // 334\n    }                                                                                                                  // 335\n                                                                                                                       // 336\n    function validate(props, propName, componentName, location, propFullName) {                                        // 337\n      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {                                                           // 338\n        var checker = arrayOfTypeCheckers[i];                                                                          // 339\n        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {           // 340\n          return null;                                                                                                 // 341\n        }                                                                                                              // 342\n      }                                                                                                                // 343\n                                                                                                                       // 344\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n    }                                                                                                                  // 346\n    return createChainableTypeChecker(validate);                                                                       // 347\n  }                                                                                                                    // 348\n                                                                                                                       // 349\n  function createNodeChecker() {                                                                                       // 350\n    function validate(props, propName, componentName, location, propFullName) {                                        // 351\n      if (!isNode(props[propName])) {                                                                                  // 352\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n      }                                                                                                                // 354\n      return null;                                                                                                     // 355\n    }                                                                                                                  // 356\n    return createChainableTypeChecker(validate);                                                                       // 357\n  }                                                                                                                    // 358\n                                                                                                                       // 359\n  function createShapeTypeChecker(shapeTypes) {                                                                        // 360\n    function validate(props, propName, componentName, location, propFullName) {                                        // 361\n      var propValue = props[propName];                                                                                 // 362\n      var propType = getPropType(propValue);                                                                           // 363\n      if (propType !== 'object') {                                                                                     // 364\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }                                                                                                                // 366\n      for (var key in shapeTypes) {                                                                                    // 367\n        var checker = shapeTypes[key];                                                                                 // 368\n        if (!checker) {                                                                                                // 369\n          continue;                                                                                                    // 370\n        }                                                                                                              // 371\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);  // 372\n        if (error) {                                                                                                   // 373\n          return error;                                                                                                // 374\n        }                                                                                                              // 375\n      }                                                                                                                // 376\n      return null;                                                                                                     // 377\n    }                                                                                                                  // 378\n    return createChainableTypeChecker(validate);                                                                       // 379\n  }                                                                                                                    // 380\n                                                                                                                       // 381\n  function isNode(propValue) {                                                                                         // 382\n    switch (typeof propValue) {                                                                                        // 383\n      case 'number':                                                                                                   // 384\n      case 'string':                                                                                                   // 385\n      case 'undefined':                                                                                                // 386\n        return true;                                                                                                   // 387\n      case 'boolean':                                                                                                  // 388\n        return !propValue;                                                                                             // 389\n      case 'object':                                                                                                   // 390\n        if (Array.isArray(propValue)) {                                                                                // 391\n          return propValue.every(isNode);                                                                              // 392\n        }                                                                                                              // 393\n        if (propValue === null || isValidElement(propValue)) {                                                         // 394\n          return true;                                                                                                 // 395\n        }                                                                                                              // 396\n                                                                                                                       // 397\n        var iteratorFn = getIteratorFn(propValue);                                                                     // 398\n        if (iteratorFn) {                                                                                              // 399\n          var iterator = iteratorFn.call(propValue);                                                                   // 400\n          var step;                                                                                                    // 401\n          if (iteratorFn !== propValue.entries) {                                                                      // 402\n            while (!(step = iterator.next()).done) {                                                                   // 403\n              if (!isNode(step.value)) {                                                                               // 404\n                return false;                                                                                          // 405\n              }                                                                                                        // 406\n            }                                                                                                          // 407\n          } else {                                                                                                     // 408\n            // Iterator will provide entry [k,v] tuples rather than values.                                            // 409\n            while (!(step = iterator.next()).done) {                                                                   // 410\n              var entry = step.value;                                                                                  // 411\n              if (entry) {                                                                                             // 412\n                if (!isNode(entry[1])) {                                                                               // 413\n                  return false;                                                                                        // 414\n                }                                                                                                      // 415\n              }                                                                                                        // 416\n            }                                                                                                          // 417\n          }                                                                                                            // 418\n        } else {                                                                                                       // 419\n          return false;                                                                                                // 420\n        }                                                                                                              // 421\n                                                                                                                       // 422\n        return true;                                                                                                   // 423\n      default:                                                                                                         // 424\n        return false;                                                                                                  // 425\n    }                                                                                                                  // 426\n  }                                                                                                                    // 427\n                                                                                                                       // 428\n  function isSymbol(propType, propValue) {                                                                             // 429\n    // Native Symbol.                                                                                                  // 430\n    if (propType === 'symbol') {                                                                                       // 431\n      return true;                                                                                                     // 432\n    }                                                                                                                  // 433\n                                                                                                                       // 434\n    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'                                                           // 435\n    if (propValue['@@toStringTag'] === 'Symbol') {                                                                     // 436\n      return true;                                                                                                     // 437\n    }                                                                                                                  // 438\n                                                                                                                       // 439\n    // Fallback for non-spec compliant Symbols which are polyfilled.                                                   // 440\n    if (typeof Symbol === 'function' && propValue instanceof Symbol) {                                                 // 441\n      return true;                                                                                                     // 442\n    }                                                                                                                  // 443\n                                                                                                                       // 444\n    return false;                                                                                                      // 445\n  }                                                                                                                    // 446\n                                                                                                                       // 447\n  // Equivalent of `typeof` but with special handling for array and regexp.                                            // 448\n  function getPropType(propValue) {                                                                                    // 449\n    var propType = typeof propValue;                                                                                   // 450\n    if (Array.isArray(propValue)) {                                                                                    // 451\n      return 'array';                                                                                                  // 452\n    }                                                                                                                  // 453\n    if (propValue instanceof RegExp) {                                                                                 // 454\n      // Old webkits (at least until Android 4.0) return 'function' rather than                                        // 455\n      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/                                         // 456\n      // passes PropTypes.object.                                                                                      // 457\n      return 'object';                                                                                                 // 458\n    }                                                                                                                  // 459\n    if (isSymbol(propType, propValue)) {                                                                               // 460\n      return 'symbol';                                                                                                 // 461\n    }                                                                                                                  // 462\n    return propType;                                                                                                   // 463\n  }                                                                                                                    // 464\n                                                                                                                       // 465\n  // This handles more types than `getPropType`. Only used for error messages.                                         // 466\n  // See `createPrimitiveTypeChecker`.                                                                                 // 467\n  function getPreciseType(propValue) {                                                                                 // 468\n    if (typeof propValue === 'undefined' || propValue === null) {                                                      // 469\n      return '' + propValue;                                                                                           // 470\n    }                                                                                                                  // 471\n    var propType = getPropType(propValue);                                                                             // 472\n    if (propType === 'object') {                                                                                       // 473\n      if (propValue instanceof Date) {                                                                                 // 474\n        return 'date';                                                                                                 // 475\n      } else if (propValue instanceof RegExp) {                                                                        // 476\n        return 'regexp';                                                                                               // 477\n      }                                                                                                                // 478\n    }                                                                                                                  // 479\n    return propType;                                                                                                   // 480\n  }                                                                                                                    // 481\n                                                                                                                       // 482\n  // Returns a string that is postfixed to a warning about an invalid type.                                            // 483\n  // For example, \"undefined\" or \"of type array\"                                                                       // 484\n  function getPostfixForTypeWarning(value) {                                                                           // 485\n    var type = getPreciseType(value);                                                                                  // 486\n    switch (type) {                                                                                                    // 487\n      case 'array':                                                                                                    // 488\n      case 'object':                                                                                                   // 489\n        return 'an ' + type;                                                                                           // 490\n      case 'boolean':                                                                                                  // 491\n      case 'date':                                                                                                     // 492\n      case 'regexp':                                                                                                   // 493\n        return 'a ' + type;                                                                                            // 494\n      default:                                                                                                         // 495\n        return type;                                                                                                   // 496\n    }                                                                                                                  // 497\n  }                                                                                                                    // 498\n                                                                                                                       // 499\n  // Returns class name of the object, if any.                                                                         // 500\n  function getClassName(propValue) {                                                                                   // 501\n    if (!propValue.constructor || !propValue.constructor.name) {                                                       // 502\n      return ANONYMOUS;                                                                                                // 503\n    }                                                                                                                  // 504\n    return propValue.constructor.name;                                                                                 // 505\n  }                                                                                                                    // 506\n                                                                                                                       // 507\n  ReactPropTypes.checkPropTypes = checkPropTypes;                                                                      // 508\n  ReactPropTypes.PropTypes = ReactPropTypes;                                                                           // 509\n                                                                                                                       // 510\n  return ReactPropTypes;                                                                                               // 511\n};                                                                                                                     // 512\n                                                                                                                       // 513\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"ReactPropTypesSecret.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/prop-types/lib/ReactPropTypesSecret.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n'use strict';                                                                                                          // 10\n                                                                                                                       // 11\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';                                             // 12\n                                                                                                                       // 13\nmodule.exports = ReactPropTypesSecret;                                                                                 // 14\n                                                                                                                       // 15\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"checkPropTypes.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/prop-types/checkPropTypes.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n'use strict';                                                                                                          // 10\n                                                                                                                       // 11\nif (process.env.NODE_ENV !== 'production') {                                                                           // 12\n  var invariant = require('fbjs/lib/invariant');                                                                       // 13\n  var warning = require('fbjs/lib/warning');                                                                           // 14\n  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');                                                    // 15\n  var loggedTypeFailures = {};                                                                                         // 16\n}                                                                                                                      // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * Assert that the values match with the type specs.                                                                   // 20\n * Error messages are memorized and will only be shown once.                                                           // 21\n *                                                                                                                     // 22\n * @param {object} typeSpecs Map of name to a ReactPropType                                                            // 23\n * @param {object} values Runtime values that need to be type-checked                                                  // 24\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"                                                    // 25\n * @param {string} componentName Name of the component for error messages.                                             // 26\n * @param {?Function} getStack Returns the component stack.                                                            // 27\n * @private                                                                                                            // 28\n */                                                                                                                    // 29\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {                                        // 30\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 31\n    for (var typeSpecName in typeSpecs) {                                                                              // 32\n      if (typeSpecs.hasOwnProperty(typeSpecName)) {                                                                    // 33\n        var error;                                                                                                     // 34\n        // Prop type validation may throw. In case they do, we don't want to                                           // 35\n        // fail the render phase where it didn't fail before. So we log it.                                            // 36\n        // After these have been cleaned up, we'll let them throw.                                                     // 37\n        try {                                                                                                          // 38\n          // This is intentionally an invariant that gets caught. It's the same                                        // 39\n          // behavior as without this statement except with a better message.                                          // 40\n          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);  // 42\n        } catch (ex) {                                                                                                 // 43\n          error = ex;                                                                                                  // 44\n        }                                                                                                              // 45\n        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {                                        // 47\n          // Only monitor this failure once because there tends to be a lot of the                                     // 48\n          // same error.                                                                                               // 49\n          loggedTypeFailures[error.message] = true;                                                                    // 50\n                                                                                                                       // 51\n          var stack = getStack ? getStack() : '';                                                                      // 52\n                                                                                                                       // 53\n          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');                 // 54\n        }                                                                                                              // 55\n      }                                                                                                                // 56\n    }                                                                                                                  // 57\n  }                                                                                                                    // 58\n}                                                                                                                      // 59\n                                                                                                                       // 60\nmodule.exports = checkPropTypes;                                                                                       // 61\n                                                                                                                       // 62\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"create-react-class\":{\"factory.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/create-react-class/factory.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _assign = require('object-assign');                                                                                // 13\n                                                                                                                       // 14\nvar emptyObject = require('fbjs/lib/emptyObject');                                                                     // 15\nvar _invariant = require('fbjs/lib/invariant');                                                                        // 16\n                                                                                                                       // 17\nif (process.env.NODE_ENV !== 'production') {                                                                           // 18\n  var warning = require('fbjs/lib/warning');                                                                           // 19\n}                                                                                                                      // 20\n                                                                                                                       // 21\nvar MIXINS_KEY = 'mixins';                                                                                             // 22\n                                                                                                                       // 23\n// Helper function to allow the creation of anonymous functions which do not                                           // 24\n// have .name set to the name of the variable being assigned to.                                                       // 25\nfunction identity(fn) {                                                                                                // 26\n  return fn;                                                                                                           // 27\n}                                                                                                                      // 28\n                                                                                                                       // 29\nvar ReactPropTypeLocationNames;                                                                                        // 30\nif (process.env.NODE_ENV !== 'production') {                                                                           // 31\n  ReactPropTypeLocationNames = {                                                                                       // 32\n    prop: 'prop',                                                                                                      // 33\n    context: 'context',                                                                                                // 34\n    childContext: 'child context'                                                                                      // 35\n  };                                                                                                                   // 36\n} else {                                                                                                               // 37\n  ReactPropTypeLocationNames = {};                                                                                     // 38\n}                                                                                                                      // 39\n                                                                                                                       // 40\nfunction factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {                                               // 41\n  /**                                                                                                                  // 42\n   * Policies that describe methods in `ReactClassInterface`.                                                          // 43\n   */                                                                                                                  // 44\n                                                                                                                       // 45\n  var injectedMixins = [];                                                                                             // 46\n                                                                                                                       // 47\n  /**                                                                                                                  // 48\n   * Composite components are higher-level components that compose other composite                                     // 49\n   * or host components.                                                                                               // 50\n   *                                                                                                                   // 51\n   * To create a new type of `ReactClass`, pass a specification of                                                     // 52\n   * your new class to `React.createClass`. The only requirement of your class                                         // 53\n   * specification is that you implement a `render` method.                                                            // 54\n   *                                                                                                                   // 55\n   *   var MyComponent = React.createClass({                                                                           // 56\n   *     render: function() {                                                                                          // 57\n   *       return <div>Hello World</div>;                                                                              // 58\n   *     }                                                                                                             // 59\n   *   });                                                                                                             // 60\n   *                                                                                                                   // 61\n   * The class specification supports a specific protocol of methods that have                                         // 62\n   * special meaning (e.g. `render`). See `ReactClassInterface` for                                                    // 63\n   * more the comprehensive protocol. Any other properties and methods in the                                          // 64\n   * class specification will be available on the prototype.                                                           // 65\n   *                                                                                                                   // 66\n   * @interface ReactClassInterface                                                                                    // 67\n   * @internal                                                                                                         // 68\n   */                                                                                                                  // 69\n  var ReactClassInterface = {                                                                                          // 70\n    /**                                                                                                                // 71\n     * An array of Mixin objects to include when defining your component.                                              // 72\n     *                                                                                                                 // 73\n     * @type {array}                                                                                                   // 74\n     * @optional                                                                                                       // 75\n     */                                                                                                                // 76\n    mixins: 'DEFINE_MANY',                                                                                             // 77\n                                                                                                                       // 78\n    /**                                                                                                                // 79\n     * An object containing properties and methods that should be defined on                                           // 80\n     * the component's constructor instead of its prototype (static methods).                                          // 81\n     *                                                                                                                 // 82\n     * @type {object}                                                                                                  // 83\n     * @optional                                                                                                       // 84\n     */                                                                                                                // 85\n    statics: 'DEFINE_MANY',                                                                                            // 86\n                                                                                                                       // 87\n    /**                                                                                                                // 88\n     * Definition of prop types for this component.                                                                    // 89\n     *                                                                                                                 // 90\n     * @type {object}                                                                                                  // 91\n     * @optional                                                                                                       // 92\n     */                                                                                                                // 93\n    propTypes: 'DEFINE_MANY',                                                                                          // 94\n                                                                                                                       // 95\n    /**                                                                                                                // 96\n     * Definition of context types for this component.                                                                 // 97\n     *                                                                                                                 // 98\n     * @type {object}                                                                                                  // 99\n     * @optional                                                                                                       // 100\n     */                                                                                                                // 101\n    contextTypes: 'DEFINE_MANY',                                                                                       // 102\n                                                                                                                       // 103\n    /**                                                                                                                // 104\n     * Definition of context types this component sets for its children.                                               // 105\n     *                                                                                                                 // 106\n     * @type {object}                                                                                                  // 107\n     * @optional                                                                                                       // 108\n     */                                                                                                                // 109\n    childContextTypes: 'DEFINE_MANY',                                                                                  // 110\n                                                                                                                       // 111\n    // ==== Definition methods ====                                                                                    // 112\n                                                                                                                       // 113\n    /**                                                                                                                // 114\n     * Invoked when the component is mounted. Values in the mapping will be set on                                     // 115\n     * `this.props` if that prop is not specified (i.e. using an `in` check).                                          // 116\n     *                                                                                                                 // 117\n     * This method is invoked before `getInitialState` and therefore cannot rely                                       // 118\n     * on `this.state` or use `this.setState`.                                                                         // 119\n     *                                                                                                                 // 120\n     * @return {object}                                                                                                // 121\n     * @optional                                                                                                       // 122\n     */                                                                                                                // 123\n    getDefaultProps: 'DEFINE_MANY_MERGED',                                                                             // 124\n                                                                                                                       // 125\n    /**                                                                                                                // 126\n     * Invoked once before the component is mounted. The return value will be used                                     // 127\n     * as the initial value of `this.state`.                                                                           // 128\n     *                                                                                                                 // 129\n     *   getInitialState: function() {                                                                                 // 130\n     *     return {                                                                                                    // 131\n     *       isOn: false,                                                                                              // 132\n     *       fooBaz: new BazFoo()                                                                                      // 133\n     *     }                                                                                                           // 134\n     *   }                                                                                                             // 135\n     *                                                                                                                 // 136\n     * @return {object}                                                                                                // 137\n     * @optional                                                                                                       // 138\n     */                                                                                                                // 139\n    getInitialState: 'DEFINE_MANY_MERGED',                                                                             // 140\n                                                                                                                       // 141\n    /**                                                                                                                // 142\n     * @return {object}                                                                                                // 143\n     * @optional                                                                                                       // 144\n     */                                                                                                                // 145\n    getChildContext: 'DEFINE_MANY_MERGED',                                                                             // 146\n                                                                                                                       // 147\n    /**                                                                                                                // 148\n     * Uses props from `this.props` and state from `this.state` to render the                                          // 149\n     * structure of the component.                                                                                     // 150\n     *                                                                                                                 // 151\n     * No guarantees are made about when or how often this method is invoked, so                                       // 152\n     * it must not have side effects.                                                                                  // 153\n     *                                                                                                                 // 154\n     *   render: function() {                                                                                          // 155\n     *     var name = this.props.name;                                                                                 // 156\n     *     return <div>Hello, {name}!</div>;                                                                           // 157\n     *   }                                                                                                             // 158\n     *                                                                                                                 // 159\n     * @return {ReactComponent}                                                                                        // 160\n     * @required                                                                                                       // 161\n     */                                                                                                                // 162\n    render: 'DEFINE_ONCE',                                                                                             // 163\n                                                                                                                       // 164\n    // ==== Delegate methods ====                                                                                      // 165\n                                                                                                                       // 166\n    /**                                                                                                                // 167\n     * Invoked when the component is initially created and about to be mounted.                                        // 168\n     * This may have side effects, but any external subscriptions or data created                                      // 169\n     * by this method must be cleaned up in `componentWillUnmount`.                                                    // 170\n     *                                                                                                                 // 171\n     * @optional                                                                                                       // 172\n     */                                                                                                                // 173\n    componentWillMount: 'DEFINE_MANY',                                                                                 // 174\n                                                                                                                       // 175\n    /**                                                                                                                // 176\n     * Invoked when the component has been mounted and has a DOM representation.                                       // 177\n     * However, there is no guarantee that the DOM node is in the document.                                            // 178\n     *                                                                                                                 // 179\n     * Use this as an opportunity to operate on the DOM when the component has                                         // 180\n     * been mounted (initialized and rendered) for the first time.                                                     // 181\n     *                                                                                                                 // 182\n     * @param {DOMElement} rootNode DOM element representing the component.                                            // 183\n     * @optional                                                                                                       // 184\n     */                                                                                                                // 185\n    componentDidMount: 'DEFINE_MANY',                                                                                  // 186\n                                                                                                                       // 187\n    /**                                                                                                                // 188\n     * Invoked before the component receives new props.                                                                // 189\n     *                                                                                                                 // 190\n     * Use this as an opportunity to react to a prop transition by updating the                                        // 191\n     * state using `this.setState`. Current props are accessed via `this.props`.                                       // 192\n     *                                                                                                                 // 193\n     *   componentWillReceiveProps: function(nextProps, nextContext) {                                                 // 194\n     *     this.setState({                                                                                             // 195\n     *       likesIncreasing: nextProps.likeCount > this.props.likeCount                                               // 196\n     *     });                                                                                                         // 197\n     *   }                                                                                                             // 198\n     *                                                                                                                 // 199\n     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop                                      // 200\n     * transition may cause a state change, but the opposite is not true. If you                                       // 201\n     * need it, you are probably looking for `componentWillUpdate`.                                                    // 202\n     *                                                                                                                 // 203\n     * @param {object} nextProps                                                                                       // 204\n     * @optional                                                                                                       // 205\n     */                                                                                                                // 206\n    componentWillReceiveProps: 'DEFINE_MANY',                                                                          // 207\n                                                                                                                       // 208\n    /**                                                                                                                // 209\n     * Invoked while deciding if the component should be updated as a result of                                        // 210\n     * receiving new props, state and/or context.                                                                      // 211\n     *                                                                                                                 // 212\n     * Use this as an opportunity to `return false` when you're certain that the                                       // 213\n     * transition to the new props/state/context will not require a component                                          // 214\n     * update.                                                                                                         // 215\n     *                                                                                                                 // 216\n     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {                                          // 217\n     *     return !equal(nextProps, this.props) ||                                                                     // 218\n     *       !equal(nextState, this.state) ||                                                                          // 219\n     *       !equal(nextContext, this.context);                                                                        // 220\n     *   }                                                                                                             // 221\n     *                                                                                                                 // 222\n     * @param {object} nextProps                                                                                       // 223\n     * @param {?object} nextState                                                                                      // 224\n     * @param {?object} nextContext                                                                                    // 225\n     * @return {boolean} True if the component should update.                                                          // 226\n     * @optional                                                                                                       // 227\n     */                                                                                                                // 228\n    shouldComponentUpdate: 'DEFINE_ONCE',                                                                              // 229\n                                                                                                                       // 230\n    /**                                                                                                                // 231\n     * Invoked when the component is about to update due to a transition from                                          // 232\n     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`                                       // 233\n     * and `nextContext`.                                                                                              // 234\n     *                                                                                                                 // 235\n     * Use this as an opportunity to perform preparation before an update occurs.                                      // 236\n     *                                                                                                                 // 237\n     * NOTE: You **cannot** use `this.setState()` in this method.                                                      // 238\n     *                                                                                                                 // 239\n     * @param {object} nextProps                                                                                       // 240\n     * @param {?object} nextState                                                                                      // 241\n     * @param {?object} nextContext                                                                                    // 242\n     * @param {ReactReconcileTransaction} transaction                                                                  // 243\n     * @optional                                                                                                       // 244\n     */                                                                                                                // 245\n    componentWillUpdate: 'DEFINE_MANY',                                                                                // 246\n                                                                                                                       // 247\n    /**                                                                                                                // 248\n     * Invoked when the component's DOM representation has been updated.                                               // 249\n     *                                                                                                                 // 250\n     * Use this as an opportunity to operate on the DOM when the component has                                         // 251\n     * been updated.                                                                                                   // 252\n     *                                                                                                                 // 253\n     * @param {object} prevProps                                                                                       // 254\n     * @param {?object} prevState                                                                                      // 255\n     * @param {?object} prevContext                                                                                    // 256\n     * @param {DOMElement} rootNode DOM element representing the component.                                            // 257\n     * @optional                                                                                                       // 258\n     */                                                                                                                // 259\n    componentDidUpdate: 'DEFINE_MANY',                                                                                 // 260\n                                                                                                                       // 261\n    /**                                                                                                                // 262\n     * Invoked when the component is about to be removed from its parent and have                                      // 263\n     * its DOM representation destroyed.                                                                               // 264\n     *                                                                                                                 // 265\n     * Use this as an opportunity to deallocate any external resources.                                                // 266\n     *                                                                                                                 // 267\n     * NOTE: There is no `componentDidUnmount` since your component will have been                                     // 268\n     * destroyed by that point.                                                                                        // 269\n     *                                                                                                                 // 270\n     * @optional                                                                                                       // 271\n     */                                                                                                                // 272\n    componentWillUnmount: 'DEFINE_MANY',                                                                               // 273\n                                                                                                                       // 274\n    // ==== Advanced methods ====                                                                                      // 275\n                                                                                                                       // 276\n    /**                                                                                                                // 277\n     * Updates the component's currently mounted DOM representation.                                                   // 278\n     *                                                                                                                 // 279\n     * By default, this implements React's rendering and reconciliation algorithm.                                     // 280\n     * Sophisticated clients may wish to override this.                                                                // 281\n     *                                                                                                                 // 282\n     * @param {ReactReconcileTransaction} transaction                                                                  // 283\n     * @internal                                                                                                       // 284\n     * @overridable                                                                                                    // 285\n     */                                                                                                                // 286\n    updateComponent: 'OVERRIDE_BASE'                                                                                   // 287\n  };                                                                                                                   // 288\n                                                                                                                       // 289\n  /**                                                                                                                  // 290\n   * Mapping from class specification keys to special processing functions.                                            // 291\n   *                                                                                                                   // 292\n   * Although these are declared like instance properties in the specification                                         // 293\n   * when defining classes using `React.createClass`, they are actually static                                         // 294\n   * and are accessible on the constructor instead of the prototype. Despite                                           // 295\n   * being static, they must be defined outside of the \"statics\" key under                                             // 296\n   * which all other static methods are defined.                                                                       // 297\n   */                                                                                                                  // 298\n  var RESERVED_SPEC_KEYS = {                                                                                           // 299\n    displayName: function(Constructor, displayName) {                                                                  // 300\n      Constructor.displayName = displayName;                                                                           // 301\n    },                                                                                                                 // 302\n    mixins: function(Constructor, mixins) {                                                                            // 303\n      if (mixins) {                                                                                                    // 304\n        for (var i = 0; i < mixins.length; i++) {                                                                      // 305\n          mixSpecIntoComponent(Constructor, mixins[i]);                                                                // 306\n        }                                                                                                              // 307\n      }                                                                                                                // 308\n    },                                                                                                                 // 309\n    childContextTypes: function(Constructor, childContextTypes) {                                                      // 310\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 311\n        validateTypeDef(Constructor, childContextTypes, 'childContext');                                               // 312\n      }                                                                                                                // 313\n      Constructor.childContextTypes = _assign(                                                                         // 314\n        {},                                                                                                            // 315\n        Constructor.childContextTypes,                                                                                 // 316\n        childContextTypes                                                                                              // 317\n      );                                                                                                               // 318\n    },                                                                                                                 // 319\n    contextTypes: function(Constructor, contextTypes) {                                                                // 320\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 321\n        validateTypeDef(Constructor, contextTypes, 'context');                                                         // 322\n      }                                                                                                                // 323\n      Constructor.contextTypes = _assign(                                                                              // 324\n        {},                                                                                                            // 325\n        Constructor.contextTypes,                                                                                      // 326\n        contextTypes                                                                                                   // 327\n      );                                                                                                               // 328\n    },                                                                                                                 // 329\n    /**                                                                                                                // 330\n     * Special case getDefaultProps which should move into statics but requires                                        // 331\n     * automatic merging.                                                                                              // 332\n     */                                                                                                                // 333\n    getDefaultProps: function(Constructor, getDefaultProps) {                                                          // 334\n      if (Constructor.getDefaultProps) {                                                                               // 335\n        Constructor.getDefaultProps = createMergedResultFunction(                                                      // 336\n          Constructor.getDefaultProps,                                                                                 // 337\n          getDefaultProps                                                                                              // 338\n        );                                                                                                             // 339\n      } else {                                                                                                         // 340\n        Constructor.getDefaultProps = getDefaultProps;                                                                 // 341\n      }                                                                                                                // 342\n    },                                                                                                                 // 343\n    propTypes: function(Constructor, propTypes) {                                                                      // 344\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 345\n        validateTypeDef(Constructor, propTypes, 'prop');                                                               // 346\n      }                                                                                                                // 347\n      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);                                           // 348\n    },                                                                                                                 // 349\n    statics: function(Constructor, statics) {                                                                          // 350\n      mixStaticSpecIntoComponent(Constructor, statics);                                                                // 351\n    },                                                                                                                 // 352\n    autobind: function() {}                                                                                            // 353\n  };                                                                                                                   // 354\n                                                                                                                       // 355\n  function validateTypeDef(Constructor, typeDef, location) {                                                           // 356\n    for (var propName in typeDef) {                                                                                    // 357\n      if (typeDef.hasOwnProperty(propName)) {                                                                          // 358\n        // use a warning instead of an _invariant so components                                                        // 359\n        // don't show up in prod but only in __DEV__                                                                   // 360\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 361\n          warning(                                                                                                     // 362\n            typeof typeDef[propName] === 'function',                                                                   // 363\n            '%s: %s type `%s` is invalid; it must be a function, usually from ' +                                      // 364\n              'React.PropTypes.',                                                                                      // 365\n            Constructor.displayName || 'ReactClass',                                                                   // 366\n            ReactPropTypeLocationNames[location],                                                                      // 367\n            propName                                                                                                   // 368\n          );                                                                                                           // 369\n        }                                                                                                              // 370\n      }                                                                                                                // 371\n    }                                                                                                                  // 372\n  }                                                                                                                    // 373\n                                                                                                                       // 374\n  function validateMethodOverride(isAlreadyDefined, name) {                                                            // 375\n    var specPolicy = ReactClassInterface.hasOwnProperty(name)                                                          // 376\n      ? ReactClassInterface[name]                                                                                      // 377\n      : null;                                                                                                          // 378\n                                                                                                                       // 379\n    // Disallow overriding of base class methods unless explicitly allowed.                                            // 380\n    if (ReactClassMixin.hasOwnProperty(name)) {                                                                        // 381\n      _invariant(                                                                                                      // 382\n        specPolicy === 'OVERRIDE_BASE',                                                                                // 383\n        'ReactClassInterface: You are attempting to override ' +                                                       // 384\n          '`%s` from your class specification. Ensure that your method names ' +                                       // 385\n          'do not overlap with React methods.',                                                                        // 386\n        name                                                                                                           // 387\n      );                                                                                                               // 388\n    }                                                                                                                  // 389\n                                                                                                                       // 390\n    // Disallow defining methods more than once unless explicitly allowed.                                             // 391\n    if (isAlreadyDefined) {                                                                                            // 392\n      _invariant(                                                                                                      // 393\n        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',                                           // 394\n        'ReactClassInterface: You are attempting to define ' +                                                         // 395\n          '`%s` on your component more than once. This conflict may be due ' +                                         // 396\n          'to a mixin.',                                                                                               // 397\n        name                                                                                                           // 398\n      );                                                                                                               // 399\n    }                                                                                                                  // 400\n  }                                                                                                                    // 401\n                                                                                                                       // 402\n  /**                                                                                                                  // 403\n   * Mixin helper which handles policy validation and reserved                                                         // 404\n   * specification keys when building React classes.                                                                   // 405\n   */                                                                                                                  // 406\n  function mixSpecIntoComponent(Constructor, spec) {                                                                   // 407\n    if (!spec) {                                                                                                       // 408\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 409\n        var typeofSpec = typeof spec;                                                                                  // 410\n        var isMixinValid = typeofSpec === 'object' && spec !== null;                                                   // 411\n                                                                                                                       // 412\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 413\n          warning(                                                                                                     // 414\n            isMixinValid,                                                                                              // 415\n            \"%s: You're attempting to include a mixin that is either null \" +                                          // 416\n              'or not an object. Check the mixins included by the component, ' +                                       // 417\n              'as well as any mixins they include themselves. ' +                                                      // 418\n              'Expected object but got %s.',                                                                           // 419\n            Constructor.displayName || 'ReactClass',                                                                   // 420\n            spec === null ? null : typeofSpec                                                                          // 421\n          );                                                                                                           // 422\n        }                                                                                                              // 423\n      }                                                                                                                // 424\n                                                                                                                       // 425\n      return;                                                                                                          // 426\n    }                                                                                                                  // 427\n                                                                                                                       // 428\n    _invariant(                                                                                                        // 429\n      typeof spec !== 'function',                                                                                      // 430\n      \"ReactClass: You're attempting to \" +                                                                            // 431\n        'use a component class or function as a mixin. Instead, just use a ' +                                         // 432\n        'regular object.'                                                                                              // 433\n    );                                                                                                                 // 434\n    _invariant(                                                                                                        // 435\n      !isValidElement(spec),                                                                                           // 436\n      \"ReactClass: You're attempting to \" +                                                                            // 437\n        'use a component as a mixin. Instead, just use a regular object.'                                              // 438\n    );                                                                                                                 // 439\n                                                                                                                       // 440\n    var proto = Constructor.prototype;                                                                                 // 441\n    var autoBindPairs = proto.__reactAutoBindPairs;                                                                    // 442\n                                                                                                                       // 443\n    // By handling mixins before any other properties, we ensure the same                                              // 444\n    // chaining order is applied to methods with DEFINE_MANY policy, whether                                           // 445\n    // mixins are listed before or after these methods in the spec.                                                    // 446\n    if (spec.hasOwnProperty(MIXINS_KEY)) {                                                                             // 447\n      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);                                                             // 448\n    }                                                                                                                  // 449\n                                                                                                                       // 450\n    for (var name in spec) {                                                                                           // 451\n      if (!spec.hasOwnProperty(name)) {                                                                                // 452\n        continue;                                                                                                      // 453\n      }                                                                                                                // 454\n                                                                                                                       // 455\n      if (name === MIXINS_KEY) {                                                                                       // 456\n        // We have already handled mixins in a special case above.                                                     // 457\n        continue;                                                                                                      // 458\n      }                                                                                                                // 459\n                                                                                                                       // 460\n      var property = spec[name];                                                                                       // 461\n      var isAlreadyDefined = proto.hasOwnProperty(name);                                                               // 462\n      validateMethodOverride(isAlreadyDefined, name);                                                                  // 463\n                                                                                                                       // 464\n      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {                                                                   // 465\n        RESERVED_SPEC_KEYS[name](Constructor, property);                                                               // 466\n      } else {                                                                                                         // 467\n        // Setup methods on prototype:                                                                                 // 468\n        // The following member methods should not be automatically bound:                                             // 469\n        // 1. Expected ReactClass methods (in the \"interface\").                                                        // 470\n        // 2. Overridden methods (that were mixed in).                                                                 // 471\n        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);                                             // 472\n        var isFunction = typeof property === 'function';                                                               // 473\n        var shouldAutoBind =                                                                                           // 474\n          isFunction &&                                                                                                // 475\n          !isReactClassMethod &&                                                                                       // 476\n          !isAlreadyDefined &&                                                                                         // 477\n          spec.autobind !== false;                                                                                     // 478\n                                                                                                                       // 479\n        if (shouldAutoBind) {                                                                                          // 480\n          autoBindPairs.push(name, property);                                                                          // 481\n          proto[name] = property;                                                                                      // 482\n        } else {                                                                                                       // 483\n          if (isAlreadyDefined) {                                                                                      // 484\n            var specPolicy = ReactClassInterface[name];                                                                // 485\n                                                                                                                       // 486\n            // These cases should already be caught by validateMethodOverride.                                         // 487\n            _invariant(                                                                                                // 488\n              isReactClassMethod &&                                                                                    // 489\n                (specPolicy === 'DEFINE_MANY_MERGED' ||                                                                // 490\n                  specPolicy === 'DEFINE_MANY'),                                                                       // 491\n              'ReactClass: Unexpected spec policy %s for key %s ' +                                                    // 492\n                'when mixing in component specs.',                                                                     // 493\n              specPolicy,                                                                                              // 494\n              name                                                                                                     // 495\n            );                                                                                                         // 496\n                                                                                                                       // 497\n            // For methods which are defined more than once, call the existing                                         // 498\n            // methods before calling the new property, merging if appropriate.                                        // 499\n            if (specPolicy === 'DEFINE_MANY_MERGED') {                                                                 // 500\n              proto[name] = createMergedResultFunction(proto[name], property);                                         // 501\n            } else if (specPolicy === 'DEFINE_MANY') {                                                                 // 502\n              proto[name] = createChainedFunction(proto[name], property);                                              // 503\n            }                                                                                                          // 504\n          } else {                                                                                                     // 505\n            proto[name] = property;                                                                                    // 506\n            if (process.env.NODE_ENV !== 'production') {                                                               // 507\n              // Add verbose displayName to the function, which helps when looking                                     // 508\n              // at profiling tools.                                                                                   // 509\n              if (typeof property === 'function' && spec.displayName) {                                                // 510\n                proto[name].displayName = spec.displayName + '_' + name;                                               // 511\n              }                                                                                                        // 512\n            }                                                                                                          // 513\n          }                                                                                                            // 514\n        }                                                                                                              // 515\n      }                                                                                                                // 516\n    }                                                                                                                  // 517\n  }                                                                                                                    // 518\n                                                                                                                       // 519\n  function mixStaticSpecIntoComponent(Constructor, statics) {                                                          // 520\n    if (!statics) {                                                                                                    // 521\n      return;                                                                                                          // 522\n    }                                                                                                                  // 523\n    for (var name in statics) {                                                                                        // 524\n      var property = statics[name];                                                                                    // 525\n      if (!statics.hasOwnProperty(name)) {                                                                             // 526\n        continue;                                                                                                      // 527\n      }                                                                                                                // 528\n                                                                                                                       // 529\n      var isReserved = name in RESERVED_SPEC_KEYS;                                                                     // 530\n      _invariant(                                                                                                      // 531\n        !isReserved,                                                                                                   // 532\n        'ReactClass: You are attempting to define a reserved ' +                                                       // 533\n          'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' +                                      // 534\n          'as an instance property instead; it will still be accessible on the ' +                                     // 535\n          'constructor.',                                                                                              // 536\n        name                                                                                                           // 537\n      );                                                                                                               // 538\n                                                                                                                       // 539\n      var isInherited = name in Constructor;                                                                           // 540\n      _invariant(                                                                                                      // 541\n        !isInherited,                                                                                                  // 542\n        'ReactClass: You are attempting to define ' +                                                                  // 543\n          '`%s` on your component more than once. This conflict may be ' +                                             // 544\n          'due to a mixin.',                                                                                           // 545\n        name                                                                                                           // 546\n      );                                                                                                               // 547\n      Constructor[name] = property;                                                                                    // 548\n    }                                                                                                                  // 549\n  }                                                                                                                    // 550\n                                                                                                                       // 551\n  /**                                                                                                                  // 552\n   * Merge two objects, but throw if both contain the same key.                                                        // 553\n   *                                                                                                                   // 554\n   * @param {object} one The first object, which is mutated.                                                           // 555\n   * @param {object} two The second object                                                                             // 556\n   * @return {object} one after it has been mutated to contain everything in two.                                      // 557\n   */                                                                                                                  // 558\n  function mergeIntoWithNoDuplicateKeys(one, two) {                                                                    // 559\n    _invariant(                                                                                                        // 560\n      one && two && typeof one === 'object' && typeof two === 'object',                                                // 561\n      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'                                                      // 562\n    );                                                                                                                 // 563\n                                                                                                                       // 564\n    for (var key in two) {                                                                                             // 565\n      if (two.hasOwnProperty(key)) {                                                                                   // 566\n        _invariant(                                                                                                    // 567\n          one[key] === undefined,                                                                                      // 568\n          'mergeIntoWithNoDuplicateKeys(): ' +                                                                         // 569\n            'Tried to merge two objects with the same key: `%s`. This conflict ' +                                     // 570\n            'may be due to a mixin; in particular, this may be caused by two ' +                                       // 571\n            'getInitialState() or getDefaultProps() methods returning objects ' +                                      // 572\n            'with clashing keys.',                                                                                     // 573\n          key                                                                                                          // 574\n        );                                                                                                             // 575\n        one[key] = two[key];                                                                                           // 576\n      }                                                                                                                // 577\n    }                                                                                                                  // 578\n    return one;                                                                                                        // 579\n  }                                                                                                                    // 580\n                                                                                                                       // 581\n  /**                                                                                                                  // 582\n   * Creates a function that invokes two functions and merges their return values.                                     // 583\n   *                                                                                                                   // 584\n   * @param {function} one Function to invoke first.                                                                   // 585\n   * @param {function} two Function to invoke second.                                                                  // 586\n   * @return {function} Function that invokes the two argument functions.                                              // 587\n   * @private                                                                                                          // 588\n   */                                                                                                                  // 589\n  function createMergedResultFunction(one, two) {                                                                      // 590\n    return function mergedResult() {                                                                                   // 591\n      var a = one.apply(this, arguments);                                                                              // 592\n      var b = two.apply(this, arguments);                                                                              // 593\n      if (a == null) {                                                                                                 // 594\n        return b;                                                                                                      // 595\n      } else if (b == null) {                                                                                          // 596\n        return a;                                                                                                      // 597\n      }                                                                                                                // 598\n      var c = {};                                                                                                      // 599\n      mergeIntoWithNoDuplicateKeys(c, a);                                                                              // 600\n      mergeIntoWithNoDuplicateKeys(c, b);                                                                              // 601\n      return c;                                                                                                        // 602\n    };                                                                                                                 // 603\n  }                                                                                                                    // 604\n                                                                                                                       // 605\n  /**                                                                                                                  // 606\n   * Creates a function that invokes two functions and ignores their return vales.                                     // 607\n   *                                                                                                                   // 608\n   * @param {function} one Function to invoke first.                                                                   // 609\n   * @param {function} two Function to invoke second.                                                                  // 610\n   * @return {function} Function that invokes the two argument functions.                                              // 611\n   * @private                                                                                                          // 612\n   */                                                                                                                  // 613\n  function createChainedFunction(one, two) {                                                                           // 614\n    return function chainedFunction() {                                                                                // 615\n      one.apply(this, arguments);                                                                                      // 616\n      two.apply(this, arguments);                                                                                      // 617\n    };                                                                                                                 // 618\n  }                                                                                                                    // 619\n                                                                                                                       // 620\n  /**                                                                                                                  // 621\n   * Binds a method to the component.                                                                                  // 622\n   *                                                                                                                   // 623\n   * @param {object} component Component whose method is going to be bound.                                            // 624\n   * @param {function} method Method to be bound.                                                                      // 625\n   * @return {function} The bound method.                                                                              // 626\n   */                                                                                                                  // 627\n  function bindAutoBindMethod(component, method) {                                                                     // 628\n    var boundMethod = method.bind(component);                                                                          // 629\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 630\n      boundMethod.__reactBoundContext = component;                                                                     // 631\n      boundMethod.__reactBoundMethod = method;                                                                         // 632\n      boundMethod.__reactBoundArguments = null;                                                                        // 633\n      var componentName = component.constructor.displayName;                                                           // 634\n      var _bind = boundMethod.bind;                                                                                    // 635\n      boundMethod.bind = function(newThis) {                                                                           // 636\n        for (                                                                                                          // 637\n          var _len = arguments.length,                                                                                 // 638\n            args = Array(_len > 1 ? _len - 1 : 0),                                                                     // 639\n            _key = 1;                                                                                                  // 640\n          _key < _len;                                                                                                 // 641\n          _key++                                                                                                       // 642\n        ) {                                                                                                            // 643\n          args[_key - 1] = arguments[_key];                                                                            // 644\n        }                                                                                                              // 645\n                                                                                                                       // 646\n        // User is trying to bind() an autobound method; we effectively will                                           // 647\n        // ignore the value of \"this\" that the user is trying to use, so                                               // 648\n        // let's warn.                                                                                                 // 649\n        if (newThis !== component && newThis !== null) {                                                               // 650\n          if (process.env.NODE_ENV !== 'production') {                                                                 // 651\n            warning(                                                                                                   // 652\n              false,                                                                                                   // 653\n              'bind(): React component methods may only be bound to the ' +                                            // 654\n                'component instance. See %s',                                                                          // 655\n              componentName                                                                                            // 656\n            );                                                                                                         // 657\n          }                                                                                                            // 658\n        } else if (!args.length) {                                                                                     // 659\n          if (process.env.NODE_ENV !== 'production') {                                                                 // 660\n            warning(                                                                                                   // 661\n              false,                                                                                                   // 662\n              'bind(): You are binding a component method to the component. ' +                                        // 663\n                'React does this for you automatically in a high-performance ' +                                       // 664\n                'way, so you can safely remove this call. See %s',                                                     // 665\n              componentName                                                                                            // 666\n            );                                                                                                         // 667\n          }                                                                                                            // 668\n          return boundMethod;                                                                                          // 669\n        }                                                                                                              // 670\n        var reboundMethod = _bind.apply(boundMethod, arguments);                                                       // 671\n        reboundMethod.__reactBoundContext = component;                                                                 // 672\n        reboundMethod.__reactBoundMethod = method;                                                                     // 673\n        reboundMethod.__reactBoundArguments = args;                                                                    // 674\n        return reboundMethod;                                                                                          // 675\n      };                                                                                                               // 676\n    }                                                                                                                  // 677\n    return boundMethod;                                                                                                // 678\n  }                                                                                                                    // 679\n                                                                                                                       // 680\n  /**                                                                                                                  // 681\n   * Binds all auto-bound methods in a component.                                                                      // 682\n   *                                                                                                                   // 683\n   * @param {object} component Component whose method is going to be bound.                                            // 684\n   */                                                                                                                  // 685\n  function bindAutoBindMethods(component) {                                                                            // 686\n    var pairs = component.__reactAutoBindPairs;                                                                        // 687\n    for (var i = 0; i < pairs.length; i += 2) {                                                                        // 688\n      var autoBindKey = pairs[i];                                                                                      // 689\n      var method = pairs[i + 1];                                                                                       // 690\n      component[autoBindKey] = bindAutoBindMethod(component, method);                                                  // 691\n    }                                                                                                                  // 692\n  }                                                                                                                    // 693\n                                                                                                                       // 694\n  var IsMountedPreMixin = {                                                                                            // 695\n    componentDidMount: function() {                                                                                    // 696\n      this.__isMounted = true;                                                                                         // 697\n    }                                                                                                                  // 698\n  };                                                                                                                   // 699\n                                                                                                                       // 700\n  var IsMountedPostMixin = {                                                                                           // 701\n    componentWillUnmount: function() {                                                                                 // 702\n      this.__isMounted = false;                                                                                        // 703\n    }                                                                                                                  // 704\n  };                                                                                                                   // 705\n                                                                                                                       // 706\n  /**                                                                                                                  // 707\n   * Add more to the ReactClass base class. These are all legacy features and                                          // 708\n   * therefore not already part of the modern ReactComponent.                                                          // 709\n   */                                                                                                                  // 710\n  var ReactClassMixin = {                                                                                              // 711\n    /**                                                                                                                // 712\n     * TODO: This will be deprecated because state should always keep a consistent                                     // 713\n     * type signature and the only use case for this, is to avoid that.                                                // 714\n     */                                                                                                                // 715\n    replaceState: function(newState, callback) {                                                                       // 716\n      this.updater.enqueueReplaceState(this, newState, callback);                                                      // 717\n    },                                                                                                                 // 718\n                                                                                                                       // 719\n    /**                                                                                                                // 720\n     * Checks whether or not this composite component is mounted.                                                      // 721\n     * @return {boolean} True if mounted, false otherwise.                                                             // 722\n     * @protected                                                                                                      // 723\n     * @final                                                                                                          // 724\n     */                                                                                                                // 725\n    isMounted: function() {                                                                                            // 726\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 727\n        warning(                                                                                                       // 728\n          this.__didWarnIsMounted,                                                                                     // 729\n          '%s: isMounted is deprecated. Instead, make sure to clean up ' +                                             // 730\n            'subscriptions and pending requests in componentWillUnmount to ' +                                         // 731\n            'prevent memory leaks.',                                                                                   // 732\n          (this.constructor && this.constructor.displayName) ||                                                        // 733\n            this.name ||                                                                                               // 734\n            'Component'                                                                                                // 735\n        );                                                                                                             // 736\n        this.__didWarnIsMounted = true;                                                                                // 737\n      }                                                                                                                // 738\n      return !!this.__isMounted;                                                                                       // 739\n    }                                                                                                                  // 740\n  };                                                                                                                   // 741\n                                                                                                                       // 742\n  var ReactClassComponent = function() {};                                                                             // 743\n  _assign(                                                                                                             // 744\n    ReactClassComponent.prototype,                                                                                     // 745\n    ReactComponent.prototype,                                                                                          // 746\n    ReactClassMixin                                                                                                    // 747\n  );                                                                                                                   // 748\n                                                                                                                       // 749\n  /**                                                                                                                  // 750\n   * Creates a composite component class given a class specification.                                                  // 751\n   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass                                    // 752\n   *                                                                                                                   // 753\n   * @param {object} spec Class specification (which must define `render`).                                            // 754\n   * @return {function} Component constructor function.                                                                // 755\n   * @public                                                                                                           // 756\n   */                                                                                                                  // 757\n  function createClass(spec) {                                                                                         // 758\n    // To keep our warnings more understandable, we'll use a little hack here to                                       // 759\n    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't                                        // 760\n    // unnecessarily identify a class without displayName as 'Constructor'.                                            // 761\n    var Constructor = identity(function(props, context, updater) {                                                     // 762\n      // This constructor gets overridden by mocks. The argument is used                                               // 763\n      // by mocks to assert on what gets mounted.                                                                      // 764\n                                                                                                                       // 765\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 766\n        warning(                                                                                                       // 767\n          this instanceof Constructor,                                                                                 // 768\n          'Something is calling a React component directly. Use a factory or ' +                                       // 769\n            'JSX instead. See: https://fb.me/react-legacyfactory'                                                      // 770\n        );                                                                                                             // 771\n      }                                                                                                                // 772\n                                                                                                                       // 773\n      // Wire up auto-binding                                                                                          // 774\n      if (this.__reactAutoBindPairs.length) {                                                                          // 775\n        bindAutoBindMethods(this);                                                                                     // 776\n      }                                                                                                                // 777\n                                                                                                                       // 778\n      this.props = props;                                                                                              // 779\n      this.context = context;                                                                                          // 780\n      this.refs = emptyObject;                                                                                         // 781\n      this.updater = updater || ReactNoopUpdateQueue;                                                                  // 782\n                                                                                                                       // 783\n      this.state = null;                                                                                               // 784\n                                                                                                                       // 785\n      // ReactClasses doesn't have constructors. Instead, they use the                                                 // 786\n      // getInitialState and componentWillMount methods for initialization.                                            // 787\n                                                                                                                       // 788\n      var initialState = this.getInitialState ? this.getInitialState() : null;                                         // 789\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 790\n        // We allow auto-mocks to proceed as if they're returning null.                                                // 791\n        if (                                                                                                           // 792\n          initialState === undefined &&                                                                                // 793\n          this.getInitialState._isMockFunction                                                                         // 794\n        ) {                                                                                                            // 795\n          // This is probably bad practice. Consider warning here and                                                  // 796\n          // deprecating this convenience.                                                                             // 797\n          initialState = null;                                                                                         // 798\n        }                                                                                                              // 799\n      }                                                                                                                // 800\n      _invariant(                                                                                                      // 801\n        typeof initialState === 'object' && !Array.isArray(initialState),                                              // 802\n        '%s.getInitialState(): must return an object or null',                                                         // 803\n        Constructor.displayName || 'ReactCompositeComponent'                                                           // 804\n      );                                                                                                               // 805\n                                                                                                                       // 806\n      this.state = initialState;                                                                                       // 807\n    });                                                                                                                // 808\n    Constructor.prototype = new ReactClassComponent();                                                                 // 809\n    Constructor.prototype.constructor = Constructor;                                                                   // 810\n    Constructor.prototype.__reactAutoBindPairs = [];                                                                   // 811\n                                                                                                                       // 812\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));                                              // 813\n                                                                                                                       // 814\n    mixSpecIntoComponent(Constructor, IsMountedPreMixin);                                                              // 815\n    mixSpecIntoComponent(Constructor, spec);                                                                           // 816\n    mixSpecIntoComponent(Constructor, IsMountedPostMixin);                                                             // 817\n                                                                                                                       // 818\n    // Initialize the defaultProps property after all mixins have been merged.                                         // 819\n    if (Constructor.getDefaultProps) {                                                                                 // 820\n      Constructor.defaultProps = Constructor.getDefaultProps();                                                        // 821\n    }                                                                                                                  // 822\n                                                                                                                       // 823\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 824\n      // This is a tag to indicate that the use of these method names is ok,                                           // 825\n      // since it's used with createClass. If it's not, then it's likely a                                             // 826\n      // mistake so we'll warn you to use the static property, property                                                // 827\n      // initializer or constructor respectively.                                                                      // 828\n      if (Constructor.getDefaultProps) {                                                                               // 829\n        Constructor.getDefaultProps.isReactClassApproved = {};                                                         // 830\n      }                                                                                                                // 831\n      if (Constructor.prototype.getInitialState) {                                                                     // 832\n        Constructor.prototype.getInitialState.isReactClassApproved = {};                                               // 833\n      }                                                                                                                // 834\n    }                                                                                                                  // 835\n                                                                                                                       // 836\n    _invariant(                                                                                                        // 837\n      Constructor.prototype.render,                                                                                    // 838\n      'createClass(...): Class specification must implement a `render` method.'                                        // 839\n    );                                                                                                                 // 840\n                                                                                                                       // 841\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 842\n      warning(                                                                                                         // 843\n        !Constructor.prototype.componentShouldUpdate,                                                                  // 844\n        '%s has a method called ' +                                                                                    // 845\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +                                          // 846\n          'The name is phrased as a question because the function is ' +                                               // 847\n          'expected to return a value.',                                                                               // 848\n        spec.displayName || 'A component'                                                                              // 849\n      );                                                                                                               // 850\n      warning(                                                                                                         // 851\n        !Constructor.prototype.componentWillRecieveProps,                                                              // 852\n        '%s has a method called ' +                                                                                    // 853\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',                                    // 854\n        spec.displayName || 'A component'                                                                              // 855\n      );                                                                                                               // 856\n    }                                                                                                                  // 857\n                                                                                                                       // 858\n    // Reduce time spent doing lookups by setting these on the prototype.                                              // 859\n    for (var methodName in ReactClassInterface) {                                                                      // 860\n      if (!Constructor.prototype[methodName]) {                                                                        // 861\n        Constructor.prototype[methodName] = null;                                                                      // 862\n      }                                                                                                                // 863\n    }                                                                                                                  // 864\n                                                                                                                       // 865\n    return Constructor;                                                                                                // 866\n  }                                                                                                                    // 867\n                                                                                                                       // 868\n  return createClass;                                                                                                  // 869\n}                                                                                                                      // 870\n                                                                                                                       // 871\nmodule.exports = factory;                                                                                              // 872\n                                                                                                                       // 873\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"react-dom\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/package.json                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"react-dom\";                                                                                            // 1\nexports.version = \"15.6.1\";                                                                                            // 2\nexports.main = \"index.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/index.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nmodule.exports = require('./lib/ReactDOM');                                                                            // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"ReactDOM.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactDOM.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/                                                                            // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 15\nvar ReactDefaultInjection = require('./ReactDefaultInjection');                                                        // 16\nvar ReactMount = require('./ReactMount');                                                                              // 17\nvar ReactReconciler = require('./ReactReconciler');                                                                    // 18\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 19\nvar ReactVersion = require('./ReactVersion');                                                                          // 20\n                                                                                                                       // 21\nvar findDOMNode = require('./findDOMNode');                                                                            // 22\nvar getHostComponentFromComposite = require('./getHostComponentFromComposite');                                        // 23\nvar renderSubtreeIntoContainer = require('./renderSubtreeIntoContainer');                                              // 24\nvar warning = require('fbjs/lib/warning');                                                                             // 25\n                                                                                                                       // 26\nReactDefaultInjection.inject();                                                                                        // 27\n                                                                                                                       // 28\nvar ReactDOM = {                                                                                                       // 29\n  findDOMNode: findDOMNode,                                                                                            // 30\n  render: ReactMount.render,                                                                                           // 31\n  unmountComponentAtNode: ReactMount.unmountComponentAtNode,                                                           // 32\n  version: ReactVersion,                                                                                               // 33\n                                                                                                                       // 34\n  /* eslint-disable camelcase */                                                                                       // 35\n  unstable_batchedUpdates: ReactUpdates.batchedUpdates,                                                                // 36\n  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer                                                      // 37\n  /* eslint-enable camelcase */                                                                                        // 38\n};                                                                                                                     // 39\n                                                                                                                       // 40\n// Inject the runtime into a devtools global hook regardless of browser.                                               // 41\n// Allows for debugging when the hook is injected on the page.                                                         // 42\nif (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({                                                                              // 44\n    ComponentTree: {                                                                                                   // 45\n      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,                                    // 46\n      getNodeFromInstance: function (inst) {                                                                           // 47\n        // inst is an internal instance (but could be a composite)                                                     // 48\n        if (inst._renderedComponent) {                                                                                 // 49\n          inst = getHostComponentFromComposite(inst);                                                                  // 50\n        }                                                                                                              // 51\n        if (inst) {                                                                                                    // 52\n          return ReactDOMComponentTree.getNodeFromInstance(inst);                                                      // 53\n        } else {                                                                                                       // 54\n          return null;                                                                                                 // 55\n        }                                                                                                              // 56\n      }                                                                                                                // 57\n    },                                                                                                                 // 58\n    Mount: ReactMount,                                                                                                 // 59\n    Reconciler: ReactReconciler                                                                                        // 60\n  });                                                                                                                  // 61\n}                                                                                                                      // 62\n                                                                                                                       // 63\nif (process.env.NODE_ENV !== 'production') {                                                                           // 64\n  var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                 // 65\n  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {                                                  // 66\n    // First check if devtools is not installed                                                                        // 67\n    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {                                                       // 68\n      // If we're in Chrome or Firefox, provide a download link if not installed.                                      // 69\n      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {\n        // Firefox does not have the issue with devtools loaded over file://                                           // 71\n        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;\n        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');\n      }                                                                                                                // 74\n    }                                                                                                                  // 75\n                                                                                                                       // 76\n    var testFunc = function testFn() {};                                                                               // 77\n    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, \"It looks like you're using a minified copy of the development build \" + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;\n                                                                                                                       // 79\n    // If we're in IE8, check to see if we are in compatibility mode and provide                                       // 80\n    // information on preventing compatibility mode                                                                    // 81\n    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;                                      // 82\n                                                                                                                       // 83\n    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />') : void 0;\n                                                                                                                       // 85\n    var expectedFeatures = [                                                                                           // 86\n    // shims                                                                                                           // 87\n    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];\n                                                                                                                       // 89\n    for (var i = 0; i < expectedFeatures.length; i++) {                                                                // 90\n      if (!expectedFeatures[i]) {                                                                                      // 91\n        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;\n        break;                                                                                                         // 93\n      }                                                                                                                // 94\n    }                                                                                                                  // 95\n  }                                                                                                                    // 96\n}                                                                                                                      // 97\n                                                                                                                       // 98\nif (process.env.NODE_ENV !== 'production') {                                                                           // 99\n  var ReactInstrumentation = require('./ReactInstrumentation');                                                        // 100\n  var ReactDOMUnknownPropertyHook = require('./ReactDOMUnknownPropertyHook');                                          // 101\n  var ReactDOMNullInputValuePropHook = require('./ReactDOMNullInputValuePropHook');                                    // 102\n  var ReactDOMInvalidARIAHook = require('./ReactDOMInvalidARIAHook');                                                  // 103\n                                                                                                                       // 104\n  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);                                                 // 105\n  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);                                              // 106\n  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);                                                     // 107\n}                                                                                                                      // 108\n                                                                                                                       // 109\nmodule.exports = ReactDOM;                                                                                             // 110\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDOMComponentTree.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactDOMComponentTree.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 13\n                                                                                                                       // 14\nvar DOMProperty = require('./DOMProperty');                                                                            // 15\nvar ReactDOMComponentFlags = require('./ReactDOMComponentFlags');                                                      // 16\n                                                                                                                       // 17\nvar invariant = require('fbjs/lib/invariant');                                                                         // 18\n                                                                                                                       // 19\nvar ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;                                                                         // 20\nvar Flags = ReactDOMComponentFlags;                                                                                    // 21\n                                                                                                                       // 22\nvar internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);                            // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * Check if a given node should be cached.                                                                             // 26\n */                                                                                                                    // 27\nfunction shouldPrecacheNode(node, nodeID) {                                                                            // 28\n  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';\n}                                                                                                                      // 30\n                                                                                                                       // 31\n/**                                                                                                                    // 32\n * Drill down (through composites and empty components) until we get a host or                                         // 33\n * host text component.                                                                                                // 34\n *                                                                                                                     // 35\n * This is pretty polymorphic but unavoidable with the current structure we have                                       // 36\n * for `_renderedChildren`.                                                                                            // 37\n */                                                                                                                    // 38\nfunction getRenderedHostOrTextFromComponent(component) {                                                               // 39\n  var rendered;                                                                                                        // 40\n  while (rendered = component._renderedComponent) {                                                                    // 41\n    component = rendered;                                                                                              // 42\n  }                                                                                                                    // 43\n  return component;                                                                                                    // 44\n}                                                                                                                      // 45\n                                                                                                                       // 46\n/**                                                                                                                    // 47\n * Populate `_hostNode` on the rendered host/text component with the given                                             // 48\n * DOM node. The passed `inst` can be a composite.                                                                     // 49\n */                                                                                                                    // 50\nfunction precacheNode(inst, node) {                                                                                    // 51\n  var hostInst = getRenderedHostOrTextFromComponent(inst);                                                             // 52\n  hostInst._hostNode = node;                                                                                           // 53\n  node[internalInstanceKey] = hostInst;                                                                                // 54\n}                                                                                                                      // 55\n                                                                                                                       // 56\nfunction uncacheNode(inst) {                                                                                           // 57\n  var node = inst._hostNode;                                                                                           // 58\n  if (node) {                                                                                                          // 59\n    delete node[internalInstanceKey];                                                                                  // 60\n    inst._hostNode = null;                                                                                             // 61\n  }                                                                                                                    // 62\n}                                                                                                                      // 63\n                                                                                                                       // 64\n/**                                                                                                                    // 65\n * Populate `_hostNode` on each child of `inst`, assuming that the children                                            // 66\n * match up with the DOM (element) children of `node`.                                                                 // 67\n *                                                                                                                     // 68\n * We cache entire levels at once to avoid an n^2 problem where we access the                                          // 69\n * children of a node sequentially and have to walk from the start to our target                                       // 70\n * node every time.                                                                                                    // 71\n *                                                                                                                     // 72\n * Since we update `_renderedChildren` and the actual DOM at (slightly)                                                // 73\n * different times, we could race here and see a newer `_renderedChildren` than                                        // 74\n * the DOM nodes we see. To avoid this, ReactMultiChild calls                                                          // 75\n * `prepareToManageChildren` before we change `_renderedChildren`, at which                                            // 76\n * time the container's child nodes are always cached (until it unmounts).                                             // 77\n */                                                                                                                    // 78\nfunction precacheChildNodes(inst, node) {                                                                              // 79\n  if (inst._flags & Flags.hasCachedChildNodes) {                                                                       // 80\n    return;                                                                                                            // 81\n  }                                                                                                                    // 82\n  var children = inst._renderedChildren;                                                                               // 83\n  var childNode = node.firstChild;                                                                                     // 84\n  outer: for (var name in children) {                                                                                  // 85\n    if (!children.hasOwnProperty(name)) {                                                                              // 86\n      continue;                                                                                                        // 87\n    }                                                                                                                  // 88\n    var childInst = children[name];                                                                                    // 89\n    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;                                                // 90\n    if (childID === 0) {                                                                                               // 91\n      // We're currently unmounting this child in ReactMultiChild; skip it.                                            // 92\n      continue;                                                                                                        // 93\n    }                                                                                                                  // 94\n    // We assume the child nodes are in the same order as the child instances.                                         // 95\n    for (; childNode !== null; childNode = childNode.nextSibling) {                                                    // 96\n      if (shouldPrecacheNode(childNode, childID)) {                                                                    // 97\n        precacheNode(childInst, childNode);                                                                            // 98\n        continue outer;                                                                                                // 99\n      }                                                                                                                // 100\n    }                                                                                                                  // 101\n    // We reached the end of the DOM children without finding an ID match.                                             // 102\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;\n  }                                                                                                                    // 104\n  inst._flags |= Flags.hasCachedChildNodes;                                                                            // 105\n}                                                                                                                      // 106\n                                                                                                                       // 107\n/**                                                                                                                    // 108\n * Given a DOM node, return the closest ReactDOMComponent or                                                           // 109\n * ReactDOMTextComponent instance ancestor.                                                                            // 110\n */                                                                                                                    // 111\nfunction getClosestInstanceFromNode(node) {                                                                            // 112\n  if (node[internalInstanceKey]) {                                                                                     // 113\n    return node[internalInstanceKey];                                                                                  // 114\n  }                                                                                                                    // 115\n                                                                                                                       // 116\n  // Walk up the tree until we find an ancestor whose instance we have cached.                                         // 117\n  var parents = [];                                                                                                    // 118\n  while (!node[internalInstanceKey]) {                                                                                 // 119\n    parents.push(node);                                                                                                // 120\n    if (node.parentNode) {                                                                                             // 121\n      node = node.parentNode;                                                                                          // 122\n    } else {                                                                                                           // 123\n      // Top of the tree. This node must not be part of a React tree (or is                                            // 124\n      // unmounted, potentially).                                                                                      // 125\n      return null;                                                                                                     // 126\n    }                                                                                                                  // 127\n  }                                                                                                                    // 128\n                                                                                                                       // 129\n  var closest;                                                                                                         // 130\n  var inst;                                                                                                            // 131\n  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {                                           // 132\n    closest = inst;                                                                                                    // 133\n    if (parents.length) {                                                                                              // 134\n      precacheChildNodes(inst, node);                                                                                  // 135\n    }                                                                                                                  // 136\n  }                                                                                                                    // 137\n                                                                                                                       // 138\n  return closest;                                                                                                      // 139\n}                                                                                                                      // 140\n                                                                                                                       // 141\n/**                                                                                                                    // 142\n * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent                                             // 143\n * instance, or null if the node was not rendered by this React.                                                       // 144\n */                                                                                                                    // 145\nfunction getInstanceFromNode(node) {                                                                                   // 146\n  var inst = getClosestInstanceFromNode(node);                                                                         // 147\n  if (inst != null && inst._hostNode === node) {                                                                       // 148\n    return inst;                                                                                                       // 149\n  } else {                                                                                                             // 150\n    return null;                                                                                                       // 151\n  }                                                                                                                    // 152\n}                                                                                                                      // 153\n                                                                                                                       // 154\n/**                                                                                                                    // 155\n * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding                                        // 156\n * DOM node.                                                                                                           // 157\n */                                                                                                                    // 158\nfunction getNodeFromInstance(inst) {                                                                                   // 159\n  // Without this first invariant, passing a non-DOM-component triggers the next                                       // 160\n  // invariant for a missing parent, which is super confusing.                                                         // 161\n  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;\n                                                                                                                       // 163\n  if (inst._hostNode) {                                                                                                // 164\n    return inst._hostNode;                                                                                             // 165\n  }                                                                                                                    // 166\n                                                                                                                       // 167\n  // Walk up the tree until we find an ancestor whose DOM node we have cached.                                         // 168\n  var parents = [];                                                                                                    // 169\n  while (!inst._hostNode) {                                                                                            // 170\n    parents.push(inst);                                                                                                // 171\n    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;\n    inst = inst._hostParent;                                                                                           // 173\n  }                                                                                                                    // 174\n                                                                                                                       // 175\n  // Now parents contains each ancestor that does *not* have a cached native                                           // 176\n  // node, and `inst` is the deepest ancestor that does.                                                               // 177\n  for (; parents.length; inst = parents.pop()) {                                                                       // 178\n    precacheChildNodes(inst, inst._hostNode);                                                                          // 179\n  }                                                                                                                    // 180\n                                                                                                                       // 181\n  return inst._hostNode;                                                                                               // 182\n}                                                                                                                      // 183\n                                                                                                                       // 184\nvar ReactDOMComponentTree = {                                                                                          // 185\n  getClosestInstanceFromNode: getClosestInstanceFromNode,                                                              // 186\n  getInstanceFromNode: getInstanceFromNode,                                                                            // 187\n  getNodeFromInstance: getNodeFromInstance,                                                                            // 188\n  precacheChildNodes: precacheChildNodes,                                                                              // 189\n  precacheNode: precacheNode,                                                                                          // 190\n  uncacheNode: uncacheNode                                                                                             // 191\n};                                                                                                                     // 192\n                                                                                                                       // 193\nmodule.exports = ReactDOMComponentTree;                                                                                // 194\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"reactProdInvariant.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/reactProdInvariant.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * WARNING: DO NOT manually require this module.                                                                       // 14\n * This is a replacement for `invariant(...)` used by the error code system                                            // 15\n * and will _only_ be required by the corresponding babel pass.                                                        // 16\n * It always throws.                                                                                                   // 17\n */                                                                                                                    // 18\n                                                                                                                       // 19\nfunction reactProdInvariant(code) {                                                                                    // 20\n  var argCount = arguments.length - 1;                                                                                 // 21\n                                                                                                                       // 22\n  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;\n                                                                                                                       // 24\n  for (var argIdx = 0; argIdx < argCount; argIdx++) {                                                                  // 25\n    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);                                                 // 26\n  }                                                                                                                    // 27\n                                                                                                                       // 28\n  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';\n                                                                                                                       // 30\n  var error = new Error(message);                                                                                      // 31\n  error.name = 'Invariant Violation';                                                                                  // 32\n  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame                                         // 33\n                                                                                                                       // 34\n  throw error;                                                                                                         // 35\n}                                                                                                                      // 36\n                                                                                                                       // 37\nmodule.exports = reactProdInvariant;                                                                                   // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"DOMProperty.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/DOMProperty.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 13\n                                                                                                                       // 14\nvar invariant = require('fbjs/lib/invariant');                                                                         // 15\n                                                                                                                       // 16\nfunction checkMask(value, bitmask) {                                                                                   // 17\n  return (value & bitmask) === bitmask;                                                                                // 18\n}                                                                                                                      // 19\n                                                                                                                       // 20\nvar DOMPropertyInjection = {                                                                                           // 21\n  /**                                                                                                                  // 22\n   * Mapping from normalized, camelcased property names to a configuration that                                        // 23\n   * specifies how the associated DOM property should be accessed or rendered.                                         // 24\n   */                                                                                                                  // 25\n  MUST_USE_PROPERTY: 0x1,                                                                                              // 26\n  HAS_BOOLEAN_VALUE: 0x4,                                                                                              // 27\n  HAS_NUMERIC_VALUE: 0x8,                                                                                              // 28\n  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,                                                                              // 29\n  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,                                                                                  // 30\n                                                                                                                       // 31\n  /**                                                                                                                  // 32\n   * Inject some specialized knowledge about the DOM. This takes a config object                                       // 33\n   * with the following properties:                                                                                    // 34\n   *                                                                                                                   // 35\n   * isCustomAttribute: function that given an attribute name will return true                                         // 36\n   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*                                          // 37\n   * attributes where it's impossible to enumerate all of the possible                                                 // 38\n   * attribute names,                                                                                                  // 39\n   *                                                                                                                   // 40\n   * Properties: object mapping DOM property name to one of the                                                        // 41\n   * DOMPropertyInjection constants or null. If your attribute isn't in here,                                          // 42\n   * it won't get written to the DOM.                                                                                  // 43\n   *                                                                                                                   // 44\n   * DOMAttributeNames: object mapping React attribute name to the DOM                                                 // 45\n   * attribute name. Attribute names not specified use the **lowercase**                                               // 46\n   * normalized name.                                                                                                  // 47\n   *                                                                                                                   // 48\n   * DOMAttributeNamespaces: object mapping React attribute name to the DOM                                            // 49\n   * attribute namespace URL. (Attribute names not specified use no namespace.)                                        // 50\n   *                                                                                                                   // 51\n   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.                                            // 52\n   * Property names not specified use the normalized name.                                                             // 53\n   *                                                                                                                   // 54\n   * DOMMutationMethods: Properties that require special mutation methods. If                                          // 55\n   * `value` is undefined, the mutation method should unset the property.                                              // 56\n   *                                                                                                                   // 57\n   * @param {object} domPropertyConfig the config as described above.                                                  // 58\n   */                                                                                                                  // 59\n  injectDOMPropertyConfig: function (domPropertyConfig) {                                                              // 60\n    var Injection = DOMPropertyInjection;                                                                              // 61\n    var Properties = domPropertyConfig.Properties || {};                                                               // 62\n    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};                                       // 63\n    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};                                                 // 64\n    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};                                                   // 65\n    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};                                               // 66\n                                                                                                                       // 67\n    if (domPropertyConfig.isCustomAttribute) {                                                                         // 68\n      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);                               // 69\n    }                                                                                                                  // 70\n                                                                                                                       // 71\n    for (var propName in Properties) {                                                                                 // 72\n      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\\'re trying to inject DOM property \\'%s\\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;\n                                                                                                                       // 74\n      var lowerCased = propName.toLowerCase();                                                                         // 75\n      var propConfig = Properties[propName];                                                                           // 76\n                                                                                                                       // 77\n      var propertyInfo = {                                                                                             // 78\n        attributeName: lowerCased,                                                                                     // 79\n        attributeNamespace: null,                                                                                      // 80\n        propertyName: propName,                                                                                        // 81\n        mutationMethod: null,                                                                                          // 82\n                                                                                                                       // 83\n        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),                                           // 84\n        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),                                           // 85\n        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),                                           // 86\n        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),                          // 87\n        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)                       // 88\n      };                                                                                                               // 89\n      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;\n                                                                                                                       // 91\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 92\n        DOMProperty.getPossibleStandardName[lowerCased] = propName;                                                    // 93\n      }                                                                                                                // 94\n                                                                                                                       // 95\n      if (DOMAttributeNames.hasOwnProperty(propName)) {                                                                // 96\n        var attributeName = DOMAttributeNames[propName];                                                               // 97\n        propertyInfo.attributeName = attributeName;                                                                    // 98\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 99\n          DOMProperty.getPossibleStandardName[attributeName] = propName;                                               // 100\n        }                                                                                                              // 101\n      }                                                                                                                // 102\n                                                                                                                       // 103\n      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {                                                           // 104\n        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];                                            // 105\n      }                                                                                                                // 106\n                                                                                                                       // 107\n      if (DOMPropertyNames.hasOwnProperty(propName)) {                                                                 // 108\n        propertyInfo.propertyName = DOMPropertyNames[propName];                                                        // 109\n      }                                                                                                                // 110\n                                                                                                                       // 111\n      if (DOMMutationMethods.hasOwnProperty(propName)) {                                                               // 112\n        propertyInfo.mutationMethod = DOMMutationMethods[propName];                                                    // 113\n      }                                                                                                                // 114\n                                                                                                                       // 115\n      DOMProperty.properties[propName] = propertyInfo;                                                                 // 116\n    }                                                                                                                  // 117\n  }                                                                                                                    // 118\n};                                                                                                                     // 119\n                                                                                                                       // 120\n/* eslint-disable max-len */                                                                                           // 121\nvar ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\n/* eslint-enable max-len */                                                                                            // 123\n                                                                                                                       // 124\n/**                                                                                                                    // 125\n * DOMProperty exports lookup objects that can be used like functions:                                                 // 126\n *                                                                                                                     // 127\n *   > DOMProperty.isValid['id']                                                                                       // 128\n *   true                                                                                                              // 129\n *   > DOMProperty.isValid['foobar']                                                                                   // 130\n *   undefined                                                                                                         // 131\n *                                                                                                                     // 132\n * Although this may be confusing, it performs better in general.                                                      // 133\n *                                                                                                                     // 134\n * @see http://jsperf.com/key-exists                                                                                   // 135\n * @see http://jsperf.com/key-missing                                                                                  // 136\n */                                                                                                                    // 137\nvar DOMProperty = {                                                                                                    // 138\n  ID_ATTRIBUTE_NAME: 'data-reactid',                                                                                   // 139\n  ROOT_ATTRIBUTE_NAME: 'data-reactroot',                                                                               // 140\n                                                                                                                       // 141\n  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,                                                                // 142\n  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040',                     // 143\n                                                                                                                       // 144\n  /**                                                                                                                  // 145\n   * Map from property \"standard name\" to an object with info about how to set                                         // 146\n   * the property in the DOM. Each object contains:                                                                    // 147\n   *                                                                                                                   // 148\n   * attributeName:                                                                                                    // 149\n   *   Used when rendering markup or with `*Attribute()`.                                                              // 150\n   * attributeNamespace                                                                                                // 151\n   * propertyName:                                                                                                     // 152\n   *   Used on DOM node instances. (This includes properties that mutate due to                                        // 153\n   *   external factors.)                                                                                              // 154\n   * mutationMethod:                                                                                                   // 155\n   *   If non-null, used instead of the property or `setAttribute()` after                                             // 156\n   *   initial render.                                                                                                 // 157\n   * mustUseProperty:                                                                                                  // 158\n   *   Whether the property must be accessed and mutated as an object property.                                        // 159\n   * hasBooleanValue:                                                                                                  // 160\n   *   Whether the property should be removed when set to a falsey value.                                              // 161\n   * hasNumericValue:                                                                                                  // 162\n   *   Whether the property must be numeric or parse as a numeric and should be                                        // 163\n   *   removed when set to a falsey value.                                                                             // 164\n   * hasPositiveNumericValue:                                                                                          // 165\n   *   Whether the property must be positive numeric or parse as a positive                                            // 166\n   *   numeric and should be removed when set to a falsey value.                                                       // 167\n   * hasOverloadedBooleanValue:                                                                                        // 168\n   *   Whether the property can be used as a flag as well as with a value.                                             // 169\n   *   Removed when strictly equal to false; present without a value when                                              // 170\n   *   strictly equal to true; present with a value otherwise.                                                         // 171\n   */                                                                                                                  // 172\n  properties: {},                                                                                                      // 173\n                                                                                                                       // 174\n  /**                                                                                                                  // 175\n   * Mapping from lowercase property names to the properly cased version, used                                         // 176\n   * to warn in the case of missing properties. Available only in __DEV__.                                             // 177\n   *                                                                                                                   // 178\n   * autofocus is predefined, because adding it to the property whitelist                                              // 179\n   * causes unintended side effects.                                                                                   // 180\n   *                                                                                                                   // 181\n   * @type {Object}                                                                                                    // 182\n   */                                                                                                                  // 183\n  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,                  // 184\n                                                                                                                       // 185\n  /**                                                                                                                  // 186\n   * All of the isCustomAttribute() functions that have been injected.                                                 // 187\n   */                                                                                                                  // 188\n  _isCustomAttributeFunctions: [],                                                                                     // 189\n                                                                                                                       // 190\n  /**                                                                                                                  // 191\n   * Checks whether a property name is a custom attribute.                                                             // 192\n   * @method                                                                                                           // 193\n   */                                                                                                                  // 194\n  isCustomAttribute: function (attributeName) {                                                                        // 195\n    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {                                         // 196\n      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];                                            // 197\n      if (isCustomAttributeFn(attributeName)) {                                                                        // 198\n        return true;                                                                                                   // 199\n      }                                                                                                                // 200\n    }                                                                                                                  // 201\n    return false;                                                                                                      // 202\n  },                                                                                                                   // 203\n                                                                                                                       // 204\n  injection: DOMPropertyInjection                                                                                      // 205\n};                                                                                                                     // 206\n                                                                                                                       // 207\nmodule.exports = DOMProperty;                                                                                          // 208\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDOMComponentFlags.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactDOMComponentFlags.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2015-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar ReactDOMComponentFlags = {                                                                                         // 13\n  hasCachedChildNodes: 1 << 0                                                                                          // 14\n};                                                                                                                     // 15\n                                                                                                                       // 16\nmodule.exports = ReactDOMComponentFlags;                                                                               // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDefaultInjection.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactDefaultInjection.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar ARIADOMPropertyConfig = require('./ARIADOMPropertyConfig');                                                        // 13\nvar BeforeInputEventPlugin = require('./BeforeInputEventPlugin');                                                      // 14\nvar ChangeEventPlugin = require('./ChangeEventPlugin');                                                                // 15\nvar DefaultEventPluginOrder = require('./DefaultEventPluginOrder');                                                    // 16\nvar EnterLeaveEventPlugin = require('./EnterLeaveEventPlugin');                                                        // 17\nvar HTMLDOMPropertyConfig = require('./HTMLDOMPropertyConfig');                                                        // 18\nvar ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');                                  // 19\nvar ReactDOMComponent = require('./ReactDOMComponent');                                                                // 20\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 21\nvar ReactDOMEmptyComponent = require('./ReactDOMEmptyComponent');                                                      // 22\nvar ReactDOMTreeTraversal = require('./ReactDOMTreeTraversal');                                                        // 23\nvar ReactDOMTextComponent = require('./ReactDOMTextComponent');                                                        // 24\nvar ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');                                          // 25\nvar ReactEventListener = require('./ReactEventListener');                                                              // 26\nvar ReactInjection = require('./ReactInjection');                                                                      // 27\nvar ReactReconcileTransaction = require('./ReactReconcileTransaction');                                                // 28\nvar SVGDOMPropertyConfig = require('./SVGDOMPropertyConfig');                                                          // 29\nvar SelectEventPlugin = require('./SelectEventPlugin');                                                                // 30\nvar SimpleEventPlugin = require('./SimpleEventPlugin');                                                                // 31\n                                                                                                                       // 32\nvar alreadyInjected = false;                                                                                           // 33\n                                                                                                                       // 34\nfunction inject() {                                                                                                    // 35\n  if (alreadyInjected) {                                                                                               // 36\n    // TODO: This is currently true because these injections are shared between                                        // 37\n    // the client and the server package. They should be built independently                                           // 38\n    // and not share any injection state. Then this problem will be solved.                                            // 39\n    return;                                                                                                            // 40\n  }                                                                                                                    // 41\n  alreadyInjected = true;                                                                                              // 42\n                                                                                                                       // 43\n  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);                                            // 44\n                                                                                                                       // 45\n  /**                                                                                                                  // 46\n   * Inject modules for resolving DOM hierarchy and plugin ordering.                                                   // 47\n   */                                                                                                                  // 48\n  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);                                       // 49\n  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);                                          // 50\n  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);                                          // 51\n                                                                                                                       // 52\n  /**                                                                                                                  // 53\n   * Some important event plugins included by default (without having to require                                       // 54\n   * them).                                                                                                            // 55\n   */                                                                                                                  // 56\n  ReactInjection.EventPluginHub.injectEventPluginsByName({                                                             // 57\n    SimpleEventPlugin: SimpleEventPlugin,                                                                              // 58\n    EnterLeaveEventPlugin: EnterLeaveEventPlugin,                                                                      // 59\n    ChangeEventPlugin: ChangeEventPlugin,                                                                              // 60\n    SelectEventPlugin: SelectEventPlugin,                                                                              // 61\n    BeforeInputEventPlugin: BeforeInputEventPlugin                                                                     // 62\n  });                                                                                                                  // 63\n                                                                                                                       // 64\n  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);                                         // 65\n                                                                                                                       // 66\n  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);                                        // 67\n                                                                                                                       // 68\n  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);                                           // 69\n  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);                                           // 70\n  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);                                            // 71\n                                                                                                                       // 72\n  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {                                   // 73\n    return new ReactDOMEmptyComponent(instantiate);                                                                    // 74\n  });                                                                                                                  // 75\n                                                                                                                       // 76\n  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);                                        // 77\n  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);                                         // 78\n                                                                                                                       // 79\n  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);                                        // 80\n}                                                                                                                      // 81\n                                                                                                                       // 82\nmodule.exports = {                                                                                                     // 83\n  inject: inject                                                                                                       // 84\n};                                                                                                                     // 85\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ARIADOMPropertyConfig.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ARIADOMPropertyConfig.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar ARIADOMPropertyConfig = {                                                                                          // 13\n  Properties: {                                                                                                        // 14\n    // Global States and Properties                                                                                    // 15\n    'aria-current': 0, // state                                                                                        // 16\n    'aria-details': 0,                                                                                                 // 17\n    'aria-disabled': 0, // state                                                                                       // 18\n    'aria-hidden': 0, // state                                                                                         // 19\n    'aria-invalid': 0, // state                                                                                        // 20\n    'aria-keyshortcuts': 0,                                                                                            // 21\n    'aria-label': 0,                                                                                                   // 22\n    'aria-roledescription': 0,                                                                                         // 23\n    // Widget Attributes                                                                                               // 24\n    'aria-autocomplete': 0,                                                                                            // 25\n    'aria-checked': 0,                                                                                                 // 26\n    'aria-expanded': 0,                                                                                                // 27\n    'aria-haspopup': 0,                                                                                                // 28\n    'aria-level': 0,                                                                                                   // 29\n    'aria-modal': 0,                                                                                                   // 30\n    'aria-multiline': 0,                                                                                               // 31\n    'aria-multiselectable': 0,                                                                                         // 32\n    'aria-orientation': 0,                                                                                             // 33\n    'aria-placeholder': 0,                                                                                             // 34\n    'aria-pressed': 0,                                                                                                 // 35\n    'aria-readonly': 0,                                                                                                // 36\n    'aria-required': 0,                                                                                                // 37\n    'aria-selected': 0,                                                                                                // 38\n    'aria-sort': 0,                                                                                                    // 39\n    'aria-valuemax': 0,                                                                                                // 40\n    'aria-valuemin': 0,                                                                                                // 41\n    'aria-valuenow': 0,                                                                                                // 42\n    'aria-valuetext': 0,                                                                                               // 43\n    // Live Region Attributes                                                                                          // 44\n    'aria-atomic': 0,                                                                                                  // 45\n    'aria-busy': 0,                                                                                                    // 46\n    'aria-live': 0,                                                                                                    // 47\n    'aria-relevant': 0,                                                                                                // 48\n    // Drag-and-Drop Attributes                                                                                        // 49\n    'aria-dropeffect': 0,                                                                                              // 50\n    'aria-grabbed': 0,                                                                                                 // 51\n    // Relationship Attributes                                                                                         // 52\n    'aria-activedescendant': 0,                                                                                        // 53\n    'aria-colcount': 0,                                                                                                // 54\n    'aria-colindex': 0,                                                                                                // 55\n    'aria-colspan': 0,                                                                                                 // 56\n    'aria-controls': 0,                                                                                                // 57\n    'aria-describedby': 0,                                                                                             // 58\n    'aria-errormessage': 0,                                                                                            // 59\n    'aria-flowto': 0,                                                                                                  // 60\n    'aria-labelledby': 0,                                                                                              // 61\n    'aria-owns': 0,                                                                                                    // 62\n    'aria-posinset': 0,                                                                                                // 63\n    'aria-rowcount': 0,                                                                                                // 64\n    'aria-rowindex': 0,                                                                                                // 65\n    'aria-rowspan': 0,                                                                                                 // 66\n    'aria-setsize': 0                                                                                                  // 67\n  },                                                                                                                   // 68\n  DOMAttributeNames: {},                                                                                               // 69\n  DOMPropertyNames: {}                                                                                                 // 70\n};                                                                                                                     // 71\n                                                                                                                       // 72\nmodule.exports = ARIADOMPropertyConfig;                                                                                // 73\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"BeforeInputEventPlugin.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/BeforeInputEventPlugin.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present Facebook, Inc.                                                                               // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar EventPropagators = require('./EventPropagators');                                                                  // 13\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 14\nvar FallbackCompositionState = require('./FallbackCompositionState');                                                  // 15\nvar SyntheticCompositionEvent = require('./SyntheticCompositionEvent');                                                // 16\nvar SyntheticInputEvent = require('./SyntheticInputEvent');                                                            // 17\n                                                                                                                       // 18\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space                                                         // 19\nvar START_KEYCODE = 229;                                                                                               // 20\n                                                                                                                       // 21\nvar canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;                           // 22\n                                                                                                                       // 23\nvar documentMode = null;                                                                                               // 24\nif (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {                                                    // 25\n  documentMode = document.documentMode;                                                                                // 26\n}                                                                                                                      // 27\n                                                                                                                       // 28\n// Webkit offers a very useful `textInput` event that can be used to                                                   // 29\n// directly represent `beforeInput`. The IE `textinput` event is not as                                                // 30\n// useful, so we don't use it.                                                                                         // 31\nvar canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();    // 32\n                                                                                                                       // 33\n// In IE9+, we have access to composition events, but the data supplied                                                // 34\n// by the native compositionend event may be incorrect. Japanese ideographic                                           // 35\n// spaces, for instance (\\u3000) are not recorded correctly.                                                           // 36\nvar useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);\n                                                                                                                       // 38\n/**                                                                                                                    // 39\n * Opera <= 12 includes TextEvent in window, but does not fire                                                         // 40\n * text input events. Rely on keypress instead.                                                                        // 41\n */                                                                                                                    // 42\nfunction isPresto() {                                                                                                  // 43\n  var opera = window.opera;                                                                                            // 44\n  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;      // 45\n}                                                                                                                      // 46\n                                                                                                                       // 47\nvar SPACEBAR_CODE = 32;                                                                                                // 48\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);                                                                // 49\n                                                                                                                       // 50\n// Events and their corresponding property names.                                                                      // 51\nvar eventTypes = {                                                                                                     // 52\n  beforeInput: {                                                                                                       // 53\n    phasedRegistrationNames: {                                                                                         // 54\n      bubbled: 'onBeforeInput',                                                                                        // 55\n      captured: 'onBeforeInputCapture'                                                                                 // 56\n    },                                                                                                                 // 57\n    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']                                     // 58\n  },                                                                                                                   // 59\n  compositionEnd: {                                                                                                    // 60\n    phasedRegistrationNames: {                                                                                         // 61\n      bubbled: 'onCompositionEnd',                                                                                     // 62\n      captured: 'onCompositionEndCapture'                                                                              // 63\n    },                                                                                                                 // 64\n    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']            // 65\n  },                                                                                                                   // 66\n  compositionStart: {                                                                                                  // 67\n    phasedRegistrationNames: {                                                                                         // 68\n      bubbled: 'onCompositionStart',                                                                                   // 69\n      captured: 'onCompositionStartCapture'                                                                            // 70\n    },                                                                                                                 // 71\n    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']          // 72\n  },                                                                                                                   // 73\n  compositionUpdate: {                                                                                                 // 74\n    phasedRegistrationNames: {                                                                                         // 75\n      bubbled: 'onCompositionUpdate',                                                                                  // 76\n      captured: 'onCompositionUpdateCapture'                                                                           // 77\n    },                                                                                                                 // 78\n    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']         // 79\n  }                                                                                                                    // 80\n};                                                                                                                     // 81\n                                                                                                                       // 82\n// Track whether we've ever handled a keypress on the space key.                                                       // 83\nvar hasSpaceKeypress = false;                                                                                          // 84\n                                                                                                                       // 85\n/**                                                                                                                    // 86\n * Return whether a native keypress event is assumed to be a command.                                                  // 87\n * This is required because Firefox fires `keypress` events for key commands                                           // 88\n * (cut, copy, select-all, etc.) even though no character is inserted.                                                 // 89\n */                                                                                                                    // 90\nfunction isKeypressCommand(nativeEvent) {                                                                              // 91\n  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&                                         // 92\n  // ctrlKey && altKey is equivalent to AltGr, and is not a command.                                                   // 93\n  !(nativeEvent.ctrlKey && nativeEvent.altKey);                                                                        // 94\n}                                                                                                                      // 95\n                                                                                                                       // 96\n/**                                                                                                                    // 97\n * Translate native top level events into event types.                                                                 // 98\n *                                                                                                                     // 99\n * @param {string} topLevelType                                                                                        // 100\n * @return {object}                                                                                                    // 101\n */                                                                                                                    // 102\nfunction getCompositionEventType(topLevelType) {                                                                       // 103\n  switch (topLevelType) {                                                                                              // 104\n    case 'topCompositionStart':                                                                                        // 105\n      return eventTypes.compositionStart;                                                                              // 106\n    case 'topCompositionEnd':                                                                                          // 107\n      return eventTypes.compositionEnd;                                                                                // 108\n    case 'topCompositionUpdate':                                                                                       // 109\n      return eventTypes.compositionUpdate;                                                                             // 110\n  }                                                                                                                    // 111\n}                                                                                                                      // 112\n                                                                                                                       // 113\n/**                                                                                                                    // 114\n * Does our fallback best-guess model think this event signifies that                                                  // 115\n * composition has begun?                                                                                              // 116\n *                                                                                                                     // 117\n * @param {string} topLevelType                                                                                        // 118\n * @param {object} nativeEvent                                                                                         // 119\n * @return {boolean}                                                                                                   // 120\n */                                                                                                                    // 121\nfunction isFallbackCompositionStart(topLevelType, nativeEvent) {                                                       // 122\n  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;                                       // 123\n}                                                                                                                      // 124\n                                                                                                                       // 125\n/**                                                                                                                    // 126\n * Does our fallback mode think that this event is the end of composition?                                             // 127\n *                                                                                                                     // 128\n * @param {string} topLevelType                                                                                        // 129\n * @param {object} nativeEvent                                                                                         // 130\n * @return {boolean}                                                                                                   // 131\n */                                                                                                                    // 132\nfunction isFallbackCompositionEnd(topLevelType, nativeEvent) {                                                         // 133\n  switch (topLevelType) {                                                                                              // 134\n    case 'topKeyUp':                                                                                                   // 135\n      // Command keys insert or clear IME input.                                                                       // 136\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;                                                         // 137\n    case 'topKeyDown':                                                                                                 // 138\n      // Expect IME keyCode on each keydown. If we get any other                                                       // 139\n      // code we must have exited earlier.                                                                             // 140\n      return nativeEvent.keyCode !== START_KEYCODE;                                                                    // 141\n    case 'topKeyPress':                                                                                                // 142\n    case 'topMouseDown':                                                                                               // 143\n    case 'topBlur':                                                                                                    // 144\n      // Events are not possible without cancelling IME.                                                               // 145\n      return true;                                                                                                     // 146\n    default:                                                                                                           // 147\n      return false;                                                                                                    // 148\n  }                                                                                                                    // 149\n}                                                                                                                      // 150\n                                                                                                                       // 151\n/**                                                                                                                    // 152\n * Google Input Tools provides composition data via a CustomEvent,                                                     // 153\n * with the `data` property populated in the `detail` object. If this                                                  // 154\n * is available on the event object, use it. If not, this is a plain                                                   // 155\n * composition event and we have nothing special to extract.                                                           // 156\n *                                                                                                                     // 157\n * @param {object} nativeEvent                                                                                         // 158\n * @return {?string}                                                                                                   // 159\n */                                                                                                                    // 160\nfunction getDataFromCustomEvent(nativeEvent) {                                                                         // 161\n  var detail = nativeEvent.detail;                                                                                     // 162\n  if (typeof detail === 'object' && 'data' in detail) {                                                                // 163\n    return detail.data;                                                                                                // 164\n  }                                                                                                                    // 165\n  return null;                                                                                                         // 166\n}                                                                                                                      // 167\n                                                                                                                       // 168\n// Track the current IME composition fallback object, if any.                                                          // 169\nvar currentComposition = null;                                                                                         // 170\n                                                                                                                       // 171\n/**                                                                                                                    // 172\n * @return {?object} A SyntheticCompositionEvent.                                                                      // 173\n */                                                                                                                    // 174\nfunction extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {                           // 175\n  var eventType;                                                                                                       // 176\n  var fallbackData;                                                                                                    // 177\n                                                                                                                       // 178\n  if (canUseCompositionEvent) {                                                                                        // 179\n    eventType = getCompositionEventType(topLevelType);                                                                 // 180\n  } else if (!currentComposition) {                                                                                    // 181\n    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {                                                       // 182\n      eventType = eventTypes.compositionStart;                                                                         // 183\n    }                                                                                                                  // 184\n  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {                                                    // 185\n    eventType = eventTypes.compositionEnd;                                                                             // 186\n  }                                                                                                                    // 187\n                                                                                                                       // 188\n  if (!eventType) {                                                                                                    // 189\n    return null;                                                                                                       // 190\n  }                                                                                                                    // 191\n                                                                                                                       // 192\n  if (useFallbackCompositionData) {                                                                                    // 193\n    // The current composition is stored statically and must not be                                                    // 194\n    // overwritten while composition continues.                                                                        // 195\n    if (!currentComposition && eventType === eventTypes.compositionStart) {                                            // 196\n      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);                                      // 197\n    } else if (eventType === eventTypes.compositionEnd) {                                                              // 198\n      if (currentComposition) {                                                                                        // 199\n        fallbackData = currentComposition.getData();                                                                   // 200\n      }                                                                                                                // 201\n    }                                                                                                                  // 202\n  }                                                                                                                    // 203\n                                                                                                                       // 204\n  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);              // 205\n                                                                                                                       // 206\n  if (fallbackData) {                                                                                                  // 207\n    // Inject data generated from fallback path into the synthetic event.                                              // 208\n    // This matches the property of native CompositionEventInterface.                                                  // 209\n    event.data = fallbackData;                                                                                         // 210\n  } else {                                                                                                             // 211\n    var customData = getDataFromCustomEvent(nativeEvent);                                                              // 212\n    if (customData !== null) {                                                                                         // 213\n      event.data = customData;                                                                                         // 214\n    }                                                                                                                  // 215\n  }                                                                                                                    // 216\n                                                                                                                       // 217\n  EventPropagators.accumulateTwoPhaseDispatches(event);                                                                // 218\n  return event;                                                                                                        // 219\n}                                                                                                                      // 220\n                                                                                                                       // 221\n/**                                                                                                                    // 222\n * @param {string} topLevelType Record from `EventConstants`.                                                          // 223\n * @param {object} nativeEvent Native browser event.                                                                   // 224\n * @return {?string} The string corresponding to this `beforeInput` event.                                             // 225\n */                                                                                                                    // 226\nfunction getNativeBeforeInputChars(topLevelType, nativeEvent) {                                                        // 227\n  switch (topLevelType) {                                                                                              // 228\n    case 'topCompositionEnd':                                                                                          // 229\n      return getDataFromCustomEvent(nativeEvent);                                                                      // 230\n    case 'topKeyPress':                                                                                                // 231\n      /**                                                                                                              // 232\n       * If native `textInput` events are available, our goal is to make                                               // 233\n       * use of them. However, there is a special case: the spacebar key.                                              // 234\n       * In Webkit, preventing default on a spacebar `textInput` event                                                 // 235\n       * cancels character insertion, but it *also* causes the browser                                                 // 236\n       * to fall back to its default spacebar behavior of scrolling the                                                // 237\n       * page.                                                                                                         // 238\n       *                                                                                                               // 239\n       * Tracking at:                                                                                                  // 240\n       * https://code.google.com/p/chromium/issues/detail?id=355103                                                    // 241\n       *                                                                                                               // 242\n       * To avoid this issue, use the keypress event as if no `textInput`                                              // 243\n       * event is available.                                                                                           // 244\n       */                                                                                                              // 245\n      var which = nativeEvent.which;                                                                                   // 246\n      if (which !== SPACEBAR_CODE) {                                                                                   // 247\n        return null;                                                                                                   // 248\n      }                                                                                                                // 249\n                                                                                                                       // 250\n      hasSpaceKeypress = true;                                                                                         // 251\n      return SPACEBAR_CHAR;                                                                                            // 252\n                                                                                                                       // 253\n    case 'topTextInput':                                                                                               // 254\n      // Record the characters to be added to the DOM.                                                                 // 255\n      var chars = nativeEvent.data;                                                                                    // 256\n                                                                                                                       // 257\n      // If it's a spacebar character, assume that we have already handled                                             // 258\n      // it at the keypress level and bail immediately. Android Chrome                                                 // 259\n      // doesn't give us keycodes, so we need to blacklist it.                                                         // 260\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {                                                               // 261\n        return null;                                                                                                   // 262\n      }                                                                                                                // 263\n                                                                                                                       // 264\n      return chars;                                                                                                    // 265\n                                                                                                                       // 266\n    default:                                                                                                           // 267\n      // For other native event types, do nothing.                                                                     // 268\n      return null;                                                                                                     // 269\n  }                                                                                                                    // 270\n}                                                                                                                      // 271\n                                                                                                                       // 272\n/**                                                                                                                    // 273\n * For browsers that do not provide the `textInput` event, extract the                                                 // 274\n * appropriate string to use for SyntheticInputEvent.                                                                  // 275\n *                                                                                                                     // 276\n * @param {string} topLevelType Record from `EventConstants`.                                                          // 277\n * @param {object} nativeEvent Native browser event.                                                                   // 278\n * @return {?string} The fallback string for this `beforeInput` event.                                                 // 279\n */                                                                                                                    // 280\nfunction getFallbackBeforeInputChars(topLevelType, nativeEvent) {                                                      // 281\n  // If we are currently composing (IME) and using a fallback to do so,                                                // 282\n  // try to extract the composed characters from the fallback object.                                                  // 283\n  // If composition event is available, we extract a string only at                                                    // 284\n  // compositionevent, otherwise extract it at fallback events.                                                        // 285\n  if (currentComposition) {                                                                                            // 286\n    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n      var chars = currentComposition.getData();                                                                        // 288\n      FallbackCompositionState.release(currentComposition);                                                            // 289\n      currentComposition = null;                                                                                       // 290\n      return chars;                                                                                                    // 291\n    }                                                                                                                  // 292\n    return null;                                                                                                       // 293\n  }                                                                                                                    // 294\n                                                                                                                       // 295\n  switch (topLevelType) {                                                                                              // 296\n    case 'topPaste':                                                                                                   // 297\n      // If a paste event occurs after a keypress, throw out the input                                                 // 298\n      // chars. Paste events should not lead to BeforeInput events.                                                    // 299\n      return null;                                                                                                     // 300\n    case 'topKeyPress':                                                                                                // 301\n      /**                                                                                                              // 302\n       * As of v27, Firefox may fire keypress events even when no character                                            // 303\n       * will be inserted. A few possibilities:                                                                        // 304\n       *                                                                                                               // 305\n       * - `which` is `0`. Arrow keys, Esc key, etc.                                                                   // 306\n       *                                                                                                               // 307\n       * - `which` is the pressed key code, but no char is available.                                                  // 308\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for                                               // 309\n       *   this key combination and no character is inserted into the                                                  // 310\n       *   document, but FF fires the keypress for char code `100` anyway.                                             // 311\n       *   No `input` event will occur.                                                                                // 312\n       *                                                                                                               // 313\n       * - `which` is the pressed key code, but a command combination is                                               // 314\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no                                                   // 315\n       *   `input` event will occur.                                                                                   // 316\n       */                                                                                                              // 317\n      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {                                                      // 318\n        return String.fromCharCode(nativeEvent.which);                                                                 // 319\n      }                                                                                                                // 320\n      return null;                                                                                                     // 321\n    case 'topCompositionEnd':                                                                                          // 322\n      return useFallbackCompositionData ? null : nativeEvent.data;                                                     // 323\n    default:                                                                                                           // 324\n      return null;                                                                                                     // 325\n  }                                                                                                                    // 326\n}                                                                                                                      // 327\n                                                                                                                       // 328\n/**                                                                                                                    // 329\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native                                             // 330\n * `textInput` or fallback behavior.                                                                                   // 331\n *                                                                                                                     // 332\n * @return {?object} A SyntheticInputEvent.                                                                            // 333\n */                                                                                                                    // 334\nfunction extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {                           // 335\n  var chars;                                                                                                           // 336\n                                                                                                                       // 337\n  if (canUseTextInputEvent) {                                                                                          // 338\n    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);                                                      // 339\n  } else {                                                                                                             // 340\n    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);                                                    // 341\n  }                                                                                                                    // 342\n                                                                                                                       // 343\n  // If no characters are being inserted, no BeforeInput event should                                                  // 344\n  // be fired.                                                                                                         // 345\n  if (!chars) {                                                                                                        // 346\n    return null;                                                                                                       // 347\n  }                                                                                                                    // 348\n                                                                                                                       // 349\n  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);       // 350\n                                                                                                                       // 351\n  event.data = chars;                                                                                                  // 352\n  EventPropagators.accumulateTwoPhaseDispatches(event);                                                                // 353\n  return event;                                                                                                        // 354\n}                                                                                                                      // 355\n                                                                                                                       // 356\n/**                                                                                                                    // 357\n * Create an `onBeforeInput` event to match                                                                            // 358\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.                                       // 359\n *                                                                                                                     // 360\n * This event plugin is based on the native `textInput` event                                                          // 361\n * available in Chrome, Safari, Opera, and IE. This event fires after                                                  // 362\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.                                                          // 363\n *                                                                                                                     // 364\n * `beforeInput` is spec'd but not implemented in any browsers, and                                                    // 365\n * the `input` event does not provide any useful information about what has                                            // 366\n * actually been added, contrary to the spec. Thus, `textInput` is the best                                            // 367\n * available event to identify the characters that have actually been inserted                                         // 368\n * into the target node.                                                                                               // 369\n *                                                                                                                     // 370\n * This plugin is also responsible for emitting `composition` events, thus                                             // 371\n * allowing us to share composition fallback code for both `beforeInput` and                                           // 372\n * `composition` event types.                                                                                          // 373\n */                                                                                                                    // 374\nvar BeforeInputEventPlugin = {                                                                                         // 375\n  eventTypes: eventTypes,                                                                                              // 376\n                                                                                                                       // 377\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {                                 // 378\n    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];\n  }                                                                                                                    // 380\n};                                                                                                                     // 381\n                                                                                                                       // 382\nmodule.exports = BeforeInputEventPlugin;                                                                               // 383\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"EventPropagators.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/EventPropagators.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar EventPluginHub = require('./EventPluginHub');                                                                      // 13\nvar EventPluginUtils = require('./EventPluginUtils');                                                                  // 14\n                                                                                                                       // 15\nvar accumulateInto = require('./accumulateInto');                                                                      // 16\nvar forEachAccumulated = require('./forEachAccumulated');                                                              // 17\nvar warning = require('fbjs/lib/warning');                                                                             // 18\n                                                                                                                       // 19\nvar getListener = EventPluginHub.getListener;                                                                          // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n * Some event types have a notion of different registration names for different                                        // 23\n * \"phases\" of propagation. This finds listeners by a given phase.                                                     // 24\n */                                                                                                                    // 25\nfunction listenerAtPhase(inst, event, propagationPhase) {                                                              // 26\n  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];                               // 27\n  return getListener(inst, registrationName);                                                                          // 28\n}                                                                                                                      // 29\n                                                                                                                       // 30\n/**                                                                                                                    // 31\n * Tags a `SyntheticEvent` with dispatched listeners. Creating this function                                           // 32\n * here, allows us to not have to bind or create functions for each event.                                             // 33\n * Mutating the event's members allows us to not have to create a wrapping                                             // 34\n * \"dispatch\" object that pairs the event with the listener.                                                           // 35\n */                                                                                                                    // 36\nfunction accumulateDirectionalDispatches(inst, phase, event) {                                                         // 37\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 38\n    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;               // 39\n  }                                                                                                                    // 40\n  var listener = listenerAtPhase(inst, event, phase);                                                                  // 41\n  if (listener) {                                                                                                      // 42\n    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);                                     // 43\n    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);                                         // 44\n  }                                                                                                                    // 45\n}                                                                                                                      // 46\n                                                                                                                       // 47\n/**                                                                                                                    // 48\n * Collect dispatches (must be entirely collected before dispatching - see unit                                        // 49\n * tests). Lazily allocate the array to conserve memory.  We must loop through                                         // 50\n * each event and perform the traversal for each one. We cannot perform a                                              // 51\n * single traversal for the entire collection of events because each event may                                         // 52\n * have a different target.                                                                                            // 53\n */                                                                                                                    // 54\nfunction accumulateTwoPhaseDispatchesSingle(event) {                                                                   // 55\n  if (event && event.dispatchConfig.phasedRegistrationNames) {                                                         // 56\n    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);                      // 57\n  }                                                                                                                    // 58\n}                                                                                                                      // 59\n                                                                                                                       // 60\n/**                                                                                                                    // 61\n * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.                                          // 62\n */                                                                                                                    // 63\nfunction accumulateTwoPhaseDispatchesSingleSkipTarget(event) {                                                         // 64\n  if (event && event.dispatchConfig.phasedRegistrationNames) {                                                         // 65\n    var targetInst = event._targetInst;                                                                                // 66\n    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;                               // 67\n    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);                             // 68\n  }                                                                                                                    // 69\n}                                                                                                                      // 70\n                                                                                                                       // 71\n/**                                                                                                                    // 72\n * Accumulates without regard to direction, does not look for phased                                                   // 73\n * registration names. Same as `accumulateDirectDispatchesSingle` but without                                          // 74\n * requiring that the `dispatchMarker` be the same as the dispatched ID.                                               // 75\n */                                                                                                                    // 76\nfunction accumulateDispatches(inst, ignoredDirection, event) {                                                         // 77\n  if (event && event.dispatchConfig.registrationName) {                                                                // 78\n    var registrationName = event.dispatchConfig.registrationName;                                                      // 79\n    var listener = getListener(inst, registrationName);                                                                // 80\n    if (listener) {                                                                                                    // 81\n      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);                                   // 82\n      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);                                       // 83\n    }                                                                                                                  // 84\n  }                                                                                                                    // 85\n}                                                                                                                      // 86\n                                                                                                                       // 87\n/**                                                                                                                    // 88\n * Accumulates dispatches on an `SyntheticEvent`, but only for the                                                     // 89\n * `dispatchMarker`.                                                                                                   // 90\n * @param {SyntheticEvent} event                                                                                       // 91\n */                                                                                                                    // 92\nfunction accumulateDirectDispatchesSingle(event) {                                                                     // 93\n  if (event && event.dispatchConfig.registrationName) {                                                                // 94\n    accumulateDispatches(event._targetInst, null, event);                                                              // 95\n  }                                                                                                                    // 96\n}                                                                                                                      // 97\n                                                                                                                       // 98\nfunction accumulateTwoPhaseDispatches(events) {                                                                        // 99\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);                                                      // 100\n}                                                                                                                      // 101\n                                                                                                                       // 102\nfunction accumulateTwoPhaseDispatchesSkipTarget(events) {                                                              // 103\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);                                            // 104\n}                                                                                                                      // 105\n                                                                                                                       // 106\nfunction accumulateEnterLeaveDispatches(leave, enter, from, to) {                                                      // 107\n  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);                                   // 108\n}                                                                                                                      // 109\n                                                                                                                       // 110\nfunction accumulateDirectDispatches(events) {                                                                          // 111\n  forEachAccumulated(events, accumulateDirectDispatchesSingle);                                                        // 112\n}                                                                                                                      // 113\n                                                                                                                       // 114\n/**                                                                                                                    // 115\n * A small set of propagation patterns, each of which will accept a small amount                                       // 116\n * of information, and generate a set of \"dispatch ready event objects\" - which                                        // 117\n * are sets of events that have already been annotated with a set of dispatched                                        // 118\n * listener functions/ids. The API is designed this way to discourage these                                            // 119\n * propagation strategies from actually executing the dispatches, since we                                             // 120\n * always want to collect the entire set of dispatches before executing event a                                        // 121\n * single one.                                                                                                         // 122\n *                                                                                                                     // 123\n * @constructor EventPropagators                                                                                       // 124\n */                                                                                                                    // 125\nvar EventPropagators = {                                                                                               // 126\n  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,                                                          // 127\n  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,                                      // 128\n  accumulateDirectDispatches: accumulateDirectDispatches,                                                              // 129\n  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches                                                       // 130\n};                                                                                                                     // 131\n                                                                                                                       // 132\nmodule.exports = EventPropagators;                                                                                     // 133\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"EventPluginHub.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/EventPluginHub.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 13\n                                                                                                                       // 14\nvar EventPluginRegistry = require('./EventPluginRegistry');                                                            // 15\nvar EventPluginUtils = require('./EventPluginUtils');                                                                  // 16\nvar ReactErrorUtils = require('./ReactErrorUtils');                                                                    // 17\n                                                                                                                       // 18\nvar accumulateInto = require('./accumulateInto');                                                                      // 19\nvar forEachAccumulated = require('./forEachAccumulated');                                                              // 20\nvar invariant = require('fbjs/lib/invariant');                                                                         // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * Internal store for event listeners                                                                                  // 24\n */                                                                                                                    // 25\nvar listenerBank = {};                                                                                                 // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * Internal queue of events that have accumulated their dispatches and are                                             // 29\n * waiting to have their dispatches executed.                                                                          // 30\n */                                                                                                                    // 31\nvar eventQueue = null;                                                                                                 // 32\n                                                                                                                       // 33\n/**                                                                                                                    // 34\n * Dispatches an event and releases it back into the pool, unless persistent.                                          // 35\n *                                                                                                                     // 36\n * @param {?object} event Synthetic event to be dispatched.                                                            // 37\n * @param {boolean} simulated If the event is simulated (changes exn behavior)                                         // 38\n * @private                                                                                                            // 39\n */                                                                                                                    // 40\nvar executeDispatchesAndRelease = function (event, simulated) {                                                        // 41\n  if (event) {                                                                                                         // 42\n    EventPluginUtils.executeDispatchesInOrder(event, simulated);                                                       // 43\n                                                                                                                       // 44\n    if (!event.isPersistent()) {                                                                                       // 45\n      event.constructor.release(event);                                                                                // 46\n    }                                                                                                                  // 47\n  }                                                                                                                    // 48\n};                                                                                                                     // 49\nvar executeDispatchesAndReleaseSimulated = function (e) {                                                              // 50\n  return executeDispatchesAndRelease(e, true);                                                                         // 51\n};                                                                                                                     // 52\nvar executeDispatchesAndReleaseTopLevel = function (e) {                                                               // 53\n  return executeDispatchesAndRelease(e, false);                                                                        // 54\n};                                                                                                                     // 55\n                                                                                                                       // 56\nvar getDictionaryKey = function (inst) {                                                                               // 57\n  // Prevents V8 performance issue:                                                                                    // 58\n  // https://github.com/facebook/react/pull/7232                                                                       // 59\n  return '.' + inst._rootNodeID;                                                                                       // 60\n};                                                                                                                     // 61\n                                                                                                                       // 62\nfunction isInteractive(tag) {                                                                                          // 63\n  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';                                // 64\n}                                                                                                                      // 65\n                                                                                                                       // 66\nfunction shouldPreventMouseEvent(name, type, props) {                                                                  // 67\n  switch (name) {                                                                                                      // 68\n    case 'onClick':                                                                                                    // 69\n    case 'onClickCapture':                                                                                             // 70\n    case 'onDoubleClick':                                                                                              // 71\n    case 'onDoubleClickCapture':                                                                                       // 72\n    case 'onMouseDown':                                                                                                // 73\n    case 'onMouseDownCapture':                                                                                         // 74\n    case 'onMouseMove':                                                                                                // 75\n    case 'onMouseMoveCapture':                                                                                         // 76\n    case 'onMouseUp':                                                                                                  // 77\n    case 'onMouseUpCapture':                                                                                           // 78\n      return !!(props.disabled && isInteractive(type));                                                                // 79\n    default:                                                                                                           // 80\n      return false;                                                                                                    // 81\n  }                                                                                                                    // 82\n}                                                                                                                      // 83\n                                                                                                                       // 84\n/**                                                                                                                    // 85\n * This is a unified interface for event plugins to be installed and configured.                                       // 86\n *                                                                                                                     // 87\n * Event plugins can implement the following properties:                                                               // 88\n *                                                                                                                     // 89\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}                                             // 90\n *     Required. When a top-level event is fired, this method is expected to                                           // 91\n *     extract synthetic events that will in turn be queued and dispatched.                                            // 92\n *                                                                                                                     // 93\n *   `eventTypes` {object}                                                                                             // 94\n *     Optional, plugins that fire events must publish a mapping of registration                                       // 95\n *     names that are used to register listeners. Values of this mapping must                                          // 96\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.                                        // 97\n *                                                                                                                     // 98\n *   `executeDispatch` {function(object, function, string)}                                                            // 99\n *     Optional, allows plugins to override how an event gets dispatched. By                                           // 100\n *     default, the listener is simply invoked.                                                                        // 101\n *                                                                                                                     // 102\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.                                        // 103\n *                                                                                                                     // 104\n * @public                                                                                                             // 105\n */                                                                                                                    // 106\nvar EventPluginHub = {                                                                                                 // 107\n  /**                                                                                                                  // 108\n   * Methods for injecting dependencies.                                                                               // 109\n   */                                                                                                                  // 110\n  injection: {                                                                                                         // 111\n    /**                                                                                                                // 112\n     * @param {array} InjectedEventPluginOrder                                                                         // 113\n     * @public                                                                                                         // 114\n     */                                                                                                                // 115\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,                                                // 116\n                                                                                                                       // 117\n    /**                                                                                                                // 118\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.                                        // 119\n     */                                                                                                                // 120\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName                                             // 121\n  },                                                                                                                   // 122\n                                                                                                                       // 123\n  /**                                                                                                                  // 124\n   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.                                        // 125\n   *                                                                                                                   // 126\n   * @param {object} inst The instance, which is the source of events.                                                 // 127\n   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 128\n   * @param {function} listener The callback to store.                                                                 // 129\n   */                                                                                                                  // 130\n  putListener: function (inst, registrationName, listener) {                                                           // 131\n    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;\n                                                                                                                       // 133\n    var key = getDictionaryKey(inst);                                                                                  // 134\n    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});             // 135\n    bankForRegistrationName[key] = listener;                                                                           // 136\n                                                                                                                       // 137\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];                                  // 138\n    if (PluginModule && PluginModule.didPutListener) {                                                                 // 139\n      PluginModule.didPutListener(inst, registrationName, listener);                                                   // 140\n    }                                                                                                                  // 141\n  },                                                                                                                   // 142\n                                                                                                                       // 143\n  /**                                                                                                                  // 144\n   * @param {object} inst The instance, which is the source of events.                                                 // 145\n   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 146\n   * @return {?function} The stored callback.                                                                          // 147\n   */                                                                                                                  // 148\n  getListener: function (inst, registrationName) {                                                                     // 149\n    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not                                         // 150\n    // live here; needs to be moved to a better place soon                                                             // 151\n    var bankForRegistrationName = listenerBank[registrationName];                                                      // 152\n    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {            // 153\n      return null;                                                                                                     // 154\n    }                                                                                                                  // 155\n    var key = getDictionaryKey(inst);                                                                                  // 156\n    return bankForRegistrationName && bankForRegistrationName[key];                                                    // 157\n  },                                                                                                                   // 158\n                                                                                                                       // 159\n  /**                                                                                                                  // 160\n   * Deletes a listener from the registration bank.                                                                    // 161\n   *                                                                                                                   // 162\n   * @param {object} inst The instance, which is the source of events.                                                 // 163\n   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 164\n   */                                                                                                                  // 165\n  deleteListener: function (inst, registrationName) {                                                                  // 166\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];                                  // 167\n    if (PluginModule && PluginModule.willDeleteListener) {                                                             // 168\n      PluginModule.willDeleteListener(inst, registrationName);                                                         // 169\n    }                                                                                                                  // 170\n                                                                                                                       // 171\n    var bankForRegistrationName = listenerBank[registrationName];                                                      // 172\n    // TODO: This should never be null -- when is it?                                                                  // 173\n    if (bankForRegistrationName) {                                                                                     // 174\n      var key = getDictionaryKey(inst);                                                                                // 175\n      delete bankForRegistrationName[key];                                                                             // 176\n    }                                                                                                                  // 177\n  },                                                                                                                   // 178\n                                                                                                                       // 179\n  /**                                                                                                                  // 180\n   * Deletes all listeners for the DOM element with the supplied ID.                                                   // 181\n   *                                                                                                                   // 182\n   * @param {object} inst The instance, which is the source of events.                                                 // 183\n   */                                                                                                                  // 184\n  deleteAllListeners: function (inst) {                                                                                // 185\n    var key = getDictionaryKey(inst);                                                                                  // 186\n    for (var registrationName in listenerBank) {                                                                       // 187\n      if (!listenerBank.hasOwnProperty(registrationName)) {                                                            // 188\n        continue;                                                                                                      // 189\n      }                                                                                                                // 190\n                                                                                                                       // 191\n      if (!listenerBank[registrationName][key]) {                                                                      // 192\n        continue;                                                                                                      // 193\n      }                                                                                                                // 194\n                                                                                                                       // 195\n      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];                                // 196\n      if (PluginModule && PluginModule.willDeleteListener) {                                                           // 197\n        PluginModule.willDeleteListener(inst, registrationName);                                                       // 198\n      }                                                                                                                // 199\n                                                                                                                       // 200\n      delete listenerBank[registrationName][key];                                                                      // 201\n    }                                                                                                                  // 202\n  },                                                                                                                   // 203\n                                                                                                                       // 204\n  /**                                                                                                                  // 205\n   * Allows registered plugins an opportunity to extract events from top-level                                         // 206\n   * native browser events.                                                                                            // 207\n   *                                                                                                                   // 208\n   * @return {*} An accumulation of synthetic events.                                                                  // 209\n   * @internal                                                                                                         // 210\n   */                                                                                                                  // 211\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {                                 // 212\n    var events;                                                                                                        // 213\n    var plugins = EventPluginRegistry.plugins;                                                                         // 214\n    for (var i = 0; i < plugins.length; i++) {                                                                         // 215\n      // Not every plugin in the ordering may be loaded at runtime.                                                    // 216\n      var possiblePlugin = plugins[i];                                                                                 // 217\n      if (possiblePlugin) {                                                                                            // 218\n        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);  // 219\n        if (extractedEvents) {                                                                                         // 220\n          events = accumulateInto(events, extractedEvents);                                                            // 221\n        }                                                                                                              // 222\n      }                                                                                                                // 223\n    }                                                                                                                  // 224\n    return events;                                                                                                     // 225\n  },                                                                                                                   // 226\n                                                                                                                       // 227\n  /**                                                                                                                  // 228\n   * Enqueues a synthetic event that should be dispatched when                                                         // 229\n   * `processEventQueue` is invoked.                                                                                   // 230\n   *                                                                                                                   // 231\n   * @param {*} events An accumulation of synthetic events.                                                            // 232\n   * @internal                                                                                                         // 233\n   */                                                                                                                  // 234\n  enqueueEvents: function (events) {                                                                                   // 235\n    if (events) {                                                                                                      // 236\n      eventQueue = accumulateInto(eventQueue, events);                                                                 // 237\n    }                                                                                                                  // 238\n  },                                                                                                                   // 239\n                                                                                                                       // 240\n  /**                                                                                                                  // 241\n   * Dispatches all synthetic events on the event queue.                                                               // 242\n   *                                                                                                                   // 243\n   * @internal                                                                                                         // 244\n   */                                                                                                                  // 245\n  processEventQueue: function (simulated) {                                                                            // 246\n    // Set `eventQueue` to null before processing it so that we can tell if more                                       // 247\n    // events get enqueued while processing.                                                                           // 248\n    var processingEventQueue = eventQueue;                                                                             // 249\n    eventQueue = null;                                                                                                 // 250\n    if (simulated) {                                                                                                   // 251\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);                                  // 252\n    } else {                                                                                                           // 253\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);                                   // 254\n    }                                                                                                                  // 255\n    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;\n    // This would be a good time to rethrow if any of the event handlers threw.                                        // 257\n    ReactErrorUtils.rethrowCaughtError();                                                                              // 258\n  },                                                                                                                   // 259\n                                                                                                                       // 260\n  /**                                                                                                                  // 261\n   * These are needed for tests only. Do not use!                                                                      // 262\n   */                                                                                                                  // 263\n  __purge: function () {                                                                                               // 264\n    listenerBank = {};                                                                                                 // 265\n  },                                                                                                                   // 266\n                                                                                                                       // 267\n  __getListenerBank: function () {                                                                                     // 268\n    return listenerBank;                                                                                               // 269\n  }                                                                                                                    // 270\n};                                                                                                                     // 271\n                                                                                                                       // 272\nmodule.exports = EventPluginHub;                                                                                       // 273\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"EventPluginRegistry.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/EventPluginRegistry.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar invariant = require('fbjs/lib/invariant');                                                                         // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Injectable ordering of event plugins.                                                                               // 19\n */                                                                                                                    // 20\nvar eventPluginOrder = null;                                                                                           // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * Injectable mapping from names to event plugin modules.                                                              // 24\n */                                                                                                                    // 25\nvar namesToPlugins = {};                                                                                               // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * Recomputes the plugin list using the injected plugins and plugin ordering.                                          // 29\n *                                                                                                                     // 30\n * @private                                                                                                            // 31\n */                                                                                                                    // 32\nfunction recomputePluginOrdering() {                                                                                   // 33\n  if (!eventPluginOrder) {                                                                                             // 34\n    // Wait until an `eventPluginOrder` is injected.                                                                   // 35\n    return;                                                                                                            // 36\n  }                                                                                                                    // 37\n  for (var pluginName in namesToPlugins) {                                                                             // 38\n    var pluginModule = namesToPlugins[pluginName];                                                                     // 39\n    var pluginIndex = eventPluginOrder.indexOf(pluginName);                                                            // 40\n    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;\n    if (EventPluginRegistry.plugins[pluginIndex]) {                                                                    // 42\n      continue;                                                                                                        // 43\n    }                                                                                                                  // 44\n    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;\n    EventPluginRegistry.plugins[pluginIndex] = pluginModule;                                                           // 46\n    var publishedEvents = pluginModule.eventTypes;                                                                     // 47\n    for (var eventName in publishedEvents) {                                                                           // 48\n      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;\n    }                                                                                                                  // 50\n  }                                                                                                                    // 51\n}                                                                                                                      // 52\n                                                                                                                       // 53\n/**                                                                                                                    // 54\n * Publishes an event so that it can be dispatched by the supplied plugin.                                             // 55\n *                                                                                                                     // 56\n * @param {object} dispatchConfig Dispatch configuration for the event.                                                // 57\n * @param {object} PluginModule Plugin publishing the event.                                                           // 58\n * @return {boolean} True if the event was successfully published.                                                     // 59\n * @private                                                                                                            // 60\n */                                                                                                                    // 61\nfunction publishEventForPlugin(dispatchConfig, pluginModule, eventName) {                                              // 62\n  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;                                            // 64\n                                                                                                                       // 65\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;                                                // 66\n  if (phasedRegistrationNames) {                                                                                       // 67\n    for (var phaseName in phasedRegistrationNames) {                                                                   // 68\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {                                                         // 69\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];                                               // 70\n        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);                                      // 71\n      }                                                                                                                // 72\n    }                                                                                                                  // 73\n    return true;                                                                                                       // 74\n  } else if (dispatchConfig.registrationName) {                                                                        // 75\n    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);                                 // 76\n    return true;                                                                                                       // 77\n  }                                                                                                                    // 78\n  return false;                                                                                                        // 79\n}                                                                                                                      // 80\n                                                                                                                       // 81\n/**                                                                                                                    // 82\n * Publishes a registration name that is used to identify dispatched events and                                        // 83\n * can be used with `EventPluginHub.putListener` to register listeners.                                                // 84\n *                                                                                                                     // 85\n * @param {string} registrationName Registration name to add.                                                          // 86\n * @param {object} PluginModule Plugin publishing the event.                                                           // 87\n * @private                                                                                                            // 88\n */                                                                                                                    // 89\nfunction publishRegistrationName(registrationName, pluginModule, eventName) {                                          // 90\n  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;\n  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;                                        // 92\n  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;\n                                                                                                                       // 94\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 95\n    var lowerCasedName = registrationName.toLowerCase();                                                               // 96\n    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;                                  // 97\n                                                                                                                       // 98\n    if (registrationName === 'onDoubleClick') {                                                                        // 99\n      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;                                     // 100\n    }                                                                                                                  // 101\n  }                                                                                                                    // 102\n}                                                                                                                      // 103\n                                                                                                                       // 104\n/**                                                                                                                    // 105\n * Registers plugins so that they can extract and dispatch events.                                                     // 106\n *                                                                                                                     // 107\n * @see {EventPluginHub}                                                                                               // 108\n */                                                                                                                    // 109\nvar EventPluginRegistry = {                                                                                            // 110\n  /**                                                                                                                  // 111\n   * Ordered list of injected plugins.                                                                                 // 112\n   */                                                                                                                  // 113\n  plugins: [],                                                                                                         // 114\n                                                                                                                       // 115\n  /**                                                                                                                  // 116\n   * Mapping from event name to dispatch config                                                                        // 117\n   */                                                                                                                  // 118\n  eventNameDispatchConfigs: {},                                                                                        // 119\n                                                                                                                       // 120\n  /**                                                                                                                  // 121\n   * Mapping from registration name to plugin module                                                                   // 122\n   */                                                                                                                  // 123\n  registrationNameModules: {},                                                                                         // 124\n                                                                                                                       // 125\n  /**                                                                                                                  // 126\n   * Mapping from registration name to event name                                                                      // 127\n   */                                                                                                                  // 128\n  registrationNameDependencies: {},                                                                                    // 129\n                                                                                                                       // 130\n  /**                                                                                                                  // 131\n   * Mapping from lowercase registration names to the properly cased version,                                          // 132\n   * used to warn in the case of missing event handlers. Available                                                     // 133\n   * only in __DEV__.                                                                                                  // 134\n   * @type {Object}                                                                                                    // 135\n   */                                                                                                                  // 136\n  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,                                        // 137\n  // Trust the developer to only use possibleRegistrationNames in __DEV__                                              // 138\n                                                                                                                       // 139\n  /**                                                                                                                  // 140\n   * Injects an ordering of plugins (by plugin name). This allows the ordering                                         // 141\n   * to be decoupled from injection of the actual plugins so that ordering is                                          // 142\n   * always deterministic regardless of packaging, on-the-fly injection, etc.                                          // 143\n   *                                                                                                                   // 144\n   * @param {array} InjectedEventPluginOrder                                                                           // 145\n   * @internal                                                                                                         // 146\n   * @see {EventPluginHub.injection.injectEventPluginOrder}                                                            // 147\n   */                                                                                                                  // 148\n  injectEventPluginOrder: function (injectedEventPluginOrder) {                                                        // 149\n    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;\n    // Clone the ordering so it cannot be dynamically mutated.                                                         // 151\n    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);                                           // 152\n    recomputePluginOrdering();                                                                                         // 153\n  },                                                                                                                   // 154\n                                                                                                                       // 155\n  /**                                                                                                                  // 156\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be                                          // 157\n   * in the ordering injected by `injectEventPluginOrder`.                                                             // 158\n   *                                                                                                                   // 159\n   * Plugins can be injected as part of page initialization or on-the-fly.                                             // 160\n   *                                                                                                                   // 161\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.                                          // 162\n   * @internal                                                                                                         // 163\n   * @see {EventPluginHub.injection.injectEventPluginsByName}                                                          // 164\n   */                                                                                                                  // 165\n  injectEventPluginsByName: function (injectedNamesToPlugins) {                                                        // 166\n    var isOrderingDirty = false;                                                                                       // 167\n    for (var pluginName in injectedNamesToPlugins) {                                                                   // 168\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {                                                        // 169\n        continue;                                                                                                      // 170\n      }                                                                                                                // 171\n      var pluginModule = injectedNamesToPlugins[pluginName];                                                           // 172\n      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {                 // 173\n        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;\n        namesToPlugins[pluginName] = pluginModule;                                                                     // 175\n        isOrderingDirty = true;                                                                                        // 176\n      }                                                                                                                // 177\n    }                                                                                                                  // 178\n    if (isOrderingDirty) {                                                                                             // 179\n      recomputePluginOrdering();                                                                                       // 180\n    }                                                                                                                  // 181\n  },                                                                                                                   // 182\n                                                                                                                       // 183\n  /**                                                                                                                  // 184\n   * Looks up the plugin for the supplied event.                                                                       // 185\n   *                                                                                                                   // 186\n   * @param {object} event A synthetic event.                                                                          // 187\n   * @return {?object} The plugin that created the supplied event.                                                     // 188\n   * @internal                                                                                                         // 189\n   */                                                                                                                  // 190\n  getPluginModuleForEvent: function (event) {                                                                          // 191\n    var dispatchConfig = event.dispatchConfig;                                                                         // 192\n    if (dispatchConfig.registrationName) {                                                                             // 193\n      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;                     // 194\n    }                                                                                                                  // 195\n    if (dispatchConfig.phasedRegistrationNames !== undefined) {                                                        // 196\n      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see                                          // 197\n      // that it is not undefined.                                                                                     // 198\n      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;                                            // 199\n                                                                                                                       // 200\n      for (var phase in phasedRegistrationNames) {                                                                     // 201\n        if (!phasedRegistrationNames.hasOwnProperty(phase)) {                                                          // 202\n          continue;                                                                                                    // 203\n        }                                                                                                              // 204\n        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];                // 205\n        if (pluginModule) {                                                                                            // 206\n          return pluginModule;                                                                                         // 207\n        }                                                                                                              // 208\n      }                                                                                                                // 209\n    }                                                                                                                  // 210\n    return null;                                                                                                       // 211\n  },                                                                                                                   // 212\n                                                                                                                       // 213\n  /**                                                                                                                  // 214\n   * Exposed for unit testing.                                                                                         // 215\n   * @private                                                                                                          // 216\n   */                                                                                                                  // 217\n  _resetEventPlugins: function () {                                                                                    // 218\n    eventPluginOrder = null;                                                                                           // 219\n    for (var pluginName in namesToPlugins) {                                                                           // 220\n      if (namesToPlugins.hasOwnProperty(pluginName)) {                                                                 // 221\n        delete namesToPlugins[pluginName];                                                                             // 222\n      }                                                                                                                // 223\n    }                                                                                                                  // 224\n    EventPluginRegistry.plugins.length = 0;                                                                            // 225\n                                                                                                                       // 226\n    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;                                       // 227\n    for (var eventName in eventNameDispatchConfigs) {                                                                  // 228\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {                                                        // 229\n        delete eventNameDispatchConfigs[eventName];                                                                    // 230\n      }                                                                                                                // 231\n    }                                                                                                                  // 232\n                                                                                                                       // 233\n    var registrationNameModules = EventPluginRegistry.registrationNameModules;                                         // 234\n    for (var registrationName in registrationNameModules) {                                                            // 235\n      if (registrationNameModules.hasOwnProperty(registrationName)) {                                                  // 236\n        delete registrationNameModules[registrationName];                                                              // 237\n      }                                                                                                                // 238\n    }                                                                                                                  // 239\n                                                                                                                       // 240\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 241\n      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;                                   // 242\n      for (var lowerCasedName in possibleRegistrationNames) {                                                          // 243\n        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {                                                // 244\n          delete possibleRegistrationNames[lowerCasedName];                                                            // 245\n        }                                                                                                              // 246\n      }                                                                                                                // 247\n    }                                                                                                                  // 248\n  }                                                                                                                    // 249\n};                                                                                                                     // 250\n                                                                                                                       // 251\nmodule.exports = EventPluginRegistry;                                                                                  // 252\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"EventPluginUtils.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/EventPluginUtils.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 13\n                                                                                                                       // 14\nvar ReactErrorUtils = require('./ReactErrorUtils');                                                                    // 15\n                                                                                                                       // 16\nvar invariant = require('fbjs/lib/invariant');                                                                         // 17\nvar warning = require('fbjs/lib/warning');                                                                             // 18\n                                                                                                                       // 19\n/**                                                                                                                    // 20\n * Injected dependencies:                                                                                              // 21\n */                                                                                                                    // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * - `ComponentTree`: [required] Module that can convert between React instances                                       // 25\n *   and actual node references.                                                                                       // 26\n */                                                                                                                    // 27\nvar ComponentTree;                                                                                                     // 28\nvar TreeTraversal;                                                                                                     // 29\nvar injection = {                                                                                                      // 30\n  injectComponentTree: function (Injected) {                                                                           // 31\n    ComponentTree = Injected;                                                                                          // 32\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 33\n      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;\n    }                                                                                                                  // 35\n  },                                                                                                                   // 36\n  injectTreeTraversal: function (Injected) {                                                                           // 37\n    TreeTraversal = Injected;                                                                                          // 38\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 39\n      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;\n    }                                                                                                                  // 41\n  }                                                                                                                    // 42\n};                                                                                                                     // 43\n                                                                                                                       // 44\nfunction isEndish(topLevelType) {                                                                                      // 45\n  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';         // 46\n}                                                                                                                      // 47\n                                                                                                                       // 48\nfunction isMoveish(topLevelType) {                                                                                     // 49\n  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';                                           // 50\n}                                                                                                                      // 51\nfunction isStartish(topLevelType) {                                                                                    // 52\n  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';                                          // 53\n}                                                                                                                      // 54\n                                                                                                                       // 55\nvar validateEventDispatches;                                                                                           // 56\nif (process.env.NODE_ENV !== 'production') {                                                                           // 57\n  validateEventDispatches = function (event) {                                                                         // 58\n    var dispatchListeners = event._dispatchListeners;                                                                  // 59\n    var dispatchInstances = event._dispatchInstances;                                                                  // 60\n                                                                                                                       // 61\n    var listenersIsArr = Array.isArray(dispatchListeners);                                                             // 62\n    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;                          // 63\n                                                                                                                       // 64\n    var instancesIsArr = Array.isArray(dispatchInstances);                                                             // 65\n    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;                          // 66\n                                                                                                                       // 67\n    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;\n  };                                                                                                                   // 69\n}                                                                                                                      // 70\n                                                                                                                       // 71\n/**                                                                                                                    // 72\n * Dispatch the event to the listener.                                                                                 // 73\n * @param {SyntheticEvent} event SyntheticEvent to handle                                                              // 74\n * @param {boolean} simulated If the event is simulated (changes exn behavior)                                         // 75\n * @param {function} listener Application-level callback                                                               // 76\n * @param {*} inst Internal component instance                                                                         // 77\n */                                                                                                                    // 78\nfunction executeDispatch(event, simulated, listener, inst) {                                                           // 79\n  var type = event.type || 'unknown-event';                                                                            // 80\n  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);                                                    // 81\n  if (simulated) {                                                                                                     // 82\n    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);                                             // 83\n  } else {                                                                                                             // 84\n    ReactErrorUtils.invokeGuardedCallback(type, listener, event);                                                      // 85\n  }                                                                                                                    // 86\n  event.currentTarget = null;                                                                                          // 87\n}                                                                                                                      // 88\n                                                                                                                       // 89\n/**                                                                                                                    // 90\n * Standard/simple iteration through an event's collected dispatches.                                                  // 91\n */                                                                                                                    // 92\nfunction executeDispatchesInOrder(event, simulated) {                                                                  // 93\n  var dispatchListeners = event._dispatchListeners;                                                                    // 94\n  var dispatchInstances = event._dispatchInstances;                                                                    // 95\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 96\n    validateEventDispatches(event);                                                                                    // 97\n  }                                                                                                                    // 98\n  if (Array.isArray(dispatchListeners)) {                                                                              // 99\n    for (var i = 0; i < dispatchListeners.length; i++) {                                                               // 100\n      if (event.isPropagationStopped()) {                                                                              // 101\n        break;                                                                                                         // 102\n      }                                                                                                                // 103\n      // Listeners and Instances are two parallel arrays that are always in sync.                                      // 104\n      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);                                   // 105\n    }                                                                                                                  // 106\n  } else if (dispatchListeners) {                                                                                      // 107\n    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);                                           // 108\n  }                                                                                                                    // 109\n  event._dispatchListeners = null;                                                                                     // 110\n  event._dispatchInstances = null;                                                                                     // 111\n}                                                                                                                      // 112\n                                                                                                                       // 113\n/**                                                                                                                    // 114\n * Standard/simple iteration through an event's collected dispatches, but stops                                        // 115\n * at the first dispatch execution returning true, and returns that id.                                                // 116\n *                                                                                                                     // 117\n * @return {?string} id of the first dispatch execution who's listener returns                                         // 118\n * true, or null if no listener returned true.                                                                         // 119\n */                                                                                                                    // 120\nfunction executeDispatchesInOrderStopAtTrueImpl(event) {                                                               // 121\n  var dispatchListeners = event._dispatchListeners;                                                                    // 122\n  var dispatchInstances = event._dispatchInstances;                                                                    // 123\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 124\n    validateEventDispatches(event);                                                                                    // 125\n  }                                                                                                                    // 126\n  if (Array.isArray(dispatchListeners)) {                                                                              // 127\n    for (var i = 0; i < dispatchListeners.length; i++) {                                                               // 128\n      if (event.isPropagationStopped()) {                                                                              // 129\n        break;                                                                                                         // 130\n      }                                                                                                                // 131\n      // Listeners and Instances are two parallel arrays that are always in sync.                                      // 132\n      if (dispatchListeners[i](event, dispatchInstances[i])) {                                                         // 133\n        return dispatchInstances[i];                                                                                   // 134\n      }                                                                                                                // 135\n    }                                                                                                                  // 136\n  } else if (dispatchListeners) {                                                                                      // 137\n    if (dispatchListeners(event, dispatchInstances)) {                                                                 // 138\n      return dispatchInstances;                                                                                        // 139\n    }                                                                                                                  // 140\n  }                                                                                                                    // 141\n  return null;                                                                                                         // 142\n}                                                                                                                      // 143\n                                                                                                                       // 144\n/**                                                                                                                    // 145\n * @see executeDispatchesInOrderStopAtTrueImpl                                                                         // 146\n */                                                                                                                    // 147\nfunction executeDispatchesInOrderStopAtTrue(event) {                                                                   // 148\n  var ret = executeDispatchesInOrderStopAtTrueImpl(event);                                                             // 149\n  event._dispatchInstances = null;                                                                                     // 150\n  event._dispatchListeners = null;                                                                                     // 151\n  return ret;                                                                                                          // 152\n}                                                                                                                      // 153\n                                                                                                                       // 154\n/**                                                                                                                    // 155\n * Execution of a \"direct\" dispatch - there must be at most one dispatch                                               // 156\n * accumulated on the event or it is considered an error. It doesn't really make                                       // 157\n * sense for an event with multiple dispatches (bubbled) to keep track of the                                          // 158\n * return values at each dispatch execution, but it does tend to make sense when                                       // 159\n * dealing with \"direct\" dispatches.                                                                                   // 160\n *                                                                                                                     // 161\n * @return {*} The return value of executing the single dispatch.                                                      // 162\n */                                                                                                                    // 163\nfunction executeDirectDispatch(event) {                                                                                // 164\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 165\n    validateEventDispatches(event);                                                                                    // 166\n  }                                                                                                                    // 167\n  var dispatchListener = event._dispatchListeners;                                                                     // 168\n  var dispatchInstance = event._dispatchInstances;                                                                     // 169\n  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;\n  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;              // 171\n  var res = dispatchListener ? dispatchListener(event) : null;                                                         // 172\n  event.currentTarget = null;                                                                                          // 173\n  event._dispatchListeners = null;                                                                                     // 174\n  event._dispatchInstances = null;                                                                                     // 175\n  return res;                                                                                                          // 176\n}                                                                                                                      // 177\n                                                                                                                       // 178\n/**                                                                                                                    // 179\n * @param {SyntheticEvent} event                                                                                       // 180\n * @return {boolean} True iff number of dispatches accumulated is greater than 0.                                      // 181\n */                                                                                                                    // 182\nfunction hasDispatches(event) {                                                                                        // 183\n  return !!event._dispatchListeners;                                                                                   // 184\n}                                                                                                                      // 185\n                                                                                                                       // 186\n/**                                                                                                                    // 187\n * General utilities that are useful in creating custom Event Plugins.                                                 // 188\n */                                                                                                                    // 189\nvar EventPluginUtils = {                                                                                               // 190\n  isEndish: isEndish,                                                                                                  // 191\n  isMoveish: isMoveish,                                                                                                // 192\n  isStartish: isStartish,                                                                                              // 193\n                                                                                                                       // 194\n  executeDirectDispatch: executeDirectDispatch,                                                                        // 195\n  executeDispatchesInOrder: executeDispatchesInOrder,                                                                  // 196\n  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,                                              // 197\n  hasDispatches: hasDispatches,                                                                                        // 198\n                                                                                                                       // 199\n  getInstanceFromNode: function (node) {                                                                               // 200\n    return ComponentTree.getInstanceFromNode(node);                                                                    // 201\n  },                                                                                                                   // 202\n  getNodeFromInstance: function (node) {                                                                               // 203\n    return ComponentTree.getNodeFromInstance(node);                                                                    // 204\n  },                                                                                                                   // 205\n  isAncestor: function (a, b) {                                                                                        // 206\n    return TreeTraversal.isAncestor(a, b);                                                                             // 207\n  },                                                                                                                   // 208\n  getLowestCommonAncestor: function (a, b) {                                                                           // 209\n    return TreeTraversal.getLowestCommonAncestor(a, b);                                                                // 210\n  },                                                                                                                   // 211\n  getParentInstance: function (inst) {                                                                                 // 212\n    return TreeTraversal.getParentInstance(inst);                                                                      // 213\n  },                                                                                                                   // 214\n  traverseTwoPhase: function (target, fn, arg) {                                                                       // 215\n    return TreeTraversal.traverseTwoPhase(target, fn, arg);                                                            // 216\n  },                                                                                                                   // 217\n  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {                                                        // 218\n    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);                                             // 219\n  },                                                                                                                   // 220\n                                                                                                                       // 221\n  injection: injection                                                                                                 // 222\n};                                                                                                                     // 223\n                                                                                                                       // 224\nmodule.exports = EventPluginUtils;                                                                                     // 225\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactErrorUtils.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactErrorUtils.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar caughtError = null;                                                                                                // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Call a function while guarding against errors that happens within it.                                               // 17\n *                                                                                                                     // 18\n * @param {String} name of the guard to use for logging or debugging                                                   // 19\n * @param {Function} func The function to invoke                                                                       // 20\n * @param {*} a First argument                                                                                         // 21\n * @param {*} b Second argument                                                                                        // 22\n */                                                                                                                    // 23\nfunction invokeGuardedCallback(name, func, a) {                                                                        // 24\n  try {                                                                                                                // 25\n    func(a);                                                                                                           // 26\n  } catch (x) {                                                                                                        // 27\n    if (caughtError === null) {                                                                                        // 28\n      caughtError = x;                                                                                                 // 29\n    }                                                                                                                  // 30\n  }                                                                                                                    // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\nvar ReactErrorUtils = {                                                                                                // 34\n  invokeGuardedCallback: invokeGuardedCallback,                                                                        // 35\n                                                                                                                       // 36\n  /**                                                                                                                  // 37\n   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event                                         // 38\n   * handler are sure to be rethrown by rethrowCaughtError.                                                            // 39\n   */                                                                                                                  // 40\n  invokeGuardedCallbackWithCatch: invokeGuardedCallback,                                                               // 41\n                                                                                                                       // 42\n  /**                                                                                                                  // 43\n   * During execution of guarded functions we will capture the first error which                                       // 44\n   * we will rethrow to be handled by the top level error handler.                                                     // 45\n   */                                                                                                                  // 46\n  rethrowCaughtError: function () {                                                                                    // 47\n    if (caughtError) {                                                                                                 // 48\n      var error = caughtError;                                                                                         // 49\n      caughtError = null;                                                                                              // 50\n      throw error;                                                                                                     // 51\n    }                                                                                                                  // 52\n  }                                                                                                                    // 53\n};                                                                                                                     // 54\n                                                                                                                       // 55\nif (process.env.NODE_ENV !== 'production') {                                                                           // 56\n  /**                                                                                                                  // 57\n   * To help development we can get better devtools integration by simulating a                                        // 58\n   * real browser event.                                                                                               // 59\n   */                                                                                                                  // 60\n  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {\n    var fakeNode = document.createElement('react');                                                                    // 62\n    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {                                                 // 63\n      var boundFunc = func.bind(null, a);                                                                              // 64\n      var evtType = 'react-' + name;                                                                                   // 65\n      fakeNode.addEventListener(evtType, boundFunc, false);                                                            // 66\n      var evt = document.createEvent('Event');                                                                         // 67\n      evt.initEvent(evtType, false, false);                                                                            // 68\n      fakeNode.dispatchEvent(evt);                                                                                     // 69\n      fakeNode.removeEventListener(evtType, boundFunc, false);                                                         // 70\n    };                                                                                                                 // 71\n  }                                                                                                                    // 72\n}                                                                                                                      // 73\n                                                                                                                       // 74\nmodule.exports = ReactErrorUtils;                                                                                      // 75\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"accumulateInto.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/accumulateInto.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar invariant = require('fbjs/lib/invariant');                                                                         // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Accumulates items that must not be null or undefined into the first one. This                                       // 19\n * is used to conserve memory by avoiding array allocations, and thus sacrifices                                       // 20\n * API cleanness. Since `current` can be null before being passed in and not                                           // 21\n * null after this function, make sure to assign it back to `current`:                                                 // 22\n *                                                                                                                     // 23\n * `a = accumulateInto(a, b);`                                                                                         // 24\n *                                                                                                                     // 25\n * This API should be sparingly used. Try `accumulate` for something cleaner.                                          // 26\n *                                                                                                                     // 27\n * @return {*|array<*>} An accumulation of items.                                                                      // 28\n */                                                                                                                    // 29\n                                                                                                                       // 30\nfunction accumulateInto(current, next) {                                                                               // 31\n  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;\n                                                                                                                       // 33\n  if (current == null) {                                                                                               // 34\n    return next;                                                                                                       // 35\n  }                                                                                                                    // 36\n                                                                                                                       // 37\n  // Both are not empty. Warning: Never call x.concat(y) when you are not                                              // 38\n  // certain that x is an Array (x could be a string with concat method).                                              // 39\n  if (Array.isArray(current)) {                                                                                        // 40\n    if (Array.isArray(next)) {                                                                                         // 41\n      current.push.apply(current, next);                                                                               // 42\n      return current;                                                                                                  // 43\n    }                                                                                                                  // 44\n    current.push(next);                                                                                                // 45\n    return current;                                                                                                    // 46\n  }                                                                                                                    // 47\n                                                                                                                       // 48\n  if (Array.isArray(next)) {                                                                                           // 49\n    // A bit too dangerous to mutate `next`.                                                                           // 50\n    return [current].concat(next);                                                                                     // 51\n  }                                                                                                                    // 52\n                                                                                                                       // 53\n  return [current, next];                                                                                              // 54\n}                                                                                                                      // 55\n                                                                                                                       // 56\nmodule.exports = accumulateInto;                                                                                       // 57\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"forEachAccumulated.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/forEachAccumulated.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * @param {array} arr an \"accumulation\" of items which is either an Array or                                           // 15\n * a single item. Useful when paired with the `accumulate` module. This is a                                           // 16\n * simple utility that allows us to reason about a collection of items, but                                            // 17\n * handling the case when there is exactly one item (and we do not need to                                             // 18\n * allocate an array).                                                                                                 // 19\n */                                                                                                                    // 20\n                                                                                                                       // 21\nfunction forEachAccumulated(arr, cb, scope) {                                                                          // 22\n  if (Array.isArray(arr)) {                                                                                            // 23\n    arr.forEach(cb, scope);                                                                                            // 24\n  } else if (arr) {                                                                                                    // 25\n    cb.call(scope, arr);                                                                                               // 26\n  }                                                                                                                    // 27\n}                                                                                                                      // 28\n                                                                                                                       // 29\nmodule.exports = forEachAccumulated;                                                                                   // 30\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"FallbackCompositionState.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/FallbackCompositionState.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _assign = require('object-assign');                                                                                // 13\n                                                                                                                       // 14\nvar PooledClass = require('./PooledClass');                                                                            // 15\n                                                                                                                       // 16\nvar getTextContentAccessor = require('./getTextContentAccessor');                                                      // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * This helper class stores information about text content of a target node,                                           // 20\n * allowing comparison of content before and after a given event.                                                      // 21\n *                                                                                                                     // 22\n * Identify the node where selection currently begins, then observe                                                    // 23\n * both its text content and its current position in the DOM. Since the                                                // 24\n * browser may natively replace the target node during composition, we can                                             // 25\n * use its position to find its replacement.                                                                           // 26\n *                                                                                                                     // 27\n * @param {DOMEventTarget} root                                                                                        // 28\n */                                                                                                                    // 29\nfunction FallbackCompositionState(root) {                                                                              // 30\n  this._root = root;                                                                                                   // 31\n  this._startText = this.getText();                                                                                    // 32\n  this._fallbackText = null;                                                                                           // 33\n}                                                                                                                      // 34\n                                                                                                                       // 35\n_assign(FallbackCompositionState.prototype, {                                                                          // 36\n  destructor: function () {                                                                                            // 37\n    this._root = null;                                                                                                 // 38\n    this._startText = null;                                                                                            // 39\n    this._fallbackText = null;                                                                                         // 40\n  },                                                                                                                   // 41\n                                                                                                                       // 42\n  /**                                                                                                                  // 43\n   * Get current text of input.                                                                                        // 44\n   *                                                                                                                   // 45\n   * @return {string}                                                                                                  // 46\n   */                                                                                                                  // 47\n  getText: function () {                                                                                               // 48\n    if ('value' in this._root) {                                                                                       // 49\n      return this._root.value;                                                                                         // 50\n    }                                                                                                                  // 51\n    return this._root[getTextContentAccessor()];                                                                       // 52\n  },                                                                                                                   // 53\n                                                                                                                       // 54\n  /**                                                                                                                  // 55\n   * Determine the differing substring between the initially stored                                                    // 56\n   * text content and the current content.                                                                             // 57\n   *                                                                                                                   // 58\n   * @return {string}                                                                                                  // 59\n   */                                                                                                                  // 60\n  getData: function () {                                                                                               // 61\n    if (this._fallbackText) {                                                                                          // 62\n      return this._fallbackText;                                                                                       // 63\n    }                                                                                                                  // 64\n                                                                                                                       // 65\n    var start;                                                                                                         // 66\n    var startValue = this._startText;                                                                                  // 67\n    var startLength = startValue.length;                                                                               // 68\n    var end;                                                                                                           // 69\n    var endValue = this.getText();                                                                                     // 70\n    var endLength = endValue.length;                                                                                   // 71\n                                                                                                                       // 72\n    for (start = 0; start < startLength; start++) {                                                                    // 73\n      if (startValue[start] !== endValue[start]) {                                                                     // 74\n        break;                                                                                                         // 75\n      }                                                                                                                // 76\n    }                                                                                                                  // 77\n                                                                                                                       // 78\n    var minEnd = startLength - start;                                                                                  // 79\n    for (end = 1; end <= minEnd; end++) {                                                                              // 80\n      if (startValue[startLength - end] !== endValue[endLength - end]) {                                               // 81\n        break;                                                                                                         // 82\n      }                                                                                                                // 83\n    }                                                                                                                  // 84\n                                                                                                                       // 85\n    var sliceTail = end > 1 ? 1 - end : undefined;                                                                     // 86\n    this._fallbackText = endValue.slice(start, sliceTail);                                                             // 87\n    return this._fallbackText;                                                                                         // 88\n  }                                                                                                                    // 89\n});                                                                                                                    // 90\n                                                                                                                       // 91\nPooledClass.addPoolingTo(FallbackCompositionState);                                                                    // 92\n                                                                                                                       // 93\nmodule.exports = FallbackCompositionState;                                                                             // 94\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"PooledClass.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/PooledClass.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar invariant = require('fbjs/lib/invariant');                                                                         // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Static poolers. Several custom versions for each potential number of                                                // 19\n * arguments. A completely generic pooler is easy to implement, but would                                              // 20\n * require accessing the `arguments` object. In each of these, `this` refers to                                        // 21\n * the Class itself, not an instance. If any others are needed, simply add them                                        // 22\n * here, or in their own files.                                                                                        // 23\n */                                                                                                                    // 24\nvar oneArgumentPooler = function (copyFieldsFrom) {                                                                    // 25\n  var Klass = this;                                                                                                    // 26\n  if (Klass.instancePool.length) {                                                                                     // 27\n    var instance = Klass.instancePool.pop();                                                                           // 28\n    Klass.call(instance, copyFieldsFrom);                                                                              // 29\n    return instance;                                                                                                   // 30\n  } else {                                                                                                             // 31\n    return new Klass(copyFieldsFrom);                                                                                  // 32\n  }                                                                                                                    // 33\n};                                                                                                                     // 34\n                                                                                                                       // 35\nvar twoArgumentPooler = function (a1, a2) {                                                                            // 36\n  var Klass = this;                                                                                                    // 37\n  if (Klass.instancePool.length) {                                                                                     // 38\n    var instance = Klass.instancePool.pop();                                                                           // 39\n    Klass.call(instance, a1, a2);                                                                                      // 40\n    return instance;                                                                                                   // 41\n  } else {                                                                                                             // 42\n    return new Klass(a1, a2);                                                                                          // 43\n  }                                                                                                                    // 44\n};                                                                                                                     // 45\n                                                                                                                       // 46\nvar threeArgumentPooler = function (a1, a2, a3) {                                                                      // 47\n  var Klass = this;                                                                                                    // 48\n  if (Klass.instancePool.length) {                                                                                     // 49\n    var instance = Klass.instancePool.pop();                                                                           // 50\n    Klass.call(instance, a1, a2, a3);                                                                                  // 51\n    return instance;                                                                                                   // 52\n  } else {                                                                                                             // 53\n    return new Klass(a1, a2, a3);                                                                                      // 54\n  }                                                                                                                    // 55\n};                                                                                                                     // 56\n                                                                                                                       // 57\nvar fourArgumentPooler = function (a1, a2, a3, a4) {                                                                   // 58\n  var Klass = this;                                                                                                    // 59\n  if (Klass.instancePool.length) {                                                                                     // 60\n    var instance = Klass.instancePool.pop();                                                                           // 61\n    Klass.call(instance, a1, a2, a3, a4);                                                                              // 62\n    return instance;                                                                                                   // 63\n  } else {                                                                                                             // 64\n    return new Klass(a1, a2, a3, a4);                                                                                  // 65\n  }                                                                                                                    // 66\n};                                                                                                                     // 67\n                                                                                                                       // 68\nvar standardReleaser = function (instance) {                                                                           // 69\n  var Klass = this;                                                                                                    // 70\n  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;\n  instance.destructor();                                                                                               // 72\n  if (Klass.instancePool.length < Klass.poolSize) {                                                                    // 73\n    Klass.instancePool.push(instance);                                                                                 // 74\n  }                                                                                                                    // 75\n};                                                                                                                     // 76\n                                                                                                                       // 77\nvar DEFAULT_POOL_SIZE = 10;                                                                                            // 78\nvar DEFAULT_POOLER = oneArgumentPooler;                                                                                // 79\n                                                                                                                       // 80\n/**                                                                                                                    // 81\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class                                        // 82\n * itself (statically) not adding any prototypical fields. Any CopyConstructor                                         // 83\n * you give this may have a `poolSize` property, and will look for a                                                   // 84\n * prototypical `destructor` on instances.                                                                             // 85\n *                                                                                                                     // 86\n * @param {Function} CopyConstructor Constructor that can be used to reset.                                            // 87\n * @param {Function} pooler Customizable pooler.                                                                       // 88\n */                                                                                                                    // 89\nvar addPoolingTo = function (CopyConstructor, pooler) {                                                                // 90\n  // Casting as any so that flow ignores the actual implementation and trusts                                          // 91\n  // it to match the type we declared                                                                                  // 92\n  var NewKlass = CopyConstructor;                                                                                      // 93\n  NewKlass.instancePool = [];                                                                                          // 94\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;                                                                       // 95\n  if (!NewKlass.poolSize) {                                                                                            // 96\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;                                                                             // 97\n  }                                                                                                                    // 98\n  NewKlass.release = standardReleaser;                                                                                 // 99\n  return NewKlass;                                                                                                     // 100\n};                                                                                                                     // 101\n                                                                                                                       // 102\nvar PooledClass = {                                                                                                    // 103\n  addPoolingTo: addPoolingTo,                                                                                          // 104\n  oneArgumentPooler: oneArgumentPooler,                                                                                // 105\n  twoArgumentPooler: twoArgumentPooler,                                                                                // 106\n  threeArgumentPooler: threeArgumentPooler,                                                                            // 107\n  fourArgumentPooler: fourArgumentPooler                                                                               // 108\n};                                                                                                                     // 109\n                                                                                                                       // 110\nmodule.exports = PooledClass;                                                                                          // 111\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getTextContentAccessor.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/getTextContentAccessor.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 13\n                                                                                                                       // 14\nvar contentKey = null;                                                                                                 // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * Gets the key used to access text content on a DOM node.                                                             // 18\n *                                                                                                                     // 19\n * @return {?string} Key used to access text content.                                                                  // 20\n * @internal                                                                                                           // 21\n */                                                                                                                    // 22\nfunction getTextContentAccessor() {                                                                                    // 23\n  if (!contentKey && ExecutionEnvironment.canUseDOM) {                                                                 // 24\n    // Prefer textContent to innerText because many browsers support both but                                          // 25\n    // SVG <text> elements don't support innerText even when <div> does.                                               // 26\n    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';                              // 27\n  }                                                                                                                    // 28\n  return contentKey;                                                                                                   // 29\n}                                                                                                                      // 30\n                                                                                                                       // 31\nmodule.exports = getTextContentAccessor;                                                                               // 32\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"SyntheticCompositionEvent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/SyntheticCompositionEvent.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * @interface Event                                                                                                    // 16\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents                                              // 17\n */                                                                                                                    // 18\nvar CompositionEventInterface = {                                                                                      // 19\n  data: null                                                                                                           // 20\n};                                                                                                                     // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 24\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 25\n * @param {object} nativeEvent Native browser event.                                                                   // 26\n * @extends {SyntheticUIEvent}                                                                                         // 27\n */                                                                                                                    // 28\nfunction SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                   // 29\n  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                    // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\nSyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);                                     // 33\n                                                                                                                       // 34\nmodule.exports = SyntheticCompositionEvent;                                                                            // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"SyntheticEvent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/SyntheticEvent.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _assign = require('object-assign');                                                                                // 13\n                                                                                                                       // 14\nvar PooledClass = require('./PooledClass');                                                                            // 15\n                                                                                                                       // 16\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 17\nvar warning = require('fbjs/lib/warning');                                                                             // 18\n                                                                                                                       // 19\nvar didWarnForAddedNewProperty = false;                                                                                // 20\nvar isProxySupported = typeof Proxy === 'function';                                                                    // 21\n                                                                                                                       // 22\nvar shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * @interface Event                                                                                                    // 26\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 27\n */                                                                                                                    // 28\nvar EventInterface = {                                                                                                 // 29\n  type: null,                                                                                                          // 30\n  target: null,                                                                                                        // 31\n  // currentTarget is set when dispatching; no use in copying it here                                                  // 32\n  currentTarget: emptyFunction.thatReturnsNull,                                                                        // 33\n  eventPhase: null,                                                                                                    // 34\n  bubbles: null,                                                                                                       // 35\n  cancelable: null,                                                                                                    // 36\n  timeStamp: function (event) {                                                                                        // 37\n    return event.timeStamp || Date.now();                                                                              // 38\n  },                                                                                                                   // 39\n  defaultPrevented: null,                                                                                              // 40\n  isTrusted: null                                                                                                      // 41\n};                                                                                                                     // 42\n                                                                                                                       // 43\n/**                                                                                                                    // 44\n * Synthetic events are dispatched by event plugins, typically in response to a                                        // 45\n * top-level event delegation handler.                                                                                 // 46\n *                                                                                                                     // 47\n * These systems should generally use pooling to reduce the frequency of garbage                                       // 48\n * collection. The system should check `isPersistent` to determine whether the                                         // 49\n * event should be released into the pool after being dispatched. Users that                                           // 50\n * need a persisted event should invoke `persist`.                                                                     // 51\n *                                                                                                                     // 52\n * Synthetic events (and subclasses) implement the DOM Level 3 Events API by                                           // 53\n * normalizing browser quirks. Subclasses do not necessarily have to implement a                                       // 54\n * DOM interface; custom application-specific events can also subclass this.                                           // 55\n *                                                                                                                     // 56\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 57\n * @param {*} targetInst Marker identifying the event target.                                                          // 58\n * @param {object} nativeEvent Native browser event.                                                                   // 59\n * @param {DOMEventTarget} nativeEventTarget Target node.                                                              // 60\n */                                                                                                                    // 61\nfunction SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {                                  // 62\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 63\n    // these have a getter/setter for warnings                                                                         // 64\n    delete this.nativeEvent;                                                                                           // 65\n    delete this.preventDefault;                                                                                        // 66\n    delete this.stopPropagation;                                                                                       // 67\n  }                                                                                                                    // 68\n                                                                                                                       // 69\n  this.dispatchConfig = dispatchConfig;                                                                                // 70\n  this._targetInst = targetInst;                                                                                       // 71\n  this.nativeEvent = nativeEvent;                                                                                      // 72\n                                                                                                                       // 73\n  var Interface = this.constructor.Interface;                                                                          // 74\n  for (var propName in Interface) {                                                                                    // 75\n    if (!Interface.hasOwnProperty(propName)) {                                                                         // 76\n      continue;                                                                                                        // 77\n    }                                                                                                                  // 78\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 79\n      delete this[propName]; // this has a getter/setter for warnings                                                  // 80\n    }                                                                                                                  // 81\n    var normalize = Interface[propName];                                                                               // 82\n    if (normalize) {                                                                                                   // 83\n      this[propName] = normalize(nativeEvent);                                                                         // 84\n    } else {                                                                                                           // 85\n      if (propName === 'target') {                                                                                     // 86\n        this.target = nativeEventTarget;                                                                               // 87\n      } else {                                                                                                         // 88\n        this[propName] = nativeEvent[propName];                                                                        // 89\n      }                                                                                                                // 90\n    }                                                                                                                  // 91\n  }                                                                                                                    // 92\n                                                                                                                       // 93\n  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;\n  if (defaultPrevented) {                                                                                              // 95\n    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;                                                           // 96\n  } else {                                                                                                             // 97\n    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;                                                          // 98\n  }                                                                                                                    // 99\n  this.isPropagationStopped = emptyFunction.thatReturnsFalse;                                                          // 100\n  return this;                                                                                                         // 101\n}                                                                                                                      // 102\n                                                                                                                       // 103\n_assign(SyntheticEvent.prototype, {                                                                                    // 104\n  preventDefault: function () {                                                                                        // 105\n    this.defaultPrevented = true;                                                                                      // 106\n    var event = this.nativeEvent;                                                                                      // 107\n    if (!event) {                                                                                                      // 108\n      return;                                                                                                          // 109\n    }                                                                                                                  // 110\n                                                                                                                       // 111\n    if (event.preventDefault) {                                                                                        // 112\n      event.preventDefault();                                                                                          // 113\n      // eslint-disable-next-line valid-typeof                                                                         // 114\n    } else if (typeof event.returnValue !== 'unknown') {                                                               // 115\n      event.returnValue = false;                                                                                       // 116\n    }                                                                                                                  // 117\n    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;                                                           // 118\n  },                                                                                                                   // 119\n                                                                                                                       // 120\n  stopPropagation: function () {                                                                                       // 121\n    var event = this.nativeEvent;                                                                                      // 122\n    if (!event) {                                                                                                      // 123\n      return;                                                                                                          // 124\n    }                                                                                                                  // 125\n                                                                                                                       // 126\n    if (event.stopPropagation) {                                                                                       // 127\n      event.stopPropagation();                                                                                         // 128\n      // eslint-disable-next-line valid-typeof                                                                         // 129\n    } else if (typeof event.cancelBubble !== 'unknown') {                                                              // 130\n      // The ChangeEventPlugin registers a \"propertychange\" event for                                                  // 131\n      // IE. This event does not support bubbling or cancelling, and                                                   // 132\n      // any references to cancelBubble throw \"Member not found\".  A                                                   // 133\n      // typeof check of \"unknown\" circumvents this issue (and is also                                                 // 134\n      // IE specific).                                                                                                 // 135\n      event.cancelBubble = true;                                                                                       // 136\n    }                                                                                                                  // 137\n                                                                                                                       // 138\n    this.isPropagationStopped = emptyFunction.thatReturnsTrue;                                                         // 139\n  },                                                                                                                   // 140\n                                                                                                                       // 141\n  /**                                                                                                                  // 142\n   * We release all dispatched `SyntheticEvent`s after each event loop, adding                                         // 143\n   * them back into the pool. This allows a way to hold onto a reference that                                          // 144\n   * won't be added back into the pool.                                                                                // 145\n   */                                                                                                                  // 146\n  persist: function () {                                                                                               // 147\n    this.isPersistent = emptyFunction.thatReturnsTrue;                                                                 // 148\n  },                                                                                                                   // 149\n                                                                                                                       // 150\n  /**                                                                                                                  // 151\n   * Checks if this event should be released back into the pool.                                                       // 152\n   *                                                                                                                   // 153\n   * @return {boolean} True if this should not be released, false otherwise.                                           // 154\n   */                                                                                                                  // 155\n  isPersistent: emptyFunction.thatReturnsFalse,                                                                        // 156\n                                                                                                                       // 157\n  /**                                                                                                                  // 158\n   * `PooledClass` looks for `destructor` on each instance it releases.                                                // 159\n   */                                                                                                                  // 160\n  destructor: function () {                                                                                            // 161\n    var Interface = this.constructor.Interface;                                                                        // 162\n    for (var propName in Interface) {                                                                                  // 163\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 164\n        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));      // 165\n      } else {                                                                                                         // 166\n        this[propName] = null;                                                                                         // 167\n      }                                                                                                                // 168\n    }                                                                                                                  // 169\n    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {                                                      // 170\n      this[shouldBeReleasedProperties[i]] = null;                                                                      // 171\n    }                                                                                                                  // 172\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 173\n      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));             // 174\n      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));\n      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));\n    }                                                                                                                  // 177\n  }                                                                                                                    // 178\n});                                                                                                                    // 179\n                                                                                                                       // 180\nSyntheticEvent.Interface = EventInterface;                                                                             // 181\n                                                                                                                       // 182\nif (process.env.NODE_ENV !== 'production') {                                                                           // 183\n  if (isProxySupported) {                                                                                              // 184\n    /*eslint-disable no-func-assign */                                                                                 // 185\n    SyntheticEvent = new Proxy(SyntheticEvent, {                                                                       // 186\n      construct: function (target, args) {                                                                             // 187\n        return this.apply(target, Object.create(target.prototype), args);                                              // 188\n      },                                                                                                               // 189\n      apply: function (constructor, that, args) {                                                                      // 190\n        return new Proxy(constructor.apply(that, args), {                                                              // 191\n          set: function (target, prop, value) {                                                                        // 192\n            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {\n              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), \"This synthetic event is reused for performance reasons. If you're \" + \"seeing this, you're adding a new property in the synthetic event object. \" + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;\n              didWarnForAddedNewProperty = true;                                                                       // 195\n            }                                                                                                          // 196\n            target[prop] = value;                                                                                      // 197\n            return true;                                                                                               // 198\n          }                                                                                                            // 199\n        });                                                                                                            // 200\n      }                                                                                                                // 201\n    });                                                                                                                // 202\n    /*eslint-enable no-func-assign */                                                                                  // 203\n  }                                                                                                                    // 204\n}                                                                                                                      // 205\n/**                                                                                                                    // 206\n * Helper to reduce boilerplate when creating subclasses.                                                              // 207\n *                                                                                                                     // 208\n * @param {function} Class                                                                                             // 209\n * @param {?object} Interface                                                                                          // 210\n */                                                                                                                    // 211\nSyntheticEvent.augmentClass = function (Class, Interface) {                                                            // 212\n  var Super = this;                                                                                                    // 213\n                                                                                                                       // 214\n  var E = function () {};                                                                                              // 215\n  E.prototype = Super.prototype;                                                                                       // 216\n  var prototype = new E();                                                                                             // 217\n                                                                                                                       // 218\n  _assign(prototype, Class.prototype);                                                                                 // 219\n  Class.prototype = prototype;                                                                                         // 220\n  Class.prototype.constructor = Class;                                                                                 // 221\n                                                                                                                       // 222\n  Class.Interface = _assign({}, Super.Interface, Interface);                                                           // 223\n  Class.augmentClass = Super.augmentClass;                                                                             // 224\n                                                                                                                       // 225\n  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);                                                     // 226\n};                                                                                                                     // 227\n                                                                                                                       // 228\nPooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);                                              // 229\n                                                                                                                       // 230\nmodule.exports = SyntheticEvent;                                                                                       // 231\n                                                                                                                       // 232\n/**                                                                                                                    // 233\n  * Helper to nullify syntheticEvent instance properties when destructing                                              // 234\n  *                                                                                                                    // 235\n  * @param {object} SyntheticEvent                                                                                     // 236\n  * @param {String} propName                                                                                           // 237\n  * @return {object} defineProperty object                                                                             // 238\n  */                                                                                                                   // 239\nfunction getPooledWarningPropertyDefinition(propName, getVal) {                                                        // 240\n  var isFunction = typeof getVal === 'function';                                                                       // 241\n  return {                                                                                                             // 242\n    configurable: true,                                                                                                // 243\n    set: set,                                                                                                          // 244\n    get: get                                                                                                           // 245\n  };                                                                                                                   // 246\n                                                                                                                       // 247\n  function set(val) {                                                                                                  // 248\n    var action = isFunction ? 'setting the method' : 'setting the property';                                           // 249\n    warn(action, 'This is effectively a no-op');                                                                       // 250\n    return val;                                                                                                        // 251\n  }                                                                                                                    // 252\n                                                                                                                       // 253\n  function get() {                                                                                                     // 254\n    var action = isFunction ? 'accessing the method' : 'accessing the property';                                       // 255\n    var result = isFunction ? 'This is a no-op function' : 'This is set to null';                                      // 256\n    warn(action, result);                                                                                              // 257\n    return getVal;                                                                                                     // 258\n  }                                                                                                                    // 259\n                                                                                                                       // 260\n  function warn(action, result) {                                                                                      // 261\n    var warningCondition = false;                                                                                      // 262\n    process.env.NODE_ENV !== 'production' ? warning(warningCondition, \"This synthetic event is reused for performance reasons. If you're seeing this, \" + \"you're %s `%s` on a released/nullified synthetic event. %s. \" + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;\n  }                                                                                                                    // 264\n}                                                                                                                      // 265\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"SyntheticInputEvent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/SyntheticInputEvent.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * @interface Event                                                                                                    // 16\n * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105                                                       // 17\n *      /#events-inputevents                                                                                           // 18\n */                                                                                                                    // 19\nvar InputEventInterface = {                                                                                            // 20\n  data: null                                                                                                           // 21\n};                                                                                                                     // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 25\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 26\n * @param {object} nativeEvent Native browser event.                                                                   // 27\n * @extends {SyntheticUIEvent}                                                                                         // 28\n */                                                                                                                    // 29\nfunction SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                         // 30\n  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                    // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\nSyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);                                                 // 34\n                                                                                                                       // 35\nmodule.exports = SyntheticInputEvent;                                                                                  // 36\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ChangeEventPlugin.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ChangeEventPlugin.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar EventPluginHub = require('./EventPluginHub');                                                                      // 13\nvar EventPropagators = require('./EventPropagators');                                                                  // 14\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 15\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 16\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 17\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 18\n                                                                                                                       // 19\nvar inputValueTracking = require('./inputValueTracking');                                                              // 20\nvar getEventTarget = require('./getEventTarget');                                                                      // 21\nvar isEventSupported = require('./isEventSupported');                                                                  // 22\nvar isTextInputElement = require('./isTextInputElement');                                                              // 23\n                                                                                                                       // 24\nvar eventTypes = {                                                                                                     // 25\n  change: {                                                                                                            // 26\n    phasedRegistrationNames: {                                                                                         // 27\n      bubbled: 'onChange',                                                                                             // 28\n      captured: 'onChangeCapture'                                                                                      // 29\n    },                                                                                                                 // 30\n    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']\n  }                                                                                                                    // 32\n};                                                                                                                     // 33\n                                                                                                                       // 34\nfunction createAndAccumulateChangeEvent(inst, nativeEvent, target) {                                                   // 35\n  var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, target);                                  // 36\n  event.type = 'change';                                                                                               // 37\n  EventPropagators.accumulateTwoPhaseDispatches(event);                                                                // 38\n  return event;                                                                                                        // 39\n}                                                                                                                      // 40\n/**                                                                                                                    // 41\n * For IE shims                                                                                                        // 42\n */                                                                                                                    // 43\nvar activeElement = null;                                                                                              // 44\nvar activeElementInst = null;                                                                                          // 45\n                                                                                                                       // 46\n/**                                                                                                                    // 47\n * SECTION: handle `change` event                                                                                      // 48\n */                                                                                                                    // 49\nfunction shouldUseChangeEvent(elem) {                                                                                  // 50\n  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();                                                         // 51\n  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';                                        // 52\n}                                                                                                                      // 53\n                                                                                                                       // 54\nvar doesChangeEventBubble = false;                                                                                     // 55\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 56\n  // See `handleChange` comment below                                                                                  // 57\n  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);         // 58\n}                                                                                                                      // 59\n                                                                                                                       // 60\nfunction manualDispatchChangeEvent(nativeEvent) {                                                                      // 61\n  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));             // 62\n                                                                                                                       // 63\n  // If change and propertychange bubbled, we'd just bind to it like all the                                           // 64\n  // other events and have it go through ReactBrowserEventEmitter. Since it                                            // 65\n  // doesn't, we manually listen for the events and so we have to enqueue and                                          // 66\n  // process the abstract event manually.                                                                              // 67\n  //                                                                                                                   // 68\n  // Batching is necessary here in order to ensure that all event handlers run                                         // 69\n  // before the next rerender (including event handlers attached to ancestor                                           // 70\n  // elements instead of directly on the input). Without this, controlled                                              // 71\n  // components don't work properly in conjunction with event bubbling because                                         // 72\n  // the component is rerendered and the value reverted before all the event                                           // 73\n  // handlers can run. See https://github.com/facebook/react/issues/708.                                               // 74\n  ReactUpdates.batchedUpdates(runEventInBatch, event);                                                                 // 75\n}                                                                                                                      // 76\n                                                                                                                       // 77\nfunction runEventInBatch(event) {                                                                                      // 78\n  EventPluginHub.enqueueEvents(event);                                                                                 // 79\n  EventPluginHub.processEventQueue(false);                                                                             // 80\n}                                                                                                                      // 81\n                                                                                                                       // 82\nfunction startWatchingForChangeEventIE8(target, targetInst) {                                                          // 83\n  activeElement = target;                                                                                              // 84\n  activeElementInst = targetInst;                                                                                      // 85\n  activeElement.attachEvent('onchange', manualDispatchChangeEvent);                                                    // 86\n}                                                                                                                      // 87\n                                                                                                                       // 88\nfunction stopWatchingForChangeEventIE8() {                                                                             // 89\n  if (!activeElement) {                                                                                                // 90\n    return;                                                                                                            // 91\n  }                                                                                                                    // 92\n  activeElement.detachEvent('onchange', manualDispatchChangeEvent);                                                    // 93\n  activeElement = null;                                                                                                // 94\n  activeElementInst = null;                                                                                            // 95\n}                                                                                                                      // 96\n                                                                                                                       // 97\nfunction getInstIfValueChanged(targetInst, nativeEvent) {                                                              // 98\n  var updated = inputValueTracking.updateValueIfChanged(targetInst);                                                   // 99\n  var simulated = nativeEvent.simulated === true && ChangeEventPlugin._allowSimulatedPassThrough;                      // 100\n                                                                                                                       // 101\n  if (updated || simulated) {                                                                                          // 102\n    return targetInst;                                                                                                 // 103\n  }                                                                                                                    // 104\n}                                                                                                                      // 105\n                                                                                                                       // 106\nfunction getTargetInstForChangeEvent(topLevelType, targetInst) {                                                       // 107\n  if (topLevelType === 'topChange') {                                                                                  // 108\n    return targetInst;                                                                                                 // 109\n  }                                                                                                                    // 110\n}                                                                                                                      // 111\n                                                                                                                       // 112\nfunction handleEventsForChangeEventIE8(topLevelType, target, targetInst) {                                             // 113\n  if (topLevelType === 'topFocus') {                                                                                   // 114\n    // stopWatching() should be a noop here but we call it just in case we                                             // 115\n    // missed a blur event somehow.                                                                                    // 116\n    stopWatchingForChangeEventIE8();                                                                                   // 117\n    startWatchingForChangeEventIE8(target, targetInst);                                                                // 118\n  } else if (topLevelType === 'topBlur') {                                                                             // 119\n    stopWatchingForChangeEventIE8();                                                                                   // 120\n  }                                                                                                                    // 121\n}                                                                                                                      // 122\n                                                                                                                       // 123\n/**                                                                                                                    // 124\n * SECTION: handle `input` event                                                                                       // 125\n */                                                                                                                    // 126\nvar isInputEventSupported = false;                                                                                     // 127\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 128\n  // IE9 claims to support the input event but fails to trigger it when                                                // 129\n  // deleting text, so we ignore its input events.                                                                     // 130\n                                                                                                                       // 131\n  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);   // 132\n}                                                                                                                      // 133\n                                                                                                                       // 134\n/**                                                                                                                    // 135\n * (For IE <=9) Starts tracking propertychange events on the passed-in element                                         // 136\n * and override the value property so that we can distinguish user events from                                         // 137\n * value changes in JS.                                                                                                // 138\n */                                                                                                                    // 139\nfunction startWatchingForValueChange(target, targetInst) {                                                             // 140\n  activeElement = target;                                                                                              // 141\n  activeElementInst = targetInst;                                                                                      // 142\n  activeElement.attachEvent('onpropertychange', handlePropertyChange);                                                 // 143\n}                                                                                                                      // 144\n                                                                                                                       // 145\n/**                                                                                                                    // 146\n * (For IE <=9) Removes the event listeners from the currently-tracked element,                                        // 147\n * if any exists.                                                                                                      // 148\n */                                                                                                                    // 149\nfunction stopWatchingForValueChange() {                                                                                // 150\n  if (!activeElement) {                                                                                                // 151\n    return;                                                                                                            // 152\n  }                                                                                                                    // 153\n  activeElement.detachEvent('onpropertychange', handlePropertyChange);                                                 // 154\n                                                                                                                       // 155\n  activeElement = null;                                                                                                // 156\n  activeElementInst = null;                                                                                            // 157\n}                                                                                                                      // 158\n                                                                                                                       // 159\n/**                                                                                                                    // 160\n * (For IE <=9) Handles a propertychange event, sending a `change` event if                                            // 161\n * the value of the active element has changed.                                                                        // 162\n */                                                                                                                    // 163\nfunction handlePropertyChange(nativeEvent) {                                                                           // 164\n  if (nativeEvent.propertyName !== 'value') {                                                                          // 165\n    return;                                                                                                            // 166\n  }                                                                                                                    // 167\n  if (getInstIfValueChanged(activeElementInst, nativeEvent)) {                                                         // 168\n    manualDispatchChangeEvent(nativeEvent);                                                                            // 169\n  }                                                                                                                    // 170\n}                                                                                                                      // 171\n                                                                                                                       // 172\nfunction handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {                                         // 173\n  if (topLevelType === 'topFocus') {                                                                                   // 174\n    // In IE8, we can capture almost all .value changes by adding a                                                    // 175\n    // propertychange handler and looking for events with propertyName                                                 // 176\n    // equal to 'value'                                                                                                // 177\n    // In IE9, propertychange fires for most input events but is buggy and                                             // 178\n    // doesn't fire when text is deleted, but conveniently, selectionchange                                            // 179\n    // appears to fire in all of the remaining cases so we catch those and                                             // 180\n    // forward the event if the value has changed                                                                      // 181\n    // In either case, we don't want to call the event handler if the value                                            // 182\n    // is changed from JS so we redefine a setter for `.value` that updates                                            // 183\n    // our activeElementValue variable, allowing us to ignore those changes                                            // 184\n    //                                                                                                                 // 185\n    // stopWatching() should be a noop here but we call it just in case we                                             // 186\n    // missed a blur event somehow.                                                                                    // 187\n    stopWatchingForValueChange();                                                                                      // 188\n    startWatchingForValueChange(target, targetInst);                                                                   // 189\n  } else if (topLevelType === 'topBlur') {                                                                             // 190\n    stopWatchingForValueChange();                                                                                      // 191\n  }                                                                                                                    // 192\n}                                                                                                                      // 193\n                                                                                                                       // 194\n// For IE8 and IE9.                                                                                                    // 195\nfunction getTargetInstForInputEventPolyfill(topLevelType, targetInst, nativeEvent) {                                   // 196\n  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {         // 197\n    // On the selectionchange event, the target is just document which isn't                                           // 198\n    // helpful for us so just check activeElement instead.                                                             // 199\n    //                                                                                                                 // 200\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire                                          // 201\n    // propertychange on the first input event after setting `value` from a                                            // 202\n    // script and fires only keydown, keypress, keyup. Catching keyup usually                                          // 203\n    // gets it and catching keydown lets us fire an event for the first                                                // 204\n    // keystroke if user does a key repeat (it'll be a little delayed: right                                           // 205\n    // before the second keystroke). Other input methods (e.g., paste) seem to                                         // 206\n    // fire selectionchange normally.                                                                                  // 207\n    return getInstIfValueChanged(activeElementInst, nativeEvent);                                                      // 208\n  }                                                                                                                    // 209\n}                                                                                                                      // 210\n                                                                                                                       // 211\n/**                                                                                                                    // 212\n * SECTION: handle `click` event                                                                                       // 213\n */                                                                                                                    // 214\nfunction shouldUseClickEvent(elem) {                                                                                   // 215\n  // Use the `click` event to detect changes to checkbox and radio inputs.                                             // 216\n  // This approach works across all browsers, whereas `change` does not fire                                           // 217\n  // until `blur` in IE8.                                                                                              // 218\n  var nodeName = elem.nodeName;                                                                                        // 219\n  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');        // 220\n}                                                                                                                      // 221\n                                                                                                                       // 222\nfunction getTargetInstForClickEvent(topLevelType, targetInst, nativeEvent) {                                           // 223\n  if (topLevelType === 'topClick') {                                                                                   // 224\n    return getInstIfValueChanged(targetInst, nativeEvent);                                                             // 225\n  }                                                                                                                    // 226\n}                                                                                                                      // 227\n                                                                                                                       // 228\nfunction getTargetInstForInputOrChangeEvent(topLevelType, targetInst, nativeEvent) {                                   // 229\n  if (topLevelType === 'topInput' || topLevelType === 'topChange') {                                                   // 230\n    return getInstIfValueChanged(targetInst, nativeEvent);                                                             // 231\n  }                                                                                                                    // 232\n}                                                                                                                      // 233\n                                                                                                                       // 234\nfunction handleControlledInputBlur(inst, node) {                                                                       // 235\n  // TODO: In IE, inst is occasionally null. Why?                                                                      // 236\n  if (inst == null) {                                                                                                  // 237\n    return;                                                                                                            // 238\n  }                                                                                                                    // 239\n                                                                                                                       // 240\n  // Fiber and ReactDOM keep wrapper state in separate places                                                          // 241\n  var state = inst._wrapperState || node._wrapperState;                                                                // 242\n                                                                                                                       // 243\n  if (!state || !state.controlled || node.type !== 'number') {                                                         // 244\n    return;                                                                                                            // 245\n  }                                                                                                                    // 246\n                                                                                                                       // 247\n  // If controlled, assign the value attribute to the current value on blur                                            // 248\n  var value = '' + node.value;                                                                                         // 249\n  if (node.getAttribute('value') !== value) {                                                                          // 250\n    node.setAttribute('value', value);                                                                                 // 251\n  }                                                                                                                    // 252\n}                                                                                                                      // 253\n                                                                                                                       // 254\n/**                                                                                                                    // 255\n * This plugin creates an `onChange` event that normalizes change events                                               // 256\n * across form elements. This event fires at a time when it's possible to                                              // 257\n * change the element's value without seeing a flicker.                                                                // 258\n *                                                                                                                     // 259\n * Supported elements are:                                                                                             // 260\n * - input (see `isTextInputElement`)                                                                                  // 261\n * - textarea                                                                                                          // 262\n * - select                                                                                                            // 263\n */                                                                                                                    // 264\nvar ChangeEventPlugin = {                                                                                              // 265\n  eventTypes: eventTypes,                                                                                              // 266\n                                                                                                                       // 267\n  _allowSimulatedPassThrough: true,                                                                                    // 268\n  _isInputEventSupported: isInputEventSupported,                                                                       // 269\n                                                                                                                       // 270\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {                                 // 271\n    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;                      // 272\n                                                                                                                       // 273\n    var getTargetInstFunc, handleEventFunc;                                                                            // 274\n    if (shouldUseChangeEvent(targetNode)) {                                                                            // 275\n      if (doesChangeEventBubble) {                                                                                     // 276\n        getTargetInstFunc = getTargetInstForChangeEvent;                                                               // 277\n      } else {                                                                                                         // 278\n        handleEventFunc = handleEventsForChangeEventIE8;                                                               // 279\n      }                                                                                                                // 280\n    } else if (isTextInputElement(targetNode)) {                                                                       // 281\n      if (isInputEventSupported) {                                                                                     // 282\n        getTargetInstFunc = getTargetInstForInputOrChangeEvent;                                                        // 283\n      } else {                                                                                                         // 284\n        getTargetInstFunc = getTargetInstForInputEventPolyfill;                                                        // 285\n        handleEventFunc = handleEventsForInputEventPolyfill;                                                           // 286\n      }                                                                                                                // 287\n    } else if (shouldUseClickEvent(targetNode)) {                                                                      // 288\n      getTargetInstFunc = getTargetInstForClickEvent;                                                                  // 289\n    }                                                                                                                  // 290\n                                                                                                                       // 291\n    if (getTargetInstFunc) {                                                                                           // 292\n      var inst = getTargetInstFunc(topLevelType, targetInst, nativeEvent);                                             // 293\n      if (inst) {                                                                                                      // 294\n        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);                              // 295\n        return event;                                                                                                  // 296\n      }                                                                                                                // 297\n    }                                                                                                                  // 298\n                                                                                                                       // 299\n    if (handleEventFunc) {                                                                                             // 300\n      handleEventFunc(topLevelType, targetNode, targetInst);                                                           // 301\n    }                                                                                                                  // 302\n                                                                                                                       // 303\n    // When blurring, set the value attribute for number inputs                                                        // 304\n    if (topLevelType === 'topBlur') {                                                                                  // 305\n      handleControlledInputBlur(targetInst, targetNode);                                                               // 306\n    }                                                                                                                  // 307\n  }                                                                                                                    // 308\n};                                                                                                                     // 309\n                                                                                                                       // 310\nmodule.exports = ChangeEventPlugin;                                                                                    // 311\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactUpdates.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactUpdates.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _prodInvariant = require('./reactProdInvariant'),                                                                  // 13\n    _assign = require('object-assign');                                                                                // 14\n                                                                                                                       // 15\nvar CallbackQueue = require('./CallbackQueue');                                                                        // 16\nvar PooledClass = require('./PooledClass');                                                                            // 17\nvar ReactFeatureFlags = require('./ReactFeatureFlags');                                                                // 18\nvar ReactReconciler = require('./ReactReconciler');                                                                    // 19\nvar Transaction = require('./Transaction');                                                                            // 20\n                                                                                                                       // 21\nvar invariant = require('fbjs/lib/invariant');                                                                         // 22\n                                                                                                                       // 23\nvar dirtyComponents = [];                                                                                              // 24\nvar updateBatchNumber = 0;                                                                                             // 25\nvar asapCallbackQueue = CallbackQueue.getPooled();                                                                     // 26\nvar asapEnqueued = false;                                                                                              // 27\n                                                                                                                       // 28\nvar batchingStrategy = null;                                                                                           // 29\n                                                                                                                       // 30\nfunction ensureInjected() {                                                                                            // 31\n  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;\n}                                                                                                                      // 33\n                                                                                                                       // 34\nvar NESTED_UPDATES = {                                                                                                 // 35\n  initialize: function () {                                                                                            // 36\n    this.dirtyComponentsLength = dirtyComponents.length;                                                               // 37\n  },                                                                                                                   // 38\n  close: function () {                                                                                                 // 39\n    if (this.dirtyComponentsLength !== dirtyComponents.length) {                                                       // 40\n      // Additional updates were enqueued by componentDidUpdate handlers or                                            // 41\n      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run                                        // 42\n      // these new updates so that if A's componentDidUpdate calls setState on                                         // 43\n      // B, B will update before the callback A's updater provided when calling                                        // 44\n      // setState.                                                                                                     // 45\n      dirtyComponents.splice(0, this.dirtyComponentsLength);                                                           // 46\n      flushBatchedUpdates();                                                                                           // 47\n    } else {                                                                                                           // 48\n      dirtyComponents.length = 0;                                                                                      // 49\n    }                                                                                                                  // 50\n  }                                                                                                                    // 51\n};                                                                                                                     // 52\n                                                                                                                       // 53\nvar UPDATE_QUEUEING = {                                                                                                // 54\n  initialize: function () {                                                                                            // 55\n    this.callbackQueue.reset();                                                                                        // 56\n  },                                                                                                                   // 57\n  close: function () {                                                                                                 // 58\n    this.callbackQueue.notifyAll();                                                                                    // 59\n  }                                                                                                                    // 60\n};                                                                                                                     // 61\n                                                                                                                       // 62\nvar TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];                                                          // 63\n                                                                                                                       // 64\nfunction ReactUpdatesFlushTransaction() {                                                                              // 65\n  this.reinitializeTransaction();                                                                                      // 66\n  this.dirtyComponentsLength = null;                                                                                   // 67\n  this.callbackQueue = CallbackQueue.getPooled();                                                                      // 68\n  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(                                        // 69\n  /* useCreateElement */true);                                                                                         // 70\n}                                                                                                                      // 71\n                                                                                                                       // 72\n_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {                                                         // 73\n  getTransactionWrappers: function () {                                                                                // 74\n    return TRANSACTION_WRAPPERS;                                                                                       // 75\n  },                                                                                                                   // 76\n                                                                                                                       // 77\n  destructor: function () {                                                                                            // 78\n    this.dirtyComponentsLength = null;                                                                                 // 79\n    CallbackQueue.release(this.callbackQueue);                                                                         // 80\n    this.callbackQueue = null;                                                                                         // 81\n    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);                                         // 82\n    this.reconcileTransaction = null;                                                                                  // 83\n  },                                                                                                                   // 84\n                                                                                                                       // 85\n  perform: function (method, scope, a) {                                                                               // 86\n    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`                                         // 87\n    // with this transaction's wrappers around it.                                                                     // 88\n    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);\n  }                                                                                                                    // 90\n});                                                                                                                    // 91\n                                                                                                                       // 92\nPooledClass.addPoolingTo(ReactUpdatesFlushTransaction);                                                                // 93\n                                                                                                                       // 94\nfunction batchedUpdates(callback, a, b, c, d, e) {                                                                     // 95\n  ensureInjected();                                                                                                    // 96\n  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);                                                     // 97\n}                                                                                                                      // 98\n                                                                                                                       // 99\n/**                                                                                                                    // 100\n * Array comparator for ReactComponents by mount ordering.                                                             // 101\n *                                                                                                                     // 102\n * @param {ReactComponent} c1 first component you're comparing                                                         // 103\n * @param {ReactComponent} c2 second component you're comparing                                                        // 104\n * @return {number} Return value usable by Array.prototype.sort().                                                     // 105\n */                                                                                                                    // 106\nfunction mountOrderComparator(c1, c2) {                                                                                // 107\n  return c1._mountOrder - c2._mountOrder;                                                                              // 108\n}                                                                                                                      // 109\n                                                                                                                       // 110\nfunction runBatchedUpdates(transaction) {                                                                              // 111\n  var len = transaction.dirtyComponentsLength;                                                                         // 112\n  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;\n                                                                                                                       // 114\n  // Since reconciling a component higher in the owner hierarchy usually (not                                          // 115\n  // always -- see shouldComponentUpdate()) will reconcile children, reconcile                                         // 116\n  // them before their children by sorting the array.                                                                  // 117\n  dirtyComponents.sort(mountOrderComparator);                                                                          // 118\n                                                                                                                       // 119\n  // Any updates enqueued while reconciling must be performed after this entire                                        // 120\n  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and                                         // 121\n  // C, B could update twice in a single batch if C's render enqueues an update                                        // 122\n  // to B (since B would have already updated, we should skip it, and the only                                         // 123\n  // way we can know to do so is by checking the batch counter).                                                       // 124\n  updateBatchNumber++;                                                                                                 // 125\n                                                                                                                       // 126\n  for (var i = 0; i < len; i++) {                                                                                      // 127\n    // If a component is unmounted before pending changes apply, it will still                                         // 128\n    // be here, but we assume that it has cleared its _pendingCallbacks and                                            // 129\n    // that performUpdateIfNecessary is a noop.                                                                        // 130\n    var component = dirtyComponents[i];                                                                                // 131\n                                                                                                                       // 132\n    // If performUpdateIfNecessary happens to enqueue any new updates, we                                              // 133\n    // shouldn't execute the callbacks until the next render happens, so                                               // 134\n    // stash the callbacks first                                                                                       // 135\n    var callbacks = component._pendingCallbacks;                                                                       // 136\n    component._pendingCallbacks = null;                                                                                // 137\n                                                                                                                       // 138\n    var markerName;                                                                                                    // 139\n    if (ReactFeatureFlags.logTopLevelRenders) {                                                                        // 140\n      var namedComponent = component;                                                                                  // 141\n      // Duck type TopLevelWrapper. This is probably always true.                                                      // 142\n      if (component._currentElement.type.isReactTopLevelWrapper) {                                                     // 143\n        namedComponent = component._renderedComponent;                                                                 // 144\n      }                                                                                                                // 145\n      markerName = 'React update: ' + namedComponent.getName();                                                        // 146\n      console.time(markerName);                                                                                        // 147\n    }                                                                                                                  // 148\n                                                                                                                       // 149\n    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);          // 150\n                                                                                                                       // 151\n    if (markerName) {                                                                                                  // 152\n      console.timeEnd(markerName);                                                                                     // 153\n    }                                                                                                                  // 154\n                                                                                                                       // 155\n    if (callbacks) {                                                                                                   // 156\n      for (var j = 0; j < callbacks.length; j++) {                                                                     // 157\n        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());                                // 158\n      }                                                                                                                // 159\n    }                                                                                                                  // 160\n  }                                                                                                                    // 161\n}                                                                                                                      // 162\n                                                                                                                       // 163\nvar flushBatchedUpdates = function () {                                                                                // 164\n  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents                                            // 165\n  // array and perform any updates enqueued by mount-ready handlers (i.e.,                                             // 166\n  // componentDidUpdate) but we need to check here too in order to catch                                               // 167\n  // updates enqueued by setState callbacks and asap calls.                                                            // 168\n  while (dirtyComponents.length || asapEnqueued) {                                                                     // 169\n    if (dirtyComponents.length) {                                                                                      // 170\n      var transaction = ReactUpdatesFlushTransaction.getPooled();                                                      // 171\n      transaction.perform(runBatchedUpdates, null, transaction);                                                       // 172\n      ReactUpdatesFlushTransaction.release(transaction);                                                               // 173\n    }                                                                                                                  // 174\n                                                                                                                       // 175\n    if (asapEnqueued) {                                                                                                // 176\n      asapEnqueued = false;                                                                                            // 177\n      var queue = asapCallbackQueue;                                                                                   // 178\n      asapCallbackQueue = CallbackQueue.getPooled();                                                                   // 179\n      queue.notifyAll();                                                                                               // 180\n      CallbackQueue.release(queue);                                                                                    // 181\n    }                                                                                                                  // 182\n  }                                                                                                                    // 183\n};                                                                                                                     // 184\n                                                                                                                       // 185\n/**                                                                                                                    // 186\n * Mark a component as needing a rerender, adding an optional callback to a                                            // 187\n * list of functions which will be executed once the rerender occurs.                                                  // 188\n */                                                                                                                    // 189\nfunction enqueueUpdate(component) {                                                                                    // 190\n  ensureInjected();                                                                                                    // 191\n                                                                                                                       // 192\n  // Various parts of our code (such as ReactCompositeComponent's                                                      // 193\n  // _renderValidatedComponent) assume that calls to render aren't nested;                                             // 194\n  // verify that that's the case. (This is called by each top-level update                                             // 195\n  // function, like setState, forceUpdate, etc.; creation and                                                          // 196\n  // destruction of top-level components is guarded in ReactMount.)                                                    // 197\n                                                                                                                       // 198\n  if (!batchingStrategy.isBatchingUpdates) {                                                                           // 199\n    batchingStrategy.batchedUpdates(enqueueUpdate, component);                                                         // 200\n    return;                                                                                                            // 201\n  }                                                                                                                    // 202\n                                                                                                                       // 203\n  dirtyComponents.push(component);                                                                                     // 204\n  if (component._updateBatchNumber == null) {                                                                          // 205\n    component._updateBatchNumber = updateBatchNumber + 1;                                                              // 206\n  }                                                                                                                    // 207\n}                                                                                                                      // 208\n                                                                                                                       // 209\n/**                                                                                                                    // 210\n * Enqueue a callback to be run at the end of the current batching cycle. Throws                                       // 211\n * if no updates are currently being performed.                                                                        // 212\n */                                                                                                                    // 213\nfunction asap(callback, context) {                                                                                     // 214\n  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;\n  asapCallbackQueue.enqueue(callback, context);                                                                        // 216\n  asapEnqueued = true;                                                                                                 // 217\n}                                                                                                                      // 218\n                                                                                                                       // 219\nvar ReactUpdatesInjection = {                                                                                          // 220\n  injectReconcileTransaction: function (ReconcileTransaction) {                                                        // 221\n    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;\n    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;                                                     // 223\n  },                                                                                                                   // 224\n                                                                                                                       // 225\n  injectBatchingStrategy: function (_batchingStrategy) {                                                               // 226\n    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;\n    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;\n    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;\n    batchingStrategy = _batchingStrategy;                                                                              // 230\n  }                                                                                                                    // 231\n};                                                                                                                     // 232\n                                                                                                                       // 233\nvar ReactUpdates = {                                                                                                   // 234\n  /**                                                                                                                  // 235\n   * React references `ReactReconcileTransaction` using this property in order                                         // 236\n   * to allow dependency injection.                                                                                    // 237\n   *                                                                                                                   // 238\n   * @internal                                                                                                         // 239\n   */                                                                                                                  // 240\n  ReactReconcileTransaction: null,                                                                                     // 241\n                                                                                                                       // 242\n  batchedUpdates: batchedUpdates,                                                                                      // 243\n  enqueueUpdate: enqueueUpdate,                                                                                        // 244\n  flushBatchedUpdates: flushBatchedUpdates,                                                                            // 245\n  injection: ReactUpdatesInjection,                                                                                    // 246\n  asap: asap                                                                                                           // 247\n};                                                                                                                     // 248\n                                                                                                                       // 249\nmodule.exports = ReactUpdates;                                                                                         // 250\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"CallbackQueue.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/CallbackQueue.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n                                                                                                                       // 17\nvar PooledClass = require('./PooledClass');                                                                            // 18\n                                                                                                                       // 19\nvar invariant = require('fbjs/lib/invariant');                                                                         // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n * A specialized pseudo-event module to help keep track of components waiting to                                       // 23\n * be notified when their DOM representations are available for use.                                                   // 24\n *                                                                                                                     // 25\n * This implements `PooledClass`, so you should never need to instantiate this.                                        // 26\n * Instead, use `CallbackQueue.getPooled()`.                                                                           // 27\n *                                                                                                                     // 28\n * @class ReactMountReady                                                                                              // 29\n * @implements PooledClass                                                                                             // 30\n * @internal                                                                                                           // 31\n */                                                                                                                    // 32\n                                                                                                                       // 33\nvar CallbackQueue = function () {                                                                                      // 34\n  function CallbackQueue(arg) {                                                                                        // 35\n    _classCallCheck(this, CallbackQueue);                                                                              // 36\n                                                                                                                       // 37\n    this._callbacks = null;                                                                                            // 38\n    this._contexts = null;                                                                                             // 39\n    this._arg = arg;                                                                                                   // 40\n  }                                                                                                                    // 41\n                                                                                                                       // 42\n  /**                                                                                                                  // 43\n   * Enqueues a callback to be invoked when `notifyAll` is invoked.                                                    // 44\n   *                                                                                                                   // 45\n   * @param {function} callback Invoked when `notifyAll` is invoked.                                                   // 46\n   * @param {?object} context Context to call `callback` with.                                                         // 47\n   * @internal                                                                                                         // 48\n   */                                                                                                                  // 49\n                                                                                                                       // 50\n                                                                                                                       // 51\n  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {                                              // 52\n    this._callbacks = this._callbacks || [];                                                                           // 53\n    this._callbacks.push(callback);                                                                                    // 54\n    this._contexts = this._contexts || [];                                                                             // 55\n    this._contexts.push(context);                                                                                      // 56\n  };                                                                                                                   // 57\n                                                                                                                       // 58\n  /**                                                                                                                  // 59\n   * Invokes all enqueued callbacks and clears the queue. This is invoked after                                        // 60\n   * the DOM representation of a component has been created or updated.                                                // 61\n   *                                                                                                                   // 62\n   * @internal                                                                                                         // 63\n   */                                                                                                                  // 64\n                                                                                                                       // 65\n                                                                                                                       // 66\n  CallbackQueue.prototype.notifyAll = function notifyAll() {                                                           // 67\n    var callbacks = this._callbacks;                                                                                   // 68\n    var contexts = this._contexts;                                                                                     // 69\n    var arg = this._arg;                                                                                               // 70\n    if (callbacks && contexts) {                                                                                       // 71\n      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;\n      this._callbacks = null;                                                                                          // 73\n      this._contexts = null;                                                                                           // 74\n      for (var i = 0; i < callbacks.length; i++) {                                                                     // 75\n        callbacks[i].call(contexts[i], arg);                                                                           // 76\n      }                                                                                                                // 77\n      callbacks.length = 0;                                                                                            // 78\n      contexts.length = 0;                                                                                             // 79\n    }                                                                                                                  // 80\n  };                                                                                                                   // 81\n                                                                                                                       // 82\n  CallbackQueue.prototype.checkpoint = function checkpoint() {                                                         // 83\n    return this._callbacks ? this._callbacks.length : 0;                                                               // 84\n  };                                                                                                                   // 85\n                                                                                                                       // 86\n  CallbackQueue.prototype.rollback = function rollback(len) {                                                          // 87\n    if (this._callbacks && this._contexts) {                                                                           // 88\n      this._callbacks.length = len;                                                                                    // 89\n      this._contexts.length = len;                                                                                     // 90\n    }                                                                                                                  // 91\n  };                                                                                                                   // 92\n                                                                                                                       // 93\n  /**                                                                                                                  // 94\n   * Resets the internal queue.                                                                                        // 95\n   *                                                                                                                   // 96\n   * @internal                                                                                                         // 97\n   */                                                                                                                  // 98\n                                                                                                                       // 99\n                                                                                                                       // 100\n  CallbackQueue.prototype.reset = function reset() {                                                                   // 101\n    this._callbacks = null;                                                                                            // 102\n    this._contexts = null;                                                                                             // 103\n  };                                                                                                                   // 104\n                                                                                                                       // 105\n  /**                                                                                                                  // 106\n   * `PooledClass` looks for this.                                                                                     // 107\n   */                                                                                                                  // 108\n                                                                                                                       // 109\n                                                                                                                       // 110\n  CallbackQueue.prototype.destructor = function destructor() {                                                         // 111\n    this.reset();                                                                                                      // 112\n  };                                                                                                                   // 113\n                                                                                                                       // 114\n  return CallbackQueue;                                                                                                // 115\n}();                                                                                                                   // 116\n                                                                                                                       // 117\nmodule.exports = PooledClass.addPoolingTo(CallbackQueue);                                                              // 118\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactFeatureFlags.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactFeatureFlags.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactFeatureFlags = {                                                                                              // 14\n  // When true, call console.time() before and .timeEnd() after each top-level                                         // 15\n  // render (both initial renders and updates). Useful when looking at prod-mode                                       // 16\n  // timeline profiles in Chrome, for example.                                                                         // 17\n  logTopLevelRenders: false                                                                                            // 18\n};                                                                                                                     // 19\n                                                                                                                       // 20\nmodule.exports = ReactFeatureFlags;                                                                                    // 21\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactReconciler.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactReconciler.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar ReactRef = require('./ReactRef');                                                                                  // 13\nvar ReactInstrumentation = require('./ReactInstrumentation');                                                          // 14\n                                                                                                                       // 15\nvar warning = require('fbjs/lib/warning');                                                                             // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Helper to call ReactRef.attachRefs with this composite component, split out                                         // 19\n * to avoid allocations in the transaction mount-ready queue.                                                          // 20\n */                                                                                                                    // 21\nfunction attachRefs() {                                                                                                // 22\n  ReactRef.attachRefs(this, this._currentElement);                                                                     // 23\n}                                                                                                                      // 24\n                                                                                                                       // 25\nvar ReactReconciler = {                                                                                                // 26\n  /**                                                                                                                  // 27\n   * Initializes the component, renders markup, and registers event listeners.                                         // 28\n   *                                                                                                                   // 29\n   * @param {ReactComponent} internalInstance                                                                          // 30\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 31\n   * @param {?object} the containing host component instance                                                           // 32\n   * @param {?object} info about the host container                                                                    // 33\n   * @return {?string} Rendered markup to be inserted into the DOM.                                                    // 34\n   * @final                                                                                                            // 35\n   * @internal                                                                                                         // 36\n   */                                                                                                                  // 37\n  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID) // 0 in production and for roots\n  {                                                                                                                    // 39\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 40\n      if (internalInstance._debugID !== 0) {                                                                           // 41\n        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);\n      }                                                                                                                // 43\n    }                                                                                                                  // 44\n    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);  // 45\n    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {                            // 46\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);                                          // 47\n    }                                                                                                                  // 48\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 49\n      if (internalInstance._debugID !== 0) {                                                                           // 50\n        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);                                    // 51\n      }                                                                                                                // 52\n    }                                                                                                                  // 53\n    return markup;                                                                                                     // 54\n  },                                                                                                                   // 55\n                                                                                                                       // 56\n  /**                                                                                                                  // 57\n   * Returns a value that can be passed to                                                                             // 58\n   * ReactComponentEnvironment.replaceNodeWithMarkup.                                                                  // 59\n   */                                                                                                                  // 60\n  getHostNode: function (internalInstance) {                                                                           // 61\n    return internalInstance.getHostNode();                                                                             // 62\n  },                                                                                                                   // 63\n                                                                                                                       // 64\n  /**                                                                                                                  // 65\n   * Releases any resources allocated by `mountComponent`.                                                             // 66\n   *                                                                                                                   // 67\n   * @final                                                                                                            // 68\n   * @internal                                                                                                         // 69\n   */                                                                                                                  // 70\n  unmountComponent: function (internalInstance, safely) {                                                              // 71\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 72\n      if (internalInstance._debugID !== 0) {                                                                           // 73\n        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);                            // 74\n      }                                                                                                                // 75\n    }                                                                                                                  // 76\n    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);                                           // 77\n    internalInstance.unmountComponent(safely);                                                                         // 78\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 79\n      if (internalInstance._debugID !== 0) {                                                                           // 80\n        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);                                  // 81\n      }                                                                                                                // 82\n    }                                                                                                                  // 83\n  },                                                                                                                   // 84\n                                                                                                                       // 85\n  /**                                                                                                                  // 86\n   * Update a component using a new element.                                                                           // 87\n   *                                                                                                                   // 88\n   * @param {ReactComponent} internalInstance                                                                          // 89\n   * @param {ReactElement} nextElement                                                                                 // 90\n   * @param {ReactReconcileTransaction} transaction                                                                    // 91\n   * @param {object} context                                                                                           // 92\n   * @internal                                                                                                         // 93\n   */                                                                                                                  // 94\n  receiveComponent: function (internalInstance, nextElement, transaction, context) {                                   // 95\n    var prevElement = internalInstance._currentElement;                                                                // 96\n                                                                                                                       // 97\n    if (nextElement === prevElement && context === internalInstance._context) {                                        // 98\n      // Since elements are immutable after the owner is rendered,                                                     // 99\n      // we can do a cheap identity compare here to determine if this is a                                             // 100\n      // superfluous reconcile. It's possible for state to be mutable but such                                         // 101\n      // change should trigger an update of the owner which would recreate                                             // 102\n      // the element. We explicitly check for the existence of an owner since                                          // 103\n      // it's possible for an element created outside a composite to be                                                // 104\n      // deeply mutated and reused.                                                                                    // 105\n                                                                                                                       // 106\n      // TODO: Bailing out early is just a perf optimization right?                                                    // 107\n      // TODO: Removing the return statement should affect correctness?                                                // 108\n      return;                                                                                                          // 109\n    }                                                                                                                  // 110\n                                                                                                                       // 111\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 112\n      if (internalInstance._debugID !== 0) {                                                                           // 113\n        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);                // 114\n      }                                                                                                                // 115\n    }                                                                                                                  // 116\n                                                                                                                       // 117\n    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);                                             // 118\n                                                                                                                       // 119\n    if (refsChanged) {                                                                                                 // 120\n      ReactRef.detachRefs(internalInstance, prevElement);                                                              // 121\n    }                                                                                                                  // 122\n                                                                                                                       // 123\n    internalInstance.receiveComponent(nextElement, transaction, context);                                              // 124\n                                                                                                                       // 125\n    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {             // 126\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);                                          // 127\n    }                                                                                                                  // 128\n                                                                                                                       // 129\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 130\n      if (internalInstance._debugID !== 0) {                                                                           // 131\n        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);                                   // 132\n      }                                                                                                                // 133\n    }                                                                                                                  // 134\n  },                                                                                                                   // 135\n                                                                                                                       // 136\n  /**                                                                                                                  // 137\n   * Flush any dirty changes in a component.                                                                           // 138\n   *                                                                                                                   // 139\n   * @param {ReactComponent} internalInstance                                                                          // 140\n   * @param {ReactReconcileTransaction} transaction                                                                    // 141\n   * @internal                                                                                                         // 142\n   */                                                                                                                  // 143\n  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {                              // 144\n    if (internalInstance._updateBatchNumber !== updateBatchNumber) {                                                   // 145\n      // The component's enqueued batch number should always be the current                                            // 146\n      // batch or the following one.                                                                                   // 147\n      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;\n      return;                                                                                                          // 149\n    }                                                                                                                  // 150\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 151\n      if (internalInstance._debugID !== 0) {                                                                           // 152\n        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);\n      }                                                                                                                // 154\n    }                                                                                                                  // 155\n    internalInstance.performUpdateIfNecessary(transaction);                                                            // 156\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 157\n      if (internalInstance._debugID !== 0) {                                                                           // 158\n        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);                                   // 159\n      }                                                                                                                // 160\n    }                                                                                                                  // 161\n  }                                                                                                                    // 162\n};                                                                                                                     // 163\n                                                                                                                       // 164\nmodule.exports = ReactReconciler;                                                                                      // 165\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactRef.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactRef.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactOwner = require('./ReactOwner');                                                                              // 14\n                                                                                                                       // 15\nvar ReactRef = {};                                                                                                     // 16\n                                                                                                                       // 17\nfunction attachRef(ref, component, owner) {                                                                            // 18\n  if (typeof ref === 'function') {                                                                                     // 19\n    ref(component.getPublicInstance());                                                                                // 20\n  } else {                                                                                                             // 21\n    // Legacy ref                                                                                                      // 22\n    ReactOwner.addComponentAsRefTo(component, ref, owner);                                                             // 23\n  }                                                                                                                    // 24\n}                                                                                                                      // 25\n                                                                                                                       // 26\nfunction detachRef(ref, component, owner) {                                                                            // 27\n  if (typeof ref === 'function') {                                                                                     // 28\n    ref(null);                                                                                                         // 29\n  } else {                                                                                                             // 30\n    // Legacy ref                                                                                                      // 31\n    ReactOwner.removeComponentAsRefFrom(component, ref, owner);                                                        // 32\n  }                                                                                                                    // 33\n}                                                                                                                      // 34\n                                                                                                                       // 35\nReactRef.attachRefs = function (instance, element) {                                                                   // 36\n  if (element === null || typeof element !== 'object') {                                                               // 37\n    return;                                                                                                            // 38\n  }                                                                                                                    // 39\n  var ref = element.ref;                                                                                               // 40\n  if (ref != null) {                                                                                                   // 41\n    attachRef(ref, instance, element._owner);                                                                          // 42\n  }                                                                                                                    // 43\n};                                                                                                                     // 44\n                                                                                                                       // 45\nReactRef.shouldUpdateRefs = function (prevElement, nextElement) {                                                      // 46\n  // If either the owner or a `ref` has changed, make sure the newest owner                                            // 47\n  // has stored a reference to `this`, and the previous owner (if different)                                           // 48\n  // has forgotten the reference to `this`. We use the element instead                                                 // 49\n  // of the public this.props because the post processing cannot determine                                             // 50\n  // a ref. The ref conceptually lives on the element.                                                                 // 51\n                                                                                                                       // 52\n  // TODO: Should this even be possible? The owner cannot change because                                               // 53\n  // it's forbidden by shouldUpdateReactComponent. The ref can change                                                  // 54\n  // if you swap the keys of but not the refs. Reconsider where this check                                             // 55\n  // is made. It probably belongs where the key checking and                                                           // 56\n  // instantiateReactComponent is done.                                                                                // 57\n                                                                                                                       // 58\n  var prevRef = null;                                                                                                  // 59\n  var prevOwner = null;                                                                                                // 60\n  if (prevElement !== null && typeof prevElement === 'object') {                                                       // 61\n    prevRef = prevElement.ref;                                                                                         // 62\n    prevOwner = prevElement._owner;                                                                                    // 63\n  }                                                                                                                    // 64\n                                                                                                                       // 65\n  var nextRef = null;                                                                                                  // 66\n  var nextOwner = null;                                                                                                // 67\n  if (nextElement !== null && typeof nextElement === 'object') {                                                       // 68\n    nextRef = nextElement.ref;                                                                                         // 69\n    nextOwner = nextElement._owner;                                                                                    // 70\n  }                                                                                                                    // 71\n                                                                                                                       // 72\n  return prevRef !== nextRef ||                                                                                        // 73\n  // If owner changes but we have an unchanged function ref, don't update refs                                         // 74\n  typeof nextRef === 'string' && nextOwner !== prevOwner;                                                              // 75\n};                                                                                                                     // 76\n                                                                                                                       // 77\nReactRef.detachRefs = function (instance, element) {                                                                   // 78\n  if (element === null || typeof element !== 'object') {                                                               // 79\n    return;                                                                                                            // 80\n  }                                                                                                                    // 81\n  var ref = element.ref;                                                                                               // 82\n  if (ref != null) {                                                                                                   // 83\n    detachRef(ref, instance, element._owner);                                                                          // 84\n  }                                                                                                                    // 85\n};                                                                                                                     // 86\n                                                                                                                       // 87\nmodule.exports = ReactRef;                                                                                             // 88\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactOwner.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactOwner.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar invariant = require('fbjs/lib/invariant');                                                                         // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * @param {?object} object                                                                                             // 19\n * @return {boolean} True if `object` is a valid owner.                                                                // 20\n * @final                                                                                                              // 21\n */                                                                                                                    // 22\nfunction isValidOwner(object) {                                                                                        // 23\n  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');               // 24\n}                                                                                                                      // 25\n                                                                                                                       // 26\n/**                                                                                                                    // 27\n * ReactOwners are capable of storing references to owned components.                                                  // 28\n *                                                                                                                     // 29\n * All components are capable of //being// referenced by owner components, but                                         // 30\n * only ReactOwner components are capable of //referencing// owned components.                                         // 31\n * The named reference is known as a \"ref\".                                                                            // 32\n *                                                                                                                     // 33\n * Refs are available when mounted and updated during reconciliation.                                                  // 34\n *                                                                                                                     // 35\n *   var MyComponent = React.createClass({                                                                             // 36\n *     render: function() {                                                                                            // 37\n *       return (                                                                                                      // 38\n *         <div onClick={this.handleClick}>                                                                            // 39\n *           <CustomComponent ref=\"custom\" />                                                                          // 40\n *         </div>                                                                                                      // 41\n *       );                                                                                                            // 42\n *     },                                                                                                              // 43\n *     handleClick: function() {                                                                                       // 44\n *       this.refs.custom.handleClick();                                                                               // 45\n *     },                                                                                                              // 46\n *     componentDidMount: function() {                                                                                 // 47\n *       this.refs.custom.initialize();                                                                                // 48\n *     }                                                                                                               // 49\n *   });                                                                                                               // 50\n *                                                                                                                     // 51\n * Refs should rarely be used. When refs are used, they should only be done to                                         // 52\n * control data that is not handled by React's data flow.                                                              // 53\n *                                                                                                                     // 54\n * @class ReactOwner                                                                                                   // 55\n */                                                                                                                    // 56\nvar ReactOwner = {                                                                                                     // 57\n  /**                                                                                                                  // 58\n   * Adds a component by ref to an owner component.                                                                    // 59\n   *                                                                                                                   // 60\n   * @param {ReactComponent} component Component to reference.                                                         // 61\n   * @param {string} ref Name by which to refer to the component.                                                      // 62\n   * @param {ReactOwner} owner Component on which to record the ref.                                                   // 63\n   * @final                                                                                                            // 64\n   * @internal                                                                                                         // 65\n   */                                                                                                                  // 66\n  addComponentAsRefTo: function (component, ref, owner) {                                                              // 67\n    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;\n    owner.attachRef(ref, component);                                                                                   // 69\n  },                                                                                                                   // 70\n                                                                                                                       // 71\n  /**                                                                                                                  // 72\n   * Removes a component by ref from an owner component.                                                               // 73\n   *                                                                                                                   // 74\n   * @param {ReactComponent} component Component to dereference.                                                       // 75\n   * @param {string} ref Name of the ref to remove.                                                                    // 76\n   * @param {ReactOwner} owner Component on which the ref is recorded.                                                 // 77\n   * @final                                                                                                            // 78\n   * @internal                                                                                                         // 79\n   */                                                                                                                  // 80\n  removeComponentAsRefFrom: function (component, ref, owner) {                                                         // 81\n    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;\n    var ownerPublicInstance = owner.getPublicInstance();                                                               // 83\n    // Check that `component`'s owner is still alive and that `component` is still the current ref                     // 84\n    // because we do not want to detach the ref if another component stole it.                                         // 85\n    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {                      // 86\n      owner.detachRef(ref);                                                                                            // 87\n    }                                                                                                                  // 88\n  }                                                                                                                    // 89\n};                                                                                                                     // 90\n                                                                                                                       // 91\nmodule.exports = ReactOwner;                                                                                           // 92\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactInstrumentation.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactInstrumentation.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2016-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n// Trust the developer to only use ReactInstrumentation with a __DEV__ check                                           // 14\n                                                                                                                       // 15\nvar debugTool = null;                                                                                                  // 16\n                                                                                                                       // 17\nif (process.env.NODE_ENV !== 'production') {                                                                           // 18\n  var ReactDebugTool = require('./ReactDebugTool');                                                                    // 19\n  debugTool = ReactDebugTool;                                                                                          // 20\n}                                                                                                                      // 21\n                                                                                                                       // 22\nmodule.exports = { debugTool: debugTool };                                                                             // 23\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDebugTool.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactDebugTool.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2016-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactInvalidSetStateWarningHook = require('./ReactInvalidSetStateWarningHook');                                    // 14\nvar ReactHostOperationHistoryHook = require('./ReactHostOperationHistoryHook');                                        // 15\nvar ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');                                              // 16\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 17\n                                                                                                                       // 18\nvar performanceNow = require('fbjs/lib/performanceNow');                                                               // 19\nvar warning = require('fbjs/lib/warning');                                                                             // 20\n                                                                                                                       // 21\nvar hooks = [];                                                                                                        // 22\nvar didHookThrowForEvent = {};                                                                                         // 23\n                                                                                                                       // 24\nfunction callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {                                                  // 25\n  try {                                                                                                                // 26\n    fn.call(context, arg1, arg2, arg3, arg4, arg5);                                                                    // 27\n  } catch (e) {                                                                                                        // 28\n    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\\n' + e.stack) : void 0;\n    didHookThrowForEvent[event] = true;                                                                                // 30\n  }                                                                                                                    // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\nfunction emitEvent(event, arg1, arg2, arg3, arg4, arg5) {                                                              // 34\n  for (var i = 0; i < hooks.length; i++) {                                                                             // 35\n    var hook = hooks[i];                                                                                               // 36\n    var fn = hook[event];                                                                                              // 37\n    if (fn) {                                                                                                          // 38\n      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);                                                         // 39\n    }                                                                                                                  // 40\n  }                                                                                                                    // 41\n}                                                                                                                      // 42\n                                                                                                                       // 43\nvar isProfiling = false;                                                                                               // 44\nvar flushHistory = [];                                                                                                 // 45\nvar lifeCycleTimerStack = [];                                                                                          // 46\nvar currentFlushNesting = 0;                                                                                           // 47\nvar currentFlushMeasurements = [];                                                                                     // 48\nvar currentFlushStartTime = 0;                                                                                         // 49\nvar currentTimerDebugID = null;                                                                                        // 50\nvar currentTimerStartTime = 0;                                                                                         // 51\nvar currentTimerNestedFlushDuration = 0;                                                                               // 52\nvar currentTimerType = null;                                                                                           // 53\n                                                                                                                       // 54\nvar lifeCycleTimerHasWarned = false;                                                                                   // 55\n                                                                                                                       // 56\nfunction clearHistory() {                                                                                              // 57\n  ReactComponentTreeHook.purgeUnmountedComponents();                                                                   // 58\n  ReactHostOperationHistoryHook.clearHistory();                                                                        // 59\n}                                                                                                                      // 60\n                                                                                                                       // 61\nfunction getTreeSnapshot(registeredIDs) {                                                                              // 62\n  return registeredIDs.reduce(function (tree, id) {                                                                    // 63\n    var ownerID = ReactComponentTreeHook.getOwnerID(id);                                                               // 64\n    var parentID = ReactComponentTreeHook.getParentID(id);                                                             // 65\n    tree[id] = {                                                                                                       // 66\n      displayName: ReactComponentTreeHook.getDisplayName(id),                                                          // 67\n      text: ReactComponentTreeHook.getText(id),                                                                        // 68\n      updateCount: ReactComponentTreeHook.getUpdateCount(id),                                                          // 69\n      childIDs: ReactComponentTreeHook.getChildIDs(id),                                                                // 70\n      // Text nodes don't have owners but this is close enough.                                                        // 71\n      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,                                // 72\n      parentID: parentID                                                                                               // 73\n    };                                                                                                                 // 74\n    return tree;                                                                                                       // 75\n  }, {});                                                                                                              // 76\n}                                                                                                                      // 77\n                                                                                                                       // 78\nfunction resetMeasurements() {                                                                                         // 79\n  var previousStartTime = currentFlushStartTime;                                                                       // 80\n  var previousMeasurements = currentFlushMeasurements;                                                                 // 81\n  var previousOperations = ReactHostOperationHistoryHook.getHistory();                                                 // 82\n                                                                                                                       // 83\n  if (currentFlushNesting === 0) {                                                                                     // 84\n    currentFlushStartTime = 0;                                                                                         // 85\n    currentFlushMeasurements = [];                                                                                     // 86\n    clearHistory();                                                                                                    // 87\n    return;                                                                                                            // 88\n  }                                                                                                                    // 89\n                                                                                                                       // 90\n  if (previousMeasurements.length || previousOperations.length) {                                                      // 91\n    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();                                                     // 92\n    flushHistory.push({                                                                                                // 93\n      duration: performanceNow() - previousStartTime,                                                                  // 94\n      measurements: previousMeasurements || [],                                                                        // 95\n      operations: previousOperations || [],                                                                            // 96\n      treeSnapshot: getTreeSnapshot(registeredIDs)                                                                     // 97\n    });                                                                                                                // 98\n  }                                                                                                                    // 99\n                                                                                                                       // 100\n  clearHistory();                                                                                                      // 101\n  currentFlushStartTime = performanceNow();                                                                            // 102\n  currentFlushMeasurements = [];                                                                                       // 103\n}                                                                                                                      // 104\n                                                                                                                       // 105\nfunction checkDebugID(debugID) {                                                                                       // 106\n  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;                           // 107\n                                                                                                                       // 108\n  if (allowRoot && debugID === 0) {                                                                                    // 109\n    return;                                                                                                            // 110\n  }                                                                                                                    // 111\n  if (!debugID) {                                                                                                      // 112\n    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;      // 113\n  }                                                                                                                    // 114\n}                                                                                                                      // 115\n                                                                                                                       // 116\nfunction beginLifeCycleTimer(debugID, timerType) {                                                                     // 117\n  if (currentFlushNesting === 0) {                                                                                     // 118\n    return;                                                                                                            // 119\n  }                                                                                                                    // 120\n  if (currentTimerType && !lifeCycleTimerHasWarned) {                                                                  // 121\n    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;\n    lifeCycleTimerHasWarned = true;                                                                                    // 123\n  }                                                                                                                    // 124\n  currentTimerStartTime = performanceNow();                                                                            // 125\n  currentTimerNestedFlushDuration = 0;                                                                                 // 126\n  currentTimerDebugID = debugID;                                                                                       // 127\n  currentTimerType = timerType;                                                                                        // 128\n}                                                                                                                      // 129\n                                                                                                                       // 130\nfunction endLifeCycleTimer(debugID, timerType) {                                                                       // 131\n  if (currentFlushNesting === 0) {                                                                                     // 132\n    return;                                                                                                            // 133\n  }                                                                                                                    // 134\n  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {                                                    // 135\n    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;\n    lifeCycleTimerHasWarned = true;                                                                                    // 137\n  }                                                                                                                    // 138\n  if (isProfiling) {                                                                                                   // 139\n    currentFlushMeasurements.push({                                                                                    // 140\n      timerType: timerType,                                                                                            // 141\n      instanceID: debugID,                                                                                             // 142\n      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration                             // 143\n    });                                                                                                                // 144\n  }                                                                                                                    // 145\n  currentTimerStartTime = 0;                                                                                           // 146\n  currentTimerNestedFlushDuration = 0;                                                                                 // 147\n  currentTimerDebugID = null;                                                                                          // 148\n  currentTimerType = null;                                                                                             // 149\n}                                                                                                                      // 150\n                                                                                                                       // 151\nfunction pauseCurrentLifeCycleTimer() {                                                                                // 152\n  var currentTimer = {                                                                                                 // 153\n    startTime: currentTimerStartTime,                                                                                  // 154\n    nestedFlushStartTime: performanceNow(),                                                                            // 155\n    debugID: currentTimerDebugID,                                                                                      // 156\n    timerType: currentTimerType                                                                                        // 157\n  };                                                                                                                   // 158\n  lifeCycleTimerStack.push(currentTimer);                                                                              // 159\n  currentTimerStartTime = 0;                                                                                           // 160\n  currentTimerNestedFlushDuration = 0;                                                                                 // 161\n  currentTimerDebugID = null;                                                                                          // 162\n  currentTimerType = null;                                                                                             // 163\n}                                                                                                                      // 164\n                                                                                                                       // 165\nfunction resumeCurrentLifeCycleTimer() {                                                                               // 166\n  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),                                                               // 167\n      startTime = _lifeCycleTimerStack$.startTime,                                                                     // 168\n      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,                                               // 169\n      debugID = _lifeCycleTimerStack$.debugID,                                                                         // 170\n      timerType = _lifeCycleTimerStack$.timerType;                                                                     // 171\n                                                                                                                       // 172\n  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;                                                   // 173\n  currentTimerStartTime = startTime;                                                                                   // 174\n  currentTimerNestedFlushDuration += nestedFlushDuration;                                                              // 175\n  currentTimerDebugID = debugID;                                                                                       // 176\n  currentTimerType = timerType;                                                                                        // 177\n}                                                                                                                      // 178\n                                                                                                                       // 179\nvar lastMarkTimeStamp = 0;                                                                                             // 180\nvar canUsePerformanceMeasure = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';\n                                                                                                                       // 182\nfunction shouldMark(debugID) {                                                                                         // 183\n  if (!isProfiling || !canUsePerformanceMeasure) {                                                                     // 184\n    return false;                                                                                                      // 185\n  }                                                                                                                    // 186\n  var element = ReactComponentTreeHook.getElement(debugID);                                                            // 187\n  if (element == null || typeof element !== 'object') {                                                                // 188\n    return false;                                                                                                      // 189\n  }                                                                                                                    // 190\n  var isHostElement = typeof element.type === 'string';                                                                // 191\n  if (isHostElement) {                                                                                                 // 192\n    return false;                                                                                                      // 193\n  }                                                                                                                    // 194\n  return true;                                                                                                         // 195\n}                                                                                                                      // 196\n                                                                                                                       // 197\nfunction markBegin(debugID, markType) {                                                                                // 198\n  if (!shouldMark(debugID)) {                                                                                          // 199\n    return;                                                                                                            // 200\n  }                                                                                                                    // 201\n                                                                                                                       // 202\n  var markName = debugID + '::' + markType;                                                                            // 203\n  lastMarkTimeStamp = performanceNow();                                                                                // 204\n  performance.mark(markName);                                                                                          // 205\n}                                                                                                                      // 206\n                                                                                                                       // 207\nfunction markEnd(debugID, markType) {                                                                                  // 208\n  if (!shouldMark(debugID)) {                                                                                          // 209\n    return;                                                                                                            // 210\n  }                                                                                                                    // 211\n                                                                                                                       // 212\n  var markName = debugID + '::' + markType;                                                                            // 213\n  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';                                       // 214\n                                                                                                                       // 215\n  // Chrome has an issue of dropping markers recorded too fast:                                                        // 216\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652                                                      // 217\n  // To work around this, we will not report very small measurements.                                                  // 218\n  // I determined the magic number by tweaking it back and forth.                                                      // 219\n  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.                                         // 220\n  // When the bug is fixed, we can `measure()` unconditionally if we want to.                                          // 221\n  var timeStamp = performanceNow();                                                                                    // 222\n  if (timeStamp - lastMarkTimeStamp > 0.1) {                                                                           // 223\n    var measurementName = displayName + ' [' + markType + ']';                                                         // 224\n    performance.measure(measurementName, markName);                                                                    // 225\n  }                                                                                                                    // 226\n                                                                                                                       // 227\n  performance.clearMarks(markName);                                                                                    // 228\n  if (measurementName) {                                                                                               // 229\n    performance.clearMeasures(measurementName);                                                                        // 230\n  }                                                                                                                    // 231\n}                                                                                                                      // 232\n                                                                                                                       // 233\nvar ReactDebugTool = {                                                                                                 // 234\n  addHook: function (hook) {                                                                                           // 235\n    hooks.push(hook);                                                                                                  // 236\n  },                                                                                                                   // 237\n  removeHook: function (hook) {                                                                                        // 238\n    for (var i = 0; i < hooks.length; i++) {                                                                           // 239\n      if (hooks[i] === hook) {                                                                                         // 240\n        hooks.splice(i, 1);                                                                                            // 241\n        i--;                                                                                                           // 242\n      }                                                                                                                // 243\n    }                                                                                                                  // 244\n  },                                                                                                                   // 245\n  isProfiling: function () {                                                                                           // 246\n    return isProfiling;                                                                                                // 247\n  },                                                                                                                   // 248\n  beginProfiling: function () {                                                                                        // 249\n    if (isProfiling) {                                                                                                 // 250\n      return;                                                                                                          // 251\n    }                                                                                                                  // 252\n                                                                                                                       // 253\n    isProfiling = true;                                                                                                // 254\n    flushHistory.length = 0;                                                                                           // 255\n    resetMeasurements();                                                                                               // 256\n    ReactDebugTool.addHook(ReactHostOperationHistoryHook);                                                             // 257\n  },                                                                                                                   // 258\n  endProfiling: function () {                                                                                          // 259\n    if (!isProfiling) {                                                                                                // 260\n      return;                                                                                                          // 261\n    }                                                                                                                  // 262\n                                                                                                                       // 263\n    isProfiling = false;                                                                                               // 264\n    resetMeasurements();                                                                                               // 265\n    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);                                                          // 266\n  },                                                                                                                   // 267\n  getFlushHistory: function () {                                                                                       // 268\n    return flushHistory;                                                                                               // 269\n  },                                                                                                                   // 270\n  onBeginFlush: function () {                                                                                          // 271\n    currentFlushNesting++;                                                                                             // 272\n    resetMeasurements();                                                                                               // 273\n    pauseCurrentLifeCycleTimer();                                                                                      // 274\n    emitEvent('onBeginFlush');                                                                                         // 275\n  },                                                                                                                   // 276\n  onEndFlush: function () {                                                                                            // 277\n    resetMeasurements();                                                                                               // 278\n    currentFlushNesting--;                                                                                             // 279\n    resumeCurrentLifeCycleTimer();                                                                                     // 280\n    emitEvent('onEndFlush');                                                                                           // 281\n  },                                                                                                                   // 282\n  onBeginLifeCycleTimer: function (debugID, timerType) {                                                               // 283\n    checkDebugID(debugID);                                                                                             // 284\n    emitEvent('onBeginLifeCycleTimer', debugID, timerType);                                                            // 285\n    markBegin(debugID, timerType);                                                                                     // 286\n    beginLifeCycleTimer(debugID, timerType);                                                                           // 287\n  },                                                                                                                   // 288\n  onEndLifeCycleTimer: function (debugID, timerType) {                                                                 // 289\n    checkDebugID(debugID);                                                                                             // 290\n    endLifeCycleTimer(debugID, timerType);                                                                             // 291\n    markEnd(debugID, timerType);                                                                                       // 292\n    emitEvent('onEndLifeCycleTimer', debugID, timerType);                                                              // 293\n  },                                                                                                                   // 294\n  onBeginProcessingChildContext: function () {                                                                         // 295\n    emitEvent('onBeginProcessingChildContext');                                                                        // 296\n  },                                                                                                                   // 297\n  onEndProcessingChildContext: function () {                                                                           // 298\n    emitEvent('onEndProcessingChildContext');                                                                          // 299\n  },                                                                                                                   // 300\n  onHostOperation: function (operation) {                                                                              // 301\n    checkDebugID(operation.instanceID);                                                                                // 302\n    emitEvent('onHostOperation', operation);                                                                           // 303\n  },                                                                                                                   // 304\n  onSetState: function () {                                                                                            // 305\n    emitEvent('onSetState');                                                                                           // 306\n  },                                                                                                                   // 307\n  onSetChildren: function (debugID, childDebugIDs) {                                                                   // 308\n    checkDebugID(debugID);                                                                                             // 309\n    childDebugIDs.forEach(checkDebugID);                                                                               // 310\n    emitEvent('onSetChildren', debugID, childDebugIDs);                                                                // 311\n  },                                                                                                                   // 312\n  onBeforeMountComponent: function (debugID, element, parentDebugID) {                                                 // 313\n    checkDebugID(debugID);                                                                                             // 314\n    checkDebugID(parentDebugID, true);                                                                                 // 315\n    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);                                              // 316\n    markBegin(debugID, 'mount');                                                                                       // 317\n  },                                                                                                                   // 318\n  onMountComponent: function (debugID) {                                                                               // 319\n    checkDebugID(debugID);                                                                                             // 320\n    markEnd(debugID, 'mount');                                                                                         // 321\n    emitEvent('onMountComponent', debugID);                                                                            // 322\n  },                                                                                                                   // 323\n  onBeforeUpdateComponent: function (debugID, element) {                                                               // 324\n    checkDebugID(debugID);                                                                                             // 325\n    emitEvent('onBeforeUpdateComponent', debugID, element);                                                            // 326\n    markBegin(debugID, 'update');                                                                                      // 327\n  },                                                                                                                   // 328\n  onUpdateComponent: function (debugID) {                                                                              // 329\n    checkDebugID(debugID);                                                                                             // 330\n    markEnd(debugID, 'update');                                                                                        // 331\n    emitEvent('onUpdateComponent', debugID);                                                                           // 332\n  },                                                                                                                   // 333\n  onBeforeUnmountComponent: function (debugID) {                                                                       // 334\n    checkDebugID(debugID);                                                                                             // 335\n    emitEvent('onBeforeUnmountComponent', debugID);                                                                    // 336\n    markBegin(debugID, 'unmount');                                                                                     // 337\n  },                                                                                                                   // 338\n  onUnmountComponent: function (debugID) {                                                                             // 339\n    checkDebugID(debugID);                                                                                             // 340\n    markEnd(debugID, 'unmount');                                                                                       // 341\n    emitEvent('onUnmountComponent', debugID);                                                                          // 342\n  },                                                                                                                   // 343\n  onTestEvent: function () {                                                                                           // 344\n    emitEvent('onTestEvent');                                                                                          // 345\n  }                                                                                                                    // 346\n};                                                                                                                     // 347\n                                                                                                                       // 348\n// TODO remove these when RN/www gets updated                                                                          // 349\nReactDebugTool.addDevtool = ReactDebugTool.addHook;                                                                    // 350\nReactDebugTool.removeDevtool = ReactDebugTool.removeHook;                                                              // 351\n                                                                                                                       // 352\nReactDebugTool.addHook(ReactInvalidSetStateWarningHook);                                                               // 353\nReactDebugTool.addHook(ReactComponentTreeHook);                                                                        // 354\nvar url = ExecutionEnvironment.canUseDOM && window.location.href || '';                                                // 355\nif (/[?&]react_perf\\b/.test(url)) {                                                                                    // 356\n  ReactDebugTool.beginProfiling();                                                                                     // 357\n}                                                                                                                      // 358\n                                                                                                                       // 359\nmodule.exports = ReactDebugTool;                                                                                       // 360\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactInvalidSetStateWarningHook.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactInvalidSetStateWarningHook.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2016-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar warning = require('fbjs/lib/warning');                                                                             // 14\n                                                                                                                       // 15\nif (process.env.NODE_ENV !== 'production') {                                                                           // 16\n  var processingChildContext = false;                                                                                  // 17\n                                                                                                                       // 18\n  var warnInvalidSetState = function () {                                                                              // 19\n    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;\n  };                                                                                                                   // 21\n}                                                                                                                      // 22\n                                                                                                                       // 23\nvar ReactInvalidSetStateWarningHook = {                                                                                // 24\n  onBeginProcessingChildContext: function () {                                                                         // 25\n    processingChildContext = true;                                                                                     // 26\n  },                                                                                                                   // 27\n  onEndProcessingChildContext: function () {                                                                           // 28\n    processingChildContext = false;                                                                                    // 29\n  },                                                                                                                   // 30\n  onSetState: function () {                                                                                            // 31\n    warnInvalidSetState();                                                                                             // 32\n  }                                                                                                                    // 33\n};                                                                                                                     // 34\n                                                                                                                       // 35\nmodule.exports = ReactInvalidSetStateWarningHook;                                                                      // 36\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactHostOperationHistoryHook.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactHostOperationHistoryHook.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2016-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar history = [];                                                                                                      // 14\n                                                                                                                       // 15\nvar ReactHostOperationHistoryHook = {                                                                                  // 16\n  onHostOperation: function (operation) {                                                                              // 17\n    history.push(operation);                                                                                           // 18\n  },                                                                                                                   // 19\n  clearHistory: function () {                                                                                          // 20\n    if (ReactHostOperationHistoryHook._preventClearing) {                                                              // 21\n      // Should only be used for tests.                                                                                // 22\n      return;                                                                                                          // 23\n    }                                                                                                                  // 24\n                                                                                                                       // 25\n    history = [];                                                                                                      // 26\n  },                                                                                                                   // 27\n  getHistory: function () {                                                                                            // 28\n    return history;                                                                                                    // 29\n  }                                                                                                                    // 30\n};                                                                                                                     // 31\n                                                                                                                       // 32\nmodule.exports = ReactHostOperationHistoryHook;                                                                        // 33\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Transaction.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/Transaction.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar invariant = require('fbjs/lib/invariant');                                                                         // 16\n                                                                                                                       // 17\nvar OBSERVED_ERROR = {};                                                                                               // 18\n                                                                                                                       // 19\n/**                                                                                                                    // 20\n * `Transaction` creates a black box that is able to wrap any method such that                                         // 21\n * certain invariants are maintained before and after the method is invoked                                            // 22\n * (Even if an exception is thrown while invoking the wrapped method). Whoever                                         // 23\n * instantiates a transaction can provide enforcers of the invariants at                                               // 24\n * creation time. The `Transaction` class itself will supply one additional                                            // 25\n * automatic invariant for you - the invariant that any transaction instance                                           // 26\n * should not be run while it is already being run. You would typically create a                                       // 27\n * single instance of a `Transaction` for reuse multiple times, that potentially                                       // 28\n * is used to wrap several different methods. Wrappers are extremely simple -                                          // 29\n * they only require implementing two methods.                                                                         // 30\n *                                                                                                                     // 31\n * <pre>                                                                                                               // 32\n *                       wrappers (injected at creation time)                                                          // 33\n *                                      +        +                                                                     // 34\n *                                      |        |                                                                     // 35\n *                    +-----------------|--------|--------------+                                                      // 36\n *                    |                 v        |              |                                                      // 37\n *                    |      +---------------+   |              |                                                      // 38\n *                    |   +--|    wrapper1   |---|----+         |                                                      // 39\n *                    |   |  +---------------+   v    |         |                                                      // 40\n *                    |   |          +-------------+  |         |                                                      // 41\n *                    |   |     +----|   wrapper2  |--------+   |                                                      // 42\n *                    |   |     |    +-------------+  |     |   |                                                      // 43\n *                    |   |     |                     |     |   |                                                      // 44\n *                    |   v     v                     v     v   | wrapper                                              // 45\n *                    | +---+ +---+   +---------+   +---+ +---+ | invariants                                           // 46\n * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained                                           // 47\n * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->                                             // 48\n *                    | |   | |   |   |         |   |   | |   | |                                                      // 49\n *                    | |   | |   |   |         |   |   | |   | |                                                      // 50\n *                    | |   | |   |   |         |   |   | |   | |                                                      // 51\n *                    | +---+ +---+   +---------+   +---+ +---+ |                                                      // 52\n *                    |  initialize                    close    |                                                      // 53\n *                    +-----------------------------------------+                                                      // 54\n * </pre>                                                                                                              // 55\n *                                                                                                                     // 56\n * Use cases:                                                                                                          // 57\n * - Preserving the input selection ranges before/after reconciliation.                                                // 58\n *   Restoring selection even in the event of an unexpected error.                                                     // 59\n * - Deactivating events while rearranging the DOM, preventing blurs/focuses,                                          // 60\n *   while guaranteeing that afterwards, the event system is reactivated.                                              // 61\n * - Flushing a queue of collected DOM mutations to the main UI thread after a                                         // 62\n *   reconciliation takes place in a worker thread.                                                                    // 63\n * - Invoking any collected `componentDidUpdate` callbacks after rendering new                                         // 64\n *   content.                                                                                                          // 65\n * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue                                         // 66\n *   to preserve the `scrollTop` (an automatic scroll aware DOM).                                                      // 67\n * - (Future use case): Layout calculations before and after DOM updates.                                              // 68\n *                                                                                                                     // 69\n * Transactional plugin API:                                                                                           // 70\n * - A module that has an `initialize` method that returns any precomputation.                                         // 71\n * - and a `close` method that accepts the precomputation. `close` is invoked                                          // 72\n *   when the wrapped process is completed, or has failed.                                                             // 73\n *                                                                                                                     // 74\n * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules                                             // 75\n * that implement `initialize` and `close`.                                                                            // 76\n * @return {Transaction} Single transaction for reuse in thread.                                                       // 77\n *                                                                                                                     // 78\n * @class Transaction                                                                                                  // 79\n */                                                                                                                    // 80\nvar TransactionImpl = {                                                                                                // 81\n  /**                                                                                                                  // 82\n   * Sets up this instance so that it is prepared for collecting metrics. Does                                         // 83\n   * so such that this setup method may be used on an instance that is already                                         // 84\n   * initialized, in a way that does not consume additional memory upon reuse.                                         // 85\n   * That can be useful if you decide to make your subclass of this mixin a                                            // 86\n   * \"PooledClass\".                                                                                                    // 87\n   */                                                                                                                  // 88\n  reinitializeTransaction: function () {                                                                               // 89\n    this.transactionWrappers = this.getTransactionWrappers();                                                          // 90\n    if (this.wrapperInitData) {                                                                                        // 91\n      this.wrapperInitData.length = 0;                                                                                 // 92\n    } else {                                                                                                           // 93\n      this.wrapperInitData = [];                                                                                       // 94\n    }                                                                                                                  // 95\n    this._isInTransaction = false;                                                                                     // 96\n  },                                                                                                                   // 97\n                                                                                                                       // 98\n  _isInTransaction: false,                                                                                             // 99\n                                                                                                                       // 100\n  /**                                                                                                                  // 101\n   * @abstract                                                                                                         // 102\n   * @return {Array<TransactionWrapper>} Array of transaction wrappers.                                                // 103\n   */                                                                                                                  // 104\n  getTransactionWrappers: null,                                                                                        // 105\n                                                                                                                       // 106\n  isInTransaction: function () {                                                                                       // 107\n    return !!this._isInTransaction;                                                                                    // 108\n  },                                                                                                                   // 109\n                                                                                                                       // 110\n  /* eslint-disable space-before-function-paren */                                                                     // 111\n                                                                                                                       // 112\n  /**                                                                                                                  // 113\n   * Executes the function within a safety window. Use this for the top level                                          // 114\n   * methods that result in large amounts of computation/mutations that would                                          // 115\n   * need to be safety checked. The optional arguments helps prevent the need                                          // 116\n   * to bind in many cases.                                                                                            // 117\n   *                                                                                                                   // 118\n   * @param {function} method Member of scope to call.                                                                 // 119\n   * @param {Object} scope Scope to invoke from.                                                                       // 120\n   * @param {Object?=} a Argument to pass to the method.                                                               // 121\n   * @param {Object?=} b Argument to pass to the method.                                                               // 122\n   * @param {Object?=} c Argument to pass to the method.                                                               // 123\n   * @param {Object?=} d Argument to pass to the method.                                                               // 124\n   * @param {Object?=} e Argument to pass to the method.                                                               // 125\n   * @param {Object?=} f Argument to pass to the method.                                                               // 126\n   *                                                                                                                   // 127\n   * @return {*} Return value from `method`.                                                                           // 128\n   */                                                                                                                  // 129\n  perform: function (method, scope, a, b, c, d, e, f) {                                                                // 130\n    /* eslint-enable space-before-function-paren */                                                                    // 131\n    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;\n    var errorThrown;                                                                                                   // 133\n    var ret;                                                                                                           // 134\n    try {                                                                                                              // 135\n      this._isInTransaction = true;                                                                                    // 136\n      // Catching errors makes debugging more difficult, so we start with                                              // 137\n      // errorThrown set to true before setting it to false after calling                                              // 138\n      // close -- if it's still set to true in the finally block, it means                                             // 139\n      // one of these calls threw.                                                                                     // 140\n      errorThrown = true;                                                                                              // 141\n      this.initializeAll(0);                                                                                           // 142\n      ret = method.call(scope, a, b, c, d, e, f);                                                                      // 143\n      errorThrown = false;                                                                                             // 144\n    } finally {                                                                                                        // 145\n      try {                                                                                                            // 146\n        if (errorThrown) {                                                                                             // 147\n          // If `method` throws, prefer to show that stack trace over any thrown                                       // 148\n          // by invoking `closeAll`.                                                                                   // 149\n          try {                                                                                                        // 150\n            this.closeAll(0);                                                                                          // 151\n          } catch (err) {}                                                                                             // 152\n        } else {                                                                                                       // 153\n          // Since `method` didn't throw, we don't want to silence the exception                                       // 154\n          // here.                                                                                                     // 155\n          this.closeAll(0);                                                                                            // 156\n        }                                                                                                              // 157\n      } finally {                                                                                                      // 158\n        this._isInTransaction = false;                                                                                 // 159\n      }                                                                                                                // 160\n    }                                                                                                                  // 161\n    return ret;                                                                                                        // 162\n  },                                                                                                                   // 163\n                                                                                                                       // 164\n  initializeAll: function (startIndex) {                                                                               // 165\n    var transactionWrappers = this.transactionWrappers;                                                                // 166\n    for (var i = startIndex; i < transactionWrappers.length; i++) {                                                    // 167\n      var wrapper = transactionWrappers[i];                                                                            // 168\n      try {                                                                                                            // 169\n        // Catching errors makes debugging more difficult, so we start with the                                        // 170\n        // OBSERVED_ERROR state before overwriting it with the real return value                                       // 171\n        // of initialize -- if it's still set to OBSERVED_ERROR in the finally                                         // 172\n        // block, it means wrapper.initialize threw.                                                                   // 173\n        this.wrapperInitData[i] = OBSERVED_ERROR;                                                                      // 174\n        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;                           // 175\n      } finally {                                                                                                      // 176\n        if (this.wrapperInitData[i] === OBSERVED_ERROR) {                                                              // 177\n          // The initializer for wrapper i threw an error; initialize the                                              // 178\n          // remaining wrappers but silence any exceptions from them to ensure                                         // 179\n          // that the first error is the one to bubble up.                                                             // 180\n          try {                                                                                                        // 181\n            this.initializeAll(i + 1);                                                                                 // 182\n          } catch (err) {}                                                                                             // 183\n        }                                                                                                              // 184\n      }                                                                                                                // 185\n    }                                                                                                                  // 186\n  },                                                                                                                   // 187\n                                                                                                                       // 188\n  /**                                                                                                                  // 189\n   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into                                       // 190\n   * them the respective return values of `this.transactionWrappers.init[i]`                                           // 191\n   * (`close`rs that correspond to initializers that failed will not be                                                // 192\n   * invoked).                                                                                                         // 193\n   */                                                                                                                  // 194\n  closeAll: function (startIndex) {                                                                                    // 195\n    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;\n    var transactionWrappers = this.transactionWrappers;                                                                // 197\n    for (var i = startIndex; i < transactionWrappers.length; i++) {                                                    // 198\n      var wrapper = transactionWrappers[i];                                                                            // 199\n      var initData = this.wrapperInitData[i];                                                                          // 200\n      var errorThrown;                                                                                                 // 201\n      try {                                                                                                            // 202\n        // Catching errors makes debugging more difficult, so we start with                                            // 203\n        // errorThrown set to true before setting it to false after calling                                            // 204\n        // close -- if it's still set to true in the finally block, it means                                           // 205\n        // wrapper.close threw.                                                                                        // 206\n        errorThrown = true;                                                                                            // 207\n        if (initData !== OBSERVED_ERROR && wrapper.close) {                                                            // 208\n          wrapper.close.call(this, initData);                                                                          // 209\n        }                                                                                                              // 210\n        errorThrown = false;                                                                                           // 211\n      } finally {                                                                                                      // 212\n        if (errorThrown) {                                                                                             // 213\n          // The closer for wrapper i threw an error; close the remaining                                              // 214\n          // wrappers but silence any exceptions from them to ensure that the                                          // 215\n          // first error is the one to bubble up.                                                                      // 216\n          try {                                                                                                        // 217\n            this.closeAll(i + 1);                                                                                      // 218\n          } catch (e) {}                                                                                               // 219\n        }                                                                                                              // 220\n      }                                                                                                                // 221\n    }                                                                                                                  // 222\n    this.wrapperInitData.length = 0;                                                                                   // 223\n  }                                                                                                                    // 224\n};                                                                                                                     // 225\n                                                                                                                       // 226\nmodule.exports = TransactionImpl;                                                                                      // 227\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"inputValueTracking.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/inputValueTracking.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 13\n                                                                                                                       // 14\nfunction isCheckable(elem) {                                                                                           // 15\n  var type = elem.type;                                                                                                // 16\n  var nodeName = elem.nodeName;                                                                                        // 17\n  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');                  // 18\n}                                                                                                                      // 19\n                                                                                                                       // 20\nfunction getTracker(inst) {                                                                                            // 21\n  return inst._wrapperState.valueTracker;                                                                              // 22\n}                                                                                                                      // 23\n                                                                                                                       // 24\nfunction attachTracker(inst, tracker) {                                                                                // 25\n  inst._wrapperState.valueTracker = tracker;                                                                           // 26\n}                                                                                                                      // 27\n                                                                                                                       // 28\nfunction detachTracker(inst) {                                                                                         // 29\n  delete inst._wrapperState.valueTracker;                                                                              // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\nfunction getValueFromNode(node) {                                                                                      // 33\n  var value;                                                                                                           // 34\n  if (node) {                                                                                                          // 35\n    value = isCheckable(node) ? '' + node.checked : node.value;                                                        // 36\n  }                                                                                                                    // 37\n  return value;                                                                                                        // 38\n}                                                                                                                      // 39\n                                                                                                                       // 40\nvar inputValueTracking = {                                                                                             // 41\n  // exposed for testing                                                                                               // 42\n  _getTrackerFromNode: function (node) {                                                                               // 43\n    return getTracker(ReactDOMComponentTree.getInstanceFromNode(node));                                                // 44\n  },                                                                                                                   // 45\n                                                                                                                       // 46\n                                                                                                                       // 47\n  track: function (inst) {                                                                                             // 48\n    if (getTracker(inst)) {                                                                                            // 49\n      return;                                                                                                          // 50\n    }                                                                                                                  // 51\n                                                                                                                       // 52\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);                                                        // 53\n    var valueField = isCheckable(node) ? 'checked' : 'value';                                                          // 54\n    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);                          // 55\n                                                                                                                       // 56\n    var currentValue = '' + node[valueField];                                                                          // 57\n                                                                                                                       // 58\n    // if someone has already defined a value or Safari, then bail                                                     // 59\n    // and don't track value will cause over reporting of changes,                                                     // 60\n    // but it's better then a hard failure                                                                             // 61\n    // (needed for certain tests that spyOn input values and Safari)                                                   // 62\n    if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {\n      return;                                                                                                          // 64\n    }                                                                                                                  // 65\n                                                                                                                       // 66\n    Object.defineProperty(node, valueField, {                                                                          // 67\n      enumerable: descriptor.enumerable,                                                                               // 68\n      configurable: true,                                                                                              // 69\n      get: function () {                                                                                               // 70\n        return descriptor.get.call(this);                                                                              // 71\n      },                                                                                                               // 72\n      set: function (value) {                                                                                          // 73\n        currentValue = '' + value;                                                                                     // 74\n        descriptor.set.call(this, value);                                                                              // 75\n      }                                                                                                                // 76\n    });                                                                                                                // 77\n                                                                                                                       // 78\n    attachTracker(inst, {                                                                                              // 79\n      getValue: function () {                                                                                          // 80\n        return currentValue;                                                                                           // 81\n      },                                                                                                               // 82\n      setValue: function (value) {                                                                                     // 83\n        currentValue = '' + value;                                                                                     // 84\n      },                                                                                                               // 85\n      stopTracking: function () {                                                                                      // 86\n        detachTracker(inst);                                                                                           // 87\n        delete node[valueField];                                                                                       // 88\n      }                                                                                                                // 89\n    });                                                                                                                // 90\n  },                                                                                                                   // 91\n                                                                                                                       // 92\n  updateValueIfChanged: function (inst) {                                                                              // 93\n    if (!inst) {                                                                                                       // 94\n      return false;                                                                                                    // 95\n    }                                                                                                                  // 96\n    var tracker = getTracker(inst);                                                                                    // 97\n                                                                                                                       // 98\n    if (!tracker) {                                                                                                    // 99\n      inputValueTracking.track(inst);                                                                                  // 100\n      return true;                                                                                                     // 101\n    }                                                                                                                  // 102\n                                                                                                                       // 103\n    var lastValue = tracker.getValue();                                                                                // 104\n    var nextValue = getValueFromNode(ReactDOMComponentTree.getNodeFromInstance(inst));                                 // 105\n                                                                                                                       // 106\n    if (nextValue !== lastValue) {                                                                                     // 107\n      tracker.setValue(nextValue);                                                                                     // 108\n      return true;                                                                                                     // 109\n    }                                                                                                                  // 110\n                                                                                                                       // 111\n    return false;                                                                                                      // 112\n  },                                                                                                                   // 113\n  stopTracking: function (inst) {                                                                                      // 114\n    var tracker = getTracker(inst);                                                                                    // 115\n    if (tracker) {                                                                                                     // 116\n      tracker.stopTracking();                                                                                          // 117\n    }                                                                                                                  // 118\n  }                                                                                                                    // 119\n};                                                                                                                     // 120\n                                                                                                                       // 121\nmodule.exports = inputValueTracking;                                                                                   // 122\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getEventTarget.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/getEventTarget.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * Gets the target node from a native browser event by accounting for                                                  // 14\n * inconsistencies in browser DOM APIs.                                                                                // 15\n *                                                                                                                     // 16\n * @param {object} nativeEvent Native browser event.                                                                   // 17\n * @return {DOMEventTarget} Target node.                                                                               // 18\n */                                                                                                                    // 19\n                                                                                                                       // 20\nfunction getEventTarget(nativeEvent) {                                                                                 // 21\n  var target = nativeEvent.target || nativeEvent.srcElement || window;                                                 // 22\n                                                                                                                       // 23\n  // Normalize SVG <use> element events #4963                                                                          // 24\n  if (target.correspondingUseElement) {                                                                                // 25\n    target = target.correspondingUseElement;                                                                           // 26\n  }                                                                                                                    // 27\n                                                                                                                       // 28\n  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).                                                       // 29\n  // @see http://www.quirksmode.org/js/events_properties.html                                                          // 30\n  return target.nodeType === 3 ? target.parentNode : target;                                                           // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\nmodule.exports = getEventTarget;                                                                                       // 34\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"isEventSupported.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/isEventSupported.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 13\n                                                                                                                       // 14\nvar useHasFeature;                                                                                                     // 15\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 16\n  useHasFeature = document.implementation && document.implementation.hasFeature &&                                     // 17\n  // always returns true in newer browsers as per the standard.                                                        // 18\n  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature                                                 // 19\n  document.implementation.hasFeature('', '') !== true;                                                                 // 20\n}                                                                                                                      // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * Checks if an event is supported in the current execution environment.                                               // 24\n *                                                                                                                     // 25\n * NOTE: This will not work correctly for non-generic events such as `change`,                                         // 26\n * `reset`, `load`, `error`, and `select`.                                                                             // 27\n *                                                                                                                     // 28\n * Borrows from Modernizr.                                                                                             // 29\n *                                                                                                                     // 30\n * @param {string} eventNameSuffix Event name, e.g. \"click\".                                                           // 31\n * @param {?boolean} capture Check if the capture phase is supported.                                                  // 32\n * @return {boolean} True if the event is supported.                                                                   // 33\n * @internal                                                                                                           // 34\n * @license Modernizr 3.0.0pre (Custom Build) | MIT                                                                    // 35\n */                                                                                                                    // 36\nfunction isEventSupported(eventNameSuffix, capture) {                                                                  // 37\n  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {                               // 38\n    return false;                                                                                                      // 39\n  }                                                                                                                    // 40\n                                                                                                                       // 41\n  var eventName = 'on' + eventNameSuffix;                                                                              // 42\n  var isSupported = eventName in document;                                                                             // 43\n                                                                                                                       // 44\n  if (!isSupported) {                                                                                                  // 45\n    var element = document.createElement('div');                                                                       // 46\n    element.setAttribute(eventName, 'return;');                                                                        // 47\n    isSupported = typeof element[eventName] === 'function';                                                            // 48\n  }                                                                                                                    // 49\n                                                                                                                       // 50\n  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {                                                  // 51\n    // This is the only way to test support for the `wheel` event in IE9+.                                             // 52\n    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');                                           // 53\n  }                                                                                                                    // 54\n                                                                                                                       // 55\n  return isSupported;                                                                                                  // 56\n}                                                                                                                      // 57\n                                                                                                                       // 58\nmodule.exports = isEventSupported;                                                                                     // 59\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"isTextInputElement.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/isTextInputElement.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary     // 15\n */                                                                                                                    // 16\n                                                                                                                       // 17\nvar supportedInputTypes = {                                                                                            // 18\n  color: true,                                                                                                         // 19\n  date: true,                                                                                                          // 20\n  datetime: true,                                                                                                      // 21\n  'datetime-local': true,                                                                                              // 22\n  email: true,                                                                                                         // 23\n  month: true,                                                                                                         // 24\n  number: true,                                                                                                        // 25\n  password: true,                                                                                                      // 26\n  range: true,                                                                                                         // 27\n  search: true,                                                                                                        // 28\n  tel: true,                                                                                                           // 29\n  text: true,                                                                                                          // 30\n  time: true,                                                                                                          // 31\n  url: true,                                                                                                           // 32\n  week: true                                                                                                           // 33\n};                                                                                                                     // 34\n                                                                                                                       // 35\nfunction isTextInputElement(elem) {                                                                                    // 36\n  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();                                                 // 37\n                                                                                                                       // 38\n  if (nodeName === 'input') {                                                                                          // 39\n    return !!supportedInputTypes[elem.type];                                                                           // 40\n  }                                                                                                                    // 41\n                                                                                                                       // 42\n  if (nodeName === 'textarea') {                                                                                       // 43\n    return true;                                                                                                       // 44\n  }                                                                                                                    // 45\n                                                                                                                       // 46\n  return false;                                                                                                        // 47\n}                                                                                                                      // 48\n                                                                                                                       // 49\nmodule.exports = isTextInputElement;                                                                                   // 50\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"DefaultEventPluginOrder.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/DefaultEventPluginOrder.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * Module that is injectable into `EventPluginHub`, that specifies a                                                   // 14\n * deterministic ordering of `EventPlugin`s. A convenient way to reason about                                          // 15\n * plugins, without having to package every one of them. This is better than                                           // 16\n * having plugins be ordered in the same order that they are injected because                                          // 17\n * that ordering would be influenced by the packaging order.                                                           // 18\n * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that                                                // 19\n * preventing default on events is convenient in `SimpleEventPlugin` handlers.                                         // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nvar DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];\n                                                                                                                       // 24\nmodule.exports = DefaultEventPluginOrder;                                                                              // 25\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"EnterLeaveEventPlugin.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/EnterLeaveEventPlugin.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar EventPropagators = require('./EventPropagators');                                                                  // 13\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 14\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');                                                            // 15\n                                                                                                                       // 16\nvar eventTypes = {                                                                                                     // 17\n  mouseEnter: {                                                                                                        // 18\n    registrationName: 'onMouseEnter',                                                                                  // 19\n    dependencies: ['topMouseOut', 'topMouseOver']                                                                      // 20\n  },                                                                                                                   // 21\n  mouseLeave: {                                                                                                        // 22\n    registrationName: 'onMouseLeave',                                                                                  // 23\n    dependencies: ['topMouseOut', 'topMouseOver']                                                                      // 24\n  }                                                                                                                    // 25\n};                                                                                                                     // 26\n                                                                                                                       // 27\nvar EnterLeaveEventPlugin = {                                                                                          // 28\n  eventTypes: eventTypes,                                                                                              // 29\n                                                                                                                       // 30\n  /**                                                                                                                  // 31\n   * For almost every interaction we care about, there will be both a top-level                                        // 32\n   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that                                         // 33\n   * we do not extract duplicate events. However, moving the mouse into the                                            // 34\n   * browser from outside will not fire a `mouseout` event. In this case, we use                                       // 35\n   * the `mouseover` top-level event.                                                                                  // 36\n   */                                                                                                                  // 37\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {                                 // 38\n    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {                   // 39\n      return null;                                                                                                     // 40\n    }                                                                                                                  // 41\n    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {                                           // 42\n      // Must not be a mouse in or mouse out - ignoring.                                                               // 43\n      return null;                                                                                                     // 44\n    }                                                                                                                  // 45\n                                                                                                                       // 46\n    var win;                                                                                                           // 47\n    if (nativeEventTarget.window === nativeEventTarget) {                                                              // 48\n      // `nativeEventTarget` is probably a window object.                                                              // 49\n      win = nativeEventTarget;                                                                                         // 50\n    } else {                                                                                                           // 51\n      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.                                           // 52\n      var doc = nativeEventTarget.ownerDocument;                                                                       // 53\n      if (doc) {                                                                                                       // 54\n        win = doc.defaultView || doc.parentWindow;                                                                     // 55\n      } else {                                                                                                         // 56\n        win = window;                                                                                                  // 57\n      }                                                                                                                // 58\n    }                                                                                                                  // 59\n                                                                                                                       // 60\n    var from;                                                                                                          // 61\n    var to;                                                                                                            // 62\n    if (topLevelType === 'topMouseOut') {                                                                              // 63\n      from = targetInst;                                                                                               // 64\n      var related = nativeEvent.relatedTarget || nativeEvent.toElement;                                                // 65\n      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;                                 // 66\n    } else {                                                                                                           // 67\n      // Moving to a node from outside the window.                                                                     // 68\n      from = null;                                                                                                     // 69\n      to = targetInst;                                                                                                 // 70\n    }                                                                                                                  // 71\n                                                                                                                       // 72\n    if (from === to) {                                                                                                 // 73\n      // Nothing pertains to our managed components.                                                                   // 74\n      return null;                                                                                                     // 75\n    }                                                                                                                  // 76\n                                                                                                                       // 77\n    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);                               // 78\n    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);                                     // 79\n                                                                                                                       // 80\n    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);            // 81\n    leave.type = 'mouseleave';                                                                                         // 82\n    leave.target = fromNode;                                                                                           // 83\n    leave.relatedTarget = toNode;                                                                                      // 84\n                                                                                                                       // 85\n    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);              // 86\n    enter.type = 'mouseenter';                                                                                         // 87\n    enter.target = toNode;                                                                                             // 88\n    enter.relatedTarget = fromNode;                                                                                    // 89\n                                                                                                                       // 90\n    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);                                           // 91\n                                                                                                                       // 92\n    return [leave, enter];                                                                                             // 93\n  }                                                                                                                    // 94\n};                                                                                                                     // 95\n                                                                                                                       // 96\nmodule.exports = EnterLeaveEventPlugin;                                                                                // 97\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"SyntheticMouseEvent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/SyntheticMouseEvent.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar SyntheticUIEvent = require('./SyntheticUIEvent');                                                                  // 13\nvar ViewportMetrics = require('./ViewportMetrics');                                                                    // 14\n                                                                                                                       // 15\nvar getEventModifierState = require('./getEventModifierState');                                                        // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * @interface MouseEvent                                                                                               // 19\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 20\n */                                                                                                                    // 21\nvar MouseEventInterface = {                                                                                            // 22\n  screenX: null,                                                                                                       // 23\n  screenY: null,                                                                                                       // 24\n  clientX: null,                                                                                                       // 25\n  clientY: null,                                                                                                       // 26\n  ctrlKey: null,                                                                                                       // 27\n  shiftKey: null,                                                                                                      // 28\n  altKey: null,                                                                                                        // 29\n  metaKey: null,                                                                                                       // 30\n  getModifierState: getEventModifierState,                                                                             // 31\n  button: function (event) {                                                                                           // 32\n    // Webkit, Firefox, IE9+                                                                                           // 33\n    // which:  1 2 3                                                                                                   // 34\n    // button: 0 1 2 (standard)                                                                                        // 35\n    var button = event.button;                                                                                         // 36\n    if ('which' in event) {                                                                                            // 37\n      return button;                                                                                                   // 38\n    }                                                                                                                  // 39\n    // IE<9                                                                                                            // 40\n    // which:  undefined                                                                                               // 41\n    // button: 0 0 0                                                                                                   // 42\n    // button: 1 4 2 (onmouseup)                                                                                       // 43\n    return button === 2 ? 2 : button === 4 ? 1 : 0;                                                                    // 44\n  },                                                                                                                   // 45\n  buttons: null,                                                                                                       // 46\n  relatedTarget: function (event) {                                                                                    // 47\n    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);      // 48\n  },                                                                                                                   // 49\n  // \"Proprietary\" Interface.                                                                                          // 50\n  pageX: function (event) {                                                                                            // 51\n    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;                         // 52\n  },                                                                                                                   // 53\n  pageY: function (event) {                                                                                            // 54\n    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;                          // 55\n  }                                                                                                                    // 56\n};                                                                                                                     // 57\n                                                                                                                       // 58\n/**                                                                                                                    // 59\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 60\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 61\n * @param {object} nativeEvent Native browser event.                                                                   // 62\n * @extends {SyntheticUIEvent}                                                                                         // 63\n */                                                                                                                    // 64\nfunction SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                         // 65\n  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                  // 66\n}                                                                                                                      // 67\n                                                                                                                       // 68\nSyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);                                               // 69\n                                                                                                                       // 70\nmodule.exports = SyntheticMouseEvent;                                                                                  // 71\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"SyntheticUIEvent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/SyntheticUIEvent.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 13\n                                                                                                                       // 14\nvar getEventTarget = require('./getEventTarget');                                                                      // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * @interface UIEvent                                                                                                  // 18\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 19\n */                                                                                                                    // 20\nvar UIEventInterface = {                                                                                               // 21\n  view: function (event) {                                                                                             // 22\n    if (event.view) {                                                                                                  // 23\n      return event.view;                                                                                               // 24\n    }                                                                                                                  // 25\n                                                                                                                       // 26\n    var target = getEventTarget(event);                                                                                // 27\n    if (target.window === target) {                                                                                    // 28\n      // target is a window object                                                                                     // 29\n      return target;                                                                                                   // 30\n    }                                                                                                                  // 31\n                                                                                                                       // 32\n    var doc = target.ownerDocument;                                                                                    // 33\n    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.                                             // 34\n    if (doc) {                                                                                                         // 35\n      return doc.defaultView || doc.parentWindow;                                                                      // 36\n    } else {                                                                                                           // 37\n      return window;                                                                                                   // 38\n    }                                                                                                                  // 39\n  },                                                                                                                   // 40\n  detail: function (event) {                                                                                           // 41\n    return event.detail || 0;                                                                                          // 42\n  }                                                                                                                    // 43\n};                                                                                                                     // 44\n                                                                                                                       // 45\n/**                                                                                                                    // 46\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 47\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 48\n * @param {object} nativeEvent Native browser event.                                                                   // 49\n * @extends {SyntheticEvent}                                                                                           // 50\n */                                                                                                                    // 51\nfunction SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                            // 52\n  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                    // 53\n}                                                                                                                      // 54\n                                                                                                                       // 55\nSyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);                                                       // 56\n                                                                                                                       // 57\nmodule.exports = SyntheticUIEvent;                                                                                     // 58\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ViewportMetrics.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ViewportMetrics.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar ViewportMetrics = {                                                                                                // 13\n  currentScrollLeft: 0,                                                                                                // 14\n                                                                                                                       // 15\n  currentScrollTop: 0,                                                                                                 // 16\n                                                                                                                       // 17\n  refreshScrollValues: function (scrollPosition) {                                                                     // 18\n    ViewportMetrics.currentScrollLeft = scrollPosition.x;                                                              // 19\n    ViewportMetrics.currentScrollTop = scrollPosition.y;                                                               // 20\n  }                                                                                                                    // 21\n};                                                                                                                     // 22\n                                                                                                                       // 23\nmodule.exports = ViewportMetrics;                                                                                      // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getEventModifierState.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/getEventModifierState.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * Translation from modifier key to the associated property in the event.                                              // 14\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers                                                        // 15\n */                                                                                                                    // 16\n                                                                                                                       // 17\nvar modifierKeyToProp = {                                                                                              // 18\n  Alt: 'altKey',                                                                                                       // 19\n  Control: 'ctrlKey',                                                                                                  // 20\n  Meta: 'metaKey',                                                                                                     // 21\n  Shift: 'shiftKey'                                                                                                    // 22\n};                                                                                                                     // 23\n                                                                                                                       // 24\n// IE8 does not implement getModifierState so we simply map it to the only                                             // 25\n// modifier keys exposed by the event itself, does not support Lock-keys.                                              // 26\n// Currently, all major browsers except Chrome seems to support Lock-keys.                                             // 27\nfunction modifierStateGetter(keyArg) {                                                                                 // 28\n  var syntheticEvent = this;                                                                                           // 29\n  var nativeEvent = syntheticEvent.nativeEvent;                                                                        // 30\n  if (nativeEvent.getModifierState) {                                                                                  // 31\n    return nativeEvent.getModifierState(keyArg);                                                                       // 32\n  }                                                                                                                    // 33\n  var keyProp = modifierKeyToProp[keyArg];                                                                             // 34\n  return keyProp ? !!nativeEvent[keyProp] : false;                                                                     // 35\n}                                                                                                                      // 36\n                                                                                                                       // 37\nfunction getEventModifierState(nativeEvent) {                                                                          // 38\n  return modifierStateGetter;                                                                                          // 39\n}                                                                                                                      // 40\n                                                                                                                       // 41\nmodule.exports = getEventModifierState;                                                                                // 42\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"HTMLDOMPropertyConfig.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/HTMLDOMPropertyConfig.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar DOMProperty = require('./DOMProperty');                                                                            // 13\n                                                                                                                       // 14\nvar MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;                                                       // 15\nvar HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;                                                       // 16\nvar HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;                                                       // 17\nvar HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;                                     // 18\nvar HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;                                 // 19\n                                                                                                                       // 20\nvar HTMLDOMPropertyConfig = {                                                                                          // 21\n  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),\n  Properties: {                                                                                                        // 23\n    /**                                                                                                                // 24\n     * Standard Properties                                                                                             // 25\n     */                                                                                                                // 26\n    accept: 0,                                                                                                         // 27\n    acceptCharset: 0,                                                                                                  // 28\n    accessKey: 0,                                                                                                      // 29\n    action: 0,                                                                                                         // 30\n    allowFullScreen: HAS_BOOLEAN_VALUE,                                                                                // 31\n    allowTransparency: 0,                                                                                              // 32\n    alt: 0,                                                                                                            // 33\n    // specifies target context for links with `preload` type                                                          // 34\n    as: 0,                                                                                                             // 35\n    async: HAS_BOOLEAN_VALUE,                                                                                          // 36\n    autoComplete: 0,                                                                                                   // 37\n    // autoFocus is polyfilled/normalized by AutoFocusUtils                                                            // 38\n    // autoFocus: HAS_BOOLEAN_VALUE,                                                                                   // 39\n    autoPlay: HAS_BOOLEAN_VALUE,                                                                                       // 40\n    capture: HAS_BOOLEAN_VALUE,                                                                                        // 41\n    cellPadding: 0,                                                                                                    // 42\n    cellSpacing: 0,                                                                                                    // 43\n    charSet: 0,                                                                                                        // 44\n    challenge: 0,                                                                                                      // 45\n    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                    // 46\n    cite: 0,                                                                                                           // 47\n    classID: 0,                                                                                                        // 48\n    className: 0,                                                                                                      // 49\n    cols: HAS_POSITIVE_NUMERIC_VALUE,                                                                                  // 50\n    colSpan: 0,                                                                                                        // 51\n    content: 0,                                                                                                        // 52\n    contentEditable: 0,                                                                                                // 53\n    contextMenu: 0,                                                                                                    // 54\n    controls: HAS_BOOLEAN_VALUE,                                                                                       // 55\n    coords: 0,                                                                                                         // 56\n    crossOrigin: 0,                                                                                                    // 57\n    data: 0, // For `<object />` acts as `src`.                                                                        // 58\n    dateTime: 0,                                                                                                       // 59\n    'default': HAS_BOOLEAN_VALUE,                                                                                      // 60\n    defer: HAS_BOOLEAN_VALUE,                                                                                          // 61\n    dir: 0,                                                                                                            // 62\n    disabled: HAS_BOOLEAN_VALUE,                                                                                       // 63\n    download: HAS_OVERLOADED_BOOLEAN_VALUE,                                                                            // 64\n    draggable: 0,                                                                                                      // 65\n    encType: 0,                                                                                                        // 66\n    form: 0,                                                                                                           // 67\n    formAction: 0,                                                                                                     // 68\n    formEncType: 0,                                                                                                    // 69\n    formMethod: 0,                                                                                                     // 70\n    formNoValidate: HAS_BOOLEAN_VALUE,                                                                                 // 71\n    formTarget: 0,                                                                                                     // 72\n    frameBorder: 0,                                                                                                    // 73\n    headers: 0,                                                                                                        // 74\n    height: 0,                                                                                                         // 75\n    hidden: HAS_BOOLEAN_VALUE,                                                                                         // 76\n    high: 0,                                                                                                           // 77\n    href: 0,                                                                                                           // 78\n    hrefLang: 0,                                                                                                       // 79\n    htmlFor: 0,                                                                                                        // 80\n    httpEquiv: 0,                                                                                                      // 81\n    icon: 0,                                                                                                           // 82\n    id: 0,                                                                                                             // 83\n    inputMode: 0,                                                                                                      // 84\n    integrity: 0,                                                                                                      // 85\n    is: 0,                                                                                                             // 86\n    keyParams: 0,                                                                                                      // 87\n    keyType: 0,                                                                                                        // 88\n    kind: 0,                                                                                                           // 89\n    label: 0,                                                                                                          // 90\n    lang: 0,                                                                                                           // 91\n    list: 0,                                                                                                           // 92\n    loop: HAS_BOOLEAN_VALUE,                                                                                           // 93\n    low: 0,                                                                                                            // 94\n    manifest: 0,                                                                                                       // 95\n    marginHeight: 0,                                                                                                   // 96\n    marginWidth: 0,                                                                                                    // 97\n    max: 0,                                                                                                            // 98\n    maxLength: 0,                                                                                                      // 99\n    media: 0,                                                                                                          // 100\n    mediaGroup: 0,                                                                                                     // 101\n    method: 0,                                                                                                         // 102\n    min: 0,                                                                                                            // 103\n    minLength: 0,                                                                                                      // 104\n    // Caution; `option.selected` is not updated if `select.multiple` is                                               // 105\n    // disabled with `removeAttribute`.                                                                                // 106\n    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 107\n    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                      // 108\n    name: 0,                                                                                                           // 109\n    nonce: 0,                                                                                                          // 110\n    noValidate: HAS_BOOLEAN_VALUE,                                                                                     // 111\n    open: HAS_BOOLEAN_VALUE,                                                                                           // 112\n    optimum: 0,                                                                                                        // 113\n    pattern: 0,                                                                                                        // 114\n    placeholder: 0,                                                                                                    // 115\n    playsInline: HAS_BOOLEAN_VALUE,                                                                                    // 116\n    poster: 0,                                                                                                         // 117\n    preload: 0,                                                                                                        // 118\n    profile: 0,                                                                                                        // 119\n    radioGroup: 0,                                                                                                     // 120\n    readOnly: HAS_BOOLEAN_VALUE,                                                                                       // 121\n    referrerPolicy: 0,                                                                                                 // 122\n    rel: 0,                                                                                                            // 123\n    required: HAS_BOOLEAN_VALUE,                                                                                       // 124\n    reversed: HAS_BOOLEAN_VALUE,                                                                                       // 125\n    role: 0,                                                                                                           // 126\n    rows: HAS_POSITIVE_NUMERIC_VALUE,                                                                                  // 127\n    rowSpan: HAS_NUMERIC_VALUE,                                                                                        // 128\n    sandbox: 0,                                                                                                        // 129\n    scope: 0,                                                                                                          // 130\n    scoped: HAS_BOOLEAN_VALUE,                                                                                         // 131\n    scrolling: 0,                                                                                                      // 132\n    seamless: HAS_BOOLEAN_VALUE,                                                                                       // 133\n    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 134\n    shape: 0,                                                                                                          // 135\n    size: HAS_POSITIVE_NUMERIC_VALUE,                                                                                  // 136\n    sizes: 0,                                                                                                          // 137\n    span: HAS_POSITIVE_NUMERIC_VALUE,                                                                                  // 138\n    spellCheck: 0,                                                                                                     // 139\n    src: 0,                                                                                                            // 140\n    srcDoc: 0,                                                                                                         // 141\n    srcLang: 0,                                                                                                        // 142\n    srcSet: 0,                                                                                                         // 143\n    start: HAS_NUMERIC_VALUE,                                                                                          // 144\n    step: 0,                                                                                                           // 145\n    style: 0,                                                                                                          // 146\n    summary: 0,                                                                                                        // 147\n    tabIndex: 0,                                                                                                       // 148\n    target: 0,                                                                                                         // 149\n    title: 0,                                                                                                          // 150\n    // Setting .type throws on non-<input> tags                                                                        // 151\n    type: 0,                                                                                                           // 152\n    useMap: 0,                                                                                                         // 153\n    value: 0,                                                                                                          // 154\n    width: 0,                                                                                                          // 155\n    wmode: 0,                                                                                                          // 156\n    wrap: 0,                                                                                                           // 157\n                                                                                                                       // 158\n    /**                                                                                                                // 159\n     * RDFa Properties                                                                                                 // 160\n     */                                                                                                                // 161\n    about: 0,                                                                                                          // 162\n    datatype: 0,                                                                                                       // 163\n    inlist: 0,                                                                                                         // 164\n    prefix: 0,                                                                                                         // 165\n    // property is also supported for OpenGraph in meta tags.                                                          // 166\n    property: 0,                                                                                                       // 167\n    resource: 0,                                                                                                       // 168\n    'typeof': 0,                                                                                                       // 169\n    vocab: 0,                                                                                                          // 170\n                                                                                                                       // 171\n    /**                                                                                                                // 172\n     * Non-standard Properties                                                                                         // 173\n     */                                                                                                                // 174\n    // autoCapitalize and autoCorrect are supported in Mobile Safari for                                               // 175\n    // keyboard hints.                                                                                                 // 176\n    autoCapitalize: 0,                                                                                                 // 177\n    autoCorrect: 0,                                                                                                    // 178\n    // autoSave allows WebKit/Blink to persist values of input fields on page reloads                                  // 179\n    autoSave: 0,                                                                                                       // 180\n    // color is for Safari mask-icon link                                                                              // 181\n    color: 0,                                                                                                          // 182\n    // itemProp, itemScope, itemType are for                                                                           // 183\n    // Microdata support. See http://schema.org/docs/gs.html                                                           // 184\n    itemProp: 0,                                                                                                       // 185\n    itemScope: HAS_BOOLEAN_VALUE,                                                                                      // 186\n    itemType: 0,                                                                                                       // 187\n    // itemID and itemRef are for Microdata support as well but                                                        // 188\n    // only specified in the WHATWG spec document. See                                                                 // 189\n    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api                                         // 190\n    itemID: 0,                                                                                                         // 191\n    itemRef: 0,                                                                                                        // 192\n    // results show looking glass icon and recent searches on input                                                    // 193\n    // search fields in WebKit/Blink                                                                                   // 194\n    results: 0,                                                                                                        // 195\n    // IE-only attribute that specifies security restrictions on an iframe                                             // 196\n    // as an alternative to the sandbox attribute on IE<10                                                             // 197\n    security: 0,                                                                                                       // 198\n    // IE-only attribute that controls focus behavior                                                                  // 199\n    unselectable: 0                                                                                                    // 200\n  },                                                                                                                   // 201\n  DOMAttributeNames: {                                                                                                 // 202\n    acceptCharset: 'accept-charset',                                                                                   // 203\n    className: 'class',                                                                                                // 204\n    htmlFor: 'for',                                                                                                    // 205\n    httpEquiv: 'http-equiv'                                                                                            // 206\n  },                                                                                                                   // 207\n  DOMPropertyNames: {},                                                                                                // 208\n  DOMMutationMethods: {                                                                                                // 209\n    value: function (node, value) {                                                                                    // 210\n      if (value == null) {                                                                                             // 211\n        return node.removeAttribute('value');                                                                          // 212\n      }                                                                                                                // 213\n                                                                                                                       // 214\n      // Number inputs get special treatment due to some edge cases in                                                 // 215\n      // Chrome. Let everything else assign the value attribute as normal.                                             // 216\n      // https://github.com/facebook/react/issues/7253#issuecomment-236074326                                          // 217\n      if (node.type !== 'number' || node.hasAttribute('value') === false) {                                            // 218\n        node.setAttribute('value', '' + value);                                                                        // 219\n      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {              // 220\n        // Don't assign an attribute if validation reports bad                                                         // 221\n        // input. Chrome will clear the value. Additionally, don't                                                     // 222\n        // operate on inputs that have focus, otherwise Chrome might                                                   // 223\n        // strip off trailing decimal places and cause the user's                                                      // 224\n        // cursor position to jump to the beginning of the input.                                                      // 225\n        //                                                                                                             // 226\n        // In ReactDOMInput, we have an onBlur event that will trigger                                                 // 227\n        // this function again when focus is lost.                                                                     // 228\n        node.setAttribute('value', '' + value);                                                                        // 229\n      }                                                                                                                // 230\n    }                                                                                                                  // 231\n  }                                                                                                                    // 232\n};                                                                                                                     // 233\n                                                                                                                       // 234\nmodule.exports = HTMLDOMPropertyConfig;                                                                                // 235\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactComponentBrowserEnvironment.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactComponentBrowserEnvironment.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar DOMChildrenOperations = require('./DOMChildrenOperations');                                                        // 13\nvar ReactDOMIDOperations = require('./ReactDOMIDOperations');                                                          // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Abstracts away all functionality of the reconciler that requires knowledge of                                       // 17\n * the browser context. TODO: These callers should be refactored to avoid the                                          // 18\n * need for this injection.                                                                                            // 19\n */                                                                                                                    // 20\nvar ReactComponentBrowserEnvironment = {                                                                               // 21\n  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,                                      // 22\n                                                                                                                       // 23\n  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup                                        // 24\n};                                                                                                                     // 25\n                                                                                                                       // 26\nmodule.exports = ReactComponentBrowserEnvironment;                                                                     // 27\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"DOMChildrenOperations.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/DOMChildrenOperations.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar DOMLazyTree = require('./DOMLazyTree');                                                                            // 13\nvar Danger = require('./Danger');                                                                                      // 14\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 15\nvar ReactInstrumentation = require('./ReactInstrumentation');                                                          // 16\n                                                                                                                       // 17\nvar createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');                              // 18\nvar setInnerHTML = require('./setInnerHTML');                                                                          // 19\nvar setTextContent = require('./setTextContent');                                                                      // 20\n                                                                                                                       // 21\nfunction getNodeAfter(parentNode, node) {                                                                              // 22\n  // Special case for text components, which return [open, close] comments                                             // 23\n  // from getHostNode.                                                                                                 // 24\n  if (Array.isArray(node)) {                                                                                           // 25\n    node = node[1];                                                                                                    // 26\n  }                                                                                                                    // 27\n  return node ? node.nextSibling : parentNode.firstChild;                                                              // 28\n}                                                                                                                      // 29\n                                                                                                                       // 30\n/**                                                                                                                    // 31\n * Inserts `childNode` as a child of `parentNode` at the `index`.                                                      // 32\n *                                                                                                                     // 33\n * @param {DOMElement} parentNode Parent node in which to insert.                                                      // 34\n * @param {DOMElement} childNode Child node to insert.                                                                 // 35\n * @param {number} index Index at which to insert the child.                                                           // 36\n * @internal                                                                                                           // 37\n */                                                                                                                    // 38\nvar insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {               // 39\n  // We rely exclusively on `insertBefore(node, null)` instead of also using                                           // 40\n  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so                                         // 41\n  // we are careful to use `null`.)                                                                                    // 42\n  parentNode.insertBefore(childNode, referenceNode);                                                                   // 43\n});                                                                                                                    // 44\n                                                                                                                       // 45\nfunction insertLazyTreeChildAt(parentNode, childTree, referenceNode) {                                                 // 46\n  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);                                                  // 47\n}                                                                                                                      // 48\n                                                                                                                       // 49\nfunction moveChild(parentNode, childNode, referenceNode) {                                                             // 50\n  if (Array.isArray(childNode)) {                                                                                      // 51\n    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);                                          // 52\n  } else {                                                                                                             // 53\n    insertChildAt(parentNode, childNode, referenceNode);                                                               // 54\n  }                                                                                                                    // 55\n}                                                                                                                      // 56\n                                                                                                                       // 57\nfunction removeChild(parentNode, childNode) {                                                                          // 58\n  if (Array.isArray(childNode)) {                                                                                      // 59\n    var closingComment = childNode[1];                                                                                 // 60\n    childNode = childNode[0];                                                                                          // 61\n    removeDelimitedText(parentNode, childNode, closingComment);                                                        // 62\n    parentNode.removeChild(closingComment);                                                                            // 63\n  }                                                                                                                    // 64\n  parentNode.removeChild(childNode);                                                                                   // 65\n}                                                                                                                      // 66\n                                                                                                                       // 67\nfunction moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {                                // 68\n  var node = openingComment;                                                                                           // 69\n  while (true) {                                                                                                       // 70\n    var nextNode = node.nextSibling;                                                                                   // 71\n    insertChildAt(parentNode, node, referenceNode);                                                                    // 72\n    if (node === closingComment) {                                                                                     // 73\n      break;                                                                                                           // 74\n    }                                                                                                                  // 75\n    node = nextNode;                                                                                                   // 76\n  }                                                                                                                    // 77\n}                                                                                                                      // 78\n                                                                                                                       // 79\nfunction removeDelimitedText(parentNode, startNode, closingComment) {                                                  // 80\n  while (true) {                                                                                                       // 81\n    var node = startNode.nextSibling;                                                                                  // 82\n    if (node === closingComment) {                                                                                     // 83\n      // The closing comment is removed by ReactMultiChild.                                                            // 84\n      break;                                                                                                           // 85\n    } else {                                                                                                           // 86\n      parentNode.removeChild(node);                                                                                    // 87\n    }                                                                                                                  // 88\n  }                                                                                                                    // 89\n}                                                                                                                      // 90\n                                                                                                                       // 91\nfunction replaceDelimitedText(openingComment, closingComment, stringText) {                                            // 92\n  var parentNode = openingComment.parentNode;                                                                          // 93\n  var nodeAfterComment = openingComment.nextSibling;                                                                   // 94\n  if (nodeAfterComment === closingComment) {                                                                           // 95\n    // There are no text nodes between the opening and closing comments; insert                                        // 96\n    // a new one if stringText isn't empty.                                                                            // 97\n    if (stringText) {                                                                                                  // 98\n      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);                                // 99\n    }                                                                                                                  // 100\n  } else {                                                                                                             // 101\n    if (stringText) {                                                                                                  // 102\n      // Set the text content of the first node after the opening comment, and                                         // 103\n      // remove all following nodes up until the closing comment.                                                      // 104\n      setTextContent(nodeAfterComment, stringText);                                                                    // 105\n      removeDelimitedText(parentNode, nodeAfterComment, closingComment);                                               // 106\n    } else {                                                                                                           // 107\n      removeDelimitedText(parentNode, openingComment, closingComment);                                                 // 108\n    }                                                                                                                  // 109\n  }                                                                                                                    // 110\n                                                                                                                       // 111\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 112\n    ReactInstrumentation.debugTool.onHostOperation({                                                                   // 113\n      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,                                  // 114\n      type: 'replace text',                                                                                            // 115\n      payload: stringText                                                                                              // 116\n    });                                                                                                                // 117\n  }                                                                                                                    // 118\n}                                                                                                                      // 119\n                                                                                                                       // 120\nvar dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;                                        // 121\nif (process.env.NODE_ENV !== 'production') {                                                                           // 122\n  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {                                       // 123\n    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);                                                         // 124\n    if (prevInstance._debugID !== 0) {                                                                                 // 125\n      ReactInstrumentation.debugTool.onHostOperation({                                                                 // 126\n        instanceID: prevInstance._debugID,                                                                             // 127\n        type: 'replace with',                                                                                          // 128\n        payload: markup.toString()                                                                                     // 129\n      });                                                                                                              // 130\n    } else {                                                                                                           // 131\n      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);                                       // 132\n      if (nextInstance._debugID !== 0) {                                                                               // 133\n        ReactInstrumentation.debugTool.onHostOperation({                                                               // 134\n          instanceID: nextInstance._debugID,                                                                           // 135\n          type: 'mount',                                                                                               // 136\n          payload: markup.toString()                                                                                   // 137\n        });                                                                                                            // 138\n      }                                                                                                                // 139\n    }                                                                                                                  // 140\n  };                                                                                                                   // 141\n}                                                                                                                      // 142\n                                                                                                                       // 143\n/**                                                                                                                    // 144\n * Operations for updating with DOM children.                                                                          // 145\n */                                                                                                                    // 146\nvar DOMChildrenOperations = {                                                                                          // 147\n  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,                                                  // 148\n                                                                                                                       // 149\n  replaceDelimitedText: replaceDelimitedText,                                                                          // 150\n                                                                                                                       // 151\n  /**                                                                                                                  // 152\n   * Updates a component's children by processing a series of updates. The                                             // 153\n   * update configurations are each expected to have a `parentNode` property.                                          // 154\n   *                                                                                                                   // 155\n   * @param {array<object>} updates List of update configurations.                                                     // 156\n   * @internal                                                                                                         // 157\n   */                                                                                                                  // 158\n  processUpdates: function (parentNode, updates) {                                                                     // 159\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 160\n      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;                          // 161\n    }                                                                                                                  // 162\n                                                                                                                       // 163\n    for (var k = 0; k < updates.length; k++) {                                                                         // 164\n      var update = updates[k];                                                                                         // 165\n      switch (update.type) {                                                                                           // 166\n        case 'INSERT_MARKUP':                                                                                          // 167\n          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));               // 168\n          if (process.env.NODE_ENV !== 'production') {                                                                 // 169\n            ReactInstrumentation.debugTool.onHostOperation({                                                           // 170\n              instanceID: parentNodeDebugID,                                                                           // 171\n              type: 'insert child',                                                                                    // 172\n              payload: {                                                                                               // 173\n                toIndex: update.toIndex,                                                                               // 174\n                content: update.content.toString()                                                                     // 175\n              }                                                                                                        // 176\n            });                                                                                                        // 177\n          }                                                                                                            // 178\n          break;                                                                                                       // 179\n        case 'MOVE_EXISTING':                                                                                          // 180\n          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));                          // 181\n          if (process.env.NODE_ENV !== 'production') {                                                                 // 182\n            ReactInstrumentation.debugTool.onHostOperation({                                                           // 183\n              instanceID: parentNodeDebugID,                                                                           // 184\n              type: 'move child',                                                                                      // 185\n              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }                                        // 186\n            });                                                                                                        // 187\n          }                                                                                                            // 188\n          break;                                                                                                       // 189\n        case 'SET_MARKUP':                                                                                             // 190\n          setInnerHTML(parentNode, update.content);                                                                    // 191\n          if (process.env.NODE_ENV !== 'production') {                                                                 // 192\n            ReactInstrumentation.debugTool.onHostOperation({                                                           // 193\n              instanceID: parentNodeDebugID,                                                                           // 194\n              type: 'replace children',                                                                                // 195\n              payload: update.content.toString()                                                                       // 196\n            });                                                                                                        // 197\n          }                                                                                                            // 198\n          break;                                                                                                       // 199\n        case 'TEXT_CONTENT':                                                                                           // 200\n          setTextContent(parentNode, update.content);                                                                  // 201\n          if (process.env.NODE_ENV !== 'production') {                                                                 // 202\n            ReactInstrumentation.debugTool.onHostOperation({                                                           // 203\n              instanceID: parentNodeDebugID,                                                                           // 204\n              type: 'replace text',                                                                                    // 205\n              payload: update.content.toString()                                                                       // 206\n            });                                                                                                        // 207\n          }                                                                                                            // 208\n          break;                                                                                                       // 209\n        case 'REMOVE_NODE':                                                                                            // 210\n          removeChild(parentNode, update.fromNode);                                                                    // 211\n          if (process.env.NODE_ENV !== 'production') {                                                                 // 212\n            ReactInstrumentation.debugTool.onHostOperation({                                                           // 213\n              instanceID: parentNodeDebugID,                                                                           // 214\n              type: 'remove child',                                                                                    // 215\n              payload: { fromIndex: update.fromIndex }                                                                 // 216\n            });                                                                                                        // 217\n          }                                                                                                            // 218\n          break;                                                                                                       // 219\n      }                                                                                                                // 220\n    }                                                                                                                  // 221\n  }                                                                                                                    // 222\n};                                                                                                                     // 223\n                                                                                                                       // 224\nmodule.exports = DOMChildrenOperations;                                                                                // 225\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"DOMLazyTree.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/DOMLazyTree.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2015-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar DOMNamespaces = require('./DOMNamespaces');                                                                        // 13\nvar setInnerHTML = require('./setInnerHTML');                                                                          // 14\n                                                                                                                       // 15\nvar createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');                              // 16\nvar setTextContent = require('./setTextContent');                                                                      // 17\n                                                                                                                       // 18\nvar ELEMENT_NODE_TYPE = 1;                                                                                             // 19\nvar DOCUMENT_FRAGMENT_NODE_TYPE = 11;                                                                                  // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n * In IE (8-11) and Edge, appending nodes with no children is dramatically                                             // 23\n * faster than appending a full subtree, so we essentially queue up the                                                // 24\n * .appendChild calls here and apply them so each node is added to its parent                                          // 25\n * before any children are added.                                                                                      // 26\n *                                                                                                                     // 27\n * In other browsers, doing so is slower or neutral compared to the other order                                        // 28\n * (in Firefox, twice as slow) so we only do this inversion in IE.                                                     // 29\n *                                                                                                                     // 30\n * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.                                              // 31\n */                                                                                                                    // 32\nvar enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\\bEdge\\/\\d/.test(navigator.userAgent);\n                                                                                                                       // 34\nfunction insertTreeChildren(tree) {                                                                                    // 35\n  if (!enableLazy) {                                                                                                   // 36\n    return;                                                                                                            // 37\n  }                                                                                                                    // 38\n  var node = tree.node;                                                                                                // 39\n  var children = tree.children;                                                                                        // 40\n  if (children.length) {                                                                                               // 41\n    for (var i = 0; i < children.length; i++) {                                                                        // 42\n      insertTreeBefore(node, children[i], null);                                                                       // 43\n    }                                                                                                                  // 44\n  } else if (tree.html != null) {                                                                                      // 45\n    setInnerHTML(node, tree.html);                                                                                     // 46\n  } else if (tree.text != null) {                                                                                      // 47\n    setTextContent(node, tree.text);                                                                                   // 48\n  }                                                                                                                    // 49\n}                                                                                                                      // 50\n                                                                                                                       // 51\nvar insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {                 // 52\n  // DocumentFragments aren't actually part of the DOM after insertion so                                              // 53\n  // appending children won't update the DOM. We need to ensure the fragment                                           // 54\n  // is properly populated first, breaking out of our lazy approach for just                                           // 55\n  // this level. Also, some <object> plugins (like Flash Player) will read                                             // 56\n  // <param> nodes immediately upon insertion into the DOM, so <object>                                                // 57\n  // must also be populated prior to insertion into the DOM.                                                           // 58\n  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {\n    insertTreeChildren(tree);                                                                                          // 60\n    parentNode.insertBefore(tree.node, referenceNode);                                                                 // 61\n  } else {                                                                                                             // 62\n    parentNode.insertBefore(tree.node, referenceNode);                                                                 // 63\n    insertTreeChildren(tree);                                                                                          // 64\n  }                                                                                                                    // 65\n});                                                                                                                    // 66\n                                                                                                                       // 67\nfunction replaceChildWithTree(oldNode, newTree) {                                                                      // 68\n  oldNode.parentNode.replaceChild(newTree.node, oldNode);                                                              // 69\n  insertTreeChildren(newTree);                                                                                         // 70\n}                                                                                                                      // 71\n                                                                                                                       // 72\nfunction queueChild(parentTree, childTree) {                                                                           // 73\n  if (enableLazy) {                                                                                                    // 74\n    parentTree.children.push(childTree);                                                                               // 75\n  } else {                                                                                                             // 76\n    parentTree.node.appendChild(childTree.node);                                                                       // 77\n  }                                                                                                                    // 78\n}                                                                                                                      // 79\n                                                                                                                       // 80\nfunction queueHTML(tree, html) {                                                                                       // 81\n  if (enableLazy) {                                                                                                    // 82\n    tree.html = html;                                                                                                  // 83\n  } else {                                                                                                             // 84\n    setInnerHTML(tree.node, html);                                                                                     // 85\n  }                                                                                                                    // 86\n}                                                                                                                      // 87\n                                                                                                                       // 88\nfunction queueText(tree, text) {                                                                                       // 89\n  if (enableLazy) {                                                                                                    // 90\n    tree.text = text;                                                                                                  // 91\n  } else {                                                                                                             // 92\n    setTextContent(tree.node, text);                                                                                   // 93\n  }                                                                                                                    // 94\n}                                                                                                                      // 95\n                                                                                                                       // 96\nfunction toString() {                                                                                                  // 97\n  return this.node.nodeName;                                                                                           // 98\n}                                                                                                                      // 99\n                                                                                                                       // 100\nfunction DOMLazyTree(node) {                                                                                           // 101\n  return {                                                                                                             // 102\n    node: node,                                                                                                        // 103\n    children: [],                                                                                                      // 104\n    html: null,                                                                                                        // 105\n    text: null,                                                                                                        // 106\n    toString: toString                                                                                                 // 107\n  };                                                                                                                   // 108\n}                                                                                                                      // 109\n                                                                                                                       // 110\nDOMLazyTree.insertTreeBefore = insertTreeBefore;                                                                       // 111\nDOMLazyTree.replaceChildWithTree = replaceChildWithTree;                                                               // 112\nDOMLazyTree.queueChild = queueChild;                                                                                   // 113\nDOMLazyTree.queueHTML = queueHTML;                                                                                     // 114\nDOMLazyTree.queueText = queueText;                                                                                     // 115\n                                                                                                                       // 116\nmodule.exports = DOMLazyTree;                                                                                          // 117\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"DOMNamespaces.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/DOMNamespaces.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar DOMNamespaces = {                                                                                                  // 13\n  html: 'http://www.w3.org/1999/xhtml',                                                                                // 14\n  mathml: 'http://www.w3.org/1998/Math/MathML',                                                                        // 15\n  svg: 'http://www.w3.org/2000/svg'                                                                                    // 16\n};                                                                                                                     // 17\n                                                                                                                       // 18\nmodule.exports = DOMNamespaces;                                                                                        // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"setInnerHTML.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/setInnerHTML.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 13\nvar DOMNamespaces = require('./DOMNamespaces');                                                                        // 14\n                                                                                                                       // 15\nvar WHITESPACE_TEST = /^[ \\r\\n\\t\\f]/;                                                                                  // 16\nvar NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \\r\\n\\t\\f\\/>]/;                                          // 17\n                                                                                                                       // 18\nvar createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');                              // 19\n                                                                                                                       // 20\n// SVG temp container for IE lacking innerHTML                                                                         // 21\nvar reusableSVGContainer;                                                                                              // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * Set the innerHTML property of a node, ensuring that whitespace is preserved                                         // 25\n * even in IE8.                                                                                                        // 26\n *                                                                                                                     // 27\n * @param {DOMElement} node                                                                                            // 28\n * @param {string} html                                                                                                // 29\n * @internal                                                                                                           // 30\n */                                                                                                                    // 31\nvar setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {                                          // 32\n  // IE does not have innerHTML for SVG nodes, so instead we inject the                                                // 33\n  // new markup in a temp node and then move the child nodes across into                                               // 34\n  // the target node                                                                                                   // 35\n  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {                                             // 36\n    reusableSVGContainer = reusableSVGContainer || document.createElement('div');                                      // 37\n    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';                                                        // 38\n    var svgNode = reusableSVGContainer.firstChild;                                                                     // 39\n    while (svgNode.firstChild) {                                                                                       // 40\n      node.appendChild(svgNode.firstChild);                                                                            // 41\n    }                                                                                                                  // 42\n  } else {                                                                                                             // 43\n    node.innerHTML = html;                                                                                             // 44\n  }                                                                                                                    // 45\n});                                                                                                                    // 46\n                                                                                                                       // 47\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 48\n  // IE8: When updating a just created node with innerHTML only leading                                                // 49\n  // whitespace is removed. When updating an existing node with innerHTML                                              // 50\n  // whitespace in root TextNodes is also collapsed.                                                                   // 51\n  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html                                              // 52\n                                                                                                                       // 53\n  // Feature detection; only IE8 is known to behave improperly like this.                                              // 54\n  var testElement = document.createElement('div');                                                                     // 55\n  testElement.innerHTML = ' ';                                                                                         // 56\n  if (testElement.innerHTML === '') {                                                                                  // 57\n    setInnerHTML = function (node, html) {                                                                             // 58\n      // Magic theory: IE8 supposedly differentiates between added and updated                                         // 59\n      // nodes when processing innerHTML, innerHTML on updated nodes suffers                                           // 60\n      // from worse whitespace behavior. Re-adding a node like this triggers                                           // 61\n      // the initial and more favorable whitespace behavior.                                                           // 62\n      // TODO: What to do on a detached node?                                                                          // 63\n      if (node.parentNode) {                                                                                           // 64\n        node.parentNode.replaceChild(node, node);                                                                      // 65\n      }                                                                                                                // 66\n                                                                                                                       // 67\n      // We also implement a workaround for non-visible tags disappearing into                                         // 68\n      // thin air on IE8, this only happens if there is no visible text                                                // 69\n      // in-front of the non-visible tags. Piggyback on the whitespace fix                                             // 70\n      // and simply check if any non-visible tags appear in the source.                                                // 71\n      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {                               // 72\n        // Recover leading whitespace by temporarily prepending any character.                                         // 73\n        // \\uFEFF has the potential advantage of being zero-width/invisible.                                           // 74\n        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode                                        // 75\n        // in hopes that this is preserved even if \"\\uFEFF\" is transformed to                                          // 76\n        // the actual Unicode character (by Babel, for example).                                                       // 77\n        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216                                          // 78\n        node.innerHTML = String.fromCharCode(0xfeff) + html;                                                           // 79\n                                                                                                                       // 80\n        // deleteData leaves an empty `TextNode` which offsets the index of all                                        // 81\n        // children. Definitely want to avoid this.                                                                    // 82\n        var textNode = node.firstChild;                                                                                // 83\n        if (textNode.data.length === 1) {                                                                              // 84\n          node.removeChild(textNode);                                                                                  // 85\n        } else {                                                                                                       // 86\n          textNode.deleteData(0, 1);                                                                                   // 87\n        }                                                                                                              // 88\n      } else {                                                                                                         // 89\n        node.innerHTML = html;                                                                                         // 90\n      }                                                                                                                // 91\n    };                                                                                                                 // 92\n  }                                                                                                                    // 93\n  testElement = null;                                                                                                  // 94\n}                                                                                                                      // 95\n                                                                                                                       // 96\nmodule.exports = setInnerHTML;                                                                                         // 97\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"createMicrosoftUnsafeLocalFunction.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/createMicrosoftUnsafeLocalFunction.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n/* globals MSApp */                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Create a function which has 'unsafe' privileges (required by windows8 apps)                                         // 16\n */                                                                                                                    // 17\n                                                                                                                       // 18\nvar createMicrosoftUnsafeLocalFunction = function (func) {                                                             // 19\n  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {                                                 // 20\n    return function (arg0, arg1, arg2, arg3) {                                                                         // 21\n      MSApp.execUnsafeLocalFunction(function () {                                                                      // 22\n        return func(arg0, arg1, arg2, arg3);                                                                           // 23\n      });                                                                                                              // 24\n    };                                                                                                                 // 25\n  } else {                                                                                                             // 26\n    return func;                                                                                                       // 27\n  }                                                                                                                    // 28\n};                                                                                                                     // 29\n                                                                                                                       // 30\nmodule.exports = createMicrosoftUnsafeLocalFunction;                                                                   // 31\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"setTextContent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/setTextContent.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 13\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');                                            // 14\nvar setInnerHTML = require('./setInnerHTML');                                                                          // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * Set the textContent property of a node, ensuring that whitespace is preserved                                       // 18\n * even in IE8. innerText is a poor substitute for textContent and, among many                                         // 19\n * issues, inserts <br> instead of the literal newline chars. innerHTML behaves                                        // 20\n * as it should.                                                                                                       // 21\n *                                                                                                                     // 22\n * @param {DOMElement} node                                                                                            // 23\n * @param {string} text                                                                                                // 24\n * @internal                                                                                                           // 25\n */                                                                                                                    // 26\nvar setTextContent = function (node, text) {                                                                           // 27\n  if (text) {                                                                                                          // 28\n    var firstChild = node.firstChild;                                                                                  // 29\n                                                                                                                       // 30\n    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {                                    // 31\n      firstChild.nodeValue = text;                                                                                     // 32\n      return;                                                                                                          // 33\n    }                                                                                                                  // 34\n  }                                                                                                                    // 35\n  node.textContent = text;                                                                                             // 36\n};                                                                                                                     // 37\n                                                                                                                       // 38\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 39\n  if (!('textContent' in document.documentElement)) {                                                                  // 40\n    setTextContent = function (node, text) {                                                                           // 41\n      if (node.nodeType === 3) {                                                                                       // 42\n        node.nodeValue = text;                                                                                         // 43\n        return;                                                                                                        // 44\n      }                                                                                                                // 45\n      setInnerHTML(node, escapeTextContentForBrowser(text));                                                           // 46\n    };                                                                                                                 // 47\n  }                                                                                                                    // 48\n}                                                                                                                      // 49\n                                                                                                                       // 50\nmodule.exports = setTextContent;                                                                                       // 51\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"escapeTextContentForBrowser.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/escapeTextContentForBrowser.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2016-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * Based on the escape-html library, which is used under the MIT License below:                                        // 9\n *                                                                                                                     // 10\n * Copyright (c) 2012-2013 TJ Holowaychuk                                                                              // 11\n * Copyright (c) 2015 Andreas Lubbe                                                                                    // 12\n * Copyright (c) 2015 Tiancheng \"Timothy\" Gu                                                                           // 13\n *                                                                                                                     // 14\n * Permission is hereby granted, free of charge, to any person obtaining                                               // 15\n * a copy of this software and associated documentation files (the                                                     // 16\n * 'Software'), to deal in the Software without restriction, including                                                 // 17\n * without limitation the rights to use, copy, modify, merge, publish,                                                 // 18\n * distribute, sublicense, and/or sell copies of the Software, and to                                                  // 19\n * permit persons to whom the Software is furnished to do so, subject to                                               // 20\n * the following conditions:                                                                                           // 21\n *                                                                                                                     // 22\n * The above copyright notice and this permission notice shall be                                                      // 23\n * included in all copies or substantial portions of the Software.                                                     // 24\n *                                                                                                                     // 25\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,                                                     // 26\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                  // 27\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.                                              // 28\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY                                                // 29\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,                                                // 30\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE                                                   // 31\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                                              // 32\n *                                                                                                                     // 33\n */                                                                                                                    // 34\n                                                                                                                       // 35\n'use strict';                                                                                                          // 36\n                                                                                                                       // 37\n// code copied and modified from escape-html                                                                           // 38\n/**                                                                                                                    // 39\n * Module variables.                                                                                                   // 40\n * @private                                                                                                            // 41\n */                                                                                                                    // 42\n                                                                                                                       // 43\nvar matchHtmlRegExp = /[\"'&<>]/;                                                                                       // 44\n                                                                                                                       // 45\n/**                                                                                                                    // 46\n * Escape special characters in the given string of html.                                                              // 47\n *                                                                                                                     // 48\n * @param  {string} string The string to escape for inserting into HTML                                                // 49\n * @return {string}                                                                                                    // 50\n * @public                                                                                                             // 51\n */                                                                                                                    // 52\n                                                                                                                       // 53\nfunction escapeHtml(string) {                                                                                          // 54\n  var str = '' + string;                                                                                               // 55\n  var match = matchHtmlRegExp.exec(str);                                                                               // 56\n                                                                                                                       // 57\n  if (!match) {                                                                                                        // 58\n    return str;                                                                                                        // 59\n  }                                                                                                                    // 60\n                                                                                                                       // 61\n  var escape;                                                                                                          // 62\n  var html = '';                                                                                                       // 63\n  var index = 0;                                                                                                       // 64\n  var lastIndex = 0;                                                                                                   // 65\n                                                                                                                       // 66\n  for (index = match.index; index < str.length; index++) {                                                             // 67\n    switch (str.charCodeAt(index)) {                                                                                   // 68\n      case 34:                                                                                                         // 69\n        // \"                                                                                                           // 70\n        escape = '&quot;';                                                                                             // 71\n        break;                                                                                                         // 72\n      case 38:                                                                                                         // 73\n        // &                                                                                                           // 74\n        escape = '&amp;';                                                                                              // 75\n        break;                                                                                                         // 76\n      case 39:                                                                                                         // 77\n        // '                                                                                                           // 78\n        escape = '&#x27;'; // modified from escape-html; used to be '&#39'                                             // 79\n        break;                                                                                                         // 80\n      case 60:                                                                                                         // 81\n        // <                                                                                                           // 82\n        escape = '&lt;';                                                                                               // 83\n        break;                                                                                                         // 84\n      case 62:                                                                                                         // 85\n        // >                                                                                                           // 86\n        escape = '&gt;';                                                                                               // 87\n        break;                                                                                                         // 88\n      default:                                                                                                         // 89\n        continue;                                                                                                      // 90\n    }                                                                                                                  // 91\n                                                                                                                       // 92\n    if (lastIndex !== index) {                                                                                         // 93\n      html += str.substring(lastIndex, index);                                                                         // 94\n    }                                                                                                                  // 95\n                                                                                                                       // 96\n    lastIndex = index + 1;                                                                                             // 97\n    html += escape;                                                                                                    // 98\n  }                                                                                                                    // 99\n                                                                                                                       // 100\n  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;                                          // 101\n}                                                                                                                      // 102\n// end code copied and modified from escape-html                                                                       // 103\n                                                                                                                       // 104\n/**                                                                                                                    // 105\n * Escapes text to prevent scripting attacks.                                                                          // 106\n *                                                                                                                     // 107\n * @param {*} text Text value to escape.                                                                               // 108\n * @return {string} An escaped string.                                                                                 // 109\n */                                                                                                                    // 110\nfunction escapeTextContentForBrowser(text) {                                                                           // 111\n  if (typeof text === 'boolean' || typeof text === 'number') {                                                         // 112\n    // this shortcircuit helps perf for types that we know will never have                                             // 113\n    // special characters, especially given that this function is used often                                           // 114\n    // for numeric dom ids.                                                                                            // 115\n    return '' + text;                                                                                                  // 116\n  }                                                                                                                    // 117\n  return escapeHtml(text);                                                                                             // 118\n}                                                                                                                      // 119\n                                                                                                                       // 120\nmodule.exports = escapeTextContentForBrowser;                                                                          // 121\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Danger.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/Danger.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 13\n                                                                                                                       // 14\nvar DOMLazyTree = require('./DOMLazyTree');                                                                            // 15\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 16\n                                                                                                                       // 17\nvar createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');                                                 // 18\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 19\nvar invariant = require('fbjs/lib/invariant');                                                                         // 20\n                                                                                                                       // 21\nvar Danger = {                                                                                                         // 22\n  /**                                                                                                                  // 23\n   * Replaces a node with a string of markup at its current position within its                                        // 24\n   * parent. The markup must render into a single root node.                                                           // 25\n   *                                                                                                                   // 26\n   * @param {DOMElement} oldChild Child node to replace.                                                               // 27\n   * @param {string} markup Markup to render in place of the child node.                                               // 28\n   * @internal                                                                                                         // 29\n   */                                                                                                                  // 30\n  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {                                                      // 31\n    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;\n    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;\n    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;\n                                                                                                                       // 35\n    if (typeof markup === 'string') {                                                                                  // 36\n      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];                                                  // 37\n      oldChild.parentNode.replaceChild(newChild, oldChild);                                                            // 38\n    } else {                                                                                                           // 39\n      DOMLazyTree.replaceChildWithTree(oldChild, markup);                                                              // 40\n    }                                                                                                                  // 41\n  }                                                                                                                    // 42\n};                                                                                                                     // 43\n                                                                                                                       // 44\nmodule.exports = Danger;                                                                                               // 45\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDOMIDOperations.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactDOMIDOperations.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar DOMChildrenOperations = require('./DOMChildrenOperations');                                                        // 13\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Operations used to process updates to DOM nodes.                                                                    // 17\n */                                                                                                                    // 18\nvar ReactDOMIDOperations = {                                                                                           // 19\n  /**                                                                                                                  // 20\n   * Updates a component's children by processing a series of updates.                                                 // 21\n   *                                                                                                                   // 22\n   * @param {array<object>} updates List of update configurations.                                                     // 23\n   * @internal                                                                                                         // 24\n   */                                                                                                                  // 25\n  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {                                                  // 26\n    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);                                                  // 27\n    DOMChildrenOperations.processUpdates(node, updates);                                                               // 28\n  }                                                                                                                    // 29\n};                                                                                                                     // 30\n                                                                                                                       // 31\nmodule.exports = ReactDOMIDOperations;                                                                                 // 32\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDOMComponent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactDOMComponent.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n/* global hasOwnProperty:true */                                                                                       // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar _prodInvariant = require('./reactProdInvariant'),                                                                  // 15\n    _assign = require('object-assign');                                                                                // 16\n                                                                                                                       // 17\nvar AutoFocusUtils = require('./AutoFocusUtils');                                                                      // 18\nvar CSSPropertyOperations = require('./CSSPropertyOperations');                                                        // 19\nvar DOMLazyTree = require('./DOMLazyTree');                                                                            // 20\nvar DOMNamespaces = require('./DOMNamespaces');                                                                        // 21\nvar DOMProperty = require('./DOMProperty');                                                                            // 22\nvar DOMPropertyOperations = require('./DOMPropertyOperations');                                                        // 23\nvar EventPluginHub = require('./EventPluginHub');                                                                      // 24\nvar EventPluginRegistry = require('./EventPluginRegistry');                                                            // 25\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');                                                  // 26\nvar ReactDOMComponentFlags = require('./ReactDOMComponentFlags');                                                      // 27\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 28\nvar ReactDOMInput = require('./ReactDOMInput');                                                                        // 29\nvar ReactDOMOption = require('./ReactDOMOption');                                                                      // 30\nvar ReactDOMSelect = require('./ReactDOMSelect');                                                                      // 31\nvar ReactDOMTextarea = require('./ReactDOMTextarea');                                                                  // 32\nvar ReactInstrumentation = require('./ReactInstrumentation');                                                          // 33\nvar ReactMultiChild = require('./ReactMultiChild');                                                                    // 34\nvar ReactServerRenderingTransaction = require('./ReactServerRenderingTransaction');                                    // 35\n                                                                                                                       // 36\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 37\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');                                            // 38\nvar invariant = require('fbjs/lib/invariant');                                                                         // 39\nvar isEventSupported = require('./isEventSupported');                                                                  // 40\nvar shallowEqual = require('fbjs/lib/shallowEqual');                                                                   // 41\nvar inputValueTracking = require('./inputValueTracking');                                                              // 42\nvar validateDOMNesting = require('./validateDOMNesting');                                                              // 43\nvar warning = require('fbjs/lib/warning');                                                                             // 44\n                                                                                                                       // 45\nvar Flags = ReactDOMComponentFlags;                                                                                    // 46\nvar deleteListener = EventPluginHub.deleteListener;                                                                    // 47\nvar getNode = ReactDOMComponentTree.getNodeFromInstance;                                                               // 48\nvar listenTo = ReactBrowserEventEmitter.listenTo;                                                                      // 49\nvar registrationNameModules = EventPluginRegistry.registrationNameModules;                                             // 50\n                                                                                                                       // 51\n// For quickly matching children type, to test if can be treated as content.                                           // 52\nvar CONTENT_TYPES = { string: true, number: true };                                                                    // 53\n                                                                                                                       // 54\nvar STYLE = 'style';                                                                                                   // 55\nvar HTML = '__html';                                                                                                   // 56\nvar RESERVED_PROPS = {                                                                                                 // 57\n  children: null,                                                                                                      // 58\n  dangerouslySetInnerHTML: null,                                                                                       // 59\n  suppressContentEditableWarning: null                                                                                 // 60\n};                                                                                                                     // 61\n                                                                                                                       // 62\n// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).                                                     // 63\nvar DOC_FRAGMENT_TYPE = 11;                                                                                            // 64\n                                                                                                                       // 65\nfunction getDeclarationErrorAddendum(internalInstance) {                                                               // 66\n  if (internalInstance) {                                                                                              // 67\n    var owner = internalInstance._currentElement._owner || null;                                                       // 68\n    if (owner) {                                                                                                       // 69\n      var name = owner.getName();                                                                                      // 70\n      if (name) {                                                                                                      // 71\n        return ' This DOM node was rendered by `' + name + '`.';                                                       // 72\n      }                                                                                                                // 73\n    }                                                                                                                  // 74\n  }                                                                                                                    // 75\n  return '';                                                                                                           // 76\n}                                                                                                                      // 77\n                                                                                                                       // 78\nfunction friendlyStringify(obj) {                                                                                      // 79\n  if (typeof obj === 'object') {                                                                                       // 80\n    if (Array.isArray(obj)) {                                                                                          // 81\n      return '[' + obj.map(friendlyStringify).join(', ') + ']';                                                        // 82\n    } else {                                                                                                           // 83\n      var pairs = [];                                                                                                  // 84\n      for (var key in obj) {                                                                                           // 85\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {                                                          // 86\n          var keyEscaped = /^[a-z$_][\\w$_]*$/i.test(key) ? key : JSON.stringify(key);                                  // 87\n          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));                                                 // 88\n        }                                                                                                              // 89\n      }                                                                                                                // 90\n      return '{' + pairs.join(', ') + '}';                                                                             // 91\n    }                                                                                                                  // 92\n  } else if (typeof obj === 'string') {                                                                                // 93\n    return JSON.stringify(obj);                                                                                        // 94\n  } else if (typeof obj === 'function') {                                                                              // 95\n    return '[function object]';                                                                                        // 96\n  }                                                                                                                    // 97\n  // Differs from JSON.stringify in that undefined because undefined and that                                          // 98\n  // inf and nan don't become null                                                                                     // 99\n  return String(obj);                                                                                                  // 100\n}                                                                                                                      // 101\n                                                                                                                       // 102\nvar styleMutationWarning = {};                                                                                         // 103\n                                                                                                                       // 104\nfunction checkAndWarnForMutatedStyle(style1, style2, component) {                                                      // 105\n  if (style1 == null || style2 == null) {                                                                              // 106\n    return;                                                                                                            // 107\n  }                                                                                                                    // 108\n  if (shallowEqual(style1, style2)) {                                                                                  // 109\n    return;                                                                                                            // 110\n  }                                                                                                                    // 111\n                                                                                                                       // 112\n  var componentName = component._tag;                                                                                  // 113\n  var owner = component._currentElement._owner;                                                                        // 114\n  var ownerName;                                                                                                       // 115\n  if (owner) {                                                                                                         // 116\n    ownerName = owner.getName();                                                                                       // 117\n  }                                                                                                                    // 118\n                                                                                                                       // 119\n  var hash = ownerName + '|' + componentName;                                                                          // 120\n                                                                                                                       // 121\n  if (styleMutationWarning.hasOwnProperty(hash)) {                                                                     // 122\n    return;                                                                                                            // 123\n  }                                                                                                                    // 124\n                                                                                                                       // 125\n  styleMutationWarning[hash] = true;                                                                                   // 126\n                                                                                                                       // 127\n  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;\n}                                                                                                                      // 129\n                                                                                                                       // 130\n/**                                                                                                                    // 131\n * @param {object} component                                                                                           // 132\n * @param {?object} props                                                                                              // 133\n */                                                                                                                    // 134\nfunction assertValidProps(component, props) {                                                                          // 135\n  if (!props) {                                                                                                        // 136\n    return;                                                                                                            // 137\n  }                                                                                                                    // 138\n  // Note the use of `==` which checks for null or undefined.                                                          // 139\n  if (voidElementTags[component._tag]) {                                                                               // 140\n    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;\n  }                                                                                                                    // 142\n  if (props.dangerouslySetInnerHTML != null) {                                                                         // 143\n    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;\n    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;\n  }                                                                                                                    // 146\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 147\n    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;\n    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;\n    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;\n  }                                                                                                                    // 151\n  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \\'em\\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;\n}                                                                                                                      // 153\n                                                                                                                       // 154\nfunction enqueuePutListener(inst, registrationName, listener, transaction) {                                           // 155\n  if (transaction instanceof ReactServerRenderingTransaction) {                                                        // 156\n    return;                                                                                                            // 157\n  }                                                                                                                    // 158\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 159\n    // IE8 has no API for event capturing and the `onScroll` event doesn't                                             // 160\n    // bubble.                                                                                                         // 161\n    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), \"This browser doesn't support the `onScroll` event\") : void 0;\n  }                                                                                                                    // 163\n  var containerInfo = inst._hostContainerInfo;                                                                         // 164\n  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;                  // 165\n  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;                                   // 166\n  listenTo(registrationName, doc);                                                                                     // 167\n  transaction.getReactMountReady().enqueue(putListener, {                                                              // 168\n    inst: inst,                                                                                                        // 169\n    registrationName: registrationName,                                                                                // 170\n    listener: listener                                                                                                 // 171\n  });                                                                                                                  // 172\n}                                                                                                                      // 173\n                                                                                                                       // 174\nfunction putListener() {                                                                                               // 175\n  var listenerToPut = this;                                                                                            // 176\n  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);              // 177\n}                                                                                                                      // 178\n                                                                                                                       // 179\nfunction inputPostMount() {                                                                                            // 180\n  var inst = this;                                                                                                     // 181\n  ReactDOMInput.postMountWrapper(inst);                                                                                // 182\n}                                                                                                                      // 183\n                                                                                                                       // 184\nfunction textareaPostMount() {                                                                                         // 185\n  var inst = this;                                                                                                     // 186\n  ReactDOMTextarea.postMountWrapper(inst);                                                                             // 187\n}                                                                                                                      // 188\n                                                                                                                       // 189\nfunction optionPostMount() {                                                                                           // 190\n  var inst = this;                                                                                                     // 191\n  ReactDOMOption.postMountWrapper(inst);                                                                               // 192\n}                                                                                                                      // 193\n                                                                                                                       // 194\nvar setAndValidateContentChildDev = emptyFunction;                                                                     // 195\nif (process.env.NODE_ENV !== 'production') {                                                                           // 196\n  setAndValidateContentChildDev = function (content) {                                                                 // 197\n    var hasExistingContent = this._contentDebugID != null;                                                             // 198\n    var debugID = this._debugID;                                                                                       // 199\n    // This ID represents the inlined child that has no backing instance:                                              // 200\n    var contentDebugID = -debugID;                                                                                     // 201\n                                                                                                                       // 202\n    if (content == null) {                                                                                             // 203\n      if (hasExistingContent) {                                                                                        // 204\n        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);                                       // 205\n      }                                                                                                                // 206\n      this._contentDebugID = null;                                                                                     // 207\n      return;                                                                                                          // 208\n    }                                                                                                                  // 209\n                                                                                                                       // 210\n    validateDOMNesting(null, String(content), this, this._ancestorInfo);                                               // 211\n    this._contentDebugID = contentDebugID;                                                                             // 212\n    if (hasExistingContent) {                                                                                          // 213\n      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);                                 // 214\n      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);                                                // 215\n    } else {                                                                                                           // 216\n      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);                         // 217\n      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);                                                 // 218\n      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);                                         // 219\n    }                                                                                                                  // 220\n  };                                                                                                                   // 221\n}                                                                                                                      // 222\n                                                                                                                       // 223\n// There are so many media events, it makes sense to just                                                              // 224\n// maintain a list rather than create a `trapBubbledEvent` for each                                                    // 225\nvar mediaEvents = {                                                                                                    // 226\n  topAbort: 'abort',                                                                                                   // 227\n  topCanPlay: 'canplay',                                                                                               // 228\n  topCanPlayThrough: 'canplaythrough',                                                                                 // 229\n  topDurationChange: 'durationchange',                                                                                 // 230\n  topEmptied: 'emptied',                                                                                               // 231\n  topEncrypted: 'encrypted',                                                                                           // 232\n  topEnded: 'ended',                                                                                                   // 233\n  topError: 'error',                                                                                                   // 234\n  topLoadedData: 'loadeddata',                                                                                         // 235\n  topLoadedMetadata: 'loadedmetadata',                                                                                 // 236\n  topLoadStart: 'loadstart',                                                                                           // 237\n  topPause: 'pause',                                                                                                   // 238\n  topPlay: 'play',                                                                                                     // 239\n  topPlaying: 'playing',                                                                                               // 240\n  topProgress: 'progress',                                                                                             // 241\n  topRateChange: 'ratechange',                                                                                         // 242\n  topSeeked: 'seeked',                                                                                                 // 243\n  topSeeking: 'seeking',                                                                                               // 244\n  topStalled: 'stalled',                                                                                               // 245\n  topSuspend: 'suspend',                                                                                               // 246\n  topTimeUpdate: 'timeupdate',                                                                                         // 247\n  topVolumeChange: 'volumechange',                                                                                     // 248\n  topWaiting: 'waiting'                                                                                                // 249\n};                                                                                                                     // 250\n                                                                                                                       // 251\nfunction trackInputValue() {                                                                                           // 252\n  inputValueTracking.track(this);                                                                                      // 253\n}                                                                                                                      // 254\n                                                                                                                       // 255\nfunction trapBubbledEventsLocal() {                                                                                    // 256\n  var inst = this;                                                                                                     // 257\n  // If a component renders to null or if another component fatals and causes                                          // 258\n  // the state of the tree to be corrupted, `node` here can be null.                                                   // 259\n  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;\n  var node = getNode(inst);                                                                                            // 261\n  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;\n                                                                                                                       // 263\n  switch (inst._tag) {                                                                                                 // 264\n    case 'iframe':                                                                                                     // 265\n    case 'object':                                                                                                     // 266\n      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];             // 267\n      break;                                                                                                           // 268\n    case 'video':                                                                                                      // 269\n    case 'audio':                                                                                                      // 270\n      inst._wrapperState.listeners = [];                                                                               // 271\n      // Create listener for each media event                                                                          // 272\n      for (var event in mediaEvents) {                                                                                 // 273\n        if (mediaEvents.hasOwnProperty(event)) {                                                                       // 274\n          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));\n        }                                                                                                              // 276\n      }                                                                                                                // 277\n      break;                                                                                                           // 278\n    case 'source':                                                                                                     // 279\n      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];           // 280\n      break;                                                                                                           // 281\n    case 'img':                                                                                                        // 282\n      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];\n      break;                                                                                                           // 284\n    case 'form':                                                                                                       // 285\n      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];\n      break;                                                                                                           // 287\n    case 'input':                                                                                                      // 288\n    case 'select':                                                                                                     // 289\n    case 'textarea':                                                                                                   // 290\n      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];       // 291\n      break;                                                                                                           // 292\n  }                                                                                                                    // 293\n}                                                                                                                      // 294\n                                                                                                                       // 295\nfunction postUpdateSelectWrapper() {                                                                                   // 296\n  ReactDOMSelect.postUpdateWrapper(this);                                                                              // 297\n}                                                                                                                      // 298\n                                                                                                                       // 299\n// For HTML, certain tags should omit their close tag. We keep a whitelist for                                         // 300\n// those special-case tags.                                                                                            // 301\n                                                                                                                       // 302\nvar omittedCloseTags = {                                                                                               // 303\n  area: true,                                                                                                          // 304\n  base: true,                                                                                                          // 305\n  br: true,                                                                                                            // 306\n  col: true,                                                                                                           // 307\n  embed: true,                                                                                                         // 308\n  hr: true,                                                                                                            // 309\n  img: true,                                                                                                           // 310\n  input: true,                                                                                                         // 311\n  keygen: true,                                                                                                        // 312\n  link: true,                                                                                                          // 313\n  meta: true,                                                                                                          // 314\n  param: true,                                                                                                         // 315\n  source: true,                                                                                                        // 316\n  track: true,                                                                                                         // 317\n  wbr: true                                                                                                            // 318\n  // NOTE: menuitem's close tag should be omitted, but that causes problems.                                           // 319\n};                                                                                                                     // 320\n                                                                                                                       // 321\nvar newlineEatingTags = {                                                                                              // 322\n  listing: true,                                                                                                       // 323\n  pre: true,                                                                                                           // 324\n  textarea: true                                                                                                       // 325\n};                                                                                                                     // 326\n                                                                                                                       // 327\n// For HTML, certain tags cannot have children. This has the same purpose as                                           // 328\n// `omittedCloseTags` except that `menuitem` should still have its closing tag.                                        // 329\n                                                                                                                       // 330\nvar voidElementTags = _assign({                                                                                        // 331\n  menuitem: true                                                                                                       // 332\n}, omittedCloseTags);                                                                                                  // 333\n                                                                                                                       // 334\n// We accept any tag to be rendered but since this gets injected into arbitrary                                        // 335\n// HTML, we want to make sure that it's a safe tag.                                                                    // 336\n// http://www.w3.org/TR/REC-xml/#NT-Name                                                                               // 337\n                                                                                                                       // 338\nvar VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\\.\\-\\d]*$/; // Simplified subset                                              // 339\nvar validatedTagCache = {};                                                                                            // 340\nvar hasOwnProperty = {}.hasOwnProperty;                                                                                // 341\n                                                                                                                       // 342\nfunction validateDangerousTag(tag) {                                                                                   // 343\n  if (!hasOwnProperty.call(validatedTagCache, tag)) {                                                                  // 344\n    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;\n    validatedTagCache[tag] = true;                                                                                     // 346\n  }                                                                                                                    // 347\n}                                                                                                                      // 348\n                                                                                                                       // 349\nfunction isCustomComponent(tagName, props) {                                                                           // 350\n  return tagName.indexOf('-') >= 0 || props.is != null;                                                                // 351\n}                                                                                                                      // 352\n                                                                                                                       // 353\nvar globalIdCounter = 1;                                                                                               // 354\n                                                                                                                       // 355\n/**                                                                                                                    // 356\n * Creates a new React class that is idempotent and capable of containing other                                        // 357\n * React components. It accepts event listeners and DOM properties that are                                            // 358\n * valid according to `DOMProperty`.                                                                                   // 359\n *                                                                                                                     // 360\n *  - Event listeners: `onClick`, `onMouseDown`, etc.                                                                  // 361\n *  - DOM properties: `className`, `name`, `title`, etc.                                                               // 362\n *                                                                                                                     // 363\n * The `style` property functions differently from the DOM API. It accepts an                                          // 364\n * object mapping of style properties to values.                                                                       // 365\n *                                                                                                                     // 366\n * @constructor ReactDOMComponent                                                                                      // 367\n * @extends ReactMultiChild                                                                                            // 368\n */                                                                                                                    // 369\nfunction ReactDOMComponent(element) {                                                                                  // 370\n  var tag = element.type;                                                                                              // 371\n  validateDangerousTag(tag);                                                                                           // 372\n  this._currentElement = element;                                                                                      // 373\n  this._tag = tag.toLowerCase();                                                                                       // 374\n  this._namespaceURI = null;                                                                                           // 375\n  this._renderedChildren = null;                                                                                       // 376\n  this._previousStyle = null;                                                                                          // 377\n  this._previousStyleCopy = null;                                                                                      // 378\n  this._hostNode = null;                                                                                               // 379\n  this._hostParent = null;                                                                                             // 380\n  this._rootNodeID = 0;                                                                                                // 381\n  this._domID = 0;                                                                                                     // 382\n  this._hostContainerInfo = null;                                                                                      // 383\n  this._wrapperState = null;                                                                                           // 384\n  this._topLevelWrapper = null;                                                                                        // 385\n  this._flags = 0;                                                                                                     // 386\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 387\n    this._ancestorInfo = null;                                                                                         // 388\n    setAndValidateContentChildDev.call(this, null);                                                                    // 389\n  }                                                                                                                    // 390\n}                                                                                                                      // 391\n                                                                                                                       // 392\nReactDOMComponent.displayName = 'ReactDOMComponent';                                                                   // 393\n                                                                                                                       // 394\nReactDOMComponent.Mixin = {                                                                                            // 395\n  /**                                                                                                                  // 396\n   * Generates root tag markup then recurses. This method has side effects and                                         // 397\n   * is not idempotent.                                                                                                // 398\n   *                                                                                                                   // 399\n   * @internal                                                                                                         // 400\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 401\n   * @param {?ReactDOMComponent} the parent component instance                                                         // 402\n   * @param {?object} info about the host container                                                                    // 403\n   * @param {object} context                                                                                           // 404\n   * @return {string} The computed markup.                                                                             // 405\n   */                                                                                                                  // 406\n  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {                                     // 407\n    this._rootNodeID = globalIdCounter++;                                                                              // 408\n    this._domID = hostContainerInfo._idCounter++;                                                                      // 409\n    this._hostParent = hostParent;                                                                                     // 410\n    this._hostContainerInfo = hostContainerInfo;                                                                       // 411\n                                                                                                                       // 412\n    var props = this._currentElement.props;                                                                            // 413\n                                                                                                                       // 414\n    switch (this._tag) {                                                                                               // 415\n      case 'audio':                                                                                                    // 416\n      case 'form':                                                                                                     // 417\n      case 'iframe':                                                                                                   // 418\n      case 'img':                                                                                                      // 419\n      case 'link':                                                                                                     // 420\n      case 'object':                                                                                                   // 421\n      case 'source':                                                                                                   // 422\n      case 'video':                                                                                                    // 423\n        this._wrapperState = {                                                                                         // 424\n          listeners: null                                                                                              // 425\n        };                                                                                                             // 426\n        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);                                        // 427\n        break;                                                                                                         // 428\n      case 'input':                                                                                                    // 429\n        ReactDOMInput.mountWrapper(this, props, hostParent);                                                           // 430\n        props = ReactDOMInput.getHostProps(this, props);                                                               // 431\n        transaction.getReactMountReady().enqueue(trackInputValue, this);                                               // 432\n        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);                                        // 433\n        break;                                                                                                         // 434\n      case 'option':                                                                                                   // 435\n        ReactDOMOption.mountWrapper(this, props, hostParent);                                                          // 436\n        props = ReactDOMOption.getHostProps(this, props);                                                              // 437\n        break;                                                                                                         // 438\n      case 'select':                                                                                                   // 439\n        ReactDOMSelect.mountWrapper(this, props, hostParent);                                                          // 440\n        props = ReactDOMSelect.getHostProps(this, props);                                                              // 441\n        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);                                        // 442\n        break;                                                                                                         // 443\n      case 'textarea':                                                                                                 // 444\n        ReactDOMTextarea.mountWrapper(this, props, hostParent);                                                        // 445\n        props = ReactDOMTextarea.getHostProps(this, props);                                                            // 446\n        transaction.getReactMountReady().enqueue(trackInputValue, this);                                               // 447\n        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);                                        // 448\n        break;                                                                                                         // 449\n    }                                                                                                                  // 450\n                                                                                                                       // 451\n    assertValidProps(this, props);                                                                                     // 452\n                                                                                                                       // 453\n    // We create tags in the namespace of their parent container, except HTML                                          // 454\n    // tags get no namespace.                                                                                          // 455\n    var namespaceURI;                                                                                                  // 456\n    var parentTag;                                                                                                     // 457\n    if (hostParent != null) {                                                                                          // 458\n      namespaceURI = hostParent._namespaceURI;                                                                         // 459\n      parentTag = hostParent._tag;                                                                                     // 460\n    } else if (hostContainerInfo._tag) {                                                                               // 461\n      namespaceURI = hostContainerInfo._namespaceURI;                                                                  // 462\n      parentTag = hostContainerInfo._tag;                                                                              // 463\n    }                                                                                                                  // 464\n    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {                 // 465\n      namespaceURI = DOMNamespaces.html;                                                                               // 466\n    }                                                                                                                  // 467\n    if (namespaceURI === DOMNamespaces.html) {                                                                         // 468\n      if (this._tag === 'svg') {                                                                                       // 469\n        namespaceURI = DOMNamespaces.svg;                                                                              // 470\n      } else if (this._tag === 'math') {                                                                               // 471\n        namespaceURI = DOMNamespaces.mathml;                                                                           // 472\n      }                                                                                                                // 473\n    }                                                                                                                  // 474\n    this._namespaceURI = namespaceURI;                                                                                 // 475\n                                                                                                                       // 476\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 477\n      var parentInfo;                                                                                                  // 478\n      if (hostParent != null) {                                                                                        // 479\n        parentInfo = hostParent._ancestorInfo;                                                                         // 480\n      } else if (hostContainerInfo._tag) {                                                                             // 481\n        parentInfo = hostContainerInfo._ancestorInfo;                                                                  // 482\n      }                                                                                                                // 483\n      if (parentInfo) {                                                                                                // 484\n        // parentInfo should always be present except for the top-level                                                // 485\n        // component when server rendering                                                                             // 486\n        validateDOMNesting(this._tag, null, this, parentInfo);                                                         // 487\n      }                                                                                                                // 488\n      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);                        // 489\n    }                                                                                                                  // 490\n                                                                                                                       // 491\n    var mountImage;                                                                                                    // 492\n    if (transaction.useCreateElement) {                                                                                // 493\n      var ownerDocument = hostContainerInfo._ownerDocument;                                                            // 494\n      var el;                                                                                                          // 495\n      if (namespaceURI === DOMNamespaces.html) {                                                                       // 496\n        if (this._tag === 'script') {                                                                                  // 497\n          // Create the script via .innerHTML so its \"parser-inserted\" flag is                                         // 498\n          // set to true and it does not execute                                                                       // 499\n          var div = ownerDocument.createElement('div');                                                                // 500\n          var type = this._currentElement.type;                                                                        // 501\n          div.innerHTML = '<' + type + '></' + type + '>';                                                             // 502\n          el = div.removeChild(div.firstChild);                                                                        // 503\n        } else if (props.is) {                                                                                         // 504\n          el = ownerDocument.createElement(this._currentElement.type, props.is);                                       // 505\n        } else {                                                                                                       // 506\n          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.             // 507\n          // See discussion in https://github.com/facebook/react/pull/6896                                             // 508\n          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240                                    // 509\n          el = ownerDocument.createElement(this._currentElement.type);                                                 // 510\n        }                                                                                                              // 511\n      } else {                                                                                                         // 512\n        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);                                   // 513\n      }                                                                                                                // 514\n      ReactDOMComponentTree.precacheNode(this, el);                                                                    // 515\n      this._flags |= Flags.hasCachedChildNodes;                                                                        // 516\n      if (!this._hostParent) {                                                                                         // 517\n        DOMPropertyOperations.setAttributeForRoot(el);                                                                 // 518\n      }                                                                                                                // 519\n      this._updateDOMProperties(null, props, transaction);                                                             // 520\n      var lazyTree = DOMLazyTree(el);                                                                                  // 521\n      this._createInitialChildren(transaction, props, context, lazyTree);                                              // 522\n      mountImage = lazyTree;                                                                                           // 523\n    } else {                                                                                                           // 524\n      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);                                      // 525\n      var tagContent = this._createContentMarkup(transaction, props, context);                                         // 526\n      if (!tagContent && omittedCloseTags[this._tag]) {                                                                // 527\n        mountImage = tagOpen + '/>';                                                                                   // 528\n      } else {                                                                                                         // 529\n        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';                              // 530\n      }                                                                                                                // 531\n    }                                                                                                                  // 532\n                                                                                                                       // 533\n    switch (this._tag) {                                                                                               // 534\n      case 'input':                                                                                                    // 535\n        transaction.getReactMountReady().enqueue(inputPostMount, this);                                                // 536\n        if (props.autoFocus) {                                                                                         // 537\n          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);                            // 538\n        }                                                                                                              // 539\n        break;                                                                                                         // 540\n      case 'textarea':                                                                                                 // 541\n        transaction.getReactMountReady().enqueue(textareaPostMount, this);                                             // 542\n        if (props.autoFocus) {                                                                                         // 543\n          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);                            // 544\n        }                                                                                                              // 545\n        break;                                                                                                         // 546\n      case 'select':                                                                                                   // 547\n        if (props.autoFocus) {                                                                                         // 548\n          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);                            // 549\n        }                                                                                                              // 550\n        break;                                                                                                         // 551\n      case 'button':                                                                                                   // 552\n        if (props.autoFocus) {                                                                                         // 553\n          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);                            // 554\n        }                                                                                                              // 555\n        break;                                                                                                         // 556\n      case 'option':                                                                                                   // 557\n        transaction.getReactMountReady().enqueue(optionPostMount, this);                                               // 558\n        break;                                                                                                         // 559\n    }                                                                                                                  // 560\n                                                                                                                       // 561\n    return mountImage;                                                                                                 // 562\n  },                                                                                                                   // 563\n                                                                                                                       // 564\n  /**                                                                                                                  // 565\n   * Creates markup for the open tag and all attributes.                                                               // 566\n   *                                                                                                                   // 567\n   * This method has side effects because events get registered.                                                       // 568\n   *                                                                                                                   // 569\n   * Iterating over object properties is faster than iterating over arrays.                                            // 570\n   * @see http://jsperf.com/obj-vs-arr-iteration                                                                       // 571\n   *                                                                                                                   // 572\n   * @private                                                                                                          // 573\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 574\n   * @param {object} props                                                                                             // 575\n   * @return {string} Markup of opening tag.                                                                           // 576\n   */                                                                                                                  // 577\n  _createOpenTagMarkupAndPutListeners: function (transaction, props) {                                                 // 578\n    var ret = '<' + this._currentElement.type;                                                                         // 579\n                                                                                                                       // 580\n    for (var propKey in props) {                                                                                       // 581\n      if (!props.hasOwnProperty(propKey)) {                                                                            // 582\n        continue;                                                                                                      // 583\n      }                                                                                                                // 584\n      var propValue = props[propKey];                                                                                  // 585\n      if (propValue == null) {                                                                                         // 586\n        continue;                                                                                                      // 587\n      }                                                                                                                // 588\n      if (registrationNameModules.hasOwnProperty(propKey)) {                                                           // 589\n        if (propValue) {                                                                                               // 590\n          enqueuePutListener(this, propKey, propValue, transaction);                                                   // 591\n        }                                                                                                              // 592\n      } else {                                                                                                         // 593\n        if (propKey === STYLE) {                                                                                       // 594\n          if (propValue) {                                                                                             // 595\n            if (process.env.NODE_ENV !== 'production') {                                                               // 596\n              // See `_updateDOMProperties`. style block                                                               // 597\n              this._previousStyle = propValue;                                                                         // 598\n            }                                                                                                          // 599\n            propValue = this._previousStyleCopy = _assign({}, props.style);                                            // 600\n          }                                                                                                            // 601\n          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);                                    // 602\n        }                                                                                                              // 603\n        var markup = null;                                                                                             // 604\n        if (this._tag != null && isCustomComponent(this._tag, props)) {                                                // 605\n          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {                                                               // 606\n            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);                         // 607\n          }                                                                                                            // 608\n        } else {                                                                                                       // 609\n          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);                                  // 610\n        }                                                                                                              // 611\n        if (markup) {                                                                                                  // 612\n          ret += ' ' + markup;                                                                                         // 613\n        }                                                                                                              // 614\n      }                                                                                                                // 615\n    }                                                                                                                  // 616\n                                                                                                                       // 617\n    // For static pages, no need to put React ID and checksum. Saves lots of                                           // 618\n    // bytes.                                                                                                          // 619\n    if (transaction.renderToStaticMarkup) {                                                                            // 620\n      return ret;                                                                                                      // 621\n    }                                                                                                                  // 622\n                                                                                                                       // 623\n    if (!this._hostParent) {                                                                                           // 624\n      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();                                                        // 625\n    }                                                                                                                  // 626\n    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);                                                 // 627\n    return ret;                                                                                                        // 628\n  },                                                                                                                   // 629\n                                                                                                                       // 630\n  /**                                                                                                                  // 631\n   * Creates markup for the content between the tags.                                                                  // 632\n   *                                                                                                                   // 633\n   * @private                                                                                                          // 634\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 635\n   * @param {object} props                                                                                             // 636\n   * @param {object} context                                                                                           // 637\n   * @return {string} Content markup.                                                                                  // 638\n   */                                                                                                                  // 639\n  _createContentMarkup: function (transaction, props, context) {                                                       // 640\n    var ret = '';                                                                                                      // 641\n                                                                                                                       // 642\n    // Intentional use of != to avoid catching zero/false.                                                             // 643\n    var innerHTML = props.dangerouslySetInnerHTML;                                                                     // 644\n    if (innerHTML != null) {                                                                                           // 645\n      if (innerHTML.__html != null) {                                                                                  // 646\n        ret = innerHTML.__html;                                                                                        // 647\n      }                                                                                                                // 648\n    } else {                                                                                                           // 649\n      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;                                 // 650\n      var childrenToUse = contentToUse != null ? null : props.children;                                                // 651\n      if (contentToUse != null) {                                                                                      // 652\n        // TODO: Validate that text is allowed as a child of this node                                                 // 653\n        ret = escapeTextContentForBrowser(contentToUse);                                                               // 654\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 655\n          setAndValidateContentChildDev.call(this, contentToUse);                                                      // 656\n        }                                                                                                              // 657\n      } else if (childrenToUse != null) {                                                                              // 658\n        var mountImages = this.mountChildren(childrenToUse, transaction, context);                                     // 659\n        ret = mountImages.join('');                                                                                    // 660\n      }                                                                                                                // 661\n    }                                                                                                                  // 662\n    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\\n') {                                                      // 663\n      // text/html ignores the first character in these tags if it's a newline                                         // 664\n      // Prefer to break application/xml over text/html (for now) by adding                                            // 665\n      // a newline specifically to get eaten by the parser. (Alternately for                                           // 666\n      // textareas, replacing \"^\\n\" with \"\\r\\n\" doesn't get eaten, and the first                                       // 667\n      // \\r is normalized out by HTMLTextAreaElement#value.)                                                           // 668\n      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>                                       // 669\n      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>                                            // 670\n      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>                                                        // 671\n      // See: Parsing of \"textarea\" \"listing\" and \"pre\" elements                                                       // 672\n      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>                                            // 673\n      return '\\n' + ret;                                                                                               // 674\n    } else {                                                                                                           // 675\n      return ret;                                                                                                      // 676\n    }                                                                                                                  // 677\n  },                                                                                                                   // 678\n                                                                                                                       // 679\n  _createInitialChildren: function (transaction, props, context, lazyTree) {                                           // 680\n    // Intentional use of != to avoid catching zero/false.                                                             // 681\n    var innerHTML = props.dangerouslySetInnerHTML;                                                                     // 682\n    if (innerHTML != null) {                                                                                           // 683\n      if (innerHTML.__html != null) {                                                                                  // 684\n        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);                                                             // 685\n      }                                                                                                                // 686\n    } else {                                                                                                           // 687\n      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;                                 // 688\n      var childrenToUse = contentToUse != null ? null : props.children;                                                // 689\n      // TODO: Validate that text is allowed as a child of this node                                                   // 690\n      if (contentToUse != null) {                                                                                      // 691\n        // Avoid setting textContent when the text is empty. In IE11 setting                                           // 692\n        // textContent on a text area will cause the placeholder to not                                                // 693\n        // show within the textarea until it has been focused and blurred again.                                       // 694\n        // https://github.com/facebook/react/issues/6731#issuecomment-254874553                                        // 695\n        if (contentToUse !== '') {                                                                                     // 696\n          if (process.env.NODE_ENV !== 'production') {                                                                 // 697\n            setAndValidateContentChildDev.call(this, contentToUse);                                                    // 698\n          }                                                                                                            // 699\n          DOMLazyTree.queueText(lazyTree, contentToUse);                                                               // 700\n        }                                                                                                              // 701\n      } else if (childrenToUse != null) {                                                                              // 702\n        var mountImages = this.mountChildren(childrenToUse, transaction, context);                                     // 703\n        for (var i = 0; i < mountImages.length; i++) {                                                                 // 704\n          DOMLazyTree.queueChild(lazyTree, mountImages[i]);                                                            // 705\n        }                                                                                                              // 706\n      }                                                                                                                // 707\n    }                                                                                                                  // 708\n  },                                                                                                                   // 709\n                                                                                                                       // 710\n  /**                                                                                                                  // 711\n   * Receives a next element and updates the component.                                                                // 712\n   *                                                                                                                   // 713\n   * @internal                                                                                                         // 714\n   * @param {ReactElement} nextElement                                                                                 // 715\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 716\n   * @param {object} context                                                                                           // 717\n   */                                                                                                                  // 718\n  receiveComponent: function (nextElement, transaction, context) {                                                     // 719\n    var prevElement = this._currentElement;                                                                            // 720\n    this._currentElement = nextElement;                                                                                // 721\n    this.updateComponent(transaction, prevElement, nextElement, context);                                              // 722\n  },                                                                                                                   // 723\n                                                                                                                       // 724\n  /**                                                                                                                  // 725\n   * Updates a DOM component after it has already been allocated and                                                   // 726\n   * attached to the DOM. Reconciles the root DOM node, then recurses.                                                 // 727\n   *                                                                                                                   // 728\n   * @param {ReactReconcileTransaction} transaction                                                                    // 729\n   * @param {ReactElement} prevElement                                                                                 // 730\n   * @param {ReactElement} nextElement                                                                                 // 731\n   * @internal                                                                                                         // 732\n   * @overridable                                                                                                      // 733\n   */                                                                                                                  // 734\n  updateComponent: function (transaction, prevElement, nextElement, context) {                                         // 735\n    var lastProps = prevElement.props;                                                                                 // 736\n    var nextProps = this._currentElement.props;                                                                        // 737\n                                                                                                                       // 738\n    switch (this._tag) {                                                                                               // 739\n      case 'input':                                                                                                    // 740\n        lastProps = ReactDOMInput.getHostProps(this, lastProps);                                                       // 741\n        nextProps = ReactDOMInput.getHostProps(this, nextProps);                                                       // 742\n        break;                                                                                                         // 743\n      case 'option':                                                                                                   // 744\n        lastProps = ReactDOMOption.getHostProps(this, lastProps);                                                      // 745\n        nextProps = ReactDOMOption.getHostProps(this, nextProps);                                                      // 746\n        break;                                                                                                         // 747\n      case 'select':                                                                                                   // 748\n        lastProps = ReactDOMSelect.getHostProps(this, lastProps);                                                      // 749\n        nextProps = ReactDOMSelect.getHostProps(this, nextProps);                                                      // 750\n        break;                                                                                                         // 751\n      case 'textarea':                                                                                                 // 752\n        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);                                                    // 753\n        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);                                                    // 754\n        break;                                                                                                         // 755\n    }                                                                                                                  // 756\n                                                                                                                       // 757\n    assertValidProps(this, nextProps);                                                                                 // 758\n    this._updateDOMProperties(lastProps, nextProps, transaction);                                                      // 759\n    this._updateDOMChildren(lastProps, nextProps, transaction, context);                                               // 760\n                                                                                                                       // 761\n    switch (this._tag) {                                                                                               // 762\n      case 'input':                                                                                                    // 763\n        // Update the wrapper around inputs *after* updating props. This has to                                        // 764\n        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations                                      // 765\n        // raise warnings and prevent the new value from being assigned.                                               // 766\n        ReactDOMInput.updateWrapper(this);                                                                             // 767\n        break;                                                                                                         // 768\n      case 'textarea':                                                                                                 // 769\n        ReactDOMTextarea.updateWrapper(this);                                                                          // 770\n        break;                                                                                                         // 771\n      case 'select':                                                                                                   // 772\n        // <select> value update needs to occur after <option> children                                                // 773\n        // reconciliation                                                                                              // 774\n        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);                                       // 775\n        break;                                                                                                         // 776\n    }                                                                                                                  // 777\n  },                                                                                                                   // 778\n                                                                                                                       // 779\n  /**                                                                                                                  // 780\n   * Reconciles the properties by detecting differences in property values and                                         // 781\n   * updating the DOM as necessary. This function is probably the single most                                          // 782\n   * critical path for performance optimization.                                                                       // 783\n   *                                                                                                                   // 784\n   * TODO: Benchmark whether checking for changed values in memory actually                                            // 785\n   *       improves performance (especially statically positioned elements).                                           // 786\n   * TODO: Benchmark the effects of putting this at the top since 99% of props                                         // 787\n   *       do not change for a given reconciliation.                                                                   // 788\n   * TODO: Benchmark areas that can be improved with caching.                                                          // 789\n   *                                                                                                                   // 790\n   * @private                                                                                                          // 791\n   * @param {object} lastProps                                                                                         // 792\n   * @param {object} nextProps                                                                                         // 793\n   * @param {?DOMElement} node                                                                                         // 794\n   */                                                                                                                  // 795\n  _updateDOMProperties: function (lastProps, nextProps, transaction) {                                                 // 796\n    var propKey;                                                                                                       // 797\n    var styleName;                                                                                                     // 798\n    var styleUpdates;                                                                                                  // 799\n    for (propKey in lastProps) {                                                                                       // 800\n      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {     // 801\n        continue;                                                                                                      // 802\n      }                                                                                                                // 803\n      if (propKey === STYLE) {                                                                                         // 804\n        var lastStyle = this._previousStyleCopy;                                                                       // 805\n        for (styleName in lastStyle) {                                                                                 // 806\n          if (lastStyle.hasOwnProperty(styleName)) {                                                                   // 807\n            styleUpdates = styleUpdates || {};                                                                         // 808\n            styleUpdates[styleName] = '';                                                                              // 809\n          }                                                                                                            // 810\n        }                                                                                                              // 811\n        this._previousStyleCopy = null;                                                                                // 812\n      } else if (registrationNameModules.hasOwnProperty(propKey)) {                                                    // 813\n        if (lastProps[propKey]) {                                                                                      // 814\n          // Only call deleteListener if there was a listener previously or                                            // 815\n          // else willDeleteListener gets called when there wasn't actually a                                          // 816\n          // listener (e.g., onClick={null})                                                                           // 817\n          deleteListener(this, propKey);                                                                               // 818\n        }                                                                                                              // 819\n      } else if (isCustomComponent(this._tag, lastProps)) {                                                            // 820\n        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {                                                                 // 821\n          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);                                       // 822\n        }                                                                                                              // 823\n      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {                          // 824\n        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);                                          // 825\n      }                                                                                                                // 826\n    }                                                                                                                  // 827\n    for (propKey in nextProps) {                                                                                       // 828\n      var nextProp = nextProps[propKey];                                                                               // 829\n      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;\n      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {       // 831\n        continue;                                                                                                      // 832\n      }                                                                                                                // 833\n      if (propKey === STYLE) {                                                                                         // 834\n        if (nextProp) {                                                                                                // 835\n          if (process.env.NODE_ENV !== 'production') {                                                                 // 836\n            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);                           // 837\n            this._previousStyle = nextProp;                                                                            // 838\n          }                                                                                                            // 839\n          nextProp = this._previousStyleCopy = _assign({}, nextProp);                                                  // 840\n        } else {                                                                                                       // 841\n          this._previousStyleCopy = null;                                                                              // 842\n        }                                                                                                              // 843\n        if (lastProp) {                                                                                                // 844\n          // Unset styles on `lastProp` but not on `nextProp`.                                                         // 845\n          for (styleName in lastProp) {                                                                                // 846\n            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {            // 847\n              styleUpdates = styleUpdates || {};                                                                       // 848\n              styleUpdates[styleName] = '';                                                                            // 849\n            }                                                                                                          // 850\n          }                                                                                                            // 851\n          // Update styles that changed since `lastProp`.                                                              // 852\n          for (styleName in nextProp) {                                                                                // 853\n            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {                   // 854\n              styleUpdates = styleUpdates || {};                                                                       // 855\n              styleUpdates[styleName] = nextProp[styleName];                                                           // 856\n            }                                                                                                          // 857\n          }                                                                                                            // 858\n        } else {                                                                                                       // 859\n          // Relies on `updateStylesByID` not mutating `styleUpdates`.                                                 // 860\n          styleUpdates = nextProp;                                                                                     // 861\n        }                                                                                                              // 862\n      } else if (registrationNameModules.hasOwnProperty(propKey)) {                                                    // 863\n        if (nextProp) {                                                                                                // 864\n          enqueuePutListener(this, propKey, nextProp, transaction);                                                    // 865\n        } else if (lastProp) {                                                                                         // 866\n          deleteListener(this, propKey);                                                                               // 867\n        }                                                                                                              // 868\n      } else if (isCustomComponent(this._tag, nextProps)) {                                                            // 869\n        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {                                                                 // 870\n          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);                                // 871\n        }                                                                                                              // 872\n      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {                          // 873\n        var node = getNode(this);                                                                                      // 874\n        // If we're updating to null or undefined, we should remove the property                                       // 875\n        // from the DOM node instead of inadvertently setting to a string. This                                        // 876\n        // brings us in line with the same behavior we have on initial render.                                         // 877\n        if (nextProp != null) {                                                                                        // 878\n          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);                                          // 879\n        } else {                                                                                                       // 880\n          DOMPropertyOperations.deleteValueForProperty(node, propKey);                                                 // 881\n        }                                                                                                              // 882\n      }                                                                                                                // 883\n    }                                                                                                                  // 884\n    if (styleUpdates) {                                                                                                // 885\n      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);                                      // 886\n    }                                                                                                                  // 887\n  },                                                                                                                   // 888\n                                                                                                                       // 889\n  /**                                                                                                                  // 890\n   * Reconciles the children with the various properties that affect the                                               // 891\n   * children content.                                                                                                 // 892\n   *                                                                                                                   // 893\n   * @param {object} lastProps                                                                                         // 894\n   * @param {object} nextProps                                                                                         // 895\n   * @param {ReactReconcileTransaction} transaction                                                                    // 896\n   * @param {object} context                                                                                           // 897\n   */                                                                                                                  // 898\n  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {                                          // 899\n    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;                            // 900\n    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;                            // 901\n                                                                                                                       // 902\n    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;                      // 903\n    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;                      // 904\n                                                                                                                       // 905\n    // Note the use of `!=` which checks for null or undefined.                                                        // 906\n    var lastChildren = lastContent != null ? null : lastProps.children;                                                // 907\n    var nextChildren = nextContent != null ? null : nextProps.children;                                                // 908\n                                                                                                                       // 909\n    // If we're switching from children to content/html or vice versa, remove                                          // 910\n    // the old content                                                                                                 // 911\n    var lastHasContentOrHtml = lastContent != null || lastHtml != null;                                                // 912\n    var nextHasContentOrHtml = nextContent != null || nextHtml != null;                                                // 913\n    if (lastChildren != null && nextChildren == null) {                                                                // 914\n      this.updateChildren(null, transaction, context);                                                                 // 915\n    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {                                                        // 916\n      this.updateTextContent('');                                                                                      // 917\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 918\n        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);                                               // 919\n      }                                                                                                                // 920\n    }                                                                                                                  // 921\n                                                                                                                       // 922\n    if (nextContent != null) {                                                                                         // 923\n      if (lastContent !== nextContent) {                                                                               // 924\n        this.updateTextContent('' + nextContent);                                                                      // 925\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 926\n          setAndValidateContentChildDev.call(this, nextContent);                                                       // 927\n        }                                                                                                              // 928\n      }                                                                                                                // 929\n    } else if (nextHtml != null) {                                                                                     // 930\n      if (lastHtml !== nextHtml) {                                                                                     // 931\n        this.updateMarkup('' + nextHtml);                                                                              // 932\n      }                                                                                                                // 933\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 934\n        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);                                               // 935\n      }                                                                                                                // 936\n    } else if (nextChildren != null) {                                                                                 // 937\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 938\n        setAndValidateContentChildDev.call(this, null);                                                                // 939\n      }                                                                                                                // 940\n                                                                                                                       // 941\n      this.updateChildren(nextChildren, transaction, context);                                                         // 942\n    }                                                                                                                  // 943\n  },                                                                                                                   // 944\n                                                                                                                       // 945\n  getHostNode: function () {                                                                                           // 946\n    return getNode(this);                                                                                              // 947\n  },                                                                                                                   // 948\n                                                                                                                       // 949\n  /**                                                                                                                  // 950\n   * Destroys all event registrations for this instance. Does not remove from                                          // 951\n   * the DOM. That must be done by the parent.                                                                         // 952\n   *                                                                                                                   // 953\n   * @internal                                                                                                         // 954\n   */                                                                                                                  // 955\n  unmountComponent: function (safely) {                                                                                // 956\n    switch (this._tag) {                                                                                               // 957\n      case 'audio':                                                                                                    // 958\n      case 'form':                                                                                                     // 959\n      case 'iframe':                                                                                                   // 960\n      case 'img':                                                                                                      // 961\n      case 'link':                                                                                                     // 962\n      case 'object':                                                                                                   // 963\n      case 'source':                                                                                                   // 964\n      case 'video':                                                                                                    // 965\n        var listeners = this._wrapperState.listeners;                                                                  // 966\n        if (listeners) {                                                                                               // 967\n          for (var i = 0; i < listeners.length; i++) {                                                                 // 968\n            listeners[i].remove();                                                                                     // 969\n          }                                                                                                            // 970\n        }                                                                                                              // 971\n        break;                                                                                                         // 972\n      case 'input':                                                                                                    // 973\n      case 'textarea':                                                                                                 // 974\n        inputValueTracking.stopTracking(this);                                                                         // 975\n        break;                                                                                                         // 976\n      case 'html':                                                                                                     // 977\n      case 'head':                                                                                                     // 978\n      case 'body':                                                                                                     // 979\n        /**                                                                                                            // 980\n         * Components like <html> <head> and <body> can't be removed or added                                          // 981\n         * easily in a cross-browser way, however it's valuable to be able to                                          // 982\n         * take advantage of React's reconciliation for styling and <title>                                            // 983\n         * management. So we just document it and throw in dangerous cases.                                            // 984\n         */                                                                                                            // 985\n        !false ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;\n        break;                                                                                                         // 987\n    }                                                                                                                  // 988\n                                                                                                                       // 989\n    this.unmountChildren(safely);                                                                                      // 990\n    ReactDOMComponentTree.uncacheNode(this);                                                                           // 991\n    EventPluginHub.deleteAllListeners(this);                                                                           // 992\n    this._rootNodeID = 0;                                                                                              // 993\n    this._domID = 0;                                                                                                   // 994\n    this._wrapperState = null;                                                                                         // 995\n                                                                                                                       // 996\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 997\n      setAndValidateContentChildDev.call(this, null);                                                                  // 998\n    }                                                                                                                  // 999\n  },                                                                                                                   // 1000\n                                                                                                                       // 1001\n  getPublicInstance: function () {                                                                                     // 1002\n    return getNode(this);                                                                                              // 1003\n  }                                                                                                                    // 1004\n};                                                                                                                     // 1005\n                                                                                                                       // 1006\n_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);                                  // 1007\n                                                                                                                       // 1008\nmodule.exports = ReactDOMComponent;                                                                                    // 1009\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"AutoFocusUtils.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/AutoFocusUtils.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 13\n                                                                                                                       // 14\nvar focusNode = require('fbjs/lib/focusNode');                                                                         // 15\n                                                                                                                       // 16\nvar AutoFocusUtils = {                                                                                                 // 17\n  focusDOMComponent: function () {                                                                                     // 18\n    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));                                                        // 19\n  }                                                                                                                    // 20\n};                                                                                                                     // 21\n                                                                                                                       // 22\nmodule.exports = AutoFocusUtils;                                                                                       // 23\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"CSSPropertyOperations.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/CSSPropertyOperations.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar CSSProperty = require('./CSSProperty');                                                                            // 13\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 14\nvar ReactInstrumentation = require('./ReactInstrumentation');                                                          // 15\n                                                                                                                       // 16\nvar camelizeStyleName = require('fbjs/lib/camelizeStyleName');                                                         // 17\nvar dangerousStyleValue = require('./dangerousStyleValue');                                                            // 18\nvar hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');                                                       // 19\nvar memoizeStringOnly = require('fbjs/lib/memoizeStringOnly');                                                         // 20\nvar warning = require('fbjs/lib/warning');                                                                             // 21\n                                                                                                                       // 22\nvar processStyleName = memoizeStringOnly(function (styleName) {                                                        // 23\n  return hyphenateStyleName(styleName);                                                                                // 24\n});                                                                                                                    // 25\n                                                                                                                       // 26\nvar hasShorthandPropertyBug = false;                                                                                   // 27\nvar styleFloatAccessor = 'cssFloat';                                                                                   // 28\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 29\n  var tempStyle = document.createElement('div').style;                                                                 // 30\n  try {                                                                                                                // 31\n    // IE8 throws \"Invalid argument.\" if resetting shorthand style properties.                                         // 32\n    tempStyle.font = '';                                                                                               // 33\n  } catch (e) {                                                                                                        // 34\n    hasShorthandPropertyBug = true;                                                                                    // 35\n  }                                                                                                                    // 36\n  // IE8 only supports accessing cssFloat (standard) as styleFloat                                                     // 37\n  if (document.documentElement.style.cssFloat === undefined) {                                                         // 38\n    styleFloatAccessor = 'styleFloat';                                                                                 // 39\n  }                                                                                                                    // 40\n}                                                                                                                      // 41\n                                                                                                                       // 42\nif (process.env.NODE_ENV !== 'production') {                                                                           // 43\n  // 'msTransform' is correct, but the other prefixes should be capitalized                                            // 44\n  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;                                                          // 45\n                                                                                                                       // 46\n  // style values shouldn't contain a semicolon                                                                        // 47\n  var badStyleValueWithSemicolonPattern = /;\\s*$/;                                                                     // 48\n                                                                                                                       // 49\n  var warnedStyleNames = {};                                                                                           // 50\n  var warnedStyleValues = {};                                                                                          // 51\n  var warnedForNaNValue = false;                                                                                       // 52\n                                                                                                                       // 53\n  var warnHyphenatedStyleName = function (name, owner) {                                                               // 54\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {                                             // 55\n      return;                                                                                                          // 56\n    }                                                                                                                  // 57\n                                                                                                                       // 58\n    warnedStyleNames[name] = true;                                                                                     // 59\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;\n  };                                                                                                                   // 61\n                                                                                                                       // 62\n  var warnBadVendoredStyleName = function (name, owner) {                                                              // 63\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {                                             // 64\n      return;                                                                                                          // 65\n    }                                                                                                                  // 66\n                                                                                                                       // 67\n    warnedStyleNames[name] = true;                                                                                     // 68\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;\n  };                                                                                                                   // 70\n                                                                                                                       // 71\n  var warnStyleValueWithSemicolon = function (name, value, owner) {                                                    // 72\n    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {                                         // 73\n      return;                                                                                                          // 74\n    }                                                                                                                  // 75\n                                                                                                                       // 76\n    warnedStyleValues[value] = true;                                                                                   // 77\n    process.env.NODE_ENV !== 'production' ? warning(false, \"Style property values shouldn't contain a semicolon.%s \" + 'Try \"%s: %s\" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;\n  };                                                                                                                   // 79\n                                                                                                                       // 80\n  var warnStyleValueIsNaN = function (name, value, owner) {                                                            // 81\n    if (warnedForNaNValue) {                                                                                           // 82\n      return;                                                                                                          // 83\n    }                                                                                                                  // 84\n                                                                                                                       // 85\n    warnedForNaNValue = true;                                                                                          // 86\n    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;\n  };                                                                                                                   // 88\n                                                                                                                       // 89\n  var checkRenderMessage = function (owner) {                                                                          // 90\n    if (owner) {                                                                                                       // 91\n      var name = owner.getName();                                                                                      // 92\n      if (name) {                                                                                                      // 93\n        return ' Check the render method of `' + name + '`.';                                                          // 94\n      }                                                                                                                // 95\n    }                                                                                                                  // 96\n    return '';                                                                                                         // 97\n  };                                                                                                                   // 98\n                                                                                                                       // 99\n  /**                                                                                                                  // 100\n   * @param {string} name                                                                                              // 101\n   * @param {*} value                                                                                                  // 102\n   * @param {ReactDOMComponent} component                                                                              // 103\n   */                                                                                                                  // 104\n  var warnValidStyle = function (name, value, component) {                                                             // 105\n    var owner;                                                                                                         // 106\n    if (component) {                                                                                                   // 107\n      owner = component._currentElement._owner;                                                                        // 108\n    }                                                                                                                  // 109\n    if (name.indexOf('-') > -1) {                                                                                      // 110\n      warnHyphenatedStyleName(name, owner);                                                                            // 111\n    } else if (badVendoredStyleNamePattern.test(name)) {                                                               // 112\n      warnBadVendoredStyleName(name, owner);                                                                           // 113\n    } else if (badStyleValueWithSemicolonPattern.test(value)) {                                                        // 114\n      warnStyleValueWithSemicolon(name, value, owner);                                                                 // 115\n    }                                                                                                                  // 116\n                                                                                                                       // 117\n    if (typeof value === 'number' && isNaN(value)) {                                                                   // 118\n      warnStyleValueIsNaN(name, value, owner);                                                                         // 119\n    }                                                                                                                  // 120\n  };                                                                                                                   // 121\n}                                                                                                                      // 122\n                                                                                                                       // 123\n/**                                                                                                                    // 124\n * Operations for dealing with CSS properties.                                                                         // 125\n */                                                                                                                    // 126\nvar CSSPropertyOperations = {                                                                                          // 127\n  /**                                                                                                                  // 128\n   * Serializes a mapping of style properties for use as inline styles:                                                // 129\n   *                                                                                                                   // 130\n   *   > createMarkupForStyles({width: '200px', height: 0})                                                            // 131\n   *   \"width:200px;height:0;\"                                                                                         // 132\n   *                                                                                                                   // 133\n   * Undefined values are ignored so that declarative programming is easier.                                           // 134\n   * The result should be HTML-escaped before insertion into the DOM.                                                  // 135\n   *                                                                                                                   // 136\n   * @param {object} styles                                                                                            // 137\n   * @param {ReactDOMComponent} component                                                                              // 138\n   * @return {?string}                                                                                                 // 139\n   */                                                                                                                  // 140\n  createMarkupForStyles: function (styles, component) {                                                                // 141\n    var serialized = '';                                                                                               // 142\n    for (var styleName in styles) {                                                                                    // 143\n      if (!styles.hasOwnProperty(styleName)) {                                                                         // 144\n        continue;                                                                                                      // 145\n      }                                                                                                                // 146\n      var isCustomProperty = styleName.indexOf('--') === 0;                                                            // 147\n      var styleValue = styles[styleName];                                                                              // 148\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 149\n        if (!isCustomProperty) {                                                                                       // 150\n          warnValidStyle(styleName, styleValue, component);                                                            // 151\n        }                                                                                                              // 152\n      }                                                                                                                // 153\n      if (styleValue != null) {                                                                                        // 154\n        serialized += processStyleName(styleName) + ':';                                                               // 155\n        serialized += dangerousStyleValue(styleName, styleValue, component, isCustomProperty) + ';';                   // 156\n      }                                                                                                                // 157\n    }                                                                                                                  // 158\n    return serialized || null;                                                                                         // 159\n  },                                                                                                                   // 160\n                                                                                                                       // 161\n  /**                                                                                                                  // 162\n   * Sets the value for multiple styles on a node.  If a value is specified as                                         // 163\n   * '' (empty string), the corresponding style property will be unset.                                                // 164\n   *                                                                                                                   // 165\n   * @param {DOMElement} node                                                                                          // 166\n   * @param {object} styles                                                                                            // 167\n   * @param {ReactDOMComponent} component                                                                              // 168\n   */                                                                                                                  // 169\n  setValueForStyles: function (node, styles, component) {                                                              // 170\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 171\n      ReactInstrumentation.debugTool.onHostOperation({                                                                 // 172\n        instanceID: component._debugID,                                                                                // 173\n        type: 'update styles',                                                                                         // 174\n        payload: styles                                                                                                // 175\n      });                                                                                                              // 176\n    }                                                                                                                  // 177\n                                                                                                                       // 178\n    var style = node.style;                                                                                            // 179\n    for (var styleName in styles) {                                                                                    // 180\n      if (!styles.hasOwnProperty(styleName)) {                                                                         // 181\n        continue;                                                                                                      // 182\n      }                                                                                                                // 183\n      var isCustomProperty = styleName.indexOf('--') === 0;                                                            // 184\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 185\n        if (!isCustomProperty) {                                                                                       // 186\n          warnValidStyle(styleName, styles[styleName], component);                                                     // 187\n        }                                                                                                              // 188\n      }                                                                                                                // 189\n      var styleValue = dangerousStyleValue(styleName, styles[styleName], component, isCustomProperty);                 // 190\n      if (styleName === 'float' || styleName === 'cssFloat') {                                                         // 191\n        styleName = styleFloatAccessor;                                                                                // 192\n      }                                                                                                                // 193\n      if (isCustomProperty) {                                                                                          // 194\n        style.setProperty(styleName, styleValue);                                                                      // 195\n      } else if (styleValue) {                                                                                         // 196\n        style[styleName] = styleValue;                                                                                 // 197\n      } else {                                                                                                         // 198\n        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];                 // 199\n        if (expansion) {                                                                                               // 200\n          // Shorthand property that IE8 won't like unsetting, so unset each                                           // 201\n          // component to placate it                                                                                   // 202\n          for (var individualStyleName in expansion) {                                                                 // 203\n            style[individualStyleName] = '';                                                                           // 204\n          }                                                                                                            // 205\n        } else {                                                                                                       // 206\n          style[styleName] = '';                                                                                       // 207\n        }                                                                                                              // 208\n      }                                                                                                                // 209\n    }                                                                                                                  // 210\n  }                                                                                                                    // 211\n};                                                                                                                     // 212\n                                                                                                                       // 213\nmodule.exports = CSSPropertyOperations;                                                                                // 214\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"CSSProperty.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/CSSProperty.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * CSS properties which accept numbers but are not in units of \"px\".                                                   // 14\n */                                                                                                                    // 15\n                                                                                                                       // 16\nvar isUnitlessNumber = {                                                                                               // 17\n  animationIterationCount: true,                                                                                       // 18\n  borderImageOutset: true,                                                                                             // 19\n  borderImageSlice: true,                                                                                              // 20\n  borderImageWidth: true,                                                                                              // 21\n  boxFlex: true,                                                                                                       // 22\n  boxFlexGroup: true,                                                                                                  // 23\n  boxOrdinalGroup: true,                                                                                               // 24\n  columnCount: true,                                                                                                   // 25\n  flex: true,                                                                                                          // 26\n  flexGrow: true,                                                                                                      // 27\n  flexPositive: true,                                                                                                  // 28\n  flexShrink: true,                                                                                                    // 29\n  flexNegative: true,                                                                                                  // 30\n  flexOrder: true,                                                                                                     // 31\n  gridRow: true,                                                                                                       // 32\n  gridRowEnd: true,                                                                                                    // 33\n  gridRowSpan: true,                                                                                                   // 34\n  gridRowStart: true,                                                                                                  // 35\n  gridColumn: true,                                                                                                    // 36\n  gridColumnEnd: true,                                                                                                 // 37\n  gridColumnSpan: true,                                                                                                // 38\n  gridColumnStart: true,                                                                                               // 39\n  fontWeight: true,                                                                                                    // 40\n  lineClamp: true,                                                                                                     // 41\n  lineHeight: true,                                                                                                    // 42\n  opacity: true,                                                                                                       // 43\n  order: true,                                                                                                         // 44\n  orphans: true,                                                                                                       // 45\n  tabSize: true,                                                                                                       // 46\n  widows: true,                                                                                                        // 47\n  zIndex: true,                                                                                                        // 48\n  zoom: true,                                                                                                          // 49\n                                                                                                                       // 50\n  // SVG-related properties                                                                                            // 51\n  fillOpacity: true,                                                                                                   // 52\n  floodOpacity: true,                                                                                                  // 53\n  stopOpacity: true,                                                                                                   // 54\n  strokeDasharray: true,                                                                                               // 55\n  strokeDashoffset: true,                                                                                              // 56\n  strokeMiterlimit: true,                                                                                              // 57\n  strokeOpacity: true,                                                                                                 // 58\n  strokeWidth: true                                                                                                    // 59\n};                                                                                                                     // 60\n                                                                                                                       // 61\n/**                                                                                                                    // 62\n * @param {string} prefix vendor-specific prefix, eg: Webkit                                                           // 63\n * @param {string} key style name, eg: transitionDuration                                                              // 64\n * @return {string} style name prefixed with `prefix`, properly camelCased, eg:                                        // 65\n * WebkitTransitionDuration                                                                                            // 66\n */                                                                                                                    // 67\nfunction prefixKey(prefix, key) {                                                                                      // 68\n  return prefix + key.charAt(0).toUpperCase() + key.substring(1);                                                      // 69\n}                                                                                                                      // 70\n                                                                                                                       // 71\n/**                                                                                                                    // 72\n * Support style names that may come passed in prefixed by adding permutations                                         // 73\n * of vendor prefixes.                                                                                                 // 74\n */                                                                                                                    // 75\nvar prefixes = ['Webkit', 'ms', 'Moz', 'O'];                                                                           // 76\n                                                                                                                       // 77\n// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an                                        // 78\n// infinite loop, because it iterates over the newly added props too.                                                  // 79\nObject.keys(isUnitlessNumber).forEach(function (prop) {                                                                // 80\n  prefixes.forEach(function (prefix) {                                                                                 // 81\n    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];                                                // 82\n  });                                                                                                                  // 83\n});                                                                                                                    // 84\n                                                                                                                       // 85\n/**                                                                                                                    // 86\n * Most style properties can be unset by doing .style[prop] = '' but IE8                                               // 87\n * doesn't like doing that with shorthand properties so for the properties that                                        // 88\n * IE8 breaks on, which are listed here, we instead unset each of the                                                  // 89\n * individual properties. See http://bugs.jquery.com/ticket/12385.                                                     // 90\n * The 4-value 'clock' properties like margin, padding, border-width seem to                                           // 91\n * behave without any problems. Curiously, list-style works too without any                                            // 92\n * special prodding.                                                                                                   // 93\n */                                                                                                                    // 94\nvar shorthandPropertyExpansions = {                                                                                    // 95\n  background: {                                                                                                        // 96\n    backgroundAttachment: true,                                                                                        // 97\n    backgroundColor: true,                                                                                             // 98\n    backgroundImage: true,                                                                                             // 99\n    backgroundPositionX: true,                                                                                         // 100\n    backgroundPositionY: true,                                                                                         // 101\n    backgroundRepeat: true                                                                                             // 102\n  },                                                                                                                   // 103\n  backgroundPosition: {                                                                                                // 104\n    backgroundPositionX: true,                                                                                         // 105\n    backgroundPositionY: true                                                                                          // 106\n  },                                                                                                                   // 107\n  border: {                                                                                                            // 108\n    borderWidth: true,                                                                                                 // 109\n    borderStyle: true,                                                                                                 // 110\n    borderColor: true                                                                                                  // 111\n  },                                                                                                                   // 112\n  borderBottom: {                                                                                                      // 113\n    borderBottomWidth: true,                                                                                           // 114\n    borderBottomStyle: true,                                                                                           // 115\n    borderBottomColor: true                                                                                            // 116\n  },                                                                                                                   // 117\n  borderLeft: {                                                                                                        // 118\n    borderLeftWidth: true,                                                                                             // 119\n    borderLeftStyle: true,                                                                                             // 120\n    borderLeftColor: true                                                                                              // 121\n  },                                                                                                                   // 122\n  borderRight: {                                                                                                       // 123\n    borderRightWidth: true,                                                                                            // 124\n    borderRightStyle: true,                                                                                            // 125\n    borderRightColor: true                                                                                             // 126\n  },                                                                                                                   // 127\n  borderTop: {                                                                                                         // 128\n    borderTopWidth: true,                                                                                              // 129\n    borderTopStyle: true,                                                                                              // 130\n    borderTopColor: true                                                                                               // 131\n  },                                                                                                                   // 132\n  font: {                                                                                                              // 133\n    fontStyle: true,                                                                                                   // 134\n    fontVariant: true,                                                                                                 // 135\n    fontWeight: true,                                                                                                  // 136\n    fontSize: true,                                                                                                    // 137\n    lineHeight: true,                                                                                                  // 138\n    fontFamily: true                                                                                                   // 139\n  },                                                                                                                   // 140\n  outline: {                                                                                                           // 141\n    outlineWidth: true,                                                                                                // 142\n    outlineStyle: true,                                                                                                // 143\n    outlineColor: true                                                                                                 // 144\n  }                                                                                                                    // 145\n};                                                                                                                     // 146\n                                                                                                                       // 147\nvar CSSProperty = {                                                                                                    // 148\n  isUnitlessNumber: isUnitlessNumber,                                                                                  // 149\n  shorthandPropertyExpansions: shorthandPropertyExpansions                                                             // 150\n};                                                                                                                     // 151\n                                                                                                                       // 152\nmodule.exports = CSSProperty;                                                                                          // 153\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"dangerousStyleValue.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/dangerousStyleValue.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar CSSProperty = require('./CSSProperty');                                                                            // 13\nvar warning = require('fbjs/lib/warning');                                                                             // 14\n                                                                                                                       // 15\nvar isUnitlessNumber = CSSProperty.isUnitlessNumber;                                                                   // 16\nvar styleWarnings = {};                                                                                                // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * Convert a value into the proper css writable value. The style name `name`                                           // 20\n * should be logical (no hyphens), as specified                                                                        // 21\n * in `CSSProperty.isUnitlessNumber`.                                                                                  // 22\n *                                                                                                                     // 23\n * @param {string} name CSS property name such as `topMargin`.                                                         // 24\n * @param {*} value CSS property value such as `10px`.                                                                 // 25\n * @param {ReactDOMComponent} component                                                                                // 26\n * @return {string} Normalized style value with dimensions applied.                                                    // 27\n */                                                                                                                    // 28\nfunction dangerousStyleValue(name, value, component, isCustomProperty) {                                               // 29\n  // Note that we've removed escapeTextForBrowser() calls here since the                                               // 30\n  // whole string will be escaped when the attribute is injected into                                                  // 31\n  // the markup. If you provide unsafe user data here they can inject                                                  // 32\n  // arbitrary CSS which may be problematic (I couldn't repro this):                                                   // 33\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet                                                    // 34\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/                                                // 35\n  // This is not an XSS hole but instead a potential CSS injection issue                                               // 36\n  // which has lead to a greater discussion about how we're going to                                                   // 37\n  // trust URLs moving forward. See #2115901                                                                           // 38\n                                                                                                                       // 39\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';                                           // 40\n  if (isEmpty) {                                                                                                       // 41\n    return '';                                                                                                         // 42\n  }                                                                                                                    // 43\n                                                                                                                       // 44\n  var isNonNumeric = isNaN(value);                                                                                     // 45\n  if (isCustomProperty || isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {\n    return '' + value; // cast to string                                                                               // 47\n  }                                                                                                                    // 48\n                                                                                                                       // 49\n  if (typeof value === 'string') {                                                                                     // 50\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 51\n      // Allow '0' to pass through without warning. 0 is already special and                                           // 52\n      // doesn't require units, so we don't need to warn about it.                                                     // 53\n      if (component && value !== '0') {                                                                                // 54\n        var owner = component._currentElement._owner;                                                                  // 55\n        var ownerName = owner ? owner.getName() : null;                                                                // 56\n        if (ownerName && !styleWarnings[ownerName]) {                                                                  // 57\n          styleWarnings[ownerName] = {};                                                                               // 58\n        }                                                                                                              // 59\n        var warned = false;                                                                                            // 60\n        if (ownerName) {                                                                                               // 61\n          var warnings = styleWarnings[ownerName];                                                                     // 62\n          warned = warnings[name];                                                                                     // 63\n          if (!warned) {                                                                                               // 64\n            warnings[name] = true;                                                                                     // 65\n          }                                                                                                            // 66\n        }                                                                                                              // 67\n        if (!warned) {                                                                                                 // 68\n          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;\n        }                                                                                                              // 70\n      }                                                                                                                // 71\n    }                                                                                                                  // 72\n    value = value.trim();                                                                                              // 73\n  }                                                                                                                    // 74\n  return value + 'px';                                                                                                 // 75\n}                                                                                                                      // 76\n                                                                                                                       // 77\nmodule.exports = dangerousStyleValue;                                                                                  // 78\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"DOMPropertyOperations.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/DOMPropertyOperations.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar DOMProperty = require('./DOMProperty');                                                                            // 13\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 14\nvar ReactInstrumentation = require('./ReactInstrumentation');                                                          // 15\n                                                                                                                       // 16\nvar quoteAttributeValueForBrowser = require('./quoteAttributeValueForBrowser');                                        // 17\nvar warning = require('fbjs/lib/warning');                                                                             // 18\n                                                                                                                       // 19\nvar VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');\nvar illegalAttributeNameCache = {};                                                                                    // 21\nvar validatedAttributeNameCache = {};                                                                                  // 22\n                                                                                                                       // 23\nfunction isAttributeNameSafe(attributeName) {                                                                          // 24\n  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {                                                     // 25\n    return true;                                                                                                       // 26\n  }                                                                                                                    // 27\n  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {                                                       // 28\n    return false;                                                                                                      // 29\n  }                                                                                                                    // 30\n  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {                                                                // 31\n    validatedAttributeNameCache[attributeName] = true;                                                                 // 32\n    return true;                                                                                                       // 33\n  }                                                                                                                    // 34\n  illegalAttributeNameCache[attributeName] = true;                                                                     // 35\n  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;      // 36\n  return false;                                                                                                        // 37\n}                                                                                                                      // 38\n                                                                                                                       // 39\nfunction shouldIgnoreValue(propertyInfo, value) {                                                                      // 40\n  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;\n}                                                                                                                      // 42\n                                                                                                                       // 43\n/**                                                                                                                    // 44\n * Operations for dealing with DOM properties.                                                                         // 45\n */                                                                                                                    // 46\nvar DOMPropertyOperations = {                                                                                          // 47\n  /**                                                                                                                  // 48\n   * Creates markup for the ID property.                                                                               // 49\n   *                                                                                                                   // 50\n   * @param {string} id Unescaped ID.                                                                                  // 51\n   * @return {string} Markup string.                                                                                   // 52\n   */                                                                                                                  // 53\n  createMarkupForID: function (id) {                                                                                   // 54\n    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);                                    // 55\n  },                                                                                                                   // 56\n                                                                                                                       // 57\n  setAttributeForID: function (node, id) {                                                                             // 58\n    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);                                                              // 59\n  },                                                                                                                   // 60\n                                                                                                                       // 61\n  createMarkupForRoot: function () {                                                                                   // 62\n    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=\"\"';                                                                    // 63\n  },                                                                                                                   // 64\n                                                                                                                       // 65\n  setAttributeForRoot: function (node) {                                                                               // 66\n    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');                                                            // 67\n  },                                                                                                                   // 68\n                                                                                                                       // 69\n  /**                                                                                                                  // 70\n   * Creates markup for a property.                                                                                    // 71\n   *                                                                                                                   // 72\n   * @param {string} name                                                                                              // 73\n   * @param {*} value                                                                                                  // 74\n   * @return {?string} Markup string, or null if the property was invalid.                                             // 75\n   */                                                                                                                  // 76\n  createMarkupForProperty: function (name, value) {                                                                    // 77\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;              // 78\n    if (propertyInfo) {                                                                                                // 79\n      if (shouldIgnoreValue(propertyInfo, value)) {                                                                    // 80\n        return '';                                                                                                     // 81\n      }                                                                                                                // 82\n      var attributeName = propertyInfo.attributeName;                                                                  // 83\n      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {                  // 84\n        return attributeName + '=\"\"';                                                                                  // 85\n      }                                                                                                                // 86\n      return attributeName + '=' + quoteAttributeValueForBrowser(value);                                               // 87\n    } else if (DOMProperty.isCustomAttribute(name)) {                                                                  // 88\n      if (value == null) {                                                                                             // 89\n        return '';                                                                                                     // 90\n      }                                                                                                                // 91\n      return name + '=' + quoteAttributeValueForBrowser(value);                                                        // 92\n    }                                                                                                                  // 93\n    return null;                                                                                                       // 94\n  },                                                                                                                   // 95\n                                                                                                                       // 96\n  /**                                                                                                                  // 97\n   * Creates markup for a custom property.                                                                             // 98\n   *                                                                                                                   // 99\n   * @param {string} name                                                                                              // 100\n   * @param {*} value                                                                                                  // 101\n   * @return {string} Markup string, or empty string if the property was invalid.                                      // 102\n   */                                                                                                                  // 103\n  createMarkupForCustomAttribute: function (name, value) {                                                             // 104\n    if (!isAttributeNameSafe(name) || value == null) {                                                                 // 105\n      return '';                                                                                                       // 106\n    }                                                                                                                  // 107\n    return name + '=' + quoteAttributeValueForBrowser(value);                                                          // 108\n  },                                                                                                                   // 109\n                                                                                                                       // 110\n  /**                                                                                                                  // 111\n   * Sets the value for a property on a node.                                                                          // 112\n   *                                                                                                                   // 113\n   * @param {DOMElement} node                                                                                          // 114\n   * @param {string} name                                                                                              // 115\n   * @param {*} value                                                                                                  // 116\n   */                                                                                                                  // 117\n  setValueForProperty: function (node, name, value) {                                                                  // 118\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;              // 119\n    if (propertyInfo) {                                                                                                // 120\n      var mutationMethod = propertyInfo.mutationMethod;                                                                // 121\n      if (mutationMethod) {                                                                                            // 122\n        mutationMethod(node, value);                                                                                   // 123\n      } else if (shouldIgnoreValue(propertyInfo, value)) {                                                             // 124\n        this.deleteValueForProperty(node, name);                                                                       // 125\n        return;                                                                                                        // 126\n      } else if (propertyInfo.mustUseProperty) {                                                                       // 127\n        // Contrary to `setAttribute`, object properties are properly                                                  // 128\n        // `toString`ed by IE8/9.                                                                                      // 129\n        node[propertyInfo.propertyName] = value;                                                                       // 130\n      } else {                                                                                                         // 131\n        var attributeName = propertyInfo.attributeName;                                                                // 132\n        var namespace = propertyInfo.attributeNamespace;                                                               // 133\n        // `setAttribute` with objects becomes only `[object]` in IE8/9,                                               // 134\n        // ('' + value) makes it output the correct toString()-value.                                                  // 135\n        if (namespace) {                                                                                               // 136\n          node.setAttributeNS(namespace, attributeName, '' + value);                                                   // 137\n        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {         // 138\n          node.setAttribute(attributeName, '');                                                                        // 139\n        } else {                                                                                                       // 140\n          node.setAttribute(attributeName, '' + value);                                                                // 141\n        }                                                                                                              // 142\n      }                                                                                                                // 143\n    } else if (DOMProperty.isCustomAttribute(name)) {                                                                  // 144\n      DOMPropertyOperations.setValueForAttribute(node, name, value);                                                   // 145\n      return;                                                                                                          // 146\n    }                                                                                                                  // 147\n                                                                                                                       // 148\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 149\n      var payload = {};                                                                                                // 150\n      payload[name] = value;                                                                                           // 151\n      ReactInstrumentation.debugTool.onHostOperation({                                                                 // 152\n        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,                                          // 153\n        type: 'update attribute',                                                                                      // 154\n        payload: payload                                                                                               // 155\n      });                                                                                                              // 156\n    }                                                                                                                  // 157\n  },                                                                                                                   // 158\n                                                                                                                       // 159\n  setValueForAttribute: function (node, name, value) {                                                                 // 160\n    if (!isAttributeNameSafe(name)) {                                                                                  // 161\n      return;                                                                                                          // 162\n    }                                                                                                                  // 163\n    if (value == null) {                                                                                               // 164\n      node.removeAttribute(name);                                                                                      // 165\n    } else {                                                                                                           // 166\n      node.setAttribute(name, '' + value);                                                                             // 167\n    }                                                                                                                  // 168\n                                                                                                                       // 169\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 170\n      var payload = {};                                                                                                // 171\n      payload[name] = value;                                                                                           // 172\n      ReactInstrumentation.debugTool.onHostOperation({                                                                 // 173\n        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,                                          // 174\n        type: 'update attribute',                                                                                      // 175\n        payload: payload                                                                                               // 176\n      });                                                                                                              // 177\n    }                                                                                                                  // 178\n  },                                                                                                                   // 179\n                                                                                                                       // 180\n  /**                                                                                                                  // 181\n   * Deletes an attributes from a node.                                                                                // 182\n   *                                                                                                                   // 183\n   * @param {DOMElement} node                                                                                          // 184\n   * @param {string} name                                                                                              // 185\n   */                                                                                                                  // 186\n  deleteValueForAttribute: function (node, name) {                                                                     // 187\n    node.removeAttribute(name);                                                                                        // 188\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 189\n      ReactInstrumentation.debugTool.onHostOperation({                                                                 // 190\n        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,                                          // 191\n        type: 'remove attribute',                                                                                      // 192\n        payload: name                                                                                                  // 193\n      });                                                                                                              // 194\n    }                                                                                                                  // 195\n  },                                                                                                                   // 196\n                                                                                                                       // 197\n  /**                                                                                                                  // 198\n   * Deletes the value for a property on a node.                                                                       // 199\n   *                                                                                                                   // 200\n   * @param {DOMElement} node                                                                                          // 201\n   * @param {string} name                                                                                              // 202\n   */                                                                                                                  // 203\n  deleteValueForProperty: function (node, name) {                                                                      // 204\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;              // 205\n    if (propertyInfo) {                                                                                                // 206\n      var mutationMethod = propertyInfo.mutationMethod;                                                                // 207\n      if (mutationMethod) {                                                                                            // 208\n        mutationMethod(node, undefined);                                                                               // 209\n      } else if (propertyInfo.mustUseProperty) {                                                                       // 210\n        var propName = propertyInfo.propertyName;                                                                      // 211\n        if (propertyInfo.hasBooleanValue) {                                                                            // 212\n          node[propName] = false;                                                                                      // 213\n        } else {                                                                                                       // 214\n          node[propName] = '';                                                                                         // 215\n        }                                                                                                              // 216\n      } else {                                                                                                         // 217\n        node.removeAttribute(propertyInfo.attributeName);                                                              // 218\n      }                                                                                                                // 219\n    } else if (DOMProperty.isCustomAttribute(name)) {                                                                  // 220\n      node.removeAttribute(name);                                                                                      // 221\n    }                                                                                                                  // 222\n                                                                                                                       // 223\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 224\n      ReactInstrumentation.debugTool.onHostOperation({                                                                 // 225\n        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,                                          // 226\n        type: 'remove attribute',                                                                                      // 227\n        payload: name                                                                                                  // 228\n      });                                                                                                              // 229\n    }                                                                                                                  // 230\n  }                                                                                                                    // 231\n};                                                                                                                     // 232\n                                                                                                                       // 233\nmodule.exports = DOMPropertyOperations;                                                                                // 234\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"quoteAttributeValueForBrowser.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/quoteAttributeValueForBrowser.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');                                            // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Escapes attribute value to prevent scripting attacks.                                                               // 16\n *                                                                                                                     // 17\n * @param {*} value Value to escape.                                                                                   // 18\n * @return {string} An escaped string.                                                                                 // 19\n */                                                                                                                    // 20\nfunction quoteAttributeValueForBrowser(value) {                                                                        // 21\n  return '\"' + escapeTextContentForBrowser(value) + '\"';                                                               // 22\n}                                                                                                                      // 23\n                                                                                                                       // 24\nmodule.exports = quoteAttributeValueForBrowser;                                                                        // 25\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactBrowserEventEmitter.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactBrowserEventEmitter.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _assign = require('object-assign');                                                                                // 13\n                                                                                                                       // 14\nvar EventPluginRegistry = require('./EventPluginRegistry');                                                            // 15\nvar ReactEventEmitterMixin = require('./ReactEventEmitterMixin');                                                      // 16\nvar ViewportMetrics = require('./ViewportMetrics');                                                                    // 17\n                                                                                                                       // 18\nvar getVendorPrefixedEventName = require('./getVendorPrefixedEventName');                                              // 19\nvar isEventSupported = require('./isEventSupported');                                                                  // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n * Summary of `ReactBrowserEventEmitter` event handling:                                                               // 23\n *                                                                                                                     // 24\n *  - Top-level delegation is used to trap most native browser events. This                                            // 25\n *    may only occur in the main thread and is the responsibility of                                                   // 26\n *    ReactEventListener, which is injected and can therefore support pluggable                                        // 27\n *    event sources. This is the only work that occurs in the main thread.                                             // 28\n *                                                                                                                     // 29\n *  - We normalize and de-duplicate events to account for browser quirks. This                                         // 30\n *    may be done in the worker thread.                                                                                // 31\n *                                                                                                                     // 32\n *  - Forward these native events (with the associated top-level type used to                                          // 33\n *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want                                        // 34\n *    to extract any synthetic events.                                                                                 // 35\n *                                                                                                                     // 36\n *  - The `EventPluginHub` will then process each event by annotating them with                                        // 37\n *    \"dispatches\", a sequence of listeners and IDs that care about that event.                                        // 38\n *                                                                                                                     // 39\n *  - The `EventPluginHub` then dispatches the events.                                                                 // 40\n *                                                                                                                     // 41\n * Overview of React and the event system:                                                                             // 42\n *                                                                                                                     // 43\n * +------------+    .                                                                                                 // 44\n * |    DOM     |    .                                                                                                 // 45\n * +------------+    .                                                                                                 // 46\n *       |           .                                                                                                 // 47\n *       v           .                                                                                                 // 48\n * +------------+    .                                                                                                 // 49\n * | ReactEvent |    .                                                                                                 // 50\n * |  Listener  |    .                                                                                                 // 51\n * +------------+    .                         +-----------+                                                           // 52\n *       |           .               +--------+|SimpleEvent|                                                           // 53\n *       |           .               |         |Plugin     |                                                           // 54\n * +-----|------+    .               v         +-----------+                                                           // 55\n * |     |      |    .    +--------------+                    +------------+                                           // 56\n * |     +-----------.--->|EventPluginHub|                    |    Event   |                                           // 57\n * |            |    .    |              |     +-----------+  | Propagators|                                           // 58\n * | ReactEvent |    .    |              |     |TapEvent   |  |------------|                                           // 59\n * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|                                           // 60\n * |            |    .    |              |     +-----------+  |  utilities |                                           // 61\n * |     +-----------.--->|              |                    +------------+                                           // 62\n * |     |      |    .    +--------------+                                                                             // 63\n * +-----|------+    .                ^        +-----------+                                                           // 64\n *       |           .                |        |Enter/Leave|                                                           // 65\n *       +           .                +-------+|Plugin     |                                                           // 66\n * +-------------+   .                         +-----------+                                                           // 67\n * | application |   .                                                                                                 // 68\n * |-------------|   .                                                                                                 // 69\n * |             |   .                                                                                                 // 70\n * |             |   .                                                                                                 // 71\n * +-------------+   .                                                                                                 // 72\n *                   .                                                                                                 // 73\n *    React Core     .  General Purpose Event Plugin System                                                            // 74\n */                                                                                                                    // 75\n                                                                                                                       // 76\nvar hasEventPageXY;                                                                                                    // 77\nvar alreadyListeningTo = {};                                                                                           // 78\nvar isMonitoringScrollValue = false;                                                                                   // 79\nvar reactTopListenersCounter = 0;                                                                                      // 80\n                                                                                                                       // 81\n// For events like 'submit' which don't consistently bubble (which we trap at a                                        // 82\n// lower node than `document`), binding at `document` would cause duplicate                                            // 83\n// events so we don't include them here                                                                                // 84\nvar topEventMapping = {                                                                                                // 85\n  topAbort: 'abort',                                                                                                   // 86\n  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',                                       // 87\n  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',                     // 88\n  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',                                 // 89\n  topBlur: 'blur',                                                                                                     // 90\n  topCanPlay: 'canplay',                                                                                               // 91\n  topCanPlayThrough: 'canplaythrough',                                                                                 // 92\n  topChange: 'change',                                                                                                 // 93\n  topClick: 'click',                                                                                                   // 94\n  topCompositionEnd: 'compositionend',                                                                                 // 95\n  topCompositionStart: 'compositionstart',                                                                             // 96\n  topCompositionUpdate: 'compositionupdate',                                                                           // 97\n  topContextMenu: 'contextmenu',                                                                                       // 98\n  topCopy: 'copy',                                                                                                     // 99\n  topCut: 'cut',                                                                                                       // 100\n  topDoubleClick: 'dblclick',                                                                                          // 101\n  topDrag: 'drag',                                                                                                     // 102\n  topDragEnd: 'dragend',                                                                                               // 103\n  topDragEnter: 'dragenter',                                                                                           // 104\n  topDragExit: 'dragexit',                                                                                             // 105\n  topDragLeave: 'dragleave',                                                                                           // 106\n  topDragOver: 'dragover',                                                                                             // 107\n  topDragStart: 'dragstart',                                                                                           // 108\n  topDrop: 'drop',                                                                                                     // 109\n  topDurationChange: 'durationchange',                                                                                 // 110\n  topEmptied: 'emptied',                                                                                               // 111\n  topEncrypted: 'encrypted',                                                                                           // 112\n  topEnded: 'ended',                                                                                                   // 113\n  topError: 'error',                                                                                                   // 114\n  topFocus: 'focus',                                                                                                   // 115\n  topInput: 'input',                                                                                                   // 116\n  topKeyDown: 'keydown',                                                                                               // 117\n  topKeyPress: 'keypress',                                                                                             // 118\n  topKeyUp: 'keyup',                                                                                                   // 119\n  topLoadedData: 'loadeddata',                                                                                         // 120\n  topLoadedMetadata: 'loadedmetadata',                                                                                 // 121\n  topLoadStart: 'loadstart',                                                                                           // 122\n  topMouseDown: 'mousedown',                                                                                           // 123\n  topMouseMove: 'mousemove',                                                                                           // 124\n  topMouseOut: 'mouseout',                                                                                             // 125\n  topMouseOver: 'mouseover',                                                                                           // 126\n  topMouseUp: 'mouseup',                                                                                               // 127\n  topPaste: 'paste',                                                                                                   // 128\n  topPause: 'pause',                                                                                                   // 129\n  topPlay: 'play',                                                                                                     // 130\n  topPlaying: 'playing',                                                                                               // 131\n  topProgress: 'progress',                                                                                             // 132\n  topRateChange: 'ratechange',                                                                                         // 133\n  topScroll: 'scroll',                                                                                                 // 134\n  topSeeked: 'seeked',                                                                                                 // 135\n  topSeeking: 'seeking',                                                                                               // 136\n  topSelectionChange: 'selectionchange',                                                                               // 137\n  topStalled: 'stalled',                                                                                               // 138\n  topSuspend: 'suspend',                                                                                               // 139\n  topTextInput: 'textInput',                                                                                           // 140\n  topTimeUpdate: 'timeupdate',                                                                                         // 141\n  topTouchCancel: 'touchcancel',                                                                                       // 142\n  topTouchEnd: 'touchend',                                                                                             // 143\n  topTouchMove: 'touchmove',                                                                                           // 144\n  topTouchStart: 'touchstart',                                                                                         // 145\n  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',                                    // 146\n  topVolumeChange: 'volumechange',                                                                                     // 147\n  topWaiting: 'waiting',                                                                                               // 148\n  topWheel: 'wheel'                                                                                                    // 149\n};                                                                                                                     // 150\n                                                                                                                       // 151\n/**                                                                                                                    // 152\n * To ensure no conflicts with other potential React instances on the page                                             // 153\n */                                                                                                                    // 154\nvar topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);                                          // 155\n                                                                                                                       // 156\nfunction getListeningForDocument(mountAt) {                                                                            // 157\n  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`                                              // 158\n  // directly.                                                                                                         // 159\n  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {                                             // 160\n    mountAt[topListenersIDKey] = reactTopListenersCounter++;                                                           // 161\n    alreadyListeningTo[mountAt[topListenersIDKey]] = {};                                                               // 162\n  }                                                                                                                    // 163\n  return alreadyListeningTo[mountAt[topListenersIDKey]];                                                               // 164\n}                                                                                                                      // 165\n                                                                                                                       // 166\n/**                                                                                                                    // 167\n * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For                                         // 168\n * example:                                                                                                            // 169\n *                                                                                                                     // 170\n *   EventPluginHub.putListener('myID', 'onClick', myFunction);                                                        // 171\n *                                                                                                                     // 172\n * This would allocate a \"registration\" of `('onClick', myFunction)` on 'myID'.                                        // 173\n *                                                                                                                     // 174\n * @internal                                                                                                           // 175\n */                                                                                                                    // 176\nvar ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {                                                   // 177\n  /**                                                                                                                  // 178\n   * Injectable event backend                                                                                          // 179\n   */                                                                                                                  // 180\n  ReactEventListener: null,                                                                                            // 181\n                                                                                                                       // 182\n  injection: {                                                                                                         // 183\n    /**                                                                                                                // 184\n     * @param {object} ReactEventListener                                                                              // 185\n     */                                                                                                                // 186\n    injectReactEventListener: function (ReactEventListener) {                                                          // 187\n      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);                                   // 188\n      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;                                                // 189\n    }                                                                                                                  // 190\n  },                                                                                                                   // 191\n                                                                                                                       // 192\n  /**                                                                                                                  // 193\n   * Sets whether or not any created callbacks should be enabled.                                                      // 194\n   *                                                                                                                   // 195\n   * @param {boolean} enabled True if callbacks should be enabled.                                                     // 196\n   */                                                                                                                  // 197\n  setEnabled: function (enabled) {                                                                                     // 198\n    if (ReactBrowserEventEmitter.ReactEventListener) {                                                                 // 199\n      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);                                                 // 200\n    }                                                                                                                  // 201\n  },                                                                                                                   // 202\n                                                                                                                       // 203\n  /**                                                                                                                  // 204\n   * @return {boolean} True if callbacks are enabled.                                                                  // 205\n   */                                                                                                                  // 206\n  isEnabled: function () {                                                                                             // 207\n    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());\n  },                                                                                                                   // 209\n                                                                                                                       // 210\n  /**                                                                                                                  // 211\n   * We listen for bubbled touch events on the document object.                                                        // 212\n   *                                                                                                                   // 213\n   * Firefox v8.01 (and possibly others) exhibited strange behavior when                                               // 214\n   * mounting `onmousemove` events at some node that was not the document                                              // 215\n   * element. The symptoms were that if your mouse is not moving over something                                        // 216\n   * contained within that mount point (for example on the background) the                                             // 217\n   * top-level listeners for `onmousemove` won't be called. However, if you                                            // 218\n   * register the `mousemove` on the document object, then it will of course                                           // 219\n   * catch all `mousemove`s. This along with iOS quirks, justifies restricting                                         // 220\n   * top-level listeners to the document object only, at least for these                                               // 221\n   * movement types of events and possibly all events.                                                                 // 222\n   *                                                                                                                   // 223\n   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html                                         // 224\n   *                                                                                                                   // 225\n   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but                                         // 226\n   * they bubble to document.                                                                                          // 227\n   *                                                                                                                   // 228\n   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 229\n   * @param {object} contentDocumentHandle Document which owns the container                                           // 230\n   */                                                                                                                  // 231\n  listenTo: function (registrationName, contentDocumentHandle) {                                                       // 232\n    var mountAt = contentDocumentHandle;                                                                               // 233\n    var isListening = getListeningForDocument(mountAt);                                                                // 234\n    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];                             // 235\n                                                                                                                       // 236\n    for (var i = 0; i < dependencies.length; i++) {                                                                    // 237\n      var dependency = dependencies[i];                                                                                // 238\n      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {                                      // 239\n        if (dependency === 'topWheel') {                                                                               // 240\n          if (isEventSupported('wheel')) {                                                                             // 241\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);                // 242\n          } else if (isEventSupported('mousewheel')) {                                                                 // 243\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);           // 244\n          } else {                                                                                                     // 245\n            // Firefox needs to capture a different mouse scroll event.                                                // 246\n            // @see http://www.quirksmode.org/dom/events/tests/scroll.html                                             // 247\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);       // 248\n          }                                                                                                            // 249\n        } else if (dependency === 'topScroll') {                                                                       // 250\n          if (isEventSupported('scroll', true)) {                                                                      // 251\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);             // 252\n          } else {                                                                                                     // 253\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);\n          }                                                                                                            // 255\n        } else if (dependency === 'topFocus' || dependency === 'topBlur') {                                            // 256\n          if (isEventSupported('focus', true)) {                                                                       // 257\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);               // 258\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);                 // 259\n          } else if (isEventSupported('focusin')) {                                                                    // 260\n            // IE has `focusin` and `focusout` events which bubble.                                                    // 261\n            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html                                // 262\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);              // 263\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);              // 264\n          }                                                                                                            // 265\n                                                                                                                       // 266\n          // to make sure blur and focus event listeners are only attached once                                        // 267\n          isListening.topBlur = true;                                                                                  // 268\n          isListening.topFocus = true;                                                                                 // 269\n        } else if (topEventMapping.hasOwnProperty(dependency)) {                                                       // 270\n          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);\n        }                                                                                                              // 272\n                                                                                                                       // 273\n        isListening[dependency] = true;                                                                                // 274\n      }                                                                                                                // 275\n    }                                                                                                                  // 276\n  },                                                                                                                   // 277\n                                                                                                                       // 278\n  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {                                                 // 279\n    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);        // 280\n  },                                                                                                                   // 281\n                                                                                                                       // 282\n  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {                                                // 283\n    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);       // 284\n  },                                                                                                                   // 285\n                                                                                                                       // 286\n  /**                                                                                                                  // 287\n   * Protect against document.createEvent() returning null                                                             // 288\n   * Some popup blocker extensions appear to do this:                                                                  // 289\n   * https://github.com/facebook/react/issues/6887                                                                     // 290\n   */                                                                                                                  // 291\n  supportsEventPageXY: function () {                                                                                   // 292\n    if (!document.createEvent) {                                                                                       // 293\n      return false;                                                                                                    // 294\n    }                                                                                                                  // 295\n    var ev = document.createEvent('MouseEvent');                                                                       // 296\n    return ev != null && 'pageX' in ev;                                                                                // 297\n  },                                                                                                                   // 298\n                                                                                                                       // 299\n  /**                                                                                                                  // 300\n   * Listens to window scroll and resize events. We cache scroll values so that                                        // 301\n   * application code can access them without triggering reflows.                                                      // 302\n   *                                                                                                                   // 303\n   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when                                           // 304\n   * pageX/pageY isn't supported (legacy browsers).                                                                    // 305\n   *                                                                                                                   // 306\n   * NOTE: Scroll events do not bubble.                                                                                // 307\n   *                                                                                                                   // 308\n   * @see http://www.quirksmode.org/dom/events/scroll.html                                                             // 309\n   */                                                                                                                  // 310\n  ensureScrollValueMonitoring: function () {                                                                           // 311\n    if (hasEventPageXY === undefined) {                                                                                // 312\n      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();                                                 // 313\n    }                                                                                                                  // 314\n    if (!hasEventPageXY && !isMonitoringScrollValue) {                                                                 // 315\n      var refresh = ViewportMetrics.refreshScrollValues;                                                               // 316\n      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);                                         // 317\n      isMonitoringScrollValue = true;                                                                                  // 318\n    }                                                                                                                  // 319\n  }                                                                                                                    // 320\n});                                                                                                                    // 321\n                                                                                                                       // 322\nmodule.exports = ReactBrowserEventEmitter;                                                                             // 323\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactEventEmitterMixin.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactEventEmitterMixin.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar EventPluginHub = require('./EventPluginHub');                                                                      // 13\n                                                                                                                       // 14\nfunction runEventQueueInBatch(events) {                                                                                // 15\n  EventPluginHub.enqueueEvents(events);                                                                                // 16\n  EventPluginHub.processEventQueue(false);                                                                             // 17\n}                                                                                                                      // 18\n                                                                                                                       // 19\nvar ReactEventEmitterMixin = {                                                                                         // 20\n  /**                                                                                                                  // 21\n   * Streams a fired top-level event to `EventPluginHub` where plugins have the                                        // 22\n   * opportunity to create `ReactEvent`s to be dispatched.                                                             // 23\n   */                                                                                                                  // 24\n  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {                                // 25\n    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);               // 26\n    runEventQueueInBatch(events);                                                                                      // 27\n  }                                                                                                                    // 28\n};                                                                                                                     // 29\n                                                                                                                       // 30\nmodule.exports = ReactEventEmitterMixin;                                                                               // 31\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getVendorPrefixedEventName.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/getVendorPrefixedEventName.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Generate a mapping of standard vendor prefixes using the defined style property and event name.                     // 16\n *                                                                                                                     // 17\n * @param {string} styleProp                                                                                           // 18\n * @param {string} eventName                                                                                           // 19\n * @returns {object}                                                                                                   // 20\n */                                                                                                                    // 21\nfunction makePrefixMap(styleProp, eventName) {                                                                         // 22\n  var prefixes = {};                                                                                                   // 23\n                                                                                                                       // 24\n  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();                                                         // 25\n  prefixes['Webkit' + styleProp] = 'webkit' + eventName;                                                               // 26\n  prefixes['Moz' + styleProp] = 'moz' + eventName;                                                                     // 27\n  prefixes['ms' + styleProp] = 'MS' + eventName;                                                                       // 28\n  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();                                                           // 29\n                                                                                                                       // 30\n  return prefixes;                                                                                                     // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\n/**                                                                                                                    // 34\n * A list of event names to a configurable list of vendor prefixes.                                                    // 35\n */                                                                                                                    // 36\nvar vendorPrefixes = {                                                                                                 // 37\n  animationend: makePrefixMap('Animation', 'AnimationEnd'),                                                            // 38\n  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),                                                // 39\n  animationstart: makePrefixMap('Animation', 'AnimationStart'),                                                        // 40\n  transitionend: makePrefixMap('Transition', 'TransitionEnd')                                                          // 41\n};                                                                                                                     // 42\n                                                                                                                       // 43\n/**                                                                                                                    // 44\n * Event names that have already been detected and prefixed (if applicable).                                           // 45\n */                                                                                                                    // 46\nvar prefixedEventNames = {};                                                                                           // 47\n                                                                                                                       // 48\n/**                                                                                                                    // 49\n * Element to check for prefixes on.                                                                                   // 50\n */                                                                                                                    // 51\nvar style = {};                                                                                                        // 52\n                                                                                                                       // 53\n/**                                                                                                                    // 54\n * Bootstrap if a DOM exists.                                                                                          // 55\n */                                                                                                                    // 56\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 57\n  style = document.createElement('div').style;                                                                         // 58\n                                                                                                                       // 59\n  // On some platforms, in particular some releases of Android 4.x,                                                    // 60\n  // the un-prefixed \"animation\" and \"transition\" properties are defined on the                                        // 61\n  // style object but the events that fire will still be prefixed, so we need                                          // 62\n  // to check if the un-prefixed events are usable, and if not remove them from the map.                               // 63\n  if (!('AnimationEvent' in window)) {                                                                                 // 64\n    delete vendorPrefixes.animationend.animation;                                                                      // 65\n    delete vendorPrefixes.animationiteration.animation;                                                                // 66\n    delete vendorPrefixes.animationstart.animation;                                                                    // 67\n  }                                                                                                                    // 68\n                                                                                                                       // 69\n  // Same as above                                                                                                     // 70\n  if (!('TransitionEvent' in window)) {                                                                                // 71\n    delete vendorPrefixes.transitionend.transition;                                                                    // 72\n  }                                                                                                                    // 73\n}                                                                                                                      // 74\n                                                                                                                       // 75\n/**                                                                                                                    // 76\n * Attempts to determine the correct vendor prefixed event name.                                                       // 77\n *                                                                                                                     // 78\n * @param {string} eventName                                                                                           // 79\n * @returns {string}                                                                                                   // 80\n */                                                                                                                    // 81\nfunction getVendorPrefixedEventName(eventName) {                                                                       // 82\n  if (prefixedEventNames[eventName]) {                                                                                 // 83\n    return prefixedEventNames[eventName];                                                                              // 84\n  } else if (!vendorPrefixes[eventName]) {                                                                             // 85\n    return eventName;                                                                                                  // 86\n  }                                                                                                                    // 87\n                                                                                                                       // 88\n  var prefixMap = vendorPrefixes[eventName];                                                                           // 89\n                                                                                                                       // 90\n  for (var styleProp in prefixMap) {                                                                                   // 91\n    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {                                                   // 92\n      return prefixedEventNames[eventName] = prefixMap[styleProp];                                                     // 93\n    }                                                                                                                  // 94\n  }                                                                                                                    // 95\n                                                                                                                       // 96\n  return '';                                                                                                           // 97\n}                                                                                                                      // 98\n                                                                                                                       // 99\nmodule.exports = getVendorPrefixedEventName;                                                                           // 100\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDOMInput.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactDOMInput.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _prodInvariant = require('./reactProdInvariant'),                                                                  // 13\n    _assign = require('object-assign');                                                                                // 14\n                                                                                                                       // 15\nvar DOMPropertyOperations = require('./DOMPropertyOperations');                                                        // 16\nvar LinkedValueUtils = require('./LinkedValueUtils');                                                                  // 17\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 18\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 19\n                                                                                                                       // 20\nvar invariant = require('fbjs/lib/invariant');                                                                         // 21\nvar warning = require('fbjs/lib/warning');                                                                             // 22\n                                                                                                                       // 23\nvar didWarnValueLink = false;                                                                                          // 24\nvar didWarnCheckedLink = false;                                                                                        // 25\nvar didWarnValueDefaultValue = false;                                                                                  // 26\nvar didWarnCheckedDefaultChecked = false;                                                                              // 27\nvar didWarnControlledToUncontrolled = false;                                                                           // 28\nvar didWarnUncontrolledToControlled = false;                                                                           // 29\n                                                                                                                       // 30\nfunction forceUpdateIfMounted() {                                                                                      // 31\n  if (this._rootNodeID) {                                                                                              // 32\n    // DOM component is still mounted; update                                                                          // 33\n    ReactDOMInput.updateWrapper(this);                                                                                 // 34\n  }                                                                                                                    // 35\n}                                                                                                                      // 36\n                                                                                                                       // 37\nfunction isControlled(props) {                                                                                         // 38\n  var usesChecked = props.type === 'checkbox' || props.type === 'radio';                                               // 39\n  return usesChecked ? props.checked != null : props.value != null;                                                    // 40\n}                                                                                                                      // 41\n                                                                                                                       // 42\n/**                                                                                                                    // 43\n * Implements an <input> host component that allows setting these optional                                             // 44\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.                                                    // 45\n *                                                                                                                     // 46\n * If `checked` or `value` are not supplied (or null/undefined), user actions                                          // 47\n * that affect the checked state or value will trigger updates to the element.                                         // 48\n *                                                                                                                     // 49\n * If they are supplied (and not null/undefined), the rendered element will not                                        // 50\n * trigger updates to the element. Instead, the props must change in order for                                         // 51\n * the rendered element to be updated.                                                                                 // 52\n *                                                                                                                     // 53\n * The rendered element will be initialized as unchecked (or `defaultChecked`)                                         // 54\n * with an empty value (or `defaultValue`).                                                                            // 55\n *                                                                                                                     // 56\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html                                             // 57\n */                                                                                                                    // 58\nvar ReactDOMInput = {                                                                                                  // 59\n  getHostProps: function (inst, props) {                                                                               // 60\n    var value = LinkedValueUtils.getValue(props);                                                                      // 61\n    var checked = LinkedValueUtils.getChecked(props);                                                                  // 62\n                                                                                                                       // 63\n    var hostProps = _assign({                                                                                          // 64\n      // Make sure we set .type before any other properties (setting .value                                            // 65\n      // before .type means .value is lost in IE11 and below)                                                          // 66\n      type: undefined,                                                                                                 // 67\n      // Make sure we set .step before .value (setting .value before .step                                             // 68\n      // means .value is rounded on mount, based upon step precision)                                                  // 69\n      step: undefined,                                                                                                 // 70\n      // Make sure we set .min & .max before .value (to ensure proper order                                            // 71\n      // in corner cases such as min or max deriving from value, e.g. Issue #7170)                                     // 72\n      min: undefined,                                                                                                  // 73\n      max: undefined                                                                                                   // 74\n    }, props, {                                                                                                        // 75\n      defaultChecked: undefined,                                                                                       // 76\n      defaultValue: undefined,                                                                                         // 77\n      value: value != null ? value : inst._wrapperState.initialValue,                                                  // 78\n      checked: checked != null ? checked : inst._wrapperState.initialChecked,                                          // 79\n      onChange: inst._wrapperState.onChange                                                                            // 80\n    });                                                                                                                // 81\n                                                                                                                       // 82\n    return hostProps;                                                                                                  // 83\n  },                                                                                                                   // 84\n                                                                                                                       // 85\n  mountWrapper: function (inst, props) {                                                                               // 86\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 87\n      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);                                    // 88\n                                                                                                                       // 89\n      var owner = inst._currentElement._owner;                                                                         // 90\n                                                                                                                       // 91\n      if (props.valueLink !== undefined && !didWarnValueLink) {                                                        // 92\n        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;\n        didWarnValueLink = true;                                                                                       // 94\n      }                                                                                                                // 95\n      if (props.checkedLink !== undefined && !didWarnCheckedLink) {                                                    // 96\n        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;\n        didWarnCheckedLink = true;                                                                                     // 98\n      }                                                                                                                // 99\n      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {        // 100\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;\n        didWarnCheckedDefaultChecked = true;                                                                           // 102\n      }                                                                                                                // 103\n      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {                // 104\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;\n        didWarnValueDefaultValue = true;                                                                               // 106\n      }                                                                                                                // 107\n    }                                                                                                                  // 108\n                                                                                                                       // 109\n    var defaultValue = props.defaultValue;                                                                             // 110\n    inst._wrapperState = {                                                                                             // 111\n      initialChecked: props.checked != null ? props.checked : props.defaultChecked,                                    // 112\n      initialValue: props.value != null ? props.value : defaultValue,                                                  // 113\n      listeners: null,                                                                                                 // 114\n      onChange: _handleChange.bind(inst),                                                                              // 115\n      controlled: isControlled(props)                                                                                  // 116\n    };                                                                                                                 // 117\n  },                                                                                                                   // 118\n                                                                                                                       // 119\n  updateWrapper: function (inst) {                                                                                     // 120\n    var props = inst._currentElement.props;                                                                            // 121\n                                                                                                                       // 122\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 123\n      var controlled = isControlled(props);                                                                            // 124\n      var owner = inst._currentElement._owner;                                                                         // 125\n                                                                                                                       // 126\n      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {                          // 127\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;\n        didWarnUncontrolledToControlled = true;                                                                        // 129\n      }                                                                                                                // 130\n      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {                          // 131\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;\n        didWarnControlledToUncontrolled = true;                                                                        // 133\n      }                                                                                                                // 134\n    }                                                                                                                  // 135\n                                                                                                                       // 136\n    // TODO: Shouldn't this be getChecked(props)?                                                                      // 137\n    var checked = props.checked;                                                                                       // 138\n    if (checked != null) {                                                                                             // 139\n      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);\n    }                                                                                                                  // 141\n                                                                                                                       // 142\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);                                                        // 143\n    var value = LinkedValueUtils.getValue(props);                                                                      // 144\n    if (value != null) {                                                                                               // 145\n      if (value === 0 && node.value === '') {                                                                          // 146\n        node.value = '0';                                                                                              // 147\n        // Note: IE9 reports a number inputs as 'text', so check props instead.                                        // 148\n      } else if (props.type === 'number') {                                                                            // 149\n        // Simulate `input.valueAsNumber`. IE9 does not support it                                                     // 150\n        var valueAsNumber = parseFloat(node.value, 10) || 0;                                                           // 151\n                                                                                                                       // 152\n        if (                                                                                                           // 153\n        // eslint-disable-next-line                                                                                    // 154\n        value != valueAsNumber ||                                                                                      // 155\n        // eslint-disable-next-line                                                                                    // 156\n        value == valueAsNumber && node.value != value) {                                                               // 157\n          // Cast `value` to a string to ensure the value is set correctly. While                                      // 158\n          // browsers typically do this as necessary, jsdom doesn't.                                                   // 159\n          node.value = '' + value;                                                                                     // 160\n        }                                                                                                              // 161\n      } else if (node.value !== '' + value) {                                                                          // 162\n        // Cast `value` to a string to ensure the value is set correctly. While                                        // 163\n        // browsers typically do this as necessary, jsdom doesn't.                                                     // 164\n        node.value = '' + value;                                                                                       // 165\n      }                                                                                                                // 166\n    } else {                                                                                                           // 167\n      if (props.value == null && props.defaultValue != null) {                                                         // 168\n        // In Chrome, assigning defaultValue to certain input types triggers input validation.                         // 169\n        // For number inputs, the display value loses trailing decimal points. For email inputs,                       // 170\n        // Chrome raises \"The specified value <x> is not a valid email address\".                                       // 171\n        //                                                                                                             // 172\n        // Here we check to see if the defaultValue has actually changed, avoiding these problems                      // 173\n        // when the user is inputting text                                                                             // 174\n        //                                                                                                             // 175\n        // https://github.com/facebook/react/issues/7253                                                               // 176\n        if (node.defaultValue !== '' + props.defaultValue) {                                                           // 177\n          node.defaultValue = '' + props.defaultValue;                                                                 // 178\n        }                                                                                                              // 179\n      }                                                                                                                // 180\n      if (props.checked == null && props.defaultChecked != null) {                                                     // 181\n        node.defaultChecked = !!props.defaultChecked;                                                                  // 182\n      }                                                                                                                // 183\n    }                                                                                                                  // 184\n  },                                                                                                                   // 185\n                                                                                                                       // 186\n  postMountWrapper: function (inst) {                                                                                  // 187\n    var props = inst._currentElement.props;                                                                            // 188\n                                                                                                                       // 189\n    // This is in postMount because we need access to the DOM node, which is not                                       // 190\n    // available until after the component has mounted.                                                                // 191\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);                                                        // 192\n                                                                                                                       // 193\n    // Detach value from defaultValue. We won't do anything if we're working on                                        // 194\n    // submit or reset inputs as those values & defaultValues are linked. They                                         // 195\n    // are not resetable nodes so this operation doesn't matter and actually                                           // 196\n    // removes browser-default values (eg \"Submit Query\") when no value is                                             // 197\n    // provided.                                                                                                       // 198\n                                                                                                                       // 199\n    switch (props.type) {                                                                                              // 200\n      case 'submit':                                                                                                   // 201\n      case 'reset':                                                                                                    // 202\n        break;                                                                                                         // 203\n      case 'color':                                                                                                    // 204\n      case 'date':                                                                                                     // 205\n      case 'datetime':                                                                                                 // 206\n      case 'datetime-local':                                                                                           // 207\n      case 'month':                                                                                                    // 208\n      case 'time':                                                                                                     // 209\n      case 'week':                                                                                                     // 210\n        // This fixes the no-show issue on iOS Safari and Android Chrome:                                              // 211\n        // https://github.com/facebook/react/issues/7233                                                               // 212\n        node.value = '';                                                                                               // 213\n        node.value = node.defaultValue;                                                                                // 214\n        break;                                                                                                         // 215\n      default:                                                                                                         // 216\n        node.value = node.value;                                                                                       // 217\n        break;                                                                                                         // 218\n    }                                                                                                                  // 219\n                                                                                                                       // 220\n    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug                          // 221\n    // this is needed to work around a chrome bug where setting defaultChecked                                         // 222\n    // will sometimes influence the value of checked (even after detachment).                                          // 223\n    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416                                         // 224\n    // We need to temporarily unset name to avoid disrupting radio button groups.                                      // 225\n    var name = node.name;                                                                                              // 226\n    if (name !== '') {                                                                                                 // 227\n      node.name = '';                                                                                                  // 228\n    }                                                                                                                  // 229\n    node.defaultChecked = !node.defaultChecked;                                                                        // 230\n    node.defaultChecked = !node.defaultChecked;                                                                        // 231\n    if (name !== '') {                                                                                                 // 232\n      node.name = name;                                                                                                // 233\n    }                                                                                                                  // 234\n  }                                                                                                                    // 235\n};                                                                                                                     // 236\n                                                                                                                       // 237\nfunction _handleChange(event) {                                                                                        // 238\n  var props = this._currentElement.props;                                                                              // 239\n                                                                                                                       // 240\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);                                                    // 241\n                                                                                                                       // 242\n  // Here we use asap to wait until all updates have propagated, which                                                 // 243\n  // is important when using controlled components within layers:                                                      // 244\n  // https://github.com/facebook/react/issues/1698                                                                     // 245\n  ReactUpdates.asap(forceUpdateIfMounted, this);                                                                       // 246\n                                                                                                                       // 247\n  var name = props.name;                                                                                               // 248\n  if (props.type === 'radio' && name != null) {                                                                        // 249\n    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);                                                    // 250\n    var queryRoot = rootNode;                                                                                          // 251\n                                                                                                                       // 252\n    while (queryRoot.parentNode) {                                                                                     // 253\n      queryRoot = queryRoot.parentNode;                                                                                // 254\n    }                                                                                                                  // 255\n                                                                                                                       // 256\n    // If `rootNode.form` was non-null, then we could try `form.elements`,                                             // 257\n    // but that sometimes behaves strangely in IE8. We could also try using                                            // 258\n    // `form.getElementsByName`, but that will only return direct children                                             // 259\n    // and won't include inputs that use the HTML5 `form=` attribute. Since                                            // 260\n    // the input might not even be in a form, let's just use the global                                                // 261\n    // `querySelectorAll` to ensure we don't miss anything.                                                            // 262\n    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');             // 263\n                                                                                                                       // 264\n    for (var i = 0; i < group.length; i++) {                                                                           // 265\n      var otherNode = group[i];                                                                                        // 266\n      if (otherNode === rootNode || otherNode.form !== rootNode.form) {                                                // 267\n        continue;                                                                                                      // 268\n      }                                                                                                                // 269\n      // This will throw if radio buttons rendered by different copies of React                                        // 270\n      // and the same name are rendered into the same form (same as #1939).                                            // 271\n      // That's probably okay; we don't support it just as we don't support                                            // 272\n      // mixing React radio buttons with non-React ones.                                                               // 273\n      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);                                        // 274\n      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;\n      // If this is a controlled radio button group, forcing the input that                                            // 276\n      // was previously checked to update will cause it to be come re-checked                                          // 277\n      // as appropriate.                                                                                               // 278\n      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);                                                          // 279\n    }                                                                                                                  // 280\n  }                                                                                                                    // 281\n                                                                                                                       // 282\n  return returnValue;                                                                                                  // 283\n}                                                                                                                      // 284\n                                                                                                                       // 285\nmodule.exports = ReactDOMInput;                                                                                        // 286\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"LinkedValueUtils.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/LinkedValueUtils.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 13\n                                                                                                                       // 14\nvar ReactPropTypesSecret = require('./ReactPropTypesSecret');                                                          // 15\nvar propTypesFactory = require('prop-types/factory');                                                                  // 16\n                                                                                                                       // 17\nvar React = require('react/lib/React');                                                                                // 18\nvar PropTypes = propTypesFactory(React.isValidElement);                                                                // 19\n                                                                                                                       // 20\nvar invariant = require('fbjs/lib/invariant');                                                                         // 21\nvar warning = require('fbjs/lib/warning');                                                                             // 22\n                                                                                                                       // 23\nvar hasReadOnlyValue = {                                                                                               // 24\n  button: true,                                                                                                        // 25\n  checkbox: true,                                                                                                      // 26\n  image: true,                                                                                                         // 27\n  hidden: true,                                                                                                        // 28\n  radio: true,                                                                                                         // 29\n  reset: true,                                                                                                         // 30\n  submit: true                                                                                                         // 31\n};                                                                                                                     // 32\n                                                                                                                       // 33\nfunction _assertSingleLink(inputProps) {                                                                               // 34\n  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;\n}                                                                                                                      // 36\nfunction _assertValueLink(inputProps) {                                                                                // 37\n  _assertSingleLink(inputProps);                                                                                       // 38\n  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\\'t want to use valueLink.') : _prodInvariant('88') : void 0;\n}                                                                                                                      // 40\n                                                                                                                       // 41\nfunction _assertCheckedLink(inputProps) {                                                                              // 42\n  _assertSingleLink(inputProps);                                                                                       // 43\n  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\\'t want to use checkedLink') : _prodInvariant('89') : void 0;\n}                                                                                                                      // 45\n                                                                                                                       // 46\nvar propTypes = {                                                                                                      // 47\n  value: function (props, propName, componentName) {                                                                   // 48\n    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {      // 49\n      return null;                                                                                                     // 50\n    }                                                                                                                  // 51\n    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n  },                                                                                                                   // 53\n  checked: function (props, propName, componentName) {                                                                 // 54\n    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {                                      // 55\n      return null;                                                                                                     // 56\n    }                                                                                                                  // 57\n    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n  },                                                                                                                   // 59\n  onChange: PropTypes.func                                                                                             // 60\n};                                                                                                                     // 61\n                                                                                                                       // 62\nvar loggedTypeFailures = {};                                                                                           // 63\nfunction getDeclarationErrorAddendum(owner) {                                                                          // 64\n  if (owner) {                                                                                                         // 65\n    var name = owner.getName();                                                                                        // 66\n    if (name) {                                                                                                        // 67\n      return ' Check the render method of `' + name + '`.';                                                            // 68\n    }                                                                                                                  // 69\n  }                                                                                                                    // 70\n  return '';                                                                                                           // 71\n}                                                                                                                      // 72\n                                                                                                                       // 73\n/**                                                                                                                    // 74\n * Provide a linked `value` attribute for controlled forms. You should not use                                         // 75\n * this outside of the ReactDOM controlled form components.                                                            // 76\n */                                                                                                                    // 77\nvar LinkedValueUtils = {                                                                                               // 78\n  checkPropTypes: function (tagName, props, owner) {                                                                   // 79\n    for (var propName in propTypes) {                                                                                  // 80\n      if (propTypes.hasOwnProperty(propName)) {                                                                        // 81\n        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);                 // 82\n      }                                                                                                                // 83\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {                                          // 84\n        // Only monitor this failure once because there tends to be a lot of the                                       // 85\n        // same error.                                                                                                 // 86\n        loggedTypeFailures[error.message] = true;                                                                      // 87\n                                                                                                                       // 88\n        var addendum = getDeclarationErrorAddendum(owner);                                                             // 89\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;\n      }                                                                                                                // 91\n    }                                                                                                                  // 92\n  },                                                                                                                   // 93\n                                                                                                                       // 94\n  /**                                                                                                                  // 95\n   * @param {object} inputProps Props for form component                                                               // 96\n   * @return {*} current value of the input either from value prop or link.                                            // 97\n   */                                                                                                                  // 98\n  getValue: function (inputProps) {                                                                                    // 99\n    if (inputProps.valueLink) {                                                                                        // 100\n      _assertValueLink(inputProps);                                                                                    // 101\n      return inputProps.valueLink.value;                                                                               // 102\n    }                                                                                                                  // 103\n    return inputProps.value;                                                                                           // 104\n  },                                                                                                                   // 105\n                                                                                                                       // 106\n  /**                                                                                                                  // 107\n   * @param {object} inputProps Props for form component                                                               // 108\n   * @return {*} current checked status of the input either from checked prop                                          // 109\n   *             or link.                                                                                              // 110\n   */                                                                                                                  // 111\n  getChecked: function (inputProps) {                                                                                  // 112\n    if (inputProps.checkedLink) {                                                                                      // 113\n      _assertCheckedLink(inputProps);                                                                                  // 114\n      return inputProps.checkedLink.value;                                                                             // 115\n    }                                                                                                                  // 116\n    return inputProps.checked;                                                                                         // 117\n  },                                                                                                                   // 118\n                                                                                                                       // 119\n  /**                                                                                                                  // 120\n   * @param {object} inputProps Props for form component                                                               // 121\n   * @param {SyntheticEvent} event change event to handle                                                              // 122\n   */                                                                                                                  // 123\n  executeOnChange: function (inputProps, event) {                                                                      // 124\n    if (inputProps.valueLink) {                                                                                        // 125\n      _assertValueLink(inputProps);                                                                                    // 126\n      return inputProps.valueLink.requestChange(event.target.value);                                                   // 127\n    } else if (inputProps.checkedLink) {                                                                               // 128\n      _assertCheckedLink(inputProps);                                                                                  // 129\n      return inputProps.checkedLink.requestChange(event.target.checked);                                               // 130\n    } else if (inputProps.onChange) {                                                                                  // 131\n      return inputProps.onChange.call(undefined, event);                                                               // 132\n    }                                                                                                                  // 133\n  }                                                                                                                    // 134\n};                                                                                                                     // 135\n                                                                                                                       // 136\nmodule.exports = LinkedValueUtils;                                                                                     // 137\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactPropTypesSecret.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactPropTypesSecret.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';                                             // 14\n                                                                                                                       // 15\nmodule.exports = ReactPropTypesSecret;                                                                                 // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDOMOption.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactDOMOption.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _assign = require('object-assign');                                                                                // 13\n                                                                                                                       // 14\nvar React = require('react/lib/React');                                                                                // 15\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 16\nvar ReactDOMSelect = require('./ReactDOMSelect');                                                                      // 17\n                                                                                                                       // 18\nvar warning = require('fbjs/lib/warning');                                                                             // 19\nvar didWarnInvalidOptionChildren = false;                                                                              // 20\n                                                                                                                       // 21\nfunction flattenChildren(children) {                                                                                   // 22\n  var content = '';                                                                                                    // 23\n                                                                                                                       // 24\n  // Flatten children and warn if they aren't strings or numbers;                                                      // 25\n  // invalid types are ignored.                                                                                        // 26\n  React.Children.forEach(children, function (child) {                                                                  // 27\n    if (child == null) {                                                                                               // 28\n      return;                                                                                                          // 29\n    }                                                                                                                  // 30\n    if (typeof child === 'string' || typeof child === 'number') {                                                      // 31\n      content += child;                                                                                                // 32\n    } else if (!didWarnInvalidOptionChildren) {                                                                        // 33\n      didWarnInvalidOptionChildren = true;                                                                             // 34\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;\n    }                                                                                                                  // 36\n  });                                                                                                                  // 37\n                                                                                                                       // 38\n  return content;                                                                                                      // 39\n}                                                                                                                      // 40\n                                                                                                                       // 41\n/**                                                                                                                    // 42\n * Implements an <option> host component that warns when `selected` is set.                                            // 43\n */                                                                                                                    // 44\nvar ReactDOMOption = {                                                                                                 // 45\n  mountWrapper: function (inst, props, hostParent) {                                                                   // 46\n    // TODO (yungsters): Remove support for `selected` in <option>.                                                    // 47\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 48\n      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;\n    }                                                                                                                  // 50\n                                                                                                                       // 51\n    // Look up whether this option is 'selected'                                                                       // 52\n    var selectValue = null;                                                                                            // 53\n    if (hostParent != null) {                                                                                          // 54\n      var selectParent = hostParent;                                                                                   // 55\n                                                                                                                       // 56\n      if (selectParent._tag === 'optgroup') {                                                                          // 57\n        selectParent = selectParent._hostParent;                                                                       // 58\n      }                                                                                                                // 59\n                                                                                                                       // 60\n      if (selectParent != null && selectParent._tag === 'select') {                                                    // 61\n        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);                                              // 62\n      }                                                                                                                // 63\n    }                                                                                                                  // 64\n                                                                                                                       // 65\n    // If the value is null (e.g., no specified value or after initial mount)                                          // 66\n    // or missing (e.g., for <datalist>), we don't change props.selected                                               // 67\n    var selected = null;                                                                                               // 68\n    if (selectValue != null) {                                                                                         // 69\n      var value;                                                                                                       // 70\n      if (props.value != null) {                                                                                       // 71\n        value = props.value + '';                                                                                      // 72\n      } else {                                                                                                         // 73\n        value = flattenChildren(props.children);                                                                       // 74\n      }                                                                                                                // 75\n      selected = false;                                                                                                // 76\n      if (Array.isArray(selectValue)) {                                                                                // 77\n        // multiple                                                                                                    // 78\n        for (var i = 0; i < selectValue.length; i++) {                                                                 // 79\n          if ('' + selectValue[i] === value) {                                                                         // 80\n            selected = true;                                                                                           // 81\n            break;                                                                                                     // 82\n          }                                                                                                            // 83\n        }                                                                                                              // 84\n      } else {                                                                                                         // 85\n        selected = '' + selectValue === value;                                                                         // 86\n      }                                                                                                                // 87\n    }                                                                                                                  // 88\n                                                                                                                       // 89\n    inst._wrapperState = { selected: selected };                                                                       // 90\n  },                                                                                                                   // 91\n                                                                                                                       // 92\n  postMountWrapper: function (inst) {                                                                                  // 93\n    // value=\"\" should make a value attribute (#6219)                                                                  // 94\n    var props = inst._currentElement.props;                                                                            // 95\n    if (props.value != null) {                                                                                         // 96\n      var node = ReactDOMComponentTree.getNodeFromInstance(inst);                                                      // 97\n      node.setAttribute('value', props.value);                                                                         // 98\n    }                                                                                                                  // 99\n  },                                                                                                                   // 100\n                                                                                                                       // 101\n  getHostProps: function (inst, props) {                                                                               // 102\n    var hostProps = _assign({ selected: undefined, children: undefined }, props);                                      // 103\n                                                                                                                       // 104\n    // Read state only from initial mount because <select> updates value                                               // 105\n    // manually; we need the initial state only for server rendering                                                   // 106\n    if (inst._wrapperState.selected != null) {                                                                         // 107\n      hostProps.selected = inst._wrapperState.selected;                                                                // 108\n    }                                                                                                                  // 109\n                                                                                                                       // 110\n    var content = flattenChildren(props.children);                                                                     // 111\n                                                                                                                       // 112\n    if (content) {                                                                                                     // 113\n      hostProps.children = content;                                                                                    // 114\n    }                                                                                                                  // 115\n                                                                                                                       // 116\n    return hostProps;                                                                                                  // 117\n  }                                                                                                                    // 118\n};                                                                                                                     // 119\n                                                                                                                       // 120\nmodule.exports = ReactDOMOption;                                                                                       // 121\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDOMSelect.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactDOMSelect.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _assign = require('object-assign');                                                                                // 13\n                                                                                                                       // 14\nvar LinkedValueUtils = require('./LinkedValueUtils');                                                                  // 15\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 16\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 17\n                                                                                                                       // 18\nvar warning = require('fbjs/lib/warning');                                                                             // 19\n                                                                                                                       // 20\nvar didWarnValueLink = false;                                                                                          // 21\nvar didWarnValueDefaultValue = false;                                                                                  // 22\n                                                                                                                       // 23\nfunction updateOptionsIfPendingUpdateAndMounted() {                                                                    // 24\n  if (this._rootNodeID && this._wrapperState.pendingUpdate) {                                                          // 25\n    this._wrapperState.pendingUpdate = false;                                                                          // 26\n                                                                                                                       // 27\n    var props = this._currentElement.props;                                                                            // 28\n    var value = LinkedValueUtils.getValue(props);                                                                      // 29\n                                                                                                                       // 30\n    if (value != null) {                                                                                               // 31\n      updateOptions(this, Boolean(props.multiple), value);                                                             // 32\n    }                                                                                                                  // 33\n  }                                                                                                                    // 34\n}                                                                                                                      // 35\n                                                                                                                       // 36\nfunction getDeclarationErrorAddendum(owner) {                                                                          // 37\n  if (owner) {                                                                                                         // 38\n    var name = owner.getName();                                                                                        // 39\n    if (name) {                                                                                                        // 40\n      return ' Check the render method of `' + name + '`.';                                                            // 41\n    }                                                                                                                  // 42\n  }                                                                                                                    // 43\n  return '';                                                                                                           // 44\n}                                                                                                                      // 45\n                                                                                                                       // 46\nvar valuePropNames = ['value', 'defaultValue'];                                                                        // 47\n                                                                                                                       // 48\n/**                                                                                                                    // 49\n * Validation function for `value` and `defaultValue`.                                                                 // 50\n * @private                                                                                                            // 51\n */                                                                                                                    // 52\nfunction checkSelectPropTypes(inst, props) {                                                                           // 53\n  var owner = inst._currentElement._owner;                                                                             // 54\n  LinkedValueUtils.checkPropTypes('select', props, owner);                                                             // 55\n                                                                                                                       // 56\n  if (props.valueLink !== undefined && !didWarnValueLink) {                                                            // 57\n    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;\n    didWarnValueLink = true;                                                                                           // 59\n  }                                                                                                                    // 60\n                                                                                                                       // 61\n  for (var i = 0; i < valuePropNames.length; i++) {                                                                    // 62\n    var propName = valuePropNames[i];                                                                                  // 63\n    if (props[propName] == null) {                                                                                     // 64\n      continue;                                                                                                        // 65\n    }                                                                                                                  // 66\n    var isArray = Array.isArray(props[propName]);                                                                      // 67\n    if (props.multiple && !isArray) {                                                                                  // 68\n      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;\n    } else if (!props.multiple && isArray) {                                                                           // 70\n      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;\n    }                                                                                                                  // 72\n  }                                                                                                                    // 73\n}                                                                                                                      // 74\n                                                                                                                       // 75\n/**                                                                                                                    // 76\n * @param {ReactDOMComponent} inst                                                                                     // 77\n * @param {boolean} multiple                                                                                           // 78\n * @param {*} propValue A stringable (with `multiple`, a list of stringables).                                         // 79\n * @private                                                                                                            // 80\n */                                                                                                                    // 81\nfunction updateOptions(inst, multiple, propValue) {                                                                    // 82\n  var selectedValue, i;                                                                                                // 83\n  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;                                               // 84\n                                                                                                                       // 85\n  if (multiple) {                                                                                                      // 86\n    selectedValue = {};                                                                                                // 87\n    for (i = 0; i < propValue.length; i++) {                                                                           // 88\n      selectedValue['' + propValue[i]] = true;                                                                         // 89\n    }                                                                                                                  // 90\n    for (i = 0; i < options.length; i++) {                                                                             // 91\n      var selected = selectedValue.hasOwnProperty(options[i].value);                                                   // 92\n      if (options[i].selected !== selected) {                                                                          // 93\n        options[i].selected = selected;                                                                                // 94\n      }                                                                                                                // 95\n    }                                                                                                                  // 96\n  } else {                                                                                                             // 97\n    // Do not set `select.value` as exact behavior isn't consistent across all                                         // 98\n    // browsers for all cases.                                                                                         // 99\n    selectedValue = '' + propValue;                                                                                    // 100\n    for (i = 0; i < options.length; i++) {                                                                             // 101\n      if (options[i].value === selectedValue) {                                                                        // 102\n        options[i].selected = true;                                                                                    // 103\n        return;                                                                                                        // 104\n      }                                                                                                                // 105\n    }                                                                                                                  // 106\n    if (options.length) {                                                                                              // 107\n      options[0].selected = true;                                                                                      // 108\n    }                                                                                                                  // 109\n  }                                                                                                                    // 110\n}                                                                                                                      // 111\n                                                                                                                       // 112\n/**                                                                                                                    // 113\n * Implements a <select> host component that allows optionally setting the                                             // 114\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a                                        // 115\n * stringable. If `multiple` is true, the prop must be an array of stringables.                                        // 116\n *                                                                                                                     // 117\n * If `value` is not supplied (or null/undefined), user actions that change the                                        // 118\n * selected option will trigger updates to the rendered options.                                                       // 119\n *                                                                                                                     // 120\n * If it is supplied (and not null/undefined), the rendered options will not                                           // 121\n * update in response to user actions. Instead, the `value` prop must change in                                        // 122\n * order for the rendered options to update.                                                                           // 123\n *                                                                                                                     // 124\n * If `defaultValue` is provided, any options with the supplied values will be                                         // 125\n * selected.                                                                                                           // 126\n */                                                                                                                    // 127\nvar ReactDOMSelect = {                                                                                                 // 128\n  getHostProps: function (inst, props) {                                                                               // 129\n    return _assign({}, props, {                                                                                        // 130\n      onChange: inst._wrapperState.onChange,                                                                           // 131\n      value: undefined                                                                                                 // 132\n    });                                                                                                                // 133\n  },                                                                                                                   // 134\n                                                                                                                       // 135\n  mountWrapper: function (inst, props) {                                                                               // 136\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 137\n      checkSelectPropTypes(inst, props);                                                                               // 138\n    }                                                                                                                  // 139\n                                                                                                                       // 140\n    var value = LinkedValueUtils.getValue(props);                                                                      // 141\n    inst._wrapperState = {                                                                                             // 142\n      pendingUpdate: false,                                                                                            // 143\n      initialValue: value != null ? value : props.defaultValue,                                                        // 144\n      listeners: null,                                                                                                 // 145\n      onChange: _handleChange.bind(inst),                                                                              // 146\n      wasMultiple: Boolean(props.multiple)                                                                             // 147\n    };                                                                                                                 // 148\n                                                                                                                       // 149\n    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {                  // 150\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;\n      didWarnValueDefaultValue = true;                                                                                 // 152\n    }                                                                                                                  // 153\n  },                                                                                                                   // 154\n                                                                                                                       // 155\n  getSelectValueContext: function (inst) {                                                                             // 156\n    // ReactDOMOption looks at this initial value so the initial generated                                             // 157\n    // markup has correct `selected` attributes                                                                        // 158\n    return inst._wrapperState.initialValue;                                                                            // 159\n  },                                                                                                                   // 160\n                                                                                                                       // 161\n  postUpdateWrapper: function (inst) {                                                                                 // 162\n    var props = inst._currentElement.props;                                                                            // 163\n                                                                                                                       // 164\n    // After the initial mount, we control selected-ness manually so don't pass                                        // 165\n    // this value down                                                                                                 // 166\n    inst._wrapperState.initialValue = undefined;                                                                       // 167\n                                                                                                                       // 168\n    var wasMultiple = inst._wrapperState.wasMultiple;                                                                  // 169\n    inst._wrapperState.wasMultiple = Boolean(props.multiple);                                                          // 170\n                                                                                                                       // 171\n    var value = LinkedValueUtils.getValue(props);                                                                      // 172\n    if (value != null) {                                                                                               // 173\n      inst._wrapperState.pendingUpdate = false;                                                                        // 174\n      updateOptions(inst, Boolean(props.multiple), value);                                                             // 175\n    } else if (wasMultiple !== Boolean(props.multiple)) {                                                              // 176\n      // For simplicity, reapply `defaultValue` if `multiple` is toggled.                                              // 177\n      if (props.defaultValue != null) {                                                                                // 178\n        updateOptions(inst, Boolean(props.multiple), props.defaultValue);                                              // 179\n      } else {                                                                                                         // 180\n        // Revert the select back to its default unselected state.                                                     // 181\n        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');                                        // 182\n      }                                                                                                                // 183\n    }                                                                                                                  // 184\n  }                                                                                                                    // 185\n};                                                                                                                     // 186\n                                                                                                                       // 187\nfunction _handleChange(event) {                                                                                        // 188\n  var props = this._currentElement.props;                                                                              // 189\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);                                                    // 190\n                                                                                                                       // 191\n  if (this._rootNodeID) {                                                                                              // 192\n    this._wrapperState.pendingUpdate = true;                                                                           // 193\n  }                                                                                                                    // 194\n  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);                                                     // 195\n  return returnValue;                                                                                                  // 196\n}                                                                                                                      // 197\n                                                                                                                       // 198\nmodule.exports = ReactDOMSelect;                                                                                       // 199\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDOMTextarea.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactDOMTextarea.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _prodInvariant = require('./reactProdInvariant'),                                                                  // 13\n    _assign = require('object-assign');                                                                                // 14\n                                                                                                                       // 15\nvar LinkedValueUtils = require('./LinkedValueUtils');                                                                  // 16\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 17\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 18\n                                                                                                                       // 19\nvar invariant = require('fbjs/lib/invariant');                                                                         // 20\nvar warning = require('fbjs/lib/warning');                                                                             // 21\n                                                                                                                       // 22\nvar didWarnValueLink = false;                                                                                          // 23\nvar didWarnValDefaultVal = false;                                                                                      // 24\n                                                                                                                       // 25\nfunction forceUpdateIfMounted() {                                                                                      // 26\n  if (this._rootNodeID) {                                                                                              // 27\n    // DOM component is still mounted; update                                                                          // 28\n    ReactDOMTextarea.updateWrapper(this);                                                                              // 29\n  }                                                                                                                    // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\n/**                                                                                                                    // 33\n * Implements a <textarea> host component that allows setting `value`, and                                             // 34\n * `defaultValue`. This differs from the traditional DOM API because value is                                          // 35\n * usually set as PCDATA children.                                                                                     // 36\n *                                                                                                                     // 37\n * If `value` is not supplied (or null/undefined), user actions that affect the                                        // 38\n * value will trigger updates to the element.                                                                          // 39\n *                                                                                                                     // 40\n * If `value` is supplied (and not null/undefined), the rendered element will                                          // 41\n * not trigger updates to the element. Instead, the `value` prop must change in                                        // 42\n * order for the rendered element to be updated.                                                                       // 43\n *                                                                                                                     // 44\n * The rendered element will be initialized with an empty value, the prop                                              // 45\n * `defaultValue` if specified, or the children content (deprecated).                                                  // 46\n */                                                                                                                    // 47\nvar ReactDOMTextarea = {                                                                                               // 48\n  getHostProps: function (inst, props) {                                                                               // 49\n    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;\n                                                                                                                       // 51\n    // Always set children to the same thing. In IE9, the selection range will                                         // 52\n    // get reset if `textContent` is mutated.  We could add a check in setTextContent                                  // 53\n    // to only set the value if/when the value differs from the node value (which would                                // 54\n    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.                                 // 55\n    // The value can be a boolean or object so that's why it's forced to be a string.                                  // 56\n    var hostProps = _assign({}, props, {                                                                               // 57\n      value: undefined,                                                                                                // 58\n      defaultValue: undefined,                                                                                         // 59\n      children: '' + inst._wrapperState.initialValue,                                                                  // 60\n      onChange: inst._wrapperState.onChange                                                                            // 61\n    });                                                                                                                // 62\n                                                                                                                       // 63\n    return hostProps;                                                                                                  // 64\n  },                                                                                                                   // 65\n                                                                                                                       // 66\n  mountWrapper: function (inst, props) {                                                                               // 67\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 68\n      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);                                 // 69\n      if (props.valueLink !== undefined && !didWarnValueLink) {                                                        // 70\n        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;\n        didWarnValueLink = true;                                                                                       // 72\n      }                                                                                                                // 73\n      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {                    // 74\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;\n        didWarnValDefaultVal = true;                                                                                   // 76\n      }                                                                                                                // 77\n    }                                                                                                                  // 78\n                                                                                                                       // 79\n    var value = LinkedValueUtils.getValue(props);                                                                      // 80\n    var initialValue = value;                                                                                          // 81\n                                                                                                                       // 82\n    // Only bother fetching default value if we're going to use it                                                     // 83\n    if (value == null) {                                                                                               // 84\n      var defaultValue = props.defaultValue;                                                                           // 85\n      // TODO (yungsters): Remove support for children content in <textarea>.                                          // 86\n      var children = props.children;                                                                                   // 87\n      if (children != null) {                                                                                          // 88\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 89\n          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;\n        }                                                                                                              // 91\n        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;\n        if (Array.isArray(children)) {                                                                                 // 93\n          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;\n          children = children[0];                                                                                      // 95\n        }                                                                                                              // 96\n                                                                                                                       // 97\n        defaultValue = '' + children;                                                                                  // 98\n      }                                                                                                                // 99\n      if (defaultValue == null) {                                                                                      // 100\n        defaultValue = '';                                                                                             // 101\n      }                                                                                                                // 102\n      initialValue = defaultValue;                                                                                     // 103\n    }                                                                                                                  // 104\n                                                                                                                       // 105\n    inst._wrapperState = {                                                                                             // 106\n      initialValue: '' + initialValue,                                                                                 // 107\n      listeners: null,                                                                                                 // 108\n      onChange: _handleChange.bind(inst)                                                                               // 109\n    };                                                                                                                 // 110\n  },                                                                                                                   // 111\n                                                                                                                       // 112\n  updateWrapper: function (inst) {                                                                                     // 113\n    var props = inst._currentElement.props;                                                                            // 114\n                                                                                                                       // 115\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);                                                        // 116\n    var value = LinkedValueUtils.getValue(props);                                                                      // 117\n    if (value != null) {                                                                                               // 118\n      // Cast `value` to a string to ensure the value is set correctly. While                                          // 119\n      // browsers typically do this as necessary, jsdom doesn't.                                                       // 120\n      var newValue = '' + value;                                                                                       // 121\n                                                                                                                       // 122\n      // To avoid side effects (such as losing text selection), only set value if changed                              // 123\n      if (newValue !== node.value) {                                                                                   // 124\n        node.value = newValue;                                                                                         // 125\n      }                                                                                                                // 126\n      if (props.defaultValue == null) {                                                                                // 127\n        node.defaultValue = newValue;                                                                                  // 128\n      }                                                                                                                // 129\n    }                                                                                                                  // 130\n    if (props.defaultValue != null) {                                                                                  // 131\n      node.defaultValue = props.defaultValue;                                                                          // 132\n    }                                                                                                                  // 133\n  },                                                                                                                   // 134\n                                                                                                                       // 135\n  postMountWrapper: function (inst) {                                                                                  // 136\n    // This is in postMount because we need access to the DOM node, which is not                                       // 137\n    // available until after the component has mounted.                                                                // 138\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);                                                        // 139\n    var textContent = node.textContent;                                                                                // 140\n                                                                                                                       // 141\n    // Only set node.value if textContent is equal to the expected                                                     // 142\n    // initial value. In IE10/IE11 there is a bug where the placeholder attribute                                      // 143\n    // will populate textContent as well.                                                                              // 144\n    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/                                          // 145\n    if (textContent === inst._wrapperState.initialValue) {                                                             // 146\n      node.value = textContent;                                                                                        // 147\n    }                                                                                                                  // 148\n  }                                                                                                                    // 149\n};                                                                                                                     // 150\n                                                                                                                       // 151\nfunction _handleChange(event) {                                                                                        // 152\n  var props = this._currentElement.props;                                                                              // 153\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);                                                    // 154\n  ReactUpdates.asap(forceUpdateIfMounted, this);                                                                       // 155\n  return returnValue;                                                                                                  // 156\n}                                                                                                                      // 157\n                                                                                                                       // 158\nmodule.exports = ReactDOMTextarea;                                                                                     // 159\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactMultiChild.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactMultiChild.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 13\n                                                                                                                       // 14\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');                                                // 15\nvar ReactInstanceMap = require('./ReactInstanceMap');                                                                  // 16\nvar ReactInstrumentation = require('./ReactInstrumentation');                                                          // 17\n                                                                                                                       // 18\nvar ReactCurrentOwner = require('react/lib/ReactCurrentOwner');                                                        // 19\nvar ReactReconciler = require('./ReactReconciler');                                                                    // 20\nvar ReactChildReconciler = require('./ReactChildReconciler');                                                          // 21\n                                                                                                                       // 22\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 23\nvar flattenChildren = require('./flattenChildren');                                                                    // 24\nvar invariant = require('fbjs/lib/invariant');                                                                         // 25\n                                                                                                                       // 26\n/**                                                                                                                    // 27\n * Make an update for markup to be rendered and inserted at a supplied index.                                          // 28\n *                                                                                                                     // 29\n * @param {string} markup Markup that renders into an element.                                                         // 30\n * @param {number} toIndex Destination index.                                                                          // 31\n * @private                                                                                                            // 32\n */                                                                                                                    // 33\nfunction makeInsertMarkup(markup, afterNode, toIndex) {                                                                // 34\n  // NOTE: Null values reduce hidden classes.                                                                          // 35\n  return {                                                                                                             // 36\n    type: 'INSERT_MARKUP',                                                                                             // 37\n    content: markup,                                                                                                   // 38\n    fromIndex: null,                                                                                                   // 39\n    fromNode: null,                                                                                                    // 40\n    toIndex: toIndex,                                                                                                  // 41\n    afterNode: afterNode                                                                                               // 42\n  };                                                                                                                   // 43\n}                                                                                                                      // 44\n                                                                                                                       // 45\n/**                                                                                                                    // 46\n * Make an update for moving an existing element to another index.                                                     // 47\n *                                                                                                                     // 48\n * @param {number} fromIndex Source index of the existing element.                                                     // 49\n * @param {number} toIndex Destination index of the element.                                                           // 50\n * @private                                                                                                            // 51\n */                                                                                                                    // 52\nfunction makeMove(child, afterNode, toIndex) {                                                                         // 53\n  // NOTE: Null values reduce hidden classes.                                                                          // 54\n  return {                                                                                                             // 55\n    type: 'MOVE_EXISTING',                                                                                             // 56\n    content: null,                                                                                                     // 57\n    fromIndex: child._mountIndex,                                                                                      // 58\n    fromNode: ReactReconciler.getHostNode(child),                                                                      // 59\n    toIndex: toIndex,                                                                                                  // 60\n    afterNode: afterNode                                                                                               // 61\n  };                                                                                                                   // 62\n}                                                                                                                      // 63\n                                                                                                                       // 64\n/**                                                                                                                    // 65\n * Make an update for removing an element at an index.                                                                 // 66\n *                                                                                                                     // 67\n * @param {number} fromIndex Index of the element to remove.                                                           // 68\n * @private                                                                                                            // 69\n */                                                                                                                    // 70\nfunction makeRemove(child, node) {                                                                                     // 71\n  // NOTE: Null values reduce hidden classes.                                                                          // 72\n  return {                                                                                                             // 73\n    type: 'REMOVE_NODE',                                                                                               // 74\n    content: null,                                                                                                     // 75\n    fromIndex: child._mountIndex,                                                                                      // 76\n    fromNode: node,                                                                                                    // 77\n    toIndex: null,                                                                                                     // 78\n    afterNode: null                                                                                                    // 79\n  };                                                                                                                   // 80\n}                                                                                                                      // 81\n                                                                                                                       // 82\n/**                                                                                                                    // 83\n * Make an update for setting the markup of a node.                                                                    // 84\n *                                                                                                                     // 85\n * @param {string} markup Markup that renders into an element.                                                         // 86\n * @private                                                                                                            // 87\n */                                                                                                                    // 88\nfunction makeSetMarkup(markup) {                                                                                       // 89\n  // NOTE: Null values reduce hidden classes.                                                                          // 90\n  return {                                                                                                             // 91\n    type: 'SET_MARKUP',                                                                                                // 92\n    content: markup,                                                                                                   // 93\n    fromIndex: null,                                                                                                   // 94\n    fromNode: null,                                                                                                    // 95\n    toIndex: null,                                                                                                     // 96\n    afterNode: null                                                                                                    // 97\n  };                                                                                                                   // 98\n}                                                                                                                      // 99\n                                                                                                                       // 100\n/**                                                                                                                    // 101\n * Make an update for setting the text content.                                                                        // 102\n *                                                                                                                     // 103\n * @param {string} textContent Text content to set.                                                                    // 104\n * @private                                                                                                            // 105\n */                                                                                                                    // 106\nfunction makeTextContent(textContent) {                                                                                // 107\n  // NOTE: Null values reduce hidden classes.                                                                          // 108\n  return {                                                                                                             // 109\n    type: 'TEXT_CONTENT',                                                                                              // 110\n    content: textContent,                                                                                              // 111\n    fromIndex: null,                                                                                                   // 112\n    fromNode: null,                                                                                                    // 113\n    toIndex: null,                                                                                                     // 114\n    afterNode: null                                                                                                    // 115\n  };                                                                                                                   // 116\n}                                                                                                                      // 117\n                                                                                                                       // 118\n/**                                                                                                                    // 119\n * Push an update, if any, onto the queue. Creates a new queue if none is                                              // 120\n * passed and always returns the queue. Mutative.                                                                      // 121\n */                                                                                                                    // 122\nfunction enqueue(queue, update) {                                                                                      // 123\n  if (update) {                                                                                                        // 124\n    queue = queue || [];                                                                                               // 125\n    queue.push(update);                                                                                                // 126\n  }                                                                                                                    // 127\n  return queue;                                                                                                        // 128\n}                                                                                                                      // 129\n                                                                                                                       // 130\n/**                                                                                                                    // 131\n * Processes any enqueued updates.                                                                                     // 132\n *                                                                                                                     // 133\n * @private                                                                                                            // 134\n */                                                                                                                    // 135\nfunction processQueue(inst, updateQueue) {                                                                             // 136\n  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);                                                 // 137\n}                                                                                                                      // 138\n                                                                                                                       // 139\nvar setChildrenForInstrumentation = emptyFunction;                                                                     // 140\nif (process.env.NODE_ENV !== 'production') {                                                                           // 141\n  var getDebugID = function (inst) {                                                                                   // 142\n    if (!inst._debugID) {                                                                                              // 143\n      // Check for ART-like instances. TODO: This is silly/gross.                                                      // 144\n      var internal;                                                                                                    // 145\n      if (internal = ReactInstanceMap.get(inst)) {                                                                     // 146\n        inst = internal;                                                                                               // 147\n      }                                                                                                                // 148\n    }                                                                                                                  // 149\n    return inst._debugID;                                                                                              // 150\n  };                                                                                                                   // 151\n  setChildrenForInstrumentation = function (children) {                                                                // 152\n    var debugID = getDebugID(this);                                                                                    // 153\n    // TODO: React Native empty components are also multichild.                                                        // 154\n    // This means they still get into this method but don't have _debugID.                                             // 155\n    if (debugID !== 0) {                                                                                               // 156\n      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {      // 157\n        return children[key]._debugID;                                                                                 // 158\n      }) : []);                                                                                                        // 159\n    }                                                                                                                  // 160\n  };                                                                                                                   // 161\n}                                                                                                                      // 162\n                                                                                                                       // 163\n/**                                                                                                                    // 164\n * ReactMultiChild are capable of reconciling multiple children.                                                       // 165\n *                                                                                                                     // 166\n * @class ReactMultiChild                                                                                              // 167\n * @internal                                                                                                           // 168\n */                                                                                                                    // 169\nvar ReactMultiChild = {                                                                                                // 170\n  /**                                                                                                                  // 171\n   * Provides common functionality for components that must reconcile multiple                                         // 172\n   * children. This is used by `ReactDOMComponent` to mount, update, and                                               // 173\n   * unmount child components.                                                                                         // 174\n   *                                                                                                                   // 175\n   * @lends {ReactMultiChild.prototype}                                                                                // 176\n   */                                                                                                                  // 177\n  Mixin: {                                                                                                             // 178\n    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {                                  // 179\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 180\n        var selfDebugID = getDebugID(this);                                                                            // 181\n        if (this._currentElement) {                                                                                    // 182\n          try {                                                                                                        // 183\n            ReactCurrentOwner.current = this._currentElement._owner;                                                   // 184\n            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);        // 185\n          } finally {                                                                                                  // 186\n            ReactCurrentOwner.current = null;                                                                          // 187\n          }                                                                                                            // 188\n        }                                                                                                              // 189\n      }                                                                                                                // 190\n      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);                           // 191\n    },                                                                                                                 // 192\n                                                                                                                       // 193\n    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {\n      var nextChildren;                                                                                                // 195\n      var selfDebugID = 0;                                                                                             // 196\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 197\n        selfDebugID = getDebugID(this);                                                                                // 198\n        if (this._currentElement) {                                                                                    // 199\n          try {                                                                                                        // 200\n            ReactCurrentOwner.current = this._currentElement._owner;                                                   // 201\n            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);                                   // 202\n          } finally {                                                                                                  // 203\n            ReactCurrentOwner.current = null;                                                                          // 204\n          }                                                                                                            // 205\n          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);\n          return nextChildren;                                                                                         // 207\n        }                                                                                                              // 208\n      }                                                                                                                // 209\n      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);                                         // 210\n      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);\n      return nextChildren;                                                                                             // 212\n    },                                                                                                                 // 213\n                                                                                                                       // 214\n    /**                                                                                                                // 215\n     * Generates a \"mount image\" for each of the supplied children. In the case                                        // 216\n     * of `ReactDOMComponent`, a mount image is a string of markup.                                                    // 217\n     *                                                                                                                 // 218\n     * @param {?object} nestedChildren Nested child maps.                                                              // 219\n     * @return {array} An array of mounted representations.                                                            // 220\n     * @internal                                                                                                       // 221\n     */                                                                                                                // 222\n    mountChildren: function (nestedChildren, transaction, context) {                                                   // 223\n      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);                        // 224\n      this._renderedChildren = children;                                                                               // 225\n                                                                                                                       // 226\n      var mountImages = [];                                                                                            // 227\n      var index = 0;                                                                                                   // 228\n      for (var name in children) {                                                                                     // 229\n        if (children.hasOwnProperty(name)) {                                                                           // 230\n          var child = children[name];                                                                                  // 231\n          var selfDebugID = 0;                                                                                         // 232\n          if (process.env.NODE_ENV !== 'production') {                                                                 // 233\n            selfDebugID = getDebugID(this);                                                                            // 234\n          }                                                                                                            // 235\n          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);\n          child._mountIndex = index++;                                                                                 // 237\n          mountImages.push(mountImage);                                                                                // 238\n        }                                                                                                              // 239\n      }                                                                                                                // 240\n                                                                                                                       // 241\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 242\n        setChildrenForInstrumentation.call(this, children);                                                            // 243\n      }                                                                                                                // 244\n                                                                                                                       // 245\n      return mountImages;                                                                                              // 246\n    },                                                                                                                 // 247\n                                                                                                                       // 248\n    /**                                                                                                                // 249\n     * Replaces any rendered children with a text content string.                                                      // 250\n     *                                                                                                                 // 251\n     * @param {string} nextContent String of content.                                                                  // 252\n     * @internal                                                                                                       // 253\n     */                                                                                                                // 254\n    updateTextContent: function (nextContent) {                                                                        // 255\n      var prevChildren = this._renderedChildren;                                                                       // 256\n      // Remove any rendered children.                                                                                 // 257\n      ReactChildReconciler.unmountChildren(prevChildren, false);                                                       // 258\n      for (var name in prevChildren) {                                                                                 // 259\n        if (prevChildren.hasOwnProperty(name)) {                                                                       // 260\n          !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;\n        }                                                                                                              // 262\n      }                                                                                                                // 263\n      // Set new text content.                                                                                         // 264\n      var updates = [makeTextContent(nextContent)];                                                                    // 265\n      processQueue(this, updates);                                                                                     // 266\n    },                                                                                                                 // 267\n                                                                                                                       // 268\n    /**                                                                                                                // 269\n     * Replaces any rendered children with a markup string.                                                            // 270\n     *                                                                                                                 // 271\n     * @param {string} nextMarkup String of markup.                                                                    // 272\n     * @internal                                                                                                       // 273\n     */                                                                                                                // 274\n    updateMarkup: function (nextMarkup) {                                                                              // 275\n      var prevChildren = this._renderedChildren;                                                                       // 276\n      // Remove any rendered children.                                                                                 // 277\n      ReactChildReconciler.unmountChildren(prevChildren, false);                                                       // 278\n      for (var name in prevChildren) {                                                                                 // 279\n        if (prevChildren.hasOwnProperty(name)) {                                                                       // 280\n          !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;\n        }                                                                                                              // 282\n      }                                                                                                                // 283\n      var updates = [makeSetMarkup(nextMarkup)];                                                                       // 284\n      processQueue(this, updates);                                                                                     // 285\n    },                                                                                                                 // 286\n                                                                                                                       // 287\n    /**                                                                                                                // 288\n     * Updates the rendered children with new children.                                                                // 289\n     *                                                                                                                 // 290\n     * @param {?object} nextNestedChildrenElements Nested child element maps.                                          // 291\n     * @param {ReactReconcileTransaction} transaction                                                                  // 292\n     * @internal                                                                                                       // 293\n     */                                                                                                                // 294\n    updateChildren: function (nextNestedChildrenElements, transaction, context) {                                      // 295\n      // Hook used by React ART                                                                                        // 296\n      this._updateChildren(nextNestedChildrenElements, transaction, context);                                          // 297\n    },                                                                                                                 // 298\n                                                                                                                       // 299\n    /**                                                                                                                // 300\n     * @param {?object} nextNestedChildrenElements Nested child element maps.                                          // 301\n     * @param {ReactReconcileTransaction} transaction                                                                  // 302\n     * @final                                                                                                          // 303\n     * @protected                                                                                                      // 304\n     */                                                                                                                // 305\n    _updateChildren: function (nextNestedChildrenElements, transaction, context) {                                     // 306\n      var prevChildren = this._renderedChildren;                                                                       // 307\n      var removedNodes = {};                                                                                           // 308\n      var mountImages = [];                                                                                            // 309\n      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);\n      if (!nextChildren && !prevChildren) {                                                                            // 311\n        return;                                                                                                        // 312\n      }                                                                                                                // 313\n      var updates = null;                                                                                              // 314\n      var name;                                                                                                        // 315\n      // `nextIndex` will increment for each child in `nextChildren`, but                                              // 316\n      // `lastIndex` will be the last index visited in `prevChildren`.                                                 // 317\n      var nextIndex = 0;                                                                                               // 318\n      var lastIndex = 0;                                                                                               // 319\n      // `nextMountIndex` will increment for each newly mounted child.                                                 // 320\n      var nextMountIndex = 0;                                                                                          // 321\n      var lastPlacedNode = null;                                                                                       // 322\n      for (name in nextChildren) {                                                                                     // 323\n        if (!nextChildren.hasOwnProperty(name)) {                                                                      // 324\n          continue;                                                                                                    // 325\n        }                                                                                                              // 326\n        var prevChild = prevChildren && prevChildren[name];                                                            // 327\n        var nextChild = nextChildren[name];                                                                            // 328\n        if (prevChild === nextChild) {                                                                                 // 329\n          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));                 // 330\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);                                                      // 331\n          prevChild._mountIndex = nextIndex;                                                                           // 332\n        } else {                                                                                                       // 333\n          if (prevChild) {                                                                                             // 334\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.                                       // 335\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);                                                    // 336\n            // The `removedNodes` loop below will actually remove the child.                                           // 337\n          }                                                                                                            // 338\n          // The child must be instantiated before it's mounted.                                                       // 339\n          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));\n          nextMountIndex++;                                                                                            // 341\n        }                                                                                                              // 342\n        nextIndex++;                                                                                                   // 343\n        lastPlacedNode = ReactReconciler.getHostNode(nextChild);                                                       // 344\n      }                                                                                                                // 345\n      // Remove children that are no longer present.                                                                   // 346\n      for (name in removedNodes) {                                                                                     // 347\n        if (removedNodes.hasOwnProperty(name)) {                                                                       // 348\n          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));                      // 349\n        }                                                                                                              // 350\n      }                                                                                                                // 351\n      if (updates) {                                                                                                   // 352\n        processQueue(this, updates);                                                                                   // 353\n      }                                                                                                                // 354\n      this._renderedChildren = nextChildren;                                                                           // 355\n                                                                                                                       // 356\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 357\n        setChildrenForInstrumentation.call(this, nextChildren);                                                        // 358\n      }                                                                                                                // 359\n    },                                                                                                                 // 360\n                                                                                                                       // 361\n    /**                                                                                                                // 362\n     * Unmounts all rendered children. This should be used to clean up children                                        // 363\n     * when this component is unmounted. It does not actually perform any                                              // 364\n     * backend operations.                                                                                             // 365\n     *                                                                                                                 // 366\n     * @internal                                                                                                       // 367\n     */                                                                                                                // 368\n    unmountChildren: function (safely) {                                                                               // 369\n      var renderedChildren = this._renderedChildren;                                                                   // 370\n      ReactChildReconciler.unmountChildren(renderedChildren, safely);                                                  // 371\n      this._renderedChildren = null;                                                                                   // 372\n    },                                                                                                                 // 373\n                                                                                                                       // 374\n    /**                                                                                                                // 375\n     * Moves a child component to the supplied index.                                                                  // 376\n     *                                                                                                                 // 377\n     * @param {ReactComponent} child Component to move.                                                                // 378\n     * @param {number} toIndex Destination index of the element.                                                       // 379\n     * @param {number} lastIndex Last index visited of the siblings of `child`.                                        // 380\n     * @protected                                                                                                      // 381\n     */                                                                                                                // 382\n    moveChild: function (child, afterNode, toIndex, lastIndex) {                                                       // 383\n      // If the index of `child` is less than `lastIndex`, then it needs to                                            // 384\n      // be moved. Otherwise, we do not need to move it because a child will be                                        // 385\n      // inserted or moved before `child`.                                                                             // 386\n      if (child._mountIndex < lastIndex) {                                                                             // 387\n        return makeMove(child, afterNode, toIndex);                                                                    // 388\n      }                                                                                                                // 389\n    },                                                                                                                 // 390\n                                                                                                                       // 391\n    /**                                                                                                                // 392\n     * Creates a child component.                                                                                      // 393\n     *                                                                                                                 // 394\n     * @param {ReactComponent} child Component to create.                                                              // 395\n     * @param {string} mountImage Markup to insert.                                                                    // 396\n     * @protected                                                                                                      // 397\n     */                                                                                                                // 398\n    createChild: function (child, afterNode, mountImage) {                                                             // 399\n      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);                                               // 400\n    },                                                                                                                 // 401\n                                                                                                                       // 402\n    /**                                                                                                                // 403\n     * Removes a child component.                                                                                      // 404\n     *                                                                                                                 // 405\n     * @param {ReactComponent} child Child to remove.                                                                  // 406\n     * @protected                                                                                                      // 407\n     */                                                                                                                // 408\n    removeChild: function (child, node) {                                                                              // 409\n      return makeRemove(child, node);                                                                                  // 410\n    },                                                                                                                 // 411\n                                                                                                                       // 412\n    /**                                                                                                                // 413\n     * Mounts a child with the supplied name.                                                                          // 414\n     *                                                                                                                 // 415\n     * NOTE: This is part of `updateChildren` and is here for readability.                                             // 416\n     *                                                                                                                 // 417\n     * @param {ReactComponent} child Component to mount.                                                               // 418\n     * @param {string} name Name of the child.                                                                         // 419\n     * @param {number} index Index at which to insert the child.                                                       // 420\n     * @param {ReactReconcileTransaction} transaction                                                                  // 421\n     * @private                                                                                                        // 422\n     */                                                                                                                // 423\n    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {                         // 424\n      child._mountIndex = index;                                                                                       // 425\n      return this.createChild(child, afterNode, mountImage);                                                           // 426\n    },                                                                                                                 // 427\n                                                                                                                       // 428\n    /**                                                                                                                // 429\n     * Unmounts a rendered child.                                                                                      // 430\n     *                                                                                                                 // 431\n     * NOTE: This is part of `updateChildren` and is here for readability.                                             // 432\n     *                                                                                                                 // 433\n     * @param {ReactComponent} child Component to unmount.                                                             // 434\n     * @private                                                                                                        // 435\n     */                                                                                                                // 436\n    _unmountChild: function (child, node) {                                                                            // 437\n      var update = this.removeChild(child, node);                                                                      // 438\n      child._mountIndex = null;                                                                                        // 439\n      return update;                                                                                                   // 440\n    }                                                                                                                  // 441\n  }                                                                                                                    // 442\n};                                                                                                                     // 443\n                                                                                                                       // 444\nmodule.exports = ReactMultiChild;                                                                                      // 445\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactComponentEnvironment.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactComponentEnvironment.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar invariant = require('fbjs/lib/invariant');                                                                         // 16\n                                                                                                                       // 17\nvar injected = false;                                                                                                  // 18\n                                                                                                                       // 19\nvar ReactComponentEnvironment = {                                                                                      // 20\n  /**                                                                                                                  // 21\n   * Optionally injectable hook for swapping out mount images in the middle of                                         // 22\n   * the tree.                                                                                                         // 23\n   */                                                                                                                  // 24\n  replaceNodeWithMarkup: null,                                                                                         // 25\n                                                                                                                       // 26\n  /**                                                                                                                  // 27\n   * Optionally injectable hook for processing a queue of child updates. Will                                          // 28\n   * later move into MultiChildComponents.                                                                             // 29\n   */                                                                                                                  // 30\n  processChildrenUpdates: null,                                                                                        // 31\n                                                                                                                       // 32\n  injection: {                                                                                                         // 33\n    injectEnvironment: function (environment) {                                                                        // 34\n      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;\n      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;                             // 36\n      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;                           // 37\n      injected = true;                                                                                                 // 38\n    }                                                                                                                  // 39\n  }                                                                                                                    // 40\n};                                                                                                                     // 41\n                                                                                                                       // 42\nmodule.exports = ReactComponentEnvironment;                                                                            // 43\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactInstanceMap.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactInstanceMap.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * `ReactInstanceMap` maintains a mapping from a public facing stateful                                                // 14\n * instance (key) and the internal representation (value). This allows public                                          // 15\n * methods to accept the user facing instance as an argument and map them back                                         // 16\n * to internal methods.                                                                                                // 17\n */                                                                                                                    // 18\n                                                                                                                       // 19\n// TODO: Replace this with ES6: var ReactInstanceMap = new Map();                                                      // 20\n                                                                                                                       // 21\nvar ReactInstanceMap = {                                                                                               // 22\n  /**                                                                                                                  // 23\n   * This API should be called `delete` but we'd have to make sure to always                                           // 24\n   * transform these to strings for IE support. When this transform is fully                                           // 25\n   * supported we can rename it.                                                                                       // 26\n   */                                                                                                                  // 27\n  remove: function (key) {                                                                                             // 28\n    key._reactInternalInstance = undefined;                                                                            // 29\n  },                                                                                                                   // 30\n                                                                                                                       // 31\n  get: function (key) {                                                                                                // 32\n    return key._reactInternalInstance;                                                                                 // 33\n  },                                                                                                                   // 34\n                                                                                                                       // 35\n  has: function (key) {                                                                                                // 36\n    return key._reactInternalInstance !== undefined;                                                                   // 37\n  },                                                                                                                   // 38\n                                                                                                                       // 39\n  set: function (key, value) {                                                                                         // 40\n    key._reactInternalInstance = value;                                                                                // 41\n  }                                                                                                                    // 42\n};                                                                                                                     // 43\n                                                                                                                       // 44\nmodule.exports = ReactInstanceMap;                                                                                     // 45\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactChildReconciler.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactChildReconciler.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar ReactReconciler = require('./ReactReconciler');                                                                    // 13\n                                                                                                                       // 14\nvar instantiateReactComponent = require('./instantiateReactComponent');                                                // 15\nvar KeyEscapeUtils = require('./KeyEscapeUtils');                                                                      // 16\nvar shouldUpdateReactComponent = require('./shouldUpdateReactComponent');                                              // 17\nvar traverseAllChildren = require('./traverseAllChildren');                                                            // 18\nvar warning = require('fbjs/lib/warning');                                                                             // 19\n                                                                                                                       // 20\nvar ReactComponentTreeHook;                                                                                            // 21\n                                                                                                                       // 22\nif (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {                                // 23\n  // Temporary hack.                                                                                                   // 24\n  // Inline requires don't work well with Jest:                                                                        // 25\n  // https://github.com/facebook/react/issues/7240                                                                     // 26\n  // Remove the inline requires when we don't need them anymore:                                                       // 27\n  // https://github.com/facebook/react/pull/7178                                                                       // 28\n  ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');                                                // 29\n}                                                                                                                      // 30\n                                                                                                                       // 31\nfunction instantiateChild(childInstances, child, name, selfDebugID) {                                                  // 32\n  // We found a component instance.                                                                                    // 33\n  var keyUnique = childInstances[name] === undefined;                                                                  // 34\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 35\n    if (!ReactComponentTreeHook) {                                                                                     // 36\n      ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');                                            // 37\n    }                                                                                                                  // 38\n    if (!keyUnique) {                                                                                                  // 39\n      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;\n    }                                                                                                                  // 41\n  }                                                                                                                    // 42\n  if (child != null && keyUnique) {                                                                                    // 43\n    childInstances[name] = instantiateReactComponent(child, true);                                                     // 44\n  }                                                                                                                    // 45\n}                                                                                                                      // 46\n                                                                                                                       // 47\n/**                                                                                                                    // 48\n * ReactChildReconciler provides helpers for initializing or updating a set of                                         // 49\n * children. Its output is suitable for passing it onto ReactMultiChild which                                          // 50\n * does diffed reordering and insertion.                                                                               // 51\n */                                                                                                                    // 52\nvar ReactChildReconciler = {                                                                                           // 53\n  /**                                                                                                                  // 54\n   * Generates a \"mount image\" for each of the supplied children. In the case                                          // 55\n   * of `ReactDOMComponent`, a mount image is a string of markup.                                                      // 56\n   *                                                                                                                   // 57\n   * @param {?object} nestedChildNodes Nested child maps.                                                              // 58\n   * @return {?object} A set of child instances.                                                                       // 59\n   * @internal                                                                                                         // 60\n   */                                                                                                                  // 61\n  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID) // 0 in production and for roots\n  {                                                                                                                    // 63\n    if (nestedChildNodes == null) {                                                                                    // 64\n      return null;                                                                                                     // 65\n    }                                                                                                                  // 66\n    var childInstances = {};                                                                                           // 67\n                                                                                                                       // 68\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 69\n      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {                                       // 70\n        return instantiateChild(childInsts, child, name, selfDebugID);                                                 // 71\n      }, childInstances);                                                                                              // 72\n    } else {                                                                                                           // 73\n      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);                                         // 74\n    }                                                                                                                  // 75\n    return childInstances;                                                                                             // 76\n  },                                                                                                                   // 77\n                                                                                                                       // 78\n  /**                                                                                                                  // 79\n   * Updates the rendered children and returns a new set of children.                                                  // 80\n   *                                                                                                                   // 81\n   * @param {?object} prevChildren Previously initialized set of children.                                             // 82\n   * @param {?object} nextChildren Flat child element maps.                                                            // 83\n   * @param {ReactReconcileTransaction} transaction                                                                    // 84\n   * @param {object} context                                                                                           // 85\n   * @return {?object} A new set of child instances.                                                                   // 86\n   * @internal                                                                                                         // 87\n   */                                                                                                                  // 88\n  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID) // 0 in production and for roots\n  {                                                                                                                    // 90\n    // We currently don't have a way to track moves here but if we use iterators                                       // 91\n    // instead of for..in we can zip the iterators and check if an item has                                            // 92\n    // moved.                                                                                                          // 93\n    // TODO: If nothing has changed, return the prevChildren object so that we                                         // 94\n    // can quickly bailout if nothing has changed.                                                                     // 95\n    if (!nextChildren && !prevChildren) {                                                                              // 96\n      return;                                                                                                          // 97\n    }                                                                                                                  // 98\n    var name;                                                                                                          // 99\n    var prevChild;                                                                                                     // 100\n    for (name in nextChildren) {                                                                                       // 101\n      if (!nextChildren.hasOwnProperty(name)) {                                                                        // 102\n        continue;                                                                                                      // 103\n      }                                                                                                                // 104\n      prevChild = prevChildren && prevChildren[name];                                                                  // 105\n      var prevElement = prevChild && prevChild._currentElement;                                                        // 106\n      var nextElement = nextChildren[name];                                                                            // 107\n      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {                                 // 108\n        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);                                // 109\n        nextChildren[name] = prevChild;                                                                                // 110\n      } else {                                                                                                         // 111\n        if (prevChild) {                                                                                               // 112\n          removedNodes[name] = ReactReconciler.getHostNode(prevChild);                                                 // 113\n          ReactReconciler.unmountComponent(prevChild, false);                                                          // 114\n        }                                                                                                              // 115\n        // The child must be instantiated before it's mounted.                                                         // 116\n        var nextChildInstance = instantiateReactComponent(nextElement, true);                                          // 117\n        nextChildren[name] = nextChildInstance;                                                                        // 118\n        // Creating mount image now ensures refs are resolved in right order                                           // 119\n        // (see https://github.com/facebook/react/pull/7101 for explanation).                                          // 120\n        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);\n        mountImages.push(nextChildMountImage);                                                                         // 122\n      }                                                                                                                // 123\n    }                                                                                                                  // 124\n    // Unmount children that are no longer present.                                                                    // 125\n    for (name in prevChildren) {                                                                                       // 126\n      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {                 // 127\n        prevChild = prevChildren[name];                                                                                // 128\n        removedNodes[name] = ReactReconciler.getHostNode(prevChild);                                                   // 129\n        ReactReconciler.unmountComponent(prevChild, false);                                                            // 130\n      }                                                                                                                // 131\n    }                                                                                                                  // 132\n  },                                                                                                                   // 133\n                                                                                                                       // 134\n  /**                                                                                                                  // 135\n   * Unmounts all rendered children. This should be used to clean up children                                          // 136\n   * when this component is unmounted.                                                                                 // 137\n   *                                                                                                                   // 138\n   * @param {?object} renderedChildren Previously initialized set of children.                                         // 139\n   * @internal                                                                                                         // 140\n   */                                                                                                                  // 141\n  unmountChildren: function (renderedChildren, safely) {                                                               // 142\n    for (var name in renderedChildren) {                                                                               // 143\n      if (renderedChildren.hasOwnProperty(name)) {                                                                     // 144\n        var renderedChild = renderedChildren[name];                                                                    // 145\n        ReactReconciler.unmountComponent(renderedChild, safely);                                                       // 146\n      }                                                                                                                // 147\n    }                                                                                                                  // 148\n  }                                                                                                                    // 149\n};                                                                                                                     // 150\n                                                                                                                       // 151\nmodule.exports = ReactChildReconciler;                                                                                 // 152\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"instantiateReactComponent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/instantiateReactComponent.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _prodInvariant = require('./reactProdInvariant'),                                                                  // 13\n    _assign = require('object-assign');                                                                                // 14\n                                                                                                                       // 15\nvar ReactCompositeComponent = require('./ReactCompositeComponent');                                                    // 16\nvar ReactEmptyComponent = require('./ReactEmptyComponent');                                                            // 17\nvar ReactHostComponent = require('./ReactHostComponent');                                                              // 18\n                                                                                                                       // 19\nvar getNextDebugID = require('react/lib/getNextDebugID');                                                              // 20\nvar invariant = require('fbjs/lib/invariant');                                                                         // 21\nvar warning = require('fbjs/lib/warning');                                                                             // 22\n                                                                                                                       // 23\n// To avoid a cyclic dependency, we create the final class in this module                                              // 24\nvar ReactCompositeComponentWrapper = function (element) {                                                              // 25\n  this.construct(element);                                                                                             // 26\n};                                                                                                                     // 27\n                                                                                                                       // 28\nfunction getDeclarationErrorAddendum(owner) {                                                                          // 29\n  if (owner) {                                                                                                         // 30\n    var name = owner.getName();                                                                                        // 31\n    if (name) {                                                                                                        // 32\n      return ' Check the render method of `' + name + '`.';                                                            // 33\n    }                                                                                                                  // 34\n  }                                                                                                                    // 35\n  return '';                                                                                                           // 36\n}                                                                                                                      // 37\n                                                                                                                       // 38\n/**                                                                                                                    // 39\n * Check if the type reference is a known internal type. I.e. not a user                                               // 40\n * provided composite type.                                                                                            // 41\n *                                                                                                                     // 42\n * @param {function} type                                                                                              // 43\n * @return {boolean} Returns true if this is a valid internal type.                                                    // 44\n */                                                                                                                    // 45\nfunction isInternalComponentType(type) {                                                                               // 46\n  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';\n}                                                                                                                      // 48\n                                                                                                                       // 49\n/**                                                                                                                    // 50\n * Given a ReactNode, create an instance that will actually be mounted.                                                // 51\n *                                                                                                                     // 52\n * @param {ReactNode} node                                                                                             // 53\n * @param {boolean} shouldHaveDebugID                                                                                  // 54\n * @return {object} A new instance of the element's constructor.                                                       // 55\n * @protected                                                                                                          // 56\n */                                                                                                                    // 57\nfunction instantiateReactComponent(node, shouldHaveDebugID) {                                                          // 58\n  var instance;                                                                                                        // 59\n                                                                                                                       // 60\n  if (node === null || node === false) {                                                                               // 61\n    instance = ReactEmptyComponent.create(instantiateReactComponent);                                                  // 62\n  } else if (typeof node === 'object') {                                                                               // 63\n    var element = node;                                                                                                // 64\n    var type = element.type;                                                                                           // 65\n    if (typeof type !== 'function' && typeof type !== 'string') {                                                      // 66\n      var info = '';                                                                                                   // 67\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 68\n        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {       // 69\n          info += ' You likely forgot to export your component from the file ' + \"it's defined in.\";                   // 70\n        }                                                                                                              // 71\n      }                                                                                                                // 72\n      info += getDeclarationErrorAddendum(element._owner);                                                             // 73\n      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;\n    }                                                                                                                  // 75\n                                                                                                                       // 76\n    // Special case string values                                                                                      // 77\n    if (typeof element.type === 'string') {                                                                            // 78\n      instance = ReactHostComponent.createInternalComponent(element);                                                  // 79\n    } else if (isInternalComponentType(element.type)) {                                                                // 80\n      // This is temporarily available for custom components that are not string                                       // 81\n      // representations. I.e. ART. Once those are updated to use the string                                           // 82\n      // representation, we can drop this code path.                                                                   // 83\n      instance = new element.type(element);                                                                            // 84\n                                                                                                                       // 85\n      // We renamed this. Allow the old name for compat. :(                                                            // 86\n      if (!instance.getHostNode) {                                                                                     // 87\n        instance.getHostNode = instance.getNativeNode;                                                                 // 88\n      }                                                                                                                // 89\n    } else {                                                                                                           // 90\n      instance = new ReactCompositeComponentWrapper(element);                                                          // 91\n    }                                                                                                                  // 92\n  } else if (typeof node === 'string' || typeof node === 'number') {                                                   // 93\n    instance = ReactHostComponent.createInstanceForText(node);                                                         // 94\n  } else {                                                                                                             // 95\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;\n  }                                                                                                                    // 97\n                                                                                                                       // 98\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 99\n    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;\n  }                                                                                                                    // 101\n                                                                                                                       // 102\n  // These two fields are used by the DOM and ART diffing algorithms                                                   // 103\n  // respectively. Instead of using expandos on components, we should be                                               // 104\n  // storing the state needed by the diffing algorithms elsewhere.                                                     // 105\n  instance._mountIndex = 0;                                                                                            // 106\n  instance._mountImage = null;                                                                                         // 107\n                                                                                                                       // 108\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 109\n    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;                                                      // 110\n  }                                                                                                                    // 111\n                                                                                                                       // 112\n  // Internal instances should fully constructed at this point, so they should                                         // 113\n  // not get any new fields added to them at this point.                                                               // 114\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 115\n    if (Object.preventExtensions) {                                                                                    // 116\n      Object.preventExtensions(instance);                                                                              // 117\n    }                                                                                                                  // 118\n  }                                                                                                                    // 119\n                                                                                                                       // 120\n  return instance;                                                                                                     // 121\n}                                                                                                                      // 122\n                                                                                                                       // 123\n_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {                                           // 124\n  _instantiateReactComponent: instantiateReactComponent                                                                // 125\n});                                                                                                                    // 126\n                                                                                                                       // 127\nmodule.exports = instantiateReactComponent;                                                                            // 128\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactCompositeComponent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactCompositeComponent.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _prodInvariant = require('./reactProdInvariant'),                                                                  // 13\n    _assign = require('object-assign');                                                                                // 14\n                                                                                                                       // 15\nvar React = require('react/lib/React');                                                                                // 16\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');                                                // 17\nvar ReactCurrentOwner = require('react/lib/ReactCurrentOwner');                                                        // 18\nvar ReactErrorUtils = require('./ReactErrorUtils');                                                                    // 19\nvar ReactInstanceMap = require('./ReactInstanceMap');                                                                  // 20\nvar ReactInstrumentation = require('./ReactInstrumentation');                                                          // 21\nvar ReactNodeTypes = require('./ReactNodeTypes');                                                                      // 22\nvar ReactReconciler = require('./ReactReconciler');                                                                    // 23\n                                                                                                                       // 24\nif (process.env.NODE_ENV !== 'production') {                                                                           // 25\n  var checkReactTypeSpec = require('./checkReactTypeSpec');                                                            // 26\n}                                                                                                                      // 27\n                                                                                                                       // 28\nvar emptyObject = require('fbjs/lib/emptyObject');                                                                     // 29\nvar invariant = require('fbjs/lib/invariant');                                                                         // 30\nvar shallowEqual = require('fbjs/lib/shallowEqual');                                                                   // 31\nvar shouldUpdateReactComponent = require('./shouldUpdateReactComponent');                                              // 32\nvar warning = require('fbjs/lib/warning');                                                                             // 33\n                                                                                                                       // 34\nvar CompositeTypes = {                                                                                                 // 35\n  ImpureClass: 0,                                                                                                      // 36\n  PureClass: 1,                                                                                                        // 37\n  StatelessFunctional: 2                                                                                               // 38\n};                                                                                                                     // 39\n                                                                                                                       // 40\nfunction StatelessComponent(Component) {}                                                                              // 41\nStatelessComponent.prototype.render = function () {                                                                    // 42\n  var Component = ReactInstanceMap.get(this)._currentElement.type;                                                     // 43\n  var element = Component(this.props, this.context, this.updater);                                                     // 44\n  warnIfInvalidElement(Component, element);                                                                            // 45\n  return element;                                                                                                      // 46\n};                                                                                                                     // 47\n                                                                                                                       // 48\nfunction warnIfInvalidElement(Component, element) {                                                                    // 49\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 50\n    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;\n    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;\n  }                                                                                                                    // 53\n}                                                                                                                      // 54\n                                                                                                                       // 55\nfunction shouldConstruct(Component) {                                                                                  // 56\n  return !!(Component.prototype && Component.prototype.isReactComponent);                                              // 57\n}                                                                                                                      // 58\n                                                                                                                       // 59\nfunction isPureComponent(Component) {                                                                                  // 60\n  return !!(Component.prototype && Component.prototype.isPureReactComponent);                                          // 61\n}                                                                                                                      // 62\n                                                                                                                       // 63\n// Separated into a function to contain deoptimizations caused by try/finally.                                         // 64\nfunction measureLifeCyclePerf(fn, debugID, timerType) {                                                                // 65\n  if (debugID === 0) {                                                                                                 // 66\n    // Top-level wrappers (see ReactMount) and empty components (see                                                   // 67\n    // ReactDOMEmptyComponent) are invisible to hooks and devtools.                                                    // 68\n    // Both are implementation details that should go away in the future.                                              // 69\n    return fn();                                                                                                       // 70\n  }                                                                                                                    // 71\n                                                                                                                       // 72\n  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);                                            // 73\n  try {                                                                                                                // 74\n    return fn();                                                                                                       // 75\n  } finally {                                                                                                          // 76\n    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);                                            // 77\n  }                                                                                                                    // 78\n}                                                                                                                      // 79\n                                                                                                                       // 80\n/**                                                                                                                    // 81\n * ------------------ The Life-Cycle of a Composite Component ------------------                                       // 82\n *                                                                                                                     // 83\n * - constructor: Initialization of state. The instance is now retained.                                               // 84\n *   - componentWillMount                                                                                              // 85\n *   - render                                                                                                          // 86\n *   - [children's constructors]                                                                                       // 87\n *     - [children's componentWillMount and render]                                                                    // 88\n *     - [children's componentDidMount]                                                                                // 89\n *     - componentDidMount                                                                                             // 90\n *                                                                                                                     // 91\n *       Update Phases:                                                                                                // 92\n *       - componentWillReceiveProps (only called if parent updated)                                                   // 93\n *       - shouldComponentUpdate                                                                                       // 94\n *         - componentWillUpdate                                                                                       // 95\n *           - render                                                                                                  // 96\n *           - [children's constructors or receive props phases]                                                       // 97\n *         - componentDidUpdate                                                                                        // 98\n *                                                                                                                     // 99\n *     - componentWillUnmount                                                                                          // 100\n *     - [children's componentWillUnmount]                                                                             // 101\n *   - [children destroyed]                                                                                            // 102\n * - (destroyed): The instance is now blank, released by React and ready for GC.                                       // 103\n *                                                                                                                     // 104\n * -----------------------------------------------------------------------------                                       // 105\n */                                                                                                                    // 106\n                                                                                                                       // 107\n/**                                                                                                                    // 108\n * An incrementing ID assigned to each component when it is mounted. This is                                           // 109\n * used to enforce the order in which `ReactUpdates` updates dirty components.                                         // 110\n *                                                                                                                     // 111\n * @private                                                                                                            // 112\n */                                                                                                                    // 113\nvar nextMountID = 1;                                                                                                   // 114\n                                                                                                                       // 115\n/**                                                                                                                    // 116\n * @lends {ReactCompositeComponent.prototype}                                                                          // 117\n */                                                                                                                    // 118\nvar ReactCompositeComponent = {                                                                                        // 119\n  /**                                                                                                                  // 120\n   * Base constructor for all composite component.                                                                     // 121\n   *                                                                                                                   // 122\n   * @param {ReactElement} element                                                                                     // 123\n   * @final                                                                                                            // 124\n   * @internal                                                                                                         // 125\n   */                                                                                                                  // 126\n  construct: function (element) {                                                                                      // 127\n    this._currentElement = element;                                                                                    // 128\n    this._rootNodeID = 0;                                                                                              // 129\n    this._compositeType = null;                                                                                        // 130\n    this._instance = null;                                                                                             // 131\n    this._hostParent = null;                                                                                           // 132\n    this._hostContainerInfo = null;                                                                                    // 133\n                                                                                                                       // 134\n    // See ReactUpdateQueue                                                                                            // 135\n    this._updateBatchNumber = null;                                                                                    // 136\n    this._pendingElement = null;                                                                                       // 137\n    this._pendingStateQueue = null;                                                                                    // 138\n    this._pendingReplaceState = false;                                                                                 // 139\n    this._pendingForceUpdate = false;                                                                                  // 140\n                                                                                                                       // 141\n    this._renderedNodeType = null;                                                                                     // 142\n    this._renderedComponent = null;                                                                                    // 143\n    this._context = null;                                                                                              // 144\n    this._mountOrder = 0;                                                                                              // 145\n    this._topLevelWrapper = null;                                                                                      // 146\n                                                                                                                       // 147\n    // See ReactUpdates and ReactUpdateQueue.                                                                          // 148\n    this._pendingCallbacks = null;                                                                                     // 149\n                                                                                                                       // 150\n    // ComponentWillUnmount shall only be called once                                                                  // 151\n    this._calledComponentWillUnmount = false;                                                                          // 152\n                                                                                                                       // 153\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 154\n      this._warnedAboutRefsInRender = false;                                                                           // 155\n    }                                                                                                                  // 156\n  },                                                                                                                   // 157\n                                                                                                                       // 158\n  /**                                                                                                                  // 159\n   * Initializes the component, renders markup, and registers event listeners.                                         // 160\n   *                                                                                                                   // 161\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 162\n   * @param {?object} hostParent                                                                                       // 163\n   * @param {?object} hostContainerInfo                                                                                // 164\n   * @param {?object} context                                                                                          // 165\n   * @return {?string} Rendered markup to be inserted into the DOM.                                                    // 166\n   * @final                                                                                                            // 167\n   * @internal                                                                                                         // 168\n   */                                                                                                                  // 169\n  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {                                     // 170\n    var _this = this;                                                                                                  // 171\n                                                                                                                       // 172\n    this._context = context;                                                                                           // 173\n    this._mountOrder = nextMountID++;                                                                                  // 174\n    this._hostParent = hostParent;                                                                                     // 175\n    this._hostContainerInfo = hostContainerInfo;                                                                       // 176\n                                                                                                                       // 177\n    var publicProps = this._currentElement.props;                                                                      // 178\n    var publicContext = this._processContext(context);                                                                 // 179\n                                                                                                                       // 180\n    var Component = this._currentElement.type;                                                                         // 181\n                                                                                                                       // 182\n    var updateQueue = transaction.getUpdateQueue();                                                                    // 183\n                                                                                                                       // 184\n    // Initialize the public class                                                                                     // 185\n    var doConstruct = shouldConstruct(Component);                                                                      // 186\n    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);                         // 187\n    var renderedElement;                                                                                               // 188\n                                                                                                                       // 189\n    // Support functional components                                                                                   // 190\n    if (!doConstruct && (inst == null || inst.render == null)) {                                                       // 191\n      renderedElement = inst;                                                                                          // 192\n      warnIfInvalidElement(Component, renderedElement);                                                                // 193\n      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;\n      inst = new StatelessComponent(Component);                                                                        // 195\n      this._compositeType = CompositeTypes.StatelessFunctional;                                                        // 196\n    } else {                                                                                                           // 197\n      if (isPureComponent(Component)) {                                                                                // 198\n        this._compositeType = CompositeTypes.PureClass;                                                                // 199\n      } else {                                                                                                         // 200\n        this._compositeType = CompositeTypes.ImpureClass;                                                              // 201\n      }                                                                                                                // 202\n    }                                                                                                                  // 203\n                                                                                                                       // 204\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 205\n      // This will throw later in _renderValidatedComponent, but add an early                                          // 206\n      // warning now to help debugging                                                                                 // 207\n      if (inst.render == null) {                                                                                       // 208\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;\n      }                                                                                                                // 210\n                                                                                                                       // 211\n      var propsMutated = inst.props !== publicProps;                                                                   // 212\n      var componentName = Component.displayName || Component.name || 'Component';                                      // 213\n                                                                                                                       // 214\n      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + \"up the same props that your component's constructor was passed.\", componentName, componentName) : void 0;\n    }                                                                                                                  // 216\n                                                                                                                       // 217\n    // These should be set up in the constructor, but as a convenience for                                             // 218\n    // simpler class abstractions, we set them up after the fact.                                                      // 219\n    inst.props = publicProps;                                                                                          // 220\n    inst.context = publicContext;                                                                                      // 221\n    inst.refs = emptyObject;                                                                                           // 222\n    inst.updater = updateQueue;                                                                                        // 223\n                                                                                                                       // 224\n    this._instance = inst;                                                                                             // 225\n                                                                                                                       // 226\n    // Store a reference from the instance back to the internal representation                                         // 227\n    ReactInstanceMap.set(inst, this);                                                                                  // 228\n                                                                                                                       // 229\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 230\n      // Since plain JS classes are defined without any special initialization                                         // 231\n      // logic, we can not catch common errors early. Therefore, we have to                                            // 232\n      // catch them here, at initialization time, instead.                                                             // 233\n      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;\n    }                                                                                                                  // 241\n                                                                                                                       // 242\n    var initialState = inst.state;                                                                                     // 243\n    if (initialState === undefined) {                                                                                  // 244\n      inst.state = initialState = null;                                                                                // 245\n    }                                                                                                                  // 246\n    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;\n                                                                                                                       // 248\n    this._pendingStateQueue = null;                                                                                    // 249\n    this._pendingReplaceState = false;                                                                                 // 250\n    this._pendingForceUpdate = false;                                                                                  // 251\n                                                                                                                       // 252\n    var markup;                                                                                                        // 253\n    if (inst.unstable_handleError) {                                                                                   // 254\n      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);\n    } else {                                                                                                           // 256\n      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);         // 257\n    }                                                                                                                  // 258\n                                                                                                                       // 259\n    if (inst.componentDidMount) {                                                                                      // 260\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 261\n        transaction.getReactMountReady().enqueue(function () {                                                         // 262\n          measureLifeCyclePerf(function () {                                                                           // 263\n            return inst.componentDidMount();                                                                           // 264\n          }, _this._debugID, 'componentDidMount');                                                                     // 265\n        });                                                                                                            // 266\n      } else {                                                                                                         // 267\n        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);                                        // 268\n      }                                                                                                                // 269\n    }                                                                                                                  // 270\n                                                                                                                       // 271\n    return markup;                                                                                                     // 272\n  },                                                                                                                   // 273\n                                                                                                                       // 274\n  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {                               // 275\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 276\n      ReactCurrentOwner.current = this;                                                                                // 277\n      try {                                                                                                            // 278\n        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);             // 279\n      } finally {                                                                                                      // 280\n        ReactCurrentOwner.current = null;                                                                              // 281\n      }                                                                                                                // 282\n    } else {                                                                                                           // 283\n      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);               // 284\n    }                                                                                                                  // 285\n  },                                                                                                                   // 286\n                                                                                                                       // 287\n  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {                   // 288\n    var Component = this._currentElement.type;                                                                         // 289\n                                                                                                                       // 290\n    if (doConstruct) {                                                                                                 // 291\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 292\n        return measureLifeCyclePerf(function () {                                                                      // 293\n          return new Component(publicProps, publicContext, updateQueue);                                               // 294\n        }, this._debugID, 'ctor');                                                                                     // 295\n      } else {                                                                                                         // 296\n        return new Component(publicProps, publicContext, updateQueue);                                                 // 297\n      }                                                                                                                // 298\n    }                                                                                                                  // 299\n                                                                                                                       // 300\n    // This can still be an instance in case of factory components                                                     // 301\n    // but we'll count this as time spent rendering as the more common case.                                           // 302\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 303\n      return measureLifeCyclePerf(function () {                                                                        // 304\n        return Component(publicProps, publicContext, updateQueue);                                                     // 305\n      }, this._debugID, 'render');                                                                                     // 306\n    } else {                                                                                                           // 307\n      return Component(publicProps, publicContext, updateQueue);                                                       // 308\n    }                                                                                                                  // 309\n  },                                                                                                                   // 310\n                                                                                                                       // 311\n  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {\n    var markup;                                                                                                        // 313\n    var checkpoint = transaction.checkpoint();                                                                         // 314\n    try {                                                                                                              // 315\n      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);         // 316\n    } catch (e) {                                                                                                      // 317\n      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint     // 318\n      transaction.rollback(checkpoint);                                                                                // 319\n      this._instance.unstable_handleError(e);                                                                          // 320\n      if (this._pendingStateQueue) {                                                                                   // 321\n        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);                // 322\n      }                                                                                                                // 323\n      checkpoint = transaction.checkpoint();                                                                           // 324\n                                                                                                                       // 325\n      this._renderedComponent.unmountComponent(true);                                                                  // 326\n      transaction.rollback(checkpoint);                                                                                // 327\n                                                                                                                       // 328\n      // Try again - we've informed the component about the error, so they can render an error message this time.      // 329\n      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).                // 330\n      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);         // 331\n    }                                                                                                                  // 332\n    return markup;                                                                                                     // 333\n  },                                                                                                                   // 334\n                                                                                                                       // 335\n  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {               // 336\n    var inst = this._instance;                                                                                         // 337\n                                                                                                                       // 338\n    var debugID = 0;                                                                                                   // 339\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 340\n      debugID = this._debugID;                                                                                         // 341\n    }                                                                                                                  // 342\n                                                                                                                       // 343\n    if (inst.componentWillMount) {                                                                                     // 344\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 345\n        measureLifeCyclePerf(function () {                                                                             // 346\n          return inst.componentWillMount();                                                                            // 347\n        }, debugID, 'componentWillMount');                                                                             // 348\n      } else {                                                                                                         // 349\n        inst.componentWillMount();                                                                                     // 350\n      }                                                                                                                // 351\n      // When mounting, calls to `setState` by `componentWillMount` will set                                           // 352\n      // `this._pendingStateQueue` without triggering a re-render.                                                     // 353\n      if (this._pendingStateQueue) {                                                                                   // 354\n        inst.state = this._processPendingState(inst.props, inst.context);                                              // 355\n      }                                                                                                                // 356\n    }                                                                                                                  // 357\n                                                                                                                       // 358\n    // If not a stateless component, we now render                                                                     // 359\n    if (renderedElement === undefined) {                                                                               // 360\n      renderedElement = this._renderValidatedComponent();                                                              // 361\n    }                                                                                                                  // 362\n                                                                                                                       // 363\n    var nodeType = ReactNodeTypes.getType(renderedElement);                                                            // 364\n    this._renderedNodeType = nodeType;                                                                                 // 365\n    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */\n    );                                                                                                                 // 367\n    this._renderedComponent = child;                                                                                   // 368\n                                                                                                                       // 369\n    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);\n                                                                                                                       // 371\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 372\n      if (debugID !== 0) {                                                                                             // 373\n        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];                                              // 374\n        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);                                          // 375\n      }                                                                                                                // 376\n    }                                                                                                                  // 377\n                                                                                                                       // 378\n    return markup;                                                                                                     // 379\n  },                                                                                                                   // 380\n                                                                                                                       // 381\n  getHostNode: function () {                                                                                           // 382\n    return ReactReconciler.getHostNode(this._renderedComponent);                                                       // 383\n  },                                                                                                                   // 384\n                                                                                                                       // 385\n  /**                                                                                                                  // 386\n   * Releases any resources allocated by `mountComponent`.                                                             // 387\n   *                                                                                                                   // 388\n   * @final                                                                                                            // 389\n   * @internal                                                                                                         // 390\n   */                                                                                                                  // 391\n  unmountComponent: function (safely) {                                                                                // 392\n    if (!this._renderedComponent) {                                                                                    // 393\n      return;                                                                                                          // 394\n    }                                                                                                                  // 395\n                                                                                                                       // 396\n    var inst = this._instance;                                                                                         // 397\n                                                                                                                       // 398\n    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {                                              // 399\n      inst._calledComponentWillUnmount = true;                                                                         // 400\n                                                                                                                       // 401\n      if (safely) {                                                                                                    // 402\n        var name = this.getName() + '.componentWillUnmount()';                                                         // 403\n        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));                             // 404\n      } else {                                                                                                         // 405\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 406\n          measureLifeCyclePerf(function () {                                                                           // 407\n            return inst.componentWillUnmount();                                                                        // 408\n          }, this._debugID, 'componentWillUnmount');                                                                   // 409\n        } else {                                                                                                       // 410\n          inst.componentWillUnmount();                                                                                 // 411\n        }                                                                                                              // 412\n      }                                                                                                                // 413\n    }                                                                                                                  // 414\n                                                                                                                       // 415\n    if (this._renderedComponent) {                                                                                     // 416\n      ReactReconciler.unmountComponent(this._renderedComponent, safely);                                               // 417\n      this._renderedNodeType = null;                                                                                   // 418\n      this._renderedComponent = null;                                                                                  // 419\n      this._instance = null;                                                                                           // 420\n    }                                                                                                                  // 421\n                                                                                                                       // 422\n    // Reset pending fields                                                                                            // 423\n    // Even if this component is scheduled for another update in ReactUpdates,                                         // 424\n    // it would still be ignored because these fields are reset.                                                       // 425\n    this._pendingStateQueue = null;                                                                                    // 426\n    this._pendingReplaceState = false;                                                                                 // 427\n    this._pendingForceUpdate = false;                                                                                  // 428\n    this._pendingCallbacks = null;                                                                                     // 429\n    this._pendingElement = null;                                                                                       // 430\n                                                                                                                       // 431\n    // These fields do not really need to be reset since this object is no                                             // 432\n    // longer accessible.                                                                                              // 433\n    this._context = null;                                                                                              // 434\n    this._rootNodeID = 0;                                                                                              // 435\n    this._topLevelWrapper = null;                                                                                      // 436\n                                                                                                                       // 437\n    // Delete the reference from the instance to this internal representation                                          // 438\n    // which allow the internals to be properly cleaned up even if the user                                            // 439\n    // leaks a reference to the public instance.                                                                       // 440\n    ReactInstanceMap.remove(inst);                                                                                     // 441\n                                                                                                                       // 442\n    // Some existing components rely on inst.props even after they've been                                             // 443\n    // destroyed (in event handlers).                                                                                  // 444\n    // TODO: inst.props = null;                                                                                        // 445\n    // TODO: inst.state = null;                                                                                        // 446\n    // TODO: inst.context = null;                                                                                      // 447\n  },                                                                                                                   // 448\n                                                                                                                       // 449\n  /**                                                                                                                  // 450\n   * Filters the context object to only contain keys specified in                                                      // 451\n   * `contextTypes`                                                                                                    // 452\n   *                                                                                                                   // 453\n   * @param {object} context                                                                                           // 454\n   * @return {?object}                                                                                                 // 455\n   * @private                                                                                                          // 456\n   */                                                                                                                  // 457\n  _maskContext: function (context) {                                                                                   // 458\n    var Component = this._currentElement.type;                                                                         // 459\n    var contextTypes = Component.contextTypes;                                                                         // 460\n    if (!contextTypes) {                                                                                               // 461\n      return emptyObject;                                                                                              // 462\n    }                                                                                                                  // 463\n    var maskedContext = {};                                                                                            // 464\n    for (var contextName in contextTypes) {                                                                            // 465\n      maskedContext[contextName] = context[contextName];                                                               // 466\n    }                                                                                                                  // 467\n    return maskedContext;                                                                                              // 468\n  },                                                                                                                   // 469\n                                                                                                                       // 470\n  /**                                                                                                                  // 471\n   * Filters the context object to only contain keys specified in                                                      // 472\n   * `contextTypes`, and asserts that they are valid.                                                                  // 473\n   *                                                                                                                   // 474\n   * @param {object} context                                                                                           // 475\n   * @return {?object}                                                                                                 // 476\n   * @private                                                                                                          // 477\n   */                                                                                                                  // 478\n  _processContext: function (context) {                                                                                // 479\n    var maskedContext = this._maskContext(context);                                                                    // 480\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 481\n      var Component = this._currentElement.type;                                                                       // 482\n      if (Component.contextTypes) {                                                                                    // 483\n        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');                                     // 484\n      }                                                                                                                // 485\n    }                                                                                                                  // 486\n    return maskedContext;                                                                                              // 487\n  },                                                                                                                   // 488\n                                                                                                                       // 489\n  /**                                                                                                                  // 490\n   * @param {object} currentContext                                                                                    // 491\n   * @return {object}                                                                                                  // 492\n   * @private                                                                                                          // 493\n   */                                                                                                                  // 494\n  _processChildContext: function (currentContext) {                                                                    // 495\n    var Component = this._currentElement.type;                                                                         // 496\n    var inst = this._instance;                                                                                         // 497\n    var childContext;                                                                                                  // 498\n                                                                                                                       // 499\n    if (inst.getChildContext) {                                                                                        // 500\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 501\n        ReactInstrumentation.debugTool.onBeginProcessingChildContext();                                                // 502\n        try {                                                                                                          // 503\n          childContext = inst.getChildContext();                                                                       // 504\n        } finally {                                                                                                    // 505\n          ReactInstrumentation.debugTool.onEndProcessingChildContext();                                                // 506\n        }                                                                                                              // 507\n      } else {                                                                                                         // 508\n        childContext = inst.getChildContext();                                                                         // 509\n      }                                                                                                                // 510\n    }                                                                                                                  // 511\n                                                                                                                       // 512\n    if (childContext) {                                                                                                // 513\n      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 515\n        this._checkContextTypes(Component.childContextTypes, childContext, 'child context');                           // 516\n      }                                                                                                                // 517\n      for (var name in childContext) {                                                                                 // 518\n        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;\n      }                                                                                                                // 520\n      return _assign({}, currentContext, childContext);                                                                // 521\n    }                                                                                                                  // 522\n    return currentContext;                                                                                             // 523\n  },                                                                                                                   // 524\n                                                                                                                       // 525\n  /**                                                                                                                  // 526\n   * Assert that the context types are valid                                                                           // 527\n   *                                                                                                                   // 528\n   * @param {object} typeSpecs Map of context field to a ReactPropType                                                 // 529\n   * @param {object} values Runtime values that need to be type-checked                                                // 530\n   * @param {string} location e.g. \"prop\", \"context\", \"child context\"                                                  // 531\n   * @private                                                                                                          // 532\n   */                                                                                                                  // 533\n  _checkContextTypes: function (typeSpecs, values, location) {                                                         // 534\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 535\n      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);                            // 536\n    }                                                                                                                  // 537\n  },                                                                                                                   // 538\n                                                                                                                       // 539\n  receiveComponent: function (nextElement, transaction, nextContext) {                                                 // 540\n    var prevElement = this._currentElement;                                                                            // 541\n    var prevContext = this._context;                                                                                   // 542\n                                                                                                                       // 543\n    this._pendingElement = null;                                                                                       // 544\n                                                                                                                       // 545\n    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);                             // 546\n  },                                                                                                                   // 547\n                                                                                                                       // 548\n  /**                                                                                                                  // 549\n   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`                                       // 550\n   * is set, update the component.                                                                                     // 551\n   *                                                                                                                   // 552\n   * @param {ReactReconcileTransaction} transaction                                                                    // 553\n   * @internal                                                                                                         // 554\n   */                                                                                                                  // 555\n  performUpdateIfNecessary: function (transaction) {                                                                   // 556\n    if (this._pendingElement != null) {                                                                                // 557\n      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);                        // 558\n    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {                                         // 559\n      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);     // 560\n    } else {                                                                                                           // 561\n      this._updateBatchNumber = null;                                                                                  // 562\n    }                                                                                                                  // 563\n  },                                                                                                                   // 564\n                                                                                                                       // 565\n  /**                                                                                                                  // 566\n   * Perform an update to a mounted component. The componentWillReceiveProps and                                       // 567\n   * shouldComponentUpdate methods are called, then (assuming the update isn't                                         // 568\n   * skipped) the remaining update lifecycle methods are called and the DOM                                            // 569\n   * representation is updated.                                                                                        // 570\n   *                                                                                                                   // 571\n   * By default, this implements React's rendering and reconciliation algorithm.                                       // 572\n   * Sophisticated clients may wish to override this.                                                                  // 573\n   *                                                                                                                   // 574\n   * @param {ReactReconcileTransaction} transaction                                                                    // 575\n   * @param {ReactElement} prevParentElement                                                                           // 576\n   * @param {ReactElement} nextParentElement                                                                           // 577\n   * @internal                                                                                                         // 578\n   * @overridable                                                                                                      // 579\n   */                                                                                                                  // 580\n  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {\n    var inst = this._instance;                                                                                         // 582\n    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;\n                                                                                                                       // 584\n    var willReceive = false;                                                                                           // 585\n    var nextContext;                                                                                                   // 586\n                                                                                                                       // 587\n    // Determine if the context has changed or not                                                                     // 588\n    if (this._context === nextUnmaskedContext) {                                                                       // 589\n      nextContext = inst.context;                                                                                      // 590\n    } else {                                                                                                           // 591\n      nextContext = this._processContext(nextUnmaskedContext);                                                         // 592\n      willReceive = true;                                                                                              // 593\n    }                                                                                                                  // 594\n                                                                                                                       // 595\n    var prevProps = prevParentElement.props;                                                                           // 596\n    var nextProps = nextParentElement.props;                                                                           // 597\n                                                                                                                       // 598\n    // Not a simple state update but a props update                                                                    // 599\n    if (prevParentElement !== nextParentElement) {                                                                     // 600\n      willReceive = true;                                                                                              // 601\n    }                                                                                                                  // 602\n                                                                                                                       // 603\n    // An update here will schedule an update but immediately set                                                      // 604\n    // _pendingStateQueue which will ensure that any state updates gets                                                // 605\n    // immediately reconciled instead of waiting for the next batch.                                                   // 606\n    if (willReceive && inst.componentWillReceiveProps) {                                                               // 607\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 608\n        measureLifeCyclePerf(function () {                                                                             // 609\n          return inst.componentWillReceiveProps(nextProps, nextContext);                                               // 610\n        }, this._debugID, 'componentWillReceiveProps');                                                                // 611\n      } else {                                                                                                         // 612\n        inst.componentWillReceiveProps(nextProps, nextContext);                                                        // 613\n      }                                                                                                                // 614\n    }                                                                                                                  // 615\n                                                                                                                       // 616\n    var nextState = this._processPendingState(nextProps, nextContext);                                                 // 617\n    var shouldUpdate = true;                                                                                           // 618\n                                                                                                                       // 619\n    if (!this._pendingForceUpdate) {                                                                                   // 620\n      if (inst.shouldComponentUpdate) {                                                                                // 621\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 622\n          shouldUpdate = measureLifeCyclePerf(function () {                                                            // 623\n            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);                                      // 624\n          }, this._debugID, 'shouldComponentUpdate');                                                                  // 625\n        } else {                                                                                                       // 626\n          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);                                // 627\n        }                                                                                                              // 628\n      } else {                                                                                                         // 629\n        if (this._compositeType === CompositeTypes.PureClass) {                                                        // 630\n          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);                  // 631\n        }                                                                                                              // 632\n      }                                                                                                                // 633\n    }                                                                                                                  // 634\n                                                                                                                       // 635\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 636\n      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;\n    }                                                                                                                  // 638\n                                                                                                                       // 639\n    this._updateBatchNumber = null;                                                                                    // 640\n    if (shouldUpdate) {                                                                                                // 641\n      this._pendingForceUpdate = false;                                                                                // 642\n      // Will set `this.props`, `this.state` and `this.context`.                                                       // 643\n      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);\n    } else {                                                                                                           // 645\n      // If it's determined that a component should not update, we still want                                          // 646\n      // to set props and state but we shortcut the rest of the update.                                                // 647\n      this._currentElement = nextParentElement;                                                                        // 648\n      this._context = nextUnmaskedContext;                                                                             // 649\n      inst.props = nextProps;                                                                                          // 650\n      inst.state = nextState;                                                                                          // 651\n      inst.context = nextContext;                                                                                      // 652\n    }                                                                                                                  // 653\n  },                                                                                                                   // 654\n                                                                                                                       // 655\n  _processPendingState: function (props, context) {                                                                    // 656\n    var inst = this._instance;                                                                                         // 657\n    var queue = this._pendingStateQueue;                                                                               // 658\n    var replace = this._pendingReplaceState;                                                                           // 659\n    this._pendingReplaceState = false;                                                                                 // 660\n    this._pendingStateQueue = null;                                                                                    // 661\n                                                                                                                       // 662\n    if (!queue) {                                                                                                      // 663\n      return inst.state;                                                                                               // 664\n    }                                                                                                                  // 665\n                                                                                                                       // 666\n    if (replace && queue.length === 1) {                                                                               // 667\n      return queue[0];                                                                                                 // 668\n    }                                                                                                                  // 669\n                                                                                                                       // 670\n    var nextState = _assign({}, replace ? queue[0] : inst.state);                                                      // 671\n    for (var i = replace ? 1 : 0; i < queue.length; i++) {                                                             // 672\n      var partial = queue[i];                                                                                          // 673\n      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);     // 674\n    }                                                                                                                  // 675\n                                                                                                                       // 676\n    return nextState;                                                                                                  // 677\n  },                                                                                                                   // 678\n                                                                                                                       // 679\n  /**                                                                                                                  // 680\n   * Merges new props and state, notifies delegate methods of update and                                               // 681\n   * performs update.                                                                                                  // 682\n   *                                                                                                                   // 683\n   * @param {ReactElement} nextElement Next element                                                                    // 684\n   * @param {object} nextProps Next public object to set as properties.                                                // 685\n   * @param {?object} nextState Next object to set as state.                                                           // 686\n   * @param {?object} nextContext Next public object to set as context.                                                // 687\n   * @param {ReactReconcileTransaction} transaction                                                                    // 688\n   * @param {?object} unmaskedContext                                                                                  // 689\n   * @private                                                                                                          // 690\n   */                                                                                                                  // 691\n  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {   // 692\n    var _this2 = this;                                                                                                 // 693\n                                                                                                                       // 694\n    var inst = this._instance;                                                                                         // 695\n                                                                                                                       // 696\n    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);                                                      // 697\n    var prevProps;                                                                                                     // 698\n    var prevState;                                                                                                     // 699\n    var prevContext;                                                                                                   // 700\n    if (hasComponentDidUpdate) {                                                                                       // 701\n      prevProps = inst.props;                                                                                          // 702\n      prevState = inst.state;                                                                                          // 703\n      prevContext = inst.context;                                                                                      // 704\n    }                                                                                                                  // 705\n                                                                                                                       // 706\n    if (inst.componentWillUpdate) {                                                                                    // 707\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 708\n        measureLifeCyclePerf(function () {                                                                             // 709\n          return inst.componentWillUpdate(nextProps, nextState, nextContext);                                          // 710\n        }, this._debugID, 'componentWillUpdate');                                                                      // 711\n      } else {                                                                                                         // 712\n        inst.componentWillUpdate(nextProps, nextState, nextContext);                                                   // 713\n      }                                                                                                                // 714\n    }                                                                                                                  // 715\n                                                                                                                       // 716\n    this._currentElement = nextElement;                                                                                // 717\n    this._context = unmaskedContext;                                                                                   // 718\n    inst.props = nextProps;                                                                                            // 719\n    inst.state = nextState;                                                                                            // 720\n    inst.context = nextContext;                                                                                        // 721\n                                                                                                                       // 722\n    this._updateRenderedComponent(transaction, unmaskedContext);                                                       // 723\n                                                                                                                       // 724\n    if (hasComponentDidUpdate) {                                                                                       // 725\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 726\n        transaction.getReactMountReady().enqueue(function () {                                                         // 727\n          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');\n        });                                                                                                            // 729\n      } else {                                                                                                         // 730\n        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);\n      }                                                                                                                // 732\n    }                                                                                                                  // 733\n  },                                                                                                                   // 734\n                                                                                                                       // 735\n  /**                                                                                                                  // 736\n   * Call the component's `render` method and update the DOM accordingly.                                              // 737\n   *                                                                                                                   // 738\n   * @param {ReactReconcileTransaction} transaction                                                                    // 739\n   * @internal                                                                                                         // 740\n   */                                                                                                                  // 741\n  _updateRenderedComponent: function (transaction, context) {                                                          // 742\n    var prevComponentInstance = this._renderedComponent;                                                               // 743\n    var prevRenderedElement = prevComponentInstance._currentElement;                                                   // 744\n    var nextRenderedElement = this._renderValidatedComponent();                                                        // 745\n                                                                                                                       // 746\n    var debugID = 0;                                                                                                   // 747\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 748\n      debugID = this._debugID;                                                                                         // 749\n    }                                                                                                                  // 750\n                                                                                                                       // 751\n    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {                                        // 752\n      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));\n    } else {                                                                                                           // 754\n      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);                                            // 755\n      ReactReconciler.unmountComponent(prevComponentInstance, false);                                                  // 756\n                                                                                                                       // 757\n      var nodeType = ReactNodeTypes.getType(nextRenderedElement);                                                      // 758\n      this._renderedNodeType = nodeType;                                                                               // 759\n      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */\n      );                                                                                                               // 761\n      this._renderedComponent = child;                                                                                 // 762\n                                                                                                                       // 763\n      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);\n                                                                                                                       // 765\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 766\n        if (debugID !== 0) {                                                                                           // 767\n          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];                                            // 768\n          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);                                        // 769\n        }                                                                                                              // 770\n      }                                                                                                                // 771\n                                                                                                                       // 772\n      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);                                     // 773\n    }                                                                                                                  // 774\n  },                                                                                                                   // 775\n                                                                                                                       // 776\n  /**                                                                                                                  // 777\n   * Overridden in shallow rendering.                                                                                  // 778\n   *                                                                                                                   // 779\n   * @protected                                                                                                        // 780\n   */                                                                                                                  // 781\n  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {                                           // 782\n    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);                            // 783\n  },                                                                                                                   // 784\n                                                                                                                       // 785\n  /**                                                                                                                  // 786\n   * @protected                                                                                                        // 787\n   */                                                                                                                  // 788\n  _renderValidatedComponentWithoutOwnerOrContext: function () {                                                        // 789\n    var inst = this._instance;                                                                                         // 790\n    var renderedElement;                                                                                               // 791\n                                                                                                                       // 792\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 793\n      renderedElement = measureLifeCyclePerf(function () {                                                             // 794\n        return inst.render();                                                                                          // 795\n      }, this._debugID, 'render');                                                                                     // 796\n    } else {                                                                                                           // 797\n      renderedElement = inst.render();                                                                                 // 798\n    }                                                                                                                  // 799\n                                                                                                                       // 800\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 801\n      // We allow auto-mocks to proceed as if they're returning null.                                                  // 802\n      if (renderedElement === undefined && inst.render._isMockFunction) {                                              // 803\n        // This is probably bad practice. Consider warning here and                                                    // 804\n        // deprecating this convenience.                                                                               // 805\n        renderedElement = null;                                                                                        // 806\n      }                                                                                                                // 807\n    }                                                                                                                  // 808\n                                                                                                                       // 809\n    return renderedElement;                                                                                            // 810\n  },                                                                                                                   // 811\n                                                                                                                       // 812\n  /**                                                                                                                  // 813\n   * @private                                                                                                          // 814\n   */                                                                                                                  // 815\n  _renderValidatedComponent: function () {                                                                             // 816\n    var renderedElement;                                                                                               // 817\n    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {         // 818\n      ReactCurrentOwner.current = this;                                                                                // 819\n      try {                                                                                                            // 820\n        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();                                       // 821\n      } finally {                                                                                                      // 822\n        ReactCurrentOwner.current = null;                                                                              // 823\n      }                                                                                                                // 824\n    } else {                                                                                                           // 825\n      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();                                         // 826\n    }                                                                                                                  // 827\n    !(                                                                                                                 // 828\n    // TODO: An `isValidNode` function would probably be more appropriate                                              // 829\n    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;\n                                                                                                                       // 831\n    return renderedElement;                                                                                            // 832\n  },                                                                                                                   // 833\n                                                                                                                       // 834\n  /**                                                                                                                  // 835\n   * Lazily allocates the refs object and stores `component` as `ref`.                                                 // 836\n   *                                                                                                                   // 837\n   * @param {string} ref Reference name.                                                                               // 838\n   * @param {component} component Component to store as `ref`.                                                         // 839\n   * @final                                                                                                            // 840\n   * @private                                                                                                          // 841\n   */                                                                                                                  // 842\n  attachRef: function (ref, component) {                                                                               // 843\n    var inst = this.getPublicInstance();                                                                               // 844\n    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;\n    var publicComponentInstance = component.getPublicInstance();                                                       // 846\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 847\n      var componentName = component && component.getName ? component.getName() : 'a component';                        // 848\n      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref \"%s\" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;\n    }                                                                                                                  // 850\n    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;                                                 // 851\n    refs[ref] = publicComponentInstance;                                                                               // 852\n  },                                                                                                                   // 853\n                                                                                                                       // 854\n  /**                                                                                                                  // 855\n   * Detaches a reference name.                                                                                        // 856\n   *                                                                                                                   // 857\n   * @param {string} ref Name to dereference.                                                                          // 858\n   * @final                                                                                                            // 859\n   * @private                                                                                                          // 860\n   */                                                                                                                  // 861\n  detachRef: function (ref) {                                                                                          // 862\n    var refs = this.getPublicInstance().refs;                                                                          // 863\n    delete refs[ref];                                                                                                  // 864\n  },                                                                                                                   // 865\n                                                                                                                       // 866\n  /**                                                                                                                  // 867\n   * Get a text description of the component that can be used to identify it                                           // 868\n   * in error messages.                                                                                                // 869\n   * @return {string} The name or null.                                                                                // 870\n   * @internal                                                                                                         // 871\n   */                                                                                                                  // 872\n  getName: function () {                                                                                               // 873\n    var type = this._currentElement.type;                                                                              // 874\n    var constructor = this._instance && this._instance.constructor;                                                    // 875\n    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;\n  },                                                                                                                   // 877\n                                                                                                                       // 878\n  /**                                                                                                                  // 879\n   * Get the publicly accessible representation of this component - i.e. what                                          // 880\n   * is exposed by refs and returned by render. Can be null for stateless                                              // 881\n   * components.                                                                                                       // 882\n   *                                                                                                                   // 883\n   * @return {ReactComponent} the public component instance.                                                           // 884\n   * @internal                                                                                                         // 885\n   */                                                                                                                  // 886\n  getPublicInstance: function () {                                                                                     // 887\n    var inst = this._instance;                                                                                         // 888\n    if (this._compositeType === CompositeTypes.StatelessFunctional) {                                                  // 889\n      return null;                                                                                                     // 890\n    }                                                                                                                  // 891\n    return inst;                                                                                                       // 892\n  },                                                                                                                   // 893\n                                                                                                                       // 894\n  // Stub                                                                                                              // 895\n  _instantiateReactComponent: null                                                                                     // 896\n};                                                                                                                     // 897\n                                                                                                                       // 898\nmodule.exports = ReactCompositeComponent;                                                                              // 899\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactNodeTypes.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactNodeTypes.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar React = require('react/lib/React');                                                                                // 16\n                                                                                                                       // 17\nvar invariant = require('fbjs/lib/invariant');                                                                         // 18\n                                                                                                                       // 19\nvar ReactNodeTypes = {                                                                                                 // 20\n  HOST: 0,                                                                                                             // 21\n  COMPOSITE: 1,                                                                                                        // 22\n  EMPTY: 2,                                                                                                            // 23\n                                                                                                                       // 24\n  getType: function (node) {                                                                                           // 25\n    if (node === null || node === false) {                                                                             // 26\n      return ReactNodeTypes.EMPTY;                                                                                     // 27\n    } else if (React.isValidElement(node)) {                                                                           // 28\n      if (typeof node.type === 'function') {                                                                           // 29\n        return ReactNodeTypes.COMPOSITE;                                                                               // 30\n      } else {                                                                                                         // 31\n        return ReactNodeTypes.HOST;                                                                                    // 32\n      }                                                                                                                // 33\n    }                                                                                                                  // 34\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;\n  }                                                                                                                    // 36\n};                                                                                                                     // 37\n                                                                                                                       // 38\nmodule.exports = ReactNodeTypes;                                                                                       // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"checkReactTypeSpec.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/checkReactTypeSpec.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 13\n                                                                                                                       // 14\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');                                              // 15\nvar ReactPropTypesSecret = require('./ReactPropTypesSecret');                                                          // 16\n                                                                                                                       // 17\nvar invariant = require('fbjs/lib/invariant');                                                                         // 18\nvar warning = require('fbjs/lib/warning');                                                                             // 19\n                                                                                                                       // 20\nvar ReactComponentTreeHook;                                                                                            // 21\n                                                                                                                       // 22\nif (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {                                // 23\n  // Temporary hack.                                                                                                   // 24\n  // Inline requires don't work well with Jest:                                                                        // 25\n  // https://github.com/facebook/react/issues/7240                                                                     // 26\n  // Remove the inline requires when we don't need them anymore:                                                       // 27\n  // https://github.com/facebook/react/pull/7178                                                                       // 28\n  ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');                                                // 29\n}                                                                                                                      // 30\n                                                                                                                       // 31\nvar loggedTypeFailures = {};                                                                                           // 32\n                                                                                                                       // 33\n/**                                                                                                                    // 34\n * Assert that the values match with the type specs.                                                                   // 35\n * Error messages are memorized and will only be shown once.                                                           // 36\n *                                                                                                                     // 37\n * @param {object} typeSpecs Map of name to a ReactPropType                                                            // 38\n * @param {object} values Runtime values that need to be type-checked                                                  // 39\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"                                                    // 40\n * @param {string} componentName Name of the component for error messages.                                             // 41\n * @param {?object} element The React element that is being type-checked                                               // 42\n * @param {?number} debugID The React component instance that is being type-checked                                    // 43\n * @private                                                                                                            // 44\n */                                                                                                                    // 45\nfunction checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {                            // 46\n  for (var typeSpecName in typeSpecs) {                                                                                // 47\n    if (typeSpecs.hasOwnProperty(typeSpecName)) {                                                                      // 48\n      var error;                                                                                                       // 49\n      // Prop type validation may throw. In case they do, we don't want to                                             // 50\n      // fail the render phase where it didn't fail before. So we log it.                                              // 51\n      // After these have been cleaned up, we'll let them throw.                                                       // 52\n      try {                                                                                                            // 53\n        // This is intentionally an invariant that gets caught. It's the same                                          // 54\n        // behavior as without this statement except with a better message.                                            // 55\n        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;\n        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);    // 57\n      } catch (ex) {                                                                                                   // 58\n        error = ex;                                                                                                    // 59\n      }                                                                                                                // 60\n      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {                                          // 62\n        // Only monitor this failure once because there tends to be a lot of the                                       // 63\n        // same error.                                                                                                 // 64\n        loggedTypeFailures[error.message] = true;                                                                      // 65\n                                                                                                                       // 66\n        var componentStackInfo = '';                                                                                   // 67\n                                                                                                                       // 68\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 69\n          if (!ReactComponentTreeHook) {                                                                               // 70\n            ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');                                      // 71\n          }                                                                                                            // 72\n          if (debugID !== null) {                                                                                      // 73\n            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);                                 // 74\n          } else if (element !== null) {                                                                               // 75\n            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);                              // 76\n          }                                                                                                            // 77\n        }                                                                                                              // 78\n                                                                                                                       // 79\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;\n      }                                                                                                                // 81\n    }                                                                                                                  // 82\n  }                                                                                                                    // 83\n}                                                                                                                      // 84\n                                                                                                                       // 85\nmodule.exports = checkReactTypeSpec;                                                                                   // 86\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactPropTypeLocationNames.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactPropTypeLocationNames.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactPropTypeLocationNames = {};                                                                                   // 14\n                                                                                                                       // 15\nif (process.env.NODE_ENV !== 'production') {                                                                           // 16\n  ReactPropTypeLocationNames = {                                                                                       // 17\n    prop: 'prop',                                                                                                      // 18\n    context: 'context',                                                                                                // 19\n    childContext: 'child context'                                                                                      // 20\n  };                                                                                                                   // 21\n}                                                                                                                      // 22\n                                                                                                                       // 23\nmodule.exports = ReactPropTypeLocationNames;                                                                           // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"shouldUpdateReactComponent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/shouldUpdateReactComponent.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * Given a `prevElement` and `nextElement`, determines if the existing                                                 // 14\n * instance should be updated as opposed to being destroyed or replaced by a new                                       // 15\n * instance. Both arguments are elements. This ensures that this logic can                                             // 16\n * operate on stateless trees without any backing instance.                                                            // 17\n *                                                                                                                     // 18\n * @param {?object} prevElement                                                                                        // 19\n * @param {?object} nextElement                                                                                        // 20\n * @return {boolean} True if the existing instance should be updated.                                                  // 21\n * @protected                                                                                                          // 22\n */                                                                                                                    // 23\n                                                                                                                       // 24\nfunction shouldUpdateReactComponent(prevElement, nextElement) {                                                        // 25\n  var prevEmpty = prevElement === null || prevElement === false;                                                       // 26\n  var nextEmpty = nextElement === null || nextElement === false;                                                       // 27\n  if (prevEmpty || nextEmpty) {                                                                                        // 28\n    return prevEmpty === nextEmpty;                                                                                    // 29\n  }                                                                                                                    // 30\n                                                                                                                       // 31\n  var prevType = typeof prevElement;                                                                                   // 32\n  var nextType = typeof nextElement;                                                                                   // 33\n  if (prevType === 'string' || prevType === 'number') {                                                                // 34\n    return nextType === 'string' || nextType === 'number';                                                             // 35\n  } else {                                                                                                             // 36\n    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;      // 37\n  }                                                                                                                    // 38\n}                                                                                                                      // 39\n                                                                                                                       // 40\nmodule.exports = shouldUpdateReactComponent;                                                                           // 41\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactEmptyComponent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactEmptyComponent.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar emptyComponentFactory;                                                                                             // 13\n                                                                                                                       // 14\nvar ReactEmptyComponentInjection = {                                                                                   // 15\n  injectEmptyComponentFactory: function (factory) {                                                                    // 16\n    emptyComponentFactory = factory;                                                                                   // 17\n  }                                                                                                                    // 18\n};                                                                                                                     // 19\n                                                                                                                       // 20\nvar ReactEmptyComponent = {                                                                                            // 21\n  create: function (instantiate) {                                                                                     // 22\n    return emptyComponentFactory(instantiate);                                                                         // 23\n  }                                                                                                                    // 24\n};                                                                                                                     // 25\n                                                                                                                       // 26\nReactEmptyComponent.injection = ReactEmptyComponentInjection;                                                          // 27\n                                                                                                                       // 28\nmodule.exports = ReactEmptyComponent;                                                                                  // 29\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactHostComponent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactHostComponent.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 13\n                                                                                                                       // 14\nvar invariant = require('fbjs/lib/invariant');                                                                         // 15\n                                                                                                                       // 16\nvar genericComponentClass = null;                                                                                      // 17\nvar textComponentClass = null;                                                                                         // 18\n                                                                                                                       // 19\nvar ReactHostComponentInjection = {                                                                                    // 20\n  // This accepts a class that receives the tag string. This is a catch all                                            // 21\n  // that can render any kind of tag.                                                                                  // 22\n  injectGenericComponentClass: function (componentClass) {                                                             // 23\n    genericComponentClass = componentClass;                                                                            // 24\n  },                                                                                                                   // 25\n  // This accepts a text component class that takes the text string to be                                              // 26\n  // rendered as props.                                                                                                // 27\n  injectTextComponentClass: function (componentClass) {                                                                // 28\n    textComponentClass = componentClass;                                                                               // 29\n  }                                                                                                                    // 30\n};                                                                                                                     // 31\n                                                                                                                       // 32\n/**                                                                                                                    // 33\n * Get a host internal component class for a specific tag.                                                             // 34\n *                                                                                                                     // 35\n * @param {ReactElement} element The element to create.                                                                // 36\n * @return {function} The internal class constructor function.                                                         // 37\n */                                                                                                                    // 38\nfunction createInternalComponent(element) {                                                                            // 39\n  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;\n  return new genericComponentClass(element);                                                                           // 41\n}                                                                                                                      // 42\n                                                                                                                       // 43\n/**                                                                                                                    // 44\n * @param {ReactText} text                                                                                             // 45\n * @return {ReactComponent}                                                                                            // 46\n */                                                                                                                    // 47\nfunction createInstanceForText(text) {                                                                                 // 48\n  return new textComponentClass(text);                                                                                 // 49\n}                                                                                                                      // 50\n                                                                                                                       // 51\n/**                                                                                                                    // 52\n * @param {ReactComponent} component                                                                                   // 53\n * @return {boolean}                                                                                                   // 54\n */                                                                                                                    // 55\nfunction isTextComponent(component) {                                                                                  // 56\n  return component instanceof textComponentClass;                                                                      // 57\n}                                                                                                                      // 58\n                                                                                                                       // 59\nvar ReactHostComponent = {                                                                                             // 60\n  createInternalComponent: createInternalComponent,                                                                    // 61\n  createInstanceForText: createInstanceForText,                                                                        // 62\n  isTextComponent: isTextComponent,                                                                                    // 63\n  injection: ReactHostComponentInjection                                                                               // 64\n};                                                                                                                     // 65\n                                                                                                                       // 66\nmodule.exports = ReactHostComponent;                                                                                   // 67\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"KeyEscapeUtils.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/KeyEscapeUtils.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Escape and wrap key so it is safe to use as a reactid                                                               // 15\n *                                                                                                                     // 16\n * @param {string} key to be escaped.                                                                                  // 17\n * @return {string} the escaped key.                                                                                   // 18\n */                                                                                                                    // 19\n                                                                                                                       // 20\nfunction escape(key) {                                                                                                 // 21\n  var escapeRegex = /[=:]/g;                                                                                           // 22\n  var escaperLookup = {                                                                                                // 23\n    '=': '=0',                                                                                                         // 24\n    ':': '=2'                                                                                                          // 25\n  };                                                                                                                   // 26\n  var escapedString = ('' + key).replace(escapeRegex, function (match) {                                               // 27\n    return escaperLookup[match];                                                                                       // 28\n  });                                                                                                                  // 29\n                                                                                                                       // 30\n  return '$' + escapedString;                                                                                          // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\n/**                                                                                                                    // 34\n * Unescape and unwrap key for human-readable display                                                                  // 35\n *                                                                                                                     // 36\n * @param {string} key to unescape.                                                                                    // 37\n * @return {string} the unescaped key.                                                                                 // 38\n */                                                                                                                    // 39\nfunction unescape(key) {                                                                                               // 40\n  var unescapeRegex = /(=0|=2)/g;                                                                                      // 41\n  var unescaperLookup = {                                                                                              // 42\n    '=0': '=',                                                                                                         // 43\n    '=2': ':'                                                                                                          // 44\n  };                                                                                                                   // 45\n  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);                           // 46\n                                                                                                                       // 47\n  return ('' + keySubstring).replace(unescapeRegex, function (match) {                                                 // 48\n    return unescaperLookup[match];                                                                                     // 49\n  });                                                                                                                  // 50\n}                                                                                                                      // 51\n                                                                                                                       // 52\nvar KeyEscapeUtils = {                                                                                                 // 53\n  escape: escape,                                                                                                      // 54\n  unescape: unescape                                                                                                   // 55\n};                                                                                                                     // 56\n                                                                                                                       // 57\nmodule.exports = KeyEscapeUtils;                                                                                       // 58\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"traverseAllChildren.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/traverseAllChildren.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 13\n                                                                                                                       // 14\nvar ReactCurrentOwner = require('react/lib/ReactCurrentOwner');                                                        // 15\nvar REACT_ELEMENT_TYPE = require('./ReactElementSymbol');                                                              // 16\n                                                                                                                       // 17\nvar getIteratorFn = require('./getIteratorFn');                                                                        // 18\nvar invariant = require('fbjs/lib/invariant');                                                                         // 19\nvar KeyEscapeUtils = require('./KeyEscapeUtils');                                                                      // 20\nvar warning = require('fbjs/lib/warning');                                                                             // 21\n                                                                                                                       // 22\nvar SEPARATOR = '.';                                                                                                   // 23\nvar SUBSEPARATOR = ':';                                                                                                // 24\n                                                                                                                       // 25\n/**                                                                                                                    // 26\n * This is inlined from ReactElement since this file is shared between                                                 // 27\n * isomorphic and renderers. We could extract this to a                                                                // 28\n *                                                                                                                     // 29\n */                                                                                                                    // 30\n                                                                                                                       // 31\n/**                                                                                                                    // 32\n * TODO: Test that a single child and an array with one item have the same key                                         // 33\n * pattern.                                                                                                            // 34\n */                                                                                                                    // 35\n                                                                                                                       // 36\nvar didWarnAboutMaps = false;                                                                                          // 37\n                                                                                                                       // 38\n/**                                                                                                                    // 39\n * Generate a key string that identifies a component within a set.                                                     // 40\n *                                                                                                                     // 41\n * @param {*} component A component that could contain a manual key.                                                   // 42\n * @param {number} index Index that is used if a manual key is not provided.                                           // 43\n * @return {string}                                                                                                    // 44\n */                                                                                                                    // 45\nfunction getComponentKey(component, index) {                                                                           // 46\n  // Do some typechecking here since we call this blindly. We want to ensure                                           // 47\n  // that we don't block potential future ES APIs.                                                                     // 48\n  if (component && typeof component === 'object' && component.key != null) {                                           // 49\n    // Explicit key                                                                                                    // 50\n    return KeyEscapeUtils.escape(component.key);                                                                       // 51\n  }                                                                                                                    // 52\n  // Implicit key determined by the index in the set                                                                   // 53\n  return index.toString(36);                                                                                           // 54\n}                                                                                                                      // 55\n                                                                                                                       // 56\n/**                                                                                                                    // 57\n * @param {?*} children Children tree container.                                                                       // 58\n * @param {!string} nameSoFar Name of the key path so far.                                                             // 59\n * @param {!function} callback Callback to invoke with each child found.                                               // 60\n * @param {?*} traverseContext Used to pass information throughout the traversal                                       // 61\n * process.                                                                                                            // 62\n * @return {!number} The number of children in this subtree.                                                           // 63\n */                                                                                                                    // 64\nfunction traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {                                     // 65\n  var type = typeof children;                                                                                          // 66\n                                                                                                                       // 67\n  if (type === 'undefined' || type === 'boolean') {                                                                    // 68\n    // All of the above are perceived as null.                                                                         // 69\n    children = null;                                                                                                   // 70\n  }                                                                                                                    // 71\n                                                                                                                       // 72\n  if (children === null || type === 'string' || type === 'number' ||                                                   // 73\n  // The following is inlined from ReactElement. This means we can optimize                                            // 74\n  // some checks. React Fiber also inlines this logic for similar purposes.                                            // 75\n  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {                                                     // 76\n    callback(traverseContext, children,                                                                                // 77\n    // If it's the only child, treat the name as if it was wrapped in an array                                         // 78\n    // so that it's consistent if the number of children grows.                                                        // 79\n    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);                                          // 80\n    return 1;                                                                                                          // 81\n  }                                                                                                                    // 82\n                                                                                                                       // 83\n  var child;                                                                                                           // 84\n  var nextName;                                                                                                        // 85\n  var subtreeCount = 0; // Count of children found in the current subtree.                                             // 86\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;                                        // 87\n                                                                                                                       // 88\n  if (Array.isArray(children)) {                                                                                       // 89\n    for (var i = 0; i < children.length; i++) {                                                                        // 90\n      child = children[i];                                                                                             // 91\n      nextName = nextNamePrefix + getComponentKey(child, i);                                                           // 92\n      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);                             // 93\n    }                                                                                                                  // 94\n  } else {                                                                                                             // 95\n    var iteratorFn = getIteratorFn(children);                                                                          // 96\n    if (iteratorFn) {                                                                                                  // 97\n      var iterator = iteratorFn.call(children);                                                                        // 98\n      var step;                                                                                                        // 99\n      if (iteratorFn !== children.entries) {                                                                           // 100\n        var ii = 0;                                                                                                    // 101\n        while (!(step = iterator.next()).done) {                                                                       // 102\n          child = step.value;                                                                                          // 103\n          nextName = nextNamePrefix + getComponentKey(child, ii++);                                                    // 104\n          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);                         // 105\n        }                                                                                                              // 106\n      } else {                                                                                                         // 107\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 108\n          var mapsAsChildrenAddendum = '';                                                                             // 109\n          if (ReactCurrentOwner.current) {                                                                             // 110\n            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();                                         // 111\n            if (mapsAsChildrenOwnerName) {                                                                             // 112\n              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';               // 113\n            }                                                                                                          // 114\n          }                                                                                                            // 115\n          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;\n          didWarnAboutMaps = true;                                                                                     // 117\n        }                                                                                                              // 118\n        // Iterator will provide entry [k,v] tuples rather than values.                                                // 119\n        while (!(step = iterator.next()).done) {                                                                       // 120\n          var entry = step.value;                                                                                      // 121\n          if (entry) {                                                                                                 // 122\n            child = entry[1];                                                                                          // 123\n            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);    // 124\n            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);                       // 125\n          }                                                                                                            // 126\n        }                                                                                                              // 127\n      }                                                                                                                // 128\n    } else if (type === 'object') {                                                                                    // 129\n      var addendum = '';                                                                                               // 130\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 131\n        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';\n        if (children._isReactElement) {                                                                                // 133\n          addendum = \" It looks like you're using an element created by a different \" + 'version of React. Make sure to use only one copy of React.';\n        }                                                                                                              // 135\n        if (ReactCurrentOwner.current) {                                                                               // 136\n          var name = ReactCurrentOwner.current.getName();                                                              // 137\n          if (name) {                                                                                                  // 138\n            addendum += ' Check the render method of `' + name + '`.';                                                 // 139\n          }                                                                                                            // 140\n        }                                                                                                              // 141\n      }                                                                                                                // 142\n      var childrenString = String(children);                                                                           // 143\n      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;\n    }                                                                                                                  // 145\n  }                                                                                                                    // 146\n                                                                                                                       // 147\n  return subtreeCount;                                                                                                 // 148\n}                                                                                                                      // 149\n                                                                                                                       // 150\n/**                                                                                                                    // 151\n * Traverses children that are typically specified as `props.children`, but                                            // 152\n * might also be specified through attributes:                                                                         // 153\n *                                                                                                                     // 154\n * - `traverseAllChildren(this.props.children, ...)`                                                                   // 155\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`                                                          // 156\n *                                                                                                                     // 157\n * The `traverseContext` is an optional argument that is passed through the                                            // 158\n * entire traversal. It can be used to store accumulations or anything else that                                       // 159\n * the callback might find relevant.                                                                                   // 160\n *                                                                                                                     // 161\n * @param {?*} children Children tree object.                                                                          // 162\n * @param {!function} callback To invoke upon traversing each child.                                                   // 163\n * @param {?*} traverseContext Context for traversal.                                                                  // 164\n * @return {!number} The number of children in this subtree.                                                           // 165\n */                                                                                                                    // 166\nfunction traverseAllChildren(children, callback, traverseContext) {                                                    // 167\n  if (children == null) {                                                                                              // 168\n    return 0;                                                                                                          // 169\n  }                                                                                                                    // 170\n                                                                                                                       // 171\n  return traverseAllChildrenImpl(children, '', callback, traverseContext);                                             // 172\n}                                                                                                                      // 173\n                                                                                                                       // 174\nmodule.exports = traverseAllChildren;                                                                                  // 175\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactElementSymbol.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactElementSymbol.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n// The Symbol used to tag the ReactElement type. If there is no native Symbol                                          // 14\n// nor polyfill, then a plain number is used for performance.                                                          // 15\n                                                                                                                       // 16\nvar REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;    // 17\n                                                                                                                       // 18\nmodule.exports = REACT_ELEMENT_TYPE;                                                                                   // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getIteratorFn.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/getIteratorFn.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/* global Symbol */                                                                                                    // 14\n                                                                                                                       // 15\nvar ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;                                                 // 16\nvar FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.                                                        // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * Returns the iterator method function contained on the iterable object.                                              // 20\n *                                                                                                                     // 21\n * Be sure to invoke the function with the iterable as context:                                                        // 22\n *                                                                                                                     // 23\n *     var iteratorFn = getIteratorFn(myIterable);                                                                     // 24\n *     if (iteratorFn) {                                                                                               // 25\n *       var iterator = iteratorFn.call(myIterable);                                                                   // 26\n *       ...                                                                                                           // 27\n *     }                                                                                                               // 28\n *                                                                                                                     // 29\n * @param {?object} maybeIterable                                                                                      // 30\n * @return {?function}                                                                                                 // 31\n */                                                                                                                    // 32\nfunction getIteratorFn(maybeIterable) {                                                                                // 33\n  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n  if (typeof iteratorFn === 'function') {                                                                              // 35\n    return iteratorFn;                                                                                                 // 36\n  }                                                                                                                    // 37\n}                                                                                                                      // 38\n                                                                                                                       // 39\nmodule.exports = getIteratorFn;                                                                                        // 40\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"flattenChildren.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/flattenChildren.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar KeyEscapeUtils = require('./KeyEscapeUtils');                                                                      // 14\nvar traverseAllChildren = require('./traverseAllChildren');                                                            // 15\nvar warning = require('fbjs/lib/warning');                                                                             // 16\n                                                                                                                       // 17\nvar ReactComponentTreeHook;                                                                                            // 18\n                                                                                                                       // 19\nif (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {                                // 20\n  // Temporary hack.                                                                                                   // 21\n  // Inline requires don't work well with Jest:                                                                        // 22\n  // https://github.com/facebook/react/issues/7240                                                                     // 23\n  // Remove the inline requires when we don't need them anymore:                                                       // 24\n  // https://github.com/facebook/react/pull/7178                                                                       // 25\n  ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');                                                // 26\n}                                                                                                                      // 27\n                                                                                                                       // 28\n/**                                                                                                                    // 29\n * @param {function} traverseContext Context passed through traversal.                                                 // 30\n * @param {?ReactComponent} child React child component.                                                               // 31\n * @param {!string} name String name of key path to child.                                                             // 32\n * @param {number=} selfDebugID Optional debugID of the current internal instance.                                     // 33\n */                                                                                                                    // 34\nfunction flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {                                    // 35\n  // We found a component instance.                                                                                    // 36\n  if (traverseContext && typeof traverseContext === 'object') {                                                        // 37\n    var result = traverseContext;                                                                                      // 38\n    var keyUnique = result[name] === undefined;                                                                        // 39\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 40\n      if (!ReactComponentTreeHook) {                                                                                   // 41\n        ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');                                          // 42\n      }                                                                                                                // 43\n      if (!keyUnique) {                                                                                                // 44\n        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;\n      }                                                                                                                // 46\n    }                                                                                                                  // 47\n    if (keyUnique && child != null) {                                                                                  // 48\n      result[name] = child;                                                                                            // 49\n    }                                                                                                                  // 50\n  }                                                                                                                    // 51\n}                                                                                                                      // 52\n                                                                                                                       // 53\n/**                                                                                                                    // 54\n * Flattens children that are typically specified as `props.children`. Any null                                        // 55\n * children will not be included in the resulting object.                                                              // 56\n * @return {!object} flattened children keyed by name.                                                                 // 57\n */                                                                                                                    // 58\nfunction flattenChildren(children, selfDebugID) {                                                                      // 59\n  if (children == null) {                                                                                              // 60\n    return children;                                                                                                   // 61\n  }                                                                                                                    // 62\n  var result = {};                                                                                                     // 63\n                                                                                                                       // 64\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 65\n    traverseAllChildren(children, function (traverseContext, child, name) {                                            // 66\n      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);                                 // 67\n    }, result);                                                                                                        // 68\n  } else {                                                                                                             // 69\n    traverseAllChildren(children, flattenSingleChildIntoContext, result);                                              // 70\n  }                                                                                                                    // 71\n  return result;                                                                                                       // 72\n}                                                                                                                      // 73\n                                                                                                                       // 74\nmodule.exports = flattenChildren;                                                                                      // 75\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactServerRenderingTransaction.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactServerRenderingTransaction.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _assign = require('object-assign');                                                                                // 13\n                                                                                                                       // 14\nvar PooledClass = require('./PooledClass');                                                                            // 15\nvar Transaction = require('./Transaction');                                                                            // 16\nvar ReactInstrumentation = require('./ReactInstrumentation');                                                          // 17\nvar ReactServerUpdateQueue = require('./ReactServerUpdateQueue');                                                      // 18\n                                                                                                                       // 19\n/**                                                                                                                    // 20\n * Executed within the scope of the `Transaction` instance. Consider these as                                          // 21\n * being member methods, but with an implied ordering while being isolated from                                        // 22\n * each other.                                                                                                         // 23\n */                                                                                                                    // 24\nvar TRANSACTION_WRAPPERS = [];                                                                                         // 25\n                                                                                                                       // 26\nif (process.env.NODE_ENV !== 'production') {                                                                           // 27\n  TRANSACTION_WRAPPERS.push({                                                                                          // 28\n    initialize: ReactInstrumentation.debugTool.onBeginFlush,                                                           // 29\n    close: ReactInstrumentation.debugTool.onEndFlush                                                                   // 30\n  });                                                                                                                  // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\nvar noopCallbackQueue = {                                                                                              // 34\n  enqueue: function () {}                                                                                              // 35\n};                                                                                                                     // 36\n                                                                                                                       // 37\n/**                                                                                                                    // 38\n * @class ReactServerRenderingTransaction                                                                              // 39\n * @param {boolean} renderToStaticMarkup                                                                               // 40\n */                                                                                                                    // 41\nfunction ReactServerRenderingTransaction(renderToStaticMarkup) {                                                       // 42\n  this.reinitializeTransaction();                                                                                      // 43\n  this.renderToStaticMarkup = renderToStaticMarkup;                                                                    // 44\n  this.useCreateElement = false;                                                                                       // 45\n  this.updateQueue = new ReactServerUpdateQueue(this);                                                                 // 46\n}                                                                                                                      // 47\n                                                                                                                       // 48\nvar Mixin = {                                                                                                          // 49\n  /**                                                                                                                  // 50\n   * @see Transaction                                                                                                  // 51\n   * @abstract                                                                                                         // 52\n   * @final                                                                                                            // 53\n   * @return {array} Empty list of operation wrap procedures.                                                          // 54\n   */                                                                                                                  // 55\n  getTransactionWrappers: function () {                                                                                // 56\n    return TRANSACTION_WRAPPERS;                                                                                       // 57\n  },                                                                                                                   // 58\n                                                                                                                       // 59\n  /**                                                                                                                  // 60\n   * @return {object} The queue to collect `onDOMReady` callbacks with.                                                // 61\n   */                                                                                                                  // 62\n  getReactMountReady: function () {                                                                                    // 63\n    return noopCallbackQueue;                                                                                          // 64\n  },                                                                                                                   // 65\n                                                                                                                       // 66\n  /**                                                                                                                  // 67\n   * @return {object} The queue to collect React async events.                                                         // 68\n   */                                                                                                                  // 69\n  getUpdateQueue: function () {                                                                                        // 70\n    return this.updateQueue;                                                                                           // 71\n  },                                                                                                                   // 72\n                                                                                                                       // 73\n  /**                                                                                                                  // 74\n   * `PooledClass` looks for this, and will invoke this before allowing this                                           // 75\n   * instance to be reused.                                                                                            // 76\n   */                                                                                                                  // 77\n  destructor: function () {},                                                                                          // 78\n                                                                                                                       // 79\n  checkpoint: function () {},                                                                                          // 80\n                                                                                                                       // 81\n  rollback: function () {}                                                                                             // 82\n};                                                                                                                     // 83\n                                                                                                                       // 84\n_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);                                                // 85\n                                                                                                                       // 86\nPooledClass.addPoolingTo(ReactServerRenderingTransaction);                                                             // 87\n                                                                                                                       // 88\nmodule.exports = ReactServerRenderingTransaction;                                                                      // 89\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactServerUpdateQueue.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactServerUpdateQueue.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2015-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n                                                                                                                       // 15\nvar ReactUpdateQueue = require('./ReactUpdateQueue');                                                                  // 16\n                                                                                                                       // 17\nvar warning = require('fbjs/lib/warning');                                                                             // 18\n                                                                                                                       // 19\nfunction warnNoop(publicInstance, callerName) {                                                                        // 20\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 21\n    var constructor = publicInstance.constructor;                                                                      // 22\n    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;\n  }                                                                                                                    // 24\n}                                                                                                                      // 25\n                                                                                                                       // 26\n/**                                                                                                                    // 27\n * This is the update queue used for server rendering.                                                                 // 28\n * It delegates to ReactUpdateQueue while server rendering is in progress and                                          // 29\n * switches to ReactNoopUpdateQueue after the transaction has completed.                                               // 30\n * @class ReactServerUpdateQueue                                                                                       // 31\n * @param {Transaction} transaction                                                                                    // 32\n */                                                                                                                    // 33\n                                                                                                                       // 34\nvar ReactServerUpdateQueue = function () {                                                                             // 35\n  function ReactServerUpdateQueue(transaction) {                                                                       // 36\n    _classCallCheck(this, ReactServerUpdateQueue);                                                                     // 37\n                                                                                                                       // 38\n    this.transaction = transaction;                                                                                    // 39\n  }                                                                                                                    // 40\n                                                                                                                       // 41\n  /**                                                                                                                  // 42\n   * Checks whether or not this composite component is mounted.                                                        // 43\n   * @param {ReactClass} publicInstance The instance we want to test.                                                  // 44\n   * @return {boolean} True if mounted, false otherwise.                                                               // 45\n   * @protected                                                                                                        // 46\n   * @final                                                                                                            // 47\n   */                                                                                                                  // 48\n                                                                                                                       // 49\n                                                                                                                       // 50\n  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {                                    // 51\n    return false;                                                                                                      // 52\n  };                                                                                                                   // 53\n                                                                                                                       // 54\n  /**                                                                                                                  // 55\n   * Enqueue a callback that will be executed after all the pending updates                                            // 56\n   * have processed.                                                                                                   // 57\n   *                                                                                                                   // 58\n   * @param {ReactClass} publicInstance The instance to use as `this` context.                                         // 59\n   * @param {?function} callback Called after state is updated.                                                        // 60\n   * @internal                                                                                                         // 61\n   */                                                                                                                  // 62\n                                                                                                                       // 63\n                                                                                                                       // 64\n  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {  // 65\n    if (this.transaction.isInTransaction()) {                                                                          // 66\n      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);                                          // 67\n    }                                                                                                                  // 68\n  };                                                                                                                   // 69\n                                                                                                                       // 70\n  /**                                                                                                                  // 71\n   * Forces an update. This should only be invoked when it is known with                                               // 72\n   * certainty that we are **not** in a DOM transaction.                                                               // 73\n   *                                                                                                                   // 74\n   * You may want to call this when you know that some deeper aspect of the                                            // 75\n   * component's state has changed but `setState` was not called.                                                      // 76\n   *                                                                                                                   // 77\n   * This will not invoke `shouldComponentUpdate`, but it will invoke                                                  // 78\n   * `componentWillUpdate` and `componentDidUpdate`.                                                                   // 79\n   *                                                                                                                   // 80\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 81\n   * @internal                                                                                                         // 82\n   */                                                                                                                  // 83\n                                                                                                                       // 84\n                                                                                                                       // 85\n  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {                  // 86\n    if (this.transaction.isInTransaction()) {                                                                          // 87\n      ReactUpdateQueue.enqueueForceUpdate(publicInstance);                                                             // 88\n    } else {                                                                                                           // 89\n      warnNoop(publicInstance, 'forceUpdate');                                                                         // 90\n    }                                                                                                                  // 91\n  };                                                                                                                   // 92\n                                                                                                                       // 93\n  /**                                                                                                                  // 94\n   * Replaces all of the state. Always use this or `setState` to mutate state.                                         // 95\n   * You should treat `this.state` as immutable.                                                                       // 96\n   *                                                                                                                   // 97\n   * There is no guarantee that `this.state` will be immediately updated, so                                           // 98\n   * accessing `this.state` after calling this method may return the old value.                                        // 99\n   *                                                                                                                   // 100\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 101\n   * @param {object|function} completeState Next state.                                                                // 102\n   * @internal                                                                                                         // 103\n   */                                                                                                                  // 104\n                                                                                                                       // 105\n                                                                                                                       // 106\n  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {\n    if (this.transaction.isInTransaction()) {                                                                          // 108\n      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);                                             // 109\n    } else {                                                                                                           // 110\n      warnNoop(publicInstance, 'replaceState');                                                                        // 111\n    }                                                                                                                  // 112\n  };                                                                                                                   // 113\n                                                                                                                       // 114\n  /**                                                                                                                  // 115\n   * Sets a subset of the state. This only exists because _pendingState is                                             // 116\n   * internal. This provides a merging strategy that is not available to deep                                          // 117\n   * properties which is confusing. TODO: Expose pendingState or don't use it                                          // 118\n   * during the merge.                                                                                                 // 119\n   *                                                                                                                   // 120\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 121\n   * @param {object|function} partialState Next partial state to be merged with state.                                 // 122\n   * @internal                                                                                                         // 123\n   */                                                                                                                  // 124\n                                                                                                                       // 125\n                                                                                                                       // 126\n  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {          // 127\n    if (this.transaction.isInTransaction()) {                                                                          // 128\n      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);                                                  // 129\n    } else {                                                                                                           // 130\n      warnNoop(publicInstance, 'setState');                                                                            // 131\n    }                                                                                                                  // 132\n  };                                                                                                                   // 133\n                                                                                                                       // 134\n  return ReactServerUpdateQueue;                                                                                       // 135\n}();                                                                                                                   // 136\n                                                                                                                       // 137\nmodule.exports = ReactServerUpdateQueue;                                                                               // 138\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactUpdateQueue.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactUpdateQueue.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2015-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 13\n                                                                                                                       // 14\nvar ReactCurrentOwner = require('react/lib/ReactCurrentOwner');                                                        // 15\nvar ReactInstanceMap = require('./ReactInstanceMap');                                                                  // 16\nvar ReactInstrumentation = require('./ReactInstrumentation');                                                          // 17\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 18\n                                                                                                                       // 19\nvar invariant = require('fbjs/lib/invariant');                                                                         // 20\nvar warning = require('fbjs/lib/warning');                                                                             // 21\n                                                                                                                       // 22\nfunction enqueueUpdate(internalInstance) {                                                                             // 23\n  ReactUpdates.enqueueUpdate(internalInstance);                                                                        // 24\n}                                                                                                                      // 25\n                                                                                                                       // 26\nfunction formatUnexpectedArgument(arg) {                                                                               // 27\n  var type = typeof arg;                                                                                               // 28\n  if (type !== 'object') {                                                                                             // 29\n    return type;                                                                                                       // 30\n  }                                                                                                                    // 31\n  var displayName = arg.constructor && arg.constructor.name || type;                                                   // 32\n  var keys = Object.keys(arg);                                                                                         // 33\n  if (keys.length > 0 && keys.length < 20) {                                                                           // 34\n    return displayName + ' (keys: ' + keys.join(', ') + ')';                                                           // 35\n  }                                                                                                                    // 36\n  return displayName;                                                                                                  // 37\n}                                                                                                                      // 38\n                                                                                                                       // 39\nfunction getInternalInstanceReadyForUpdate(publicInstance, callerName) {                                               // 40\n  var internalInstance = ReactInstanceMap.get(publicInstance);                                                         // 41\n  if (!internalInstance) {                                                                                             // 42\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 43\n      var ctor = publicInstance.constructor;                                                                           // 44\n      // Only warn when we have a callerName. Otherwise we should be silent.                                           // 45\n      // We're probably calling from enqueueCallback. We don't want to warn                                            // 46\n      // there because we already warned for the corresponding lifecycle method.                                       // 47\n      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;\n    }                                                                                                                  // 49\n    return null;                                                                                                       // 50\n  }                                                                                                                    // 51\n                                                                                                                       // 52\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 53\n    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + \"within `render` or another component's constructor). Render methods \" + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;\n  }                                                                                                                    // 55\n                                                                                                                       // 56\n  return internalInstance;                                                                                             // 57\n}                                                                                                                      // 58\n                                                                                                                       // 59\n/**                                                                                                                    // 60\n * ReactUpdateQueue allows for state updates to be scheduled into a later                                              // 61\n * reconciliation step.                                                                                                // 62\n */                                                                                                                    // 63\nvar ReactUpdateQueue = {                                                                                               // 64\n  /**                                                                                                                  // 65\n   * Checks whether or not this composite component is mounted.                                                        // 66\n   * @param {ReactClass} publicInstance The instance we want to test.                                                  // 67\n   * @return {boolean} True if mounted, false otherwise.                                                               // 68\n   * @protected                                                                                                        // 69\n   * @final                                                                                                            // 70\n   */                                                                                                                  // 71\n  isMounted: function (publicInstance) {                                                                               // 72\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 73\n      var owner = ReactCurrentOwner.current;                                                                           // 74\n      if (owner !== null) {                                                                                            // 75\n        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;\n        owner._warnedAboutRefsInRender = true;                                                                         // 77\n      }                                                                                                                // 78\n    }                                                                                                                  // 79\n    var internalInstance = ReactInstanceMap.get(publicInstance);                                                       // 80\n    if (internalInstance) {                                                                                            // 81\n      // During componentWillMount and render this will still be null but after                                        // 82\n      // that will always render to something. At least for now. So we can use                                         // 83\n      // this hack.                                                                                                    // 84\n      return !!internalInstance._renderedComponent;                                                                    // 85\n    } else {                                                                                                           // 86\n      return false;                                                                                                    // 87\n    }                                                                                                                  // 88\n  },                                                                                                                   // 89\n                                                                                                                       // 90\n  /**                                                                                                                  // 91\n   * Enqueue a callback that will be executed after all the pending updates                                            // 92\n   * have processed.                                                                                                   // 93\n   *                                                                                                                   // 94\n   * @param {ReactClass} publicInstance The instance to use as `this` context.                                         // 95\n   * @param {?function} callback Called after state is updated.                                                        // 96\n   * @param {string} callerName Name of the calling function in the public API.                                        // 97\n   * @internal                                                                                                         // 98\n   */                                                                                                                  // 99\n  enqueueCallback: function (publicInstance, callback, callerName) {                                                   // 100\n    ReactUpdateQueue.validateCallback(callback, callerName);                                                           // 101\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);                                          // 102\n                                                                                                                       // 103\n    // Previously we would throw an error if we didn't have an internal                                                // 104\n    // instance. Since we want to make it a no-op instead, we mirror the same                                          // 105\n    // behavior we have in other enqueue* methods.                                                                     // 106\n    // We also need to ignore callbacks in componentWillMount. See                                                     // 107\n    // enqueueUpdates.                                                                                                 // 108\n    if (!internalInstance) {                                                                                           // 109\n      return null;                                                                                                     // 110\n    }                                                                                                                  // 111\n                                                                                                                       // 112\n    if (internalInstance._pendingCallbacks) {                                                                          // 113\n      internalInstance._pendingCallbacks.push(callback);                                                               // 114\n    } else {                                                                                                           // 115\n      internalInstance._pendingCallbacks = [callback];                                                                 // 116\n    }                                                                                                                  // 117\n    // TODO: The callback here is ignored when setState is called from                                                 // 118\n    // componentWillMount. Either fix it or disallow doing so completely in                                            // 119\n    // favor of getInitialState. Alternatively, we can disallow                                                        // 120\n    // componentWillMount during server-side rendering.                                                                // 121\n    enqueueUpdate(internalInstance);                                                                                   // 122\n  },                                                                                                                   // 123\n                                                                                                                       // 124\n  enqueueCallbackInternal: function (internalInstance, callback) {                                                     // 125\n    if (internalInstance._pendingCallbacks) {                                                                          // 126\n      internalInstance._pendingCallbacks.push(callback);                                                               // 127\n    } else {                                                                                                           // 128\n      internalInstance._pendingCallbacks = [callback];                                                                 // 129\n    }                                                                                                                  // 130\n    enqueueUpdate(internalInstance);                                                                                   // 131\n  },                                                                                                                   // 132\n                                                                                                                       // 133\n  /**                                                                                                                  // 134\n   * Forces an update. This should only be invoked when it is known with                                               // 135\n   * certainty that we are **not** in a DOM transaction.                                                               // 136\n   *                                                                                                                   // 137\n   * You may want to call this when you know that some deeper aspect of the                                            // 138\n   * component's state has changed but `setState` was not called.                                                      // 139\n   *                                                                                                                   // 140\n   * This will not invoke `shouldComponentUpdate`, but it will invoke                                                  // 141\n   * `componentWillUpdate` and `componentDidUpdate`.                                                                   // 142\n   *                                                                                                                   // 143\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 144\n   * @internal                                                                                                         // 145\n   */                                                                                                                  // 146\n  enqueueForceUpdate: function (publicInstance) {                                                                      // 147\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');                           // 148\n                                                                                                                       // 149\n    if (!internalInstance) {                                                                                           // 150\n      return;                                                                                                          // 151\n    }                                                                                                                  // 152\n                                                                                                                       // 153\n    internalInstance._pendingForceUpdate = true;                                                                       // 154\n                                                                                                                       // 155\n    enqueueUpdate(internalInstance);                                                                                   // 156\n  },                                                                                                                   // 157\n                                                                                                                       // 158\n  /**                                                                                                                  // 159\n   * Replaces all of the state. Always use this or `setState` to mutate state.                                         // 160\n   * You should treat `this.state` as immutable.                                                                       // 161\n   *                                                                                                                   // 162\n   * There is no guarantee that `this.state` will be immediately updated, so                                           // 163\n   * accessing `this.state` after calling this method may return the old value.                                        // 164\n   *                                                                                                                   // 165\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 166\n   * @param {object} completeState Next state.                                                                         // 167\n   * @internal                                                                                                         // 168\n   */                                                                                                                  // 169\n  enqueueReplaceState: function (publicInstance, completeState, callback) {                                            // 170\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');                          // 171\n                                                                                                                       // 172\n    if (!internalInstance) {                                                                                           // 173\n      return;                                                                                                          // 174\n    }                                                                                                                  // 175\n                                                                                                                       // 176\n    internalInstance._pendingStateQueue = [completeState];                                                             // 177\n    internalInstance._pendingReplaceState = true;                                                                      // 178\n                                                                                                                       // 179\n    // Future-proof 15.5                                                                                               // 180\n    if (callback !== undefined && callback !== null) {                                                                 // 181\n      ReactUpdateQueue.validateCallback(callback, 'replaceState');                                                     // 182\n      if (internalInstance._pendingCallbacks) {                                                                        // 183\n        internalInstance._pendingCallbacks.push(callback);                                                             // 184\n      } else {                                                                                                         // 185\n        internalInstance._pendingCallbacks = [callback];                                                               // 186\n      }                                                                                                                // 187\n    }                                                                                                                  // 188\n                                                                                                                       // 189\n    enqueueUpdate(internalInstance);                                                                                   // 190\n  },                                                                                                                   // 191\n                                                                                                                       // 192\n  /**                                                                                                                  // 193\n   * Sets a subset of the state. This only exists because _pendingState is                                             // 194\n   * internal. This provides a merging strategy that is not available to deep                                          // 195\n   * properties which is confusing. TODO: Expose pendingState or don't use it                                          // 196\n   * during the merge.                                                                                                 // 197\n   *                                                                                                                   // 198\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 199\n   * @param {object} partialState Next partial state to be merged with state.                                          // 200\n   * @internal                                                                                                         // 201\n   */                                                                                                                  // 202\n  enqueueSetState: function (publicInstance, partialState) {                                                           // 203\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 204\n      ReactInstrumentation.debugTool.onSetState();                                                                     // 205\n      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;\n    }                                                                                                                  // 207\n                                                                                                                       // 208\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');                              // 209\n                                                                                                                       // 210\n    if (!internalInstance) {                                                                                           // 211\n      return;                                                                                                          // 212\n    }                                                                                                                  // 213\n                                                                                                                       // 214\n    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);                     // 215\n    queue.push(partialState);                                                                                          // 216\n                                                                                                                       // 217\n    enqueueUpdate(internalInstance);                                                                                   // 218\n  },                                                                                                                   // 219\n                                                                                                                       // 220\n  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {                                      // 221\n    internalInstance._pendingElement = nextElement;                                                                    // 222\n    // TODO: introduce _pendingContext instead of setting it directly.                                                 // 223\n    internalInstance._context = nextContext;                                                                           // 224\n    enqueueUpdate(internalInstance);                                                                                   // 225\n  },                                                                                                                   // 226\n                                                                                                                       // 227\n  validateCallback: function (callback, callerName) {                                                                  // 228\n    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;\n  }                                                                                                                    // 230\n};                                                                                                                     // 231\n                                                                                                                       // 232\nmodule.exports = ReactUpdateQueue;                                                                                     // 233\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"validateDOMNesting.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/validateDOMNesting.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2015-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _assign = require('object-assign');                                                                                // 13\n                                                                                                                       // 14\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 15\nvar warning = require('fbjs/lib/warning');                                                                             // 16\n                                                                                                                       // 17\nvar validateDOMNesting = emptyFunction;                                                                                // 18\n                                                                                                                       // 19\nif (process.env.NODE_ENV !== 'production') {                                                                           // 20\n  // This validation code was written based on the HTML5 parsing spec:                                                 // 21\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope                                        // 22\n  //                                                                                                                   // 23\n  // Note: this does not catch all invalid nesting, nor does it try to (as it's                                        // 24\n  // not clear what practical benefit doing so provides); instead, we warn only                                        // 25\n  // for cases where the parser will give a parse tree differing from what React                                       // 26\n  // intended. For example, <b><div></div></b> is invalid but we don't warn                                            // 27\n  // because it still parses correctly; we do warn for other cases like nested                                         // 28\n  // <p> tags where the beginning of the second element implicitly closes the                                          // 29\n  // first, causing a confusing mess.                                                                                  // 30\n                                                                                                                       // 31\n  // https://html.spec.whatwg.org/multipage/syntax.html#special                                                        // 32\n  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];\n                                                                                                                       // 34\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope                                        // 35\n  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',                // 36\n                                                                                                                       // 37\n  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point                                         // 38\n  // TODO: Distinguish by namespace here -- for <title>, including it here                                             // 39\n  // errs on the side of fewer warnings                                                                                // 40\n  'foreignObject', 'desc', 'title'];                                                                                   // 41\n                                                                                                                       // 42\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope                                 // 43\n  var buttonScopeTags = inScopeTags.concat(['button']);                                                                // 44\n                                                                                                                       // 45\n  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags                                      // 46\n  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];                                      // 47\n                                                                                                                       // 48\n  var emptyAncestorInfo = {                                                                                            // 49\n    current: null,                                                                                                     // 50\n                                                                                                                       // 51\n    formTag: null,                                                                                                     // 52\n    aTagInScope: null,                                                                                                 // 53\n    buttonTagInScope: null,                                                                                            // 54\n    nobrTagInScope: null,                                                                                              // 55\n    pTagInButtonScope: null,                                                                                           // 56\n                                                                                                                       // 57\n    listItemTagAutoclosing: null,                                                                                      // 58\n    dlItemTagAutoclosing: null                                                                                         // 59\n  };                                                                                                                   // 60\n                                                                                                                       // 61\n  var updatedAncestorInfo = function (oldInfo, tag, instance) {                                                        // 62\n    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);                                                      // 63\n    var info = { tag: tag, instance: instance };                                                                       // 64\n                                                                                                                       // 65\n    if (inScopeTags.indexOf(tag) !== -1) {                                                                             // 66\n      ancestorInfo.aTagInScope = null;                                                                                 // 67\n      ancestorInfo.buttonTagInScope = null;                                                                            // 68\n      ancestorInfo.nobrTagInScope = null;                                                                              // 69\n    }                                                                                                                  // 70\n    if (buttonScopeTags.indexOf(tag) !== -1) {                                                                         // 71\n      ancestorInfo.pTagInButtonScope = null;                                                                           // 72\n    }                                                                                                                  // 73\n                                                                                                                       // 74\n    // See rules for 'li', 'dd', 'dt' start tags in                                                                    // 75\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody                                          // 76\n    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {                        // 77\n      ancestorInfo.listItemTagAutoclosing = null;                                                                      // 78\n      ancestorInfo.dlItemTagAutoclosing = null;                                                                        // 79\n    }                                                                                                                  // 80\n                                                                                                                       // 81\n    ancestorInfo.current = info;                                                                                       // 82\n                                                                                                                       // 83\n    if (tag === 'form') {                                                                                              // 84\n      ancestorInfo.formTag = info;                                                                                     // 85\n    }                                                                                                                  // 86\n    if (tag === 'a') {                                                                                                 // 87\n      ancestorInfo.aTagInScope = info;                                                                                 // 88\n    }                                                                                                                  // 89\n    if (tag === 'button') {                                                                                            // 90\n      ancestorInfo.buttonTagInScope = info;                                                                            // 91\n    }                                                                                                                  // 92\n    if (tag === 'nobr') {                                                                                              // 93\n      ancestorInfo.nobrTagInScope = info;                                                                              // 94\n    }                                                                                                                  // 95\n    if (tag === 'p') {                                                                                                 // 96\n      ancestorInfo.pTagInButtonScope = info;                                                                           // 97\n    }                                                                                                                  // 98\n    if (tag === 'li') {                                                                                                // 99\n      ancestorInfo.listItemTagAutoclosing = info;                                                                      // 100\n    }                                                                                                                  // 101\n    if (tag === 'dd' || tag === 'dt') {                                                                                // 102\n      ancestorInfo.dlItemTagAutoclosing = info;                                                                        // 103\n    }                                                                                                                  // 104\n                                                                                                                       // 105\n    return ancestorInfo;                                                                                               // 106\n  };                                                                                                                   // 107\n                                                                                                                       // 108\n  /**                                                                                                                  // 109\n   * Returns whether                                                                                                   // 110\n   */                                                                                                                  // 111\n  var isTagValidWithParent = function (tag, parentTag) {                                                               // 112\n    // First, let's check if we're in an unusual parsing mode...                                                       // 113\n    switch (parentTag) {                                                                                               // 114\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect                                      // 115\n      case 'select':                                                                                                   // 116\n        return tag === 'option' || tag === 'optgroup' || tag === '#text';                                              // 117\n      case 'optgroup':                                                                                                 // 118\n        return tag === 'option' || tag === '#text';                                                                    // 119\n      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>                                        // 120\n      // but                                                                                                           // 121\n      case 'option':                                                                                                   // 122\n        return tag === '#text';                                                                                        // 123\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd                                          // 124\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption                                     // 125\n      // No special behavior since these rules fall back to \"in body\" mode for                                         // 126\n      // all except special table nodes which cause bad parsing behavior anyway.                                       // 127\n                                                                                                                       // 128\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr                                          // 129\n      case 'tr':                                                                                                       // 130\n        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';              // 131\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody                                       // 132\n      case 'tbody':                                                                                                    // 133\n      case 'thead':                                                                                                    // 134\n      case 'tfoot':                                                                                                    // 135\n        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';                              // 136\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup                                    // 137\n      case 'colgroup':                                                                                                 // 138\n        return tag === 'col' || tag === 'template';                                                                    // 139\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable                                       // 140\n      case 'table':                                                                                                    // 141\n        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead                                        // 143\n      case 'head':                                                                                                     // 144\n        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';\n      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element                                        // 146\n      case 'html':                                                                                                     // 147\n        return tag === 'head' || tag === 'body';                                                                       // 148\n      case '#document':                                                                                                // 149\n        return tag === 'html';                                                                                         // 150\n    }                                                                                                                  // 151\n                                                                                                                       // 152\n    // Probably in the \"in body\" parsing mode, so we outlaw only tag combos                                            // 153\n    // where the parsing rules cause implicit opens or closes to be added.                                             // 154\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody                                          // 155\n    switch (tag) {                                                                                                     // 156\n      case 'h1':                                                                                                       // 157\n      case 'h2':                                                                                                       // 158\n      case 'h3':                                                                                                       // 159\n      case 'h4':                                                                                                       // 160\n      case 'h5':                                                                                                       // 161\n      case 'h6':                                                                                                       // 162\n        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';\n                                                                                                                       // 164\n      case 'rp':                                                                                                       // 165\n      case 'rt':                                                                                                       // 166\n        return impliedEndTags.indexOf(parentTag) === -1;                                                               // 167\n                                                                                                                       // 168\n      case 'body':                                                                                                     // 169\n      case 'caption':                                                                                                  // 170\n      case 'col':                                                                                                      // 171\n      case 'colgroup':                                                                                                 // 172\n      case 'frame':                                                                                                    // 173\n      case 'head':                                                                                                     // 174\n      case 'html':                                                                                                     // 175\n      case 'tbody':                                                                                                    // 176\n      case 'td':                                                                                                       // 177\n      case 'tfoot':                                                                                                    // 178\n      case 'th':                                                                                                       // 179\n      case 'thead':                                                                                                    // 180\n      case 'tr':                                                                                                       // 181\n        // These tags are only valid with a few parents that have special child                                        // 182\n        // parsing rules -- if we're down here, then none of those matched and                                         // 183\n        // so we allow it only if we don't know what the parent is, as all other                                       // 184\n        // cases are invalid.                                                                                          // 185\n        return parentTag == null;                                                                                      // 186\n    }                                                                                                                  // 187\n                                                                                                                       // 188\n    return true;                                                                                                       // 189\n  };                                                                                                                   // 190\n                                                                                                                       // 191\n  /**                                                                                                                  // 192\n   * Returns whether                                                                                                   // 193\n   */                                                                                                                  // 194\n  var findInvalidAncestorForTag = function (tag, ancestorInfo) {                                                       // 195\n    switch (tag) {                                                                                                     // 196\n      case 'address':                                                                                                  // 197\n      case 'article':                                                                                                  // 198\n      case 'aside':                                                                                                    // 199\n      case 'blockquote':                                                                                               // 200\n      case 'center':                                                                                                   // 201\n      case 'details':                                                                                                  // 202\n      case 'dialog':                                                                                                   // 203\n      case 'dir':                                                                                                      // 204\n      case 'div':                                                                                                      // 205\n      case 'dl':                                                                                                       // 206\n      case 'fieldset':                                                                                                 // 207\n      case 'figcaption':                                                                                               // 208\n      case 'figure':                                                                                                   // 209\n      case 'footer':                                                                                                   // 210\n      case 'header':                                                                                                   // 211\n      case 'hgroup':                                                                                                   // 212\n      case 'main':                                                                                                     // 213\n      case 'menu':                                                                                                     // 214\n      case 'nav':                                                                                                      // 215\n      case 'ol':                                                                                                       // 216\n      case 'p':                                                                                                        // 217\n      case 'section':                                                                                                  // 218\n      case 'summary':                                                                                                  // 219\n      case 'ul':                                                                                                       // 220\n      case 'pre':                                                                                                      // 221\n      case 'listing':                                                                                                  // 222\n      case 'table':                                                                                                    // 223\n      case 'hr':                                                                                                       // 224\n      case 'xmp':                                                                                                      // 225\n      case 'h1':                                                                                                       // 226\n      case 'h2':                                                                                                       // 227\n      case 'h3':                                                                                                       // 228\n      case 'h4':                                                                                                       // 229\n      case 'h5':                                                                                                       // 230\n      case 'h6':                                                                                                       // 231\n        return ancestorInfo.pTagInButtonScope;                                                                         // 232\n                                                                                                                       // 233\n      case 'form':                                                                                                     // 234\n        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;                                                 // 235\n                                                                                                                       // 236\n      case 'li':                                                                                                       // 237\n        return ancestorInfo.listItemTagAutoclosing;                                                                    // 238\n                                                                                                                       // 239\n      case 'dd':                                                                                                       // 240\n      case 'dt':                                                                                                       // 241\n        return ancestorInfo.dlItemTagAutoclosing;                                                                      // 242\n                                                                                                                       // 243\n      case 'button':                                                                                                   // 244\n        return ancestorInfo.buttonTagInScope;                                                                          // 245\n                                                                                                                       // 246\n      case 'a':                                                                                                        // 247\n        // Spec says something about storing a list of markers, but it sounds                                          // 248\n        // equivalent to this check.                                                                                   // 249\n        return ancestorInfo.aTagInScope;                                                                               // 250\n                                                                                                                       // 251\n      case 'nobr':                                                                                                     // 252\n        return ancestorInfo.nobrTagInScope;                                                                            // 253\n    }                                                                                                                  // 254\n                                                                                                                       // 255\n    return null;                                                                                                       // 256\n  };                                                                                                                   // 257\n                                                                                                                       // 258\n  /**                                                                                                                  // 259\n   * Given a ReactCompositeComponent instance, return a list of its recursive                                          // 260\n   * owners, starting at the root and ending with the instance itself.                                                 // 261\n   */                                                                                                                  // 262\n  var findOwnerStack = function (instance) {                                                                           // 263\n    if (!instance) {                                                                                                   // 264\n      return [];                                                                                                       // 265\n    }                                                                                                                  // 266\n                                                                                                                       // 267\n    var stack = [];                                                                                                    // 268\n    do {                                                                                                               // 269\n      stack.push(instance);                                                                                            // 270\n    } while (instance = instance._currentElement._owner);                                                              // 271\n    stack.reverse();                                                                                                   // 272\n    return stack;                                                                                                      // 273\n  };                                                                                                                   // 274\n                                                                                                                       // 275\n  var didWarn = {};                                                                                                    // 276\n                                                                                                                       // 277\n  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {                                   // 278\n    ancestorInfo = ancestorInfo || emptyAncestorInfo;                                                                  // 279\n    var parentInfo = ancestorInfo.current;                                                                             // 280\n    var parentTag = parentInfo && parentInfo.tag;                                                                      // 281\n                                                                                                                       // 282\n    if (childText != null) {                                                                                           // 283\n      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;\n      childTag = '#text';                                                                                              // 285\n    }                                                                                                                  // 286\n                                                                                                                       // 287\n    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;                                 // 288\n    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);                    // 289\n    var problematic = invalidParent || invalidAncestor;                                                                // 290\n                                                                                                                       // 291\n    if (problematic) {                                                                                                 // 292\n      var ancestorTag = problematic.tag;                                                                               // 293\n      var ancestorInstance = problematic.instance;                                                                     // 294\n                                                                                                                       // 295\n      var childOwner = childInstance && childInstance._currentElement._owner;                                          // 296\n      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;                                 // 297\n                                                                                                                       // 298\n      var childOwners = findOwnerStack(childOwner);                                                                    // 299\n      var ancestorOwners = findOwnerStack(ancestorOwner);                                                              // 300\n                                                                                                                       // 301\n      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);                                           // 302\n      var i;                                                                                                           // 303\n                                                                                                                       // 304\n      var deepestCommon = -1;                                                                                          // 305\n      for (i = 0; i < minStackLen; i++) {                                                                              // 306\n        if (childOwners[i] === ancestorOwners[i]) {                                                                    // 307\n          deepestCommon = i;                                                                                           // 308\n        } else {                                                                                                       // 309\n          break;                                                                                                       // 310\n        }                                                                                                              // 311\n      }                                                                                                                // 312\n                                                                                                                       // 313\n      var UNKNOWN = '(unknown)';                                                                                       // 314\n      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {                                 // 315\n        return inst.getName() || UNKNOWN;                                                                              // 316\n      });                                                                                                              // 317\n      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {                           // 318\n        return inst.getName() || UNKNOWN;                                                                              // 319\n      });                                                                                                              // 320\n      var ownerInfo = [].concat(                                                                                       // 321\n      // If the parent and child instances have a common owner ancestor, start                                         // 322\n      // with that -- otherwise we just start with the parent's owners.                                                // 323\n      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,    // 324\n      // If we're warning about an invalid (non-parent) ancestry, add '...'                                            // 325\n      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');                                          // 326\n                                                                                                                       // 327\n      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;                            // 328\n      if (didWarn[warnKey]) {                                                                                          // 329\n        return;                                                                                                        // 330\n      }                                                                                                                // 331\n      didWarn[warnKey] = true;                                                                                         // 332\n                                                                                                                       // 333\n      var tagDisplayName = childTag;                                                                                   // 334\n      var whitespaceInfo = '';                                                                                         // 335\n      if (childTag === '#text') {                                                                                      // 336\n        if (/\\S/.test(childText)) {                                                                                    // 337\n          tagDisplayName = 'Text nodes';                                                                               // 338\n        } else {                                                                                                       // 339\n          tagDisplayName = 'Whitespace text nodes';                                                                    // 340\n          whitespaceInfo = \" Make sure you don't have any extra whitespace between tags on \" + 'each line of your source code.';\n        }                                                                                                              // 342\n      } else {                                                                                                         // 343\n        tagDisplayName = '<' + childTag + '>';                                                                         // 344\n      }                                                                                                                // 345\n                                                                                                                       // 346\n      if (invalidParent) {                                                                                             // 347\n        var info = '';                                                                                                 // 348\n        if (ancestorTag === 'table' && childTag === 'tr') {                                                            // 349\n          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';                  // 350\n        }                                                                                                              // 351\n        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;\n      } else {                                                                                                         // 353\n        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;\n      }                                                                                                                // 355\n    }                                                                                                                  // 356\n  };                                                                                                                   // 357\n                                                                                                                       // 358\n  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;                                                        // 359\n                                                                                                                       // 360\n  // For testing                                                                                                       // 361\n  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {                                              // 362\n    ancestorInfo = ancestorInfo || emptyAncestorInfo;                                                                  // 363\n    var parentInfo = ancestorInfo.current;                                                                             // 364\n    var parentTag = parentInfo && parentInfo.tag;                                                                      // 365\n    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);                      // 366\n  };                                                                                                                   // 367\n}                                                                                                                      // 368\n                                                                                                                       // 369\nmodule.exports = validateDOMNesting;                                                                                   // 370\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDOMEmptyComponent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactDOMEmptyComponent.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _assign = require('object-assign');                                                                                // 13\n                                                                                                                       // 14\nvar DOMLazyTree = require('./DOMLazyTree');                                                                            // 15\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 16\n                                                                                                                       // 17\nvar ReactDOMEmptyComponent = function (instantiate) {                                                                  // 18\n  // ReactCompositeComponent uses this:                                                                                // 19\n  this._currentElement = null;                                                                                         // 20\n  // ReactDOMComponentTree uses these:                                                                                 // 21\n  this._hostNode = null;                                                                                               // 22\n  this._hostParent = null;                                                                                             // 23\n  this._hostContainerInfo = null;                                                                                      // 24\n  this._domID = 0;                                                                                                     // 25\n};                                                                                                                     // 26\n_assign(ReactDOMEmptyComponent.prototype, {                                                                            // 27\n  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {                                     // 28\n    var domID = hostContainerInfo._idCounter++;                                                                        // 29\n    this._domID = domID;                                                                                               // 30\n    this._hostParent = hostParent;                                                                                     // 31\n    this._hostContainerInfo = hostContainerInfo;                                                                       // 32\n                                                                                                                       // 33\n    var nodeValue = ' react-empty: ' + this._domID + ' ';                                                              // 34\n    if (transaction.useCreateElement) {                                                                                // 35\n      var ownerDocument = hostContainerInfo._ownerDocument;                                                            // 36\n      var node = ownerDocument.createComment(nodeValue);                                                               // 37\n      ReactDOMComponentTree.precacheNode(this, node);                                                                  // 38\n      return DOMLazyTree(node);                                                                                        // 39\n    } else {                                                                                                           // 40\n      if (transaction.renderToStaticMarkup) {                                                                          // 41\n        // Normally we'd insert a comment node, but since this is a situation                                          // 42\n        // where React won't take over (static pages), we can simply return                                            // 43\n        // nothing.                                                                                                    // 44\n        return '';                                                                                                     // 45\n      }                                                                                                                // 46\n      return '<!--' + nodeValue + '-->';                                                                               // 47\n    }                                                                                                                  // 48\n  },                                                                                                                   // 49\n  receiveComponent: function () {},                                                                                    // 50\n  getHostNode: function () {                                                                                           // 51\n    return ReactDOMComponentTree.getNodeFromInstance(this);                                                            // 52\n  },                                                                                                                   // 53\n  unmountComponent: function () {                                                                                      // 54\n    ReactDOMComponentTree.uncacheNode(this);                                                                           // 55\n  }                                                                                                                    // 56\n});                                                                                                                    // 57\n                                                                                                                       // 58\nmodule.exports = ReactDOMEmptyComponent;                                                                               // 59\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDOMTreeTraversal.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactDOMTreeTraversal.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2015-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 13\n                                                                                                                       // 14\nvar invariant = require('fbjs/lib/invariant');                                                                         // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * Return the lowest common ancestor of A and B, or null if they are in                                                // 18\n * different trees.                                                                                                    // 19\n */                                                                                                                    // 20\nfunction getLowestCommonAncestor(instA, instB) {                                                                       // 21\n  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;\n  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;\n                                                                                                                       // 24\n  var depthA = 0;                                                                                                      // 25\n  for (var tempA = instA; tempA; tempA = tempA._hostParent) {                                                          // 26\n    depthA++;                                                                                                          // 27\n  }                                                                                                                    // 28\n  var depthB = 0;                                                                                                      // 29\n  for (var tempB = instB; tempB; tempB = tempB._hostParent) {                                                          // 30\n    depthB++;                                                                                                          // 31\n  }                                                                                                                    // 32\n                                                                                                                       // 33\n  // If A is deeper, crawl up.                                                                                         // 34\n  while (depthA - depthB > 0) {                                                                                        // 35\n    instA = instA._hostParent;                                                                                         // 36\n    depthA--;                                                                                                          // 37\n  }                                                                                                                    // 38\n                                                                                                                       // 39\n  // If B is deeper, crawl up.                                                                                         // 40\n  while (depthB - depthA > 0) {                                                                                        // 41\n    instB = instB._hostParent;                                                                                         // 42\n    depthB--;                                                                                                          // 43\n  }                                                                                                                    // 44\n                                                                                                                       // 45\n  // Walk in lockstep until we find a match.                                                                           // 46\n  var depth = depthA;                                                                                                  // 47\n  while (depth--) {                                                                                                    // 48\n    if (instA === instB) {                                                                                             // 49\n      return instA;                                                                                                    // 50\n    }                                                                                                                  // 51\n    instA = instA._hostParent;                                                                                         // 52\n    instB = instB._hostParent;                                                                                         // 53\n  }                                                                                                                    // 54\n  return null;                                                                                                         // 55\n}                                                                                                                      // 56\n                                                                                                                       // 57\n/**                                                                                                                    // 58\n * Return if A is an ancestor of B.                                                                                    // 59\n */                                                                                                                    // 60\nfunction isAncestor(instA, instB) {                                                                                    // 61\n  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;\n  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;\n                                                                                                                       // 64\n  while (instB) {                                                                                                      // 65\n    if (instB === instA) {                                                                                             // 66\n      return true;                                                                                                     // 67\n    }                                                                                                                  // 68\n    instB = instB._hostParent;                                                                                         // 69\n  }                                                                                                                    // 70\n  return false;                                                                                                        // 71\n}                                                                                                                      // 72\n                                                                                                                       // 73\n/**                                                                                                                    // 74\n * Return the parent instance of the passed-in instance.                                                               // 75\n */                                                                                                                    // 76\nfunction getParentInstance(inst) {                                                                                     // 77\n  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;\n                                                                                                                       // 79\n  return inst._hostParent;                                                                                             // 80\n}                                                                                                                      // 81\n                                                                                                                       // 82\n/**                                                                                                                    // 83\n * Simulates the traversal of a two-phase, capture/bubble event dispatch.                                              // 84\n */                                                                                                                    // 85\nfunction traverseTwoPhase(inst, fn, arg) {                                                                             // 86\n  var path = [];                                                                                                       // 87\n  while (inst) {                                                                                                       // 88\n    path.push(inst);                                                                                                   // 89\n    inst = inst._hostParent;                                                                                           // 90\n  }                                                                                                                    // 91\n  var i;                                                                                                               // 92\n  for (i = path.length; i-- > 0;) {                                                                                    // 93\n    fn(path[i], 'captured', arg);                                                                                      // 94\n  }                                                                                                                    // 95\n  for (i = 0; i < path.length; i++) {                                                                                  // 96\n    fn(path[i], 'bubbled', arg);                                                                                       // 97\n  }                                                                                                                    // 98\n}                                                                                                                      // 99\n                                                                                                                       // 100\n/**                                                                                                                    // 101\n * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that                                            // 102\n * should would receive a `mouseEnter` or `mouseLeave` event.                                                          // 103\n *                                                                                                                     // 104\n * Does not invoke the callback on the nearest common ancestor because nothing                                         // 105\n * \"entered\" or \"left\" that element.                                                                                   // 106\n */                                                                                                                    // 107\nfunction traverseEnterLeave(from, to, fn, argFrom, argTo) {                                                            // 108\n  var common = from && to ? getLowestCommonAncestor(from, to) : null;                                                  // 109\n  var pathFrom = [];                                                                                                   // 110\n  while (from && from !== common) {                                                                                    // 111\n    pathFrom.push(from);                                                                                               // 112\n    from = from._hostParent;                                                                                           // 113\n  }                                                                                                                    // 114\n  var pathTo = [];                                                                                                     // 115\n  while (to && to !== common) {                                                                                        // 116\n    pathTo.push(to);                                                                                                   // 117\n    to = to._hostParent;                                                                                               // 118\n  }                                                                                                                    // 119\n  var i;                                                                                                               // 120\n  for (i = 0; i < pathFrom.length; i++) {                                                                              // 121\n    fn(pathFrom[i], 'bubbled', argFrom);                                                                               // 122\n  }                                                                                                                    // 123\n  for (i = pathTo.length; i-- > 0;) {                                                                                  // 124\n    fn(pathTo[i], 'captured', argTo);                                                                                  // 125\n  }                                                                                                                    // 126\n}                                                                                                                      // 127\n                                                                                                                       // 128\nmodule.exports = {                                                                                                     // 129\n  isAncestor: isAncestor,                                                                                              // 130\n  getLowestCommonAncestor: getLowestCommonAncestor,                                                                    // 131\n  getParentInstance: getParentInstance,                                                                                // 132\n  traverseTwoPhase: traverseTwoPhase,                                                                                  // 133\n  traverseEnterLeave: traverseEnterLeave                                                                               // 134\n};                                                                                                                     // 135\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDOMTextComponent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactDOMTextComponent.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _prodInvariant = require('./reactProdInvariant'),                                                                  // 13\n    _assign = require('object-assign');                                                                                // 14\n                                                                                                                       // 15\nvar DOMChildrenOperations = require('./DOMChildrenOperations');                                                        // 16\nvar DOMLazyTree = require('./DOMLazyTree');                                                                            // 17\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 18\n                                                                                                                       // 19\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');                                            // 20\nvar invariant = require('fbjs/lib/invariant');                                                                         // 21\nvar validateDOMNesting = require('./validateDOMNesting');                                                              // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * Text nodes violate a couple assumptions that React makes about components:                                          // 25\n *                                                                                                                     // 26\n *  - When mounting text into the DOM, adjacent text nodes are merged.                                                 // 27\n *  - Text nodes cannot be assigned a React root ID.                                                                   // 28\n *                                                                                                                     // 29\n * This component is used to wrap strings between comment nodes so that they                                           // 30\n * can undergo the same reconciliation that is applied to elements.                                                    // 31\n *                                                                                                                     // 32\n * TODO: Investigate representing React components in the DOM with text nodes.                                         // 33\n *                                                                                                                     // 34\n * @class ReactDOMTextComponent                                                                                        // 35\n * @extends ReactComponent                                                                                             // 36\n * @internal                                                                                                           // 37\n */                                                                                                                    // 38\nvar ReactDOMTextComponent = function (text) {                                                                          // 39\n  // TODO: This is really a ReactText (ReactNode), not a ReactElement                                                  // 40\n  this._currentElement = text;                                                                                         // 41\n  this._stringText = '' + text;                                                                                        // 42\n  // ReactDOMComponentTree uses these:                                                                                 // 43\n  this._hostNode = null;                                                                                               // 44\n  this._hostParent = null;                                                                                             // 45\n                                                                                                                       // 46\n  // Properties                                                                                                        // 47\n  this._domID = 0;                                                                                                     // 48\n  this._mountIndex = 0;                                                                                                // 49\n  this._closingComment = null;                                                                                         // 50\n  this._commentNodes = null;                                                                                           // 51\n};                                                                                                                     // 52\n                                                                                                                       // 53\n_assign(ReactDOMTextComponent.prototype, {                                                                             // 54\n  /**                                                                                                                  // 55\n   * Creates the markup for this text node. This node is not intended to have                                          // 56\n   * any features besides containing text content.                                                                     // 57\n   *                                                                                                                   // 58\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 59\n   * @return {string} Markup for this text node.                                                                       // 60\n   * @internal                                                                                                         // 61\n   */                                                                                                                  // 62\n  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {                                     // 63\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 64\n      var parentInfo;                                                                                                  // 65\n      if (hostParent != null) {                                                                                        // 66\n        parentInfo = hostParent._ancestorInfo;                                                                         // 67\n      } else if (hostContainerInfo != null) {                                                                          // 68\n        parentInfo = hostContainerInfo._ancestorInfo;                                                                  // 69\n      }                                                                                                                // 70\n      if (parentInfo) {                                                                                                // 71\n        // parentInfo should always be present except for the top-level                                                // 72\n        // component when server rendering                                                                             // 73\n        validateDOMNesting(null, this._stringText, this, parentInfo);                                                  // 74\n      }                                                                                                                // 75\n    }                                                                                                                  // 76\n                                                                                                                       // 77\n    var domID = hostContainerInfo._idCounter++;                                                                        // 78\n    var openingValue = ' react-text: ' + domID + ' ';                                                                  // 79\n    var closingValue = ' /react-text ';                                                                                // 80\n    this._domID = domID;                                                                                               // 81\n    this._hostParent = hostParent;                                                                                     // 82\n    if (transaction.useCreateElement) {                                                                                // 83\n      var ownerDocument = hostContainerInfo._ownerDocument;                                                            // 84\n      var openingComment = ownerDocument.createComment(openingValue);                                                  // 85\n      var closingComment = ownerDocument.createComment(closingValue);                                                  // 86\n      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());                                              // 87\n      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));                                                   // 88\n      if (this._stringText) {                                                                                          // 89\n        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));                 // 90\n      }                                                                                                                // 91\n      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));                                                   // 92\n      ReactDOMComponentTree.precacheNode(this, openingComment);                                                        // 93\n      this._closingComment = closingComment;                                                                           // 94\n      return lazyTree;                                                                                                 // 95\n    } else {                                                                                                           // 96\n      var escapedText = escapeTextContentForBrowser(this._stringText);                                                 // 97\n                                                                                                                       // 98\n      if (transaction.renderToStaticMarkup) {                                                                          // 99\n        // Normally we'd wrap this between comment nodes for the reasons stated                                        // 100\n        // above, but since this is a situation where React won't take over                                            // 101\n        // (static pages), we can simply return the text as it is.                                                     // 102\n        return escapedText;                                                                                            // 103\n      }                                                                                                                // 104\n                                                                                                                       // 105\n      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';                              // 106\n    }                                                                                                                  // 107\n  },                                                                                                                   // 108\n                                                                                                                       // 109\n  /**                                                                                                                  // 110\n   * Updates this component by updating the text content.                                                              // 111\n   *                                                                                                                   // 112\n   * @param {ReactText} nextText The next text content                                                                 // 113\n   * @param {ReactReconcileTransaction} transaction                                                                    // 114\n   * @internal                                                                                                         // 115\n   */                                                                                                                  // 116\n  receiveComponent: function (nextText, transaction) {                                                                 // 117\n    if (nextText !== this._currentElement) {                                                                           // 118\n      this._currentElement = nextText;                                                                                 // 119\n      var nextStringText = '' + nextText;                                                                              // 120\n      if (nextStringText !== this._stringText) {                                                                       // 121\n        // TODO: Save this as pending props and use performUpdateIfNecessary                                           // 122\n        // and/or updateComponent to do the actual update for consistency with                                         // 123\n        // other component types?                                                                                      // 124\n        this._stringText = nextStringText;                                                                             // 125\n        var commentNodes = this.getHostNode();                                                                         // 126\n        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);                  // 127\n      }                                                                                                                // 128\n    }                                                                                                                  // 129\n  },                                                                                                                   // 130\n                                                                                                                       // 131\n  getHostNode: function () {                                                                                           // 132\n    var hostNode = this._commentNodes;                                                                                 // 133\n    if (hostNode) {                                                                                                    // 134\n      return hostNode;                                                                                                 // 135\n    }                                                                                                                  // 136\n    if (!this._closingComment) {                                                                                       // 137\n      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);                                            // 138\n      var node = openingComment.nextSibling;                                                                           // 139\n      while (true) {                                                                                                   // 140\n        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;\n        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {                                               // 142\n          this._closingComment = node;                                                                                 // 143\n          break;                                                                                                       // 144\n        }                                                                                                              // 145\n        node = node.nextSibling;                                                                                       // 146\n      }                                                                                                                // 147\n    }                                                                                                                  // 148\n    hostNode = [this._hostNode, this._closingComment];                                                                 // 149\n    this._commentNodes = hostNode;                                                                                     // 150\n    return hostNode;                                                                                                   // 151\n  },                                                                                                                   // 152\n                                                                                                                       // 153\n  unmountComponent: function () {                                                                                      // 154\n    this._closingComment = null;                                                                                       // 155\n    this._commentNodes = null;                                                                                         // 156\n    ReactDOMComponentTree.uncacheNode(this);                                                                           // 157\n  }                                                                                                                    // 158\n});                                                                                                                    // 159\n                                                                                                                       // 160\nmodule.exports = ReactDOMTextComponent;                                                                                // 161\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDefaultBatchingStrategy.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactDefaultBatchingStrategy.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _assign = require('object-assign');                                                                                // 13\n                                                                                                                       // 14\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 15\nvar Transaction = require('./Transaction');                                                                            // 16\n                                                                                                                       // 17\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 18\n                                                                                                                       // 19\nvar RESET_BATCHED_UPDATES = {                                                                                          // 20\n  initialize: emptyFunction,                                                                                           // 21\n  close: function () {                                                                                                 // 22\n    ReactDefaultBatchingStrategy.isBatchingUpdates = false;                                                            // 23\n  }                                                                                                                    // 24\n};                                                                                                                     // 25\n                                                                                                                       // 26\nvar FLUSH_BATCHED_UPDATES = {                                                                                          // 27\n  initialize: emptyFunction,                                                                                           // 28\n  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)                                                           // 29\n};                                                                                                                     // 30\n                                                                                                                       // 31\nvar TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];                                             // 32\n                                                                                                                       // 33\nfunction ReactDefaultBatchingStrategyTransaction() {                                                                   // 34\n  this.reinitializeTransaction();                                                                                      // 35\n}                                                                                                                      // 36\n                                                                                                                       // 37\n_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {                                              // 38\n  getTransactionWrappers: function () {                                                                                // 39\n    return TRANSACTION_WRAPPERS;                                                                                       // 40\n  }                                                                                                                    // 41\n});                                                                                                                    // 42\n                                                                                                                       // 43\nvar transaction = new ReactDefaultBatchingStrategyTransaction();                                                       // 44\n                                                                                                                       // 45\nvar ReactDefaultBatchingStrategy = {                                                                                   // 46\n  isBatchingUpdates: false,                                                                                            // 47\n                                                                                                                       // 48\n  /**                                                                                                                  // 49\n   * Call the provided function in a context within which calls to `setState`                                          // 50\n   * and friends are batched such that components aren't updated unnecessarily.                                        // 51\n   */                                                                                                                  // 52\n  batchedUpdates: function (callback, a, b, c, d, e) {                                                                 // 53\n    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;                                       // 54\n                                                                                                                       // 55\n    ReactDefaultBatchingStrategy.isBatchingUpdates = true;                                                             // 56\n                                                                                                                       // 57\n    // The code is written this way to avoid extra allocations                                                         // 58\n    if (alreadyBatchingUpdates) {                                                                                      // 59\n      return callback(a, b, c, d, e);                                                                                  // 60\n    } else {                                                                                                           // 61\n      return transaction.perform(callback, null, a, b, c, d, e);                                                       // 62\n    }                                                                                                                  // 63\n  }                                                                                                                    // 64\n};                                                                                                                     // 65\n                                                                                                                       // 66\nmodule.exports = ReactDefaultBatchingStrategy;                                                                         // 67\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactEventListener.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactEventListener.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _assign = require('object-assign');                                                                                // 13\n                                                                                                                       // 14\nvar EventListener = require('fbjs/lib/EventListener');                                                                 // 15\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 16\nvar PooledClass = require('./PooledClass');                                                                            // 17\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 18\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 19\n                                                                                                                       // 20\nvar getEventTarget = require('./getEventTarget');                                                                      // 21\nvar getUnboundedScrollPosition = require('fbjs/lib/getUnboundedScrollPosition');                                       // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * Find the deepest React component completely containing the root of the                                              // 25\n * passed-in instance (for use when entire React trees are nested within each                                          // 26\n * other). If React trees are not nested, returns null.                                                                // 27\n */                                                                                                                    // 28\nfunction findParent(inst) {                                                                                            // 29\n  // TODO: It may be a good idea to cache this to prevent unnecessary DOM                                              // 30\n  // traversal, but caching is difficult to do correctly without using a                                               // 31\n  // mutation observer to listen for all DOM changes.                                                                  // 32\n  while (inst._hostParent) {                                                                                           // 33\n    inst = inst._hostParent;                                                                                           // 34\n  }                                                                                                                    // 35\n  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);                                                      // 36\n  var container = rootNode.parentNode;                                                                                 // 37\n  return ReactDOMComponentTree.getClosestInstanceFromNode(container);                                                  // 38\n}                                                                                                                      // 39\n                                                                                                                       // 40\n// Used to store ancestor hierarchy in top level callback                                                              // 41\nfunction TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {                                                      // 42\n  this.topLevelType = topLevelType;                                                                                    // 43\n  this.nativeEvent = nativeEvent;                                                                                      // 44\n  this.ancestors = [];                                                                                                 // 45\n}                                                                                                                      // 46\n_assign(TopLevelCallbackBookKeeping.prototype, {                                                                       // 47\n  destructor: function () {                                                                                            // 48\n    this.topLevelType = null;                                                                                          // 49\n    this.nativeEvent = null;                                                                                           // 50\n    this.ancestors.length = 0;                                                                                         // 51\n  }                                                                                                                    // 52\n});                                                                                                                    // 53\nPooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);                                  // 54\n                                                                                                                       // 55\nfunction handleTopLevelImpl(bookKeeping) {                                                                             // 56\n  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);                                                     // 57\n  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);                                // 58\n                                                                                                                       // 59\n  // Loop through the hierarchy, in case there's any nested components.                                                // 60\n  // It's important that we build the array of ancestors before calling any                                            // 61\n  // event handlers, because event handlers can modify the DOM, leading to                                             // 62\n  // inconsistencies with ReactMount's node cache. See #1105.                                                          // 63\n  var ancestor = targetInst;                                                                                           // 64\n  do {                                                                                                                 // 65\n    bookKeeping.ancestors.push(ancestor);                                                                              // 66\n    ancestor = ancestor && findParent(ancestor);                                                                       // 67\n  } while (ancestor);                                                                                                  // 68\n                                                                                                                       // 69\n  for (var i = 0; i < bookKeeping.ancestors.length; i++) {                                                             // 70\n    targetInst = bookKeeping.ancestors[i];                                                                             // 71\n    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));\n  }                                                                                                                    // 73\n}                                                                                                                      // 74\n                                                                                                                       // 75\nfunction scrollValueMonitor(cb) {                                                                                      // 76\n  var scrollPosition = getUnboundedScrollPosition(window);                                                             // 77\n  cb(scrollPosition);                                                                                                  // 78\n}                                                                                                                      // 79\n                                                                                                                       // 80\nvar ReactEventListener = {                                                                                             // 81\n  _enabled: true,                                                                                                      // 82\n  _handleTopLevel: null,                                                                                               // 83\n                                                                                                                       // 84\n  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,                                                       // 85\n                                                                                                                       // 86\n  setHandleTopLevel: function (handleTopLevel) {                                                                       // 87\n    ReactEventListener._handleTopLevel = handleTopLevel;                                                               // 88\n  },                                                                                                                   // 89\n                                                                                                                       // 90\n  setEnabled: function (enabled) {                                                                                     // 91\n    ReactEventListener._enabled = !!enabled;                                                                           // 92\n  },                                                                                                                   // 93\n                                                                                                                       // 94\n  isEnabled: function () {                                                                                             // 95\n    return ReactEventListener._enabled;                                                                                // 96\n  },                                                                                                                   // 97\n                                                                                                                       // 98\n  /**                                                                                                                  // 99\n   * Traps top-level events by using event bubbling.                                                                   // 100\n   *                                                                                                                   // 101\n   * @param {string} topLevelType Record from `EventConstants`.                                                        // 102\n   * @param {string} handlerBaseName Event name (e.g. \"click\").                                                        // 103\n   * @param {object} element Element on which to attach listener.                                                      // 104\n   * @return {?object} An object with a remove function which will forcefully                                          // 105\n   *                  remove the listener.                                                                             // 106\n   * @internal                                                                                                         // 107\n   */                                                                                                                  // 108\n  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {                                                // 109\n    if (!element) {                                                                                                    // 110\n      return null;                                                                                                     // 111\n    }                                                                                                                  // 112\n    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));  // 113\n  },                                                                                                                   // 114\n                                                                                                                       // 115\n  /**                                                                                                                  // 116\n   * Traps a top-level event by using event capturing.                                                                 // 117\n   *                                                                                                                   // 118\n   * @param {string} topLevelType Record from `EventConstants`.                                                        // 119\n   * @param {string} handlerBaseName Event name (e.g. \"click\").                                                        // 120\n   * @param {object} element Element on which to attach listener.                                                      // 121\n   * @return {?object} An object with a remove function which will forcefully                                          // 122\n   *                  remove the listener.                                                                             // 123\n   * @internal                                                                                                         // 124\n   */                                                                                                                  // 125\n  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {                                               // 126\n    if (!element) {                                                                                                    // 127\n      return null;                                                                                                     // 128\n    }                                                                                                                  // 129\n    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));\n  },                                                                                                                   // 131\n                                                                                                                       // 132\n  monitorScrollValue: function (refresh) {                                                                             // 133\n    var callback = scrollValueMonitor.bind(null, refresh);                                                             // 134\n    EventListener.listen(window, 'scroll', callback);                                                                  // 135\n  },                                                                                                                   // 136\n                                                                                                                       // 137\n  dispatchEvent: function (topLevelType, nativeEvent) {                                                                // 138\n    if (!ReactEventListener._enabled) {                                                                                // 139\n      return;                                                                                                          // 140\n    }                                                                                                                  // 141\n                                                                                                                       // 142\n    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);                                // 143\n    try {                                                                                                              // 144\n      // Event queue being processed in the same cycle allows                                                          // 145\n      // `preventDefault`.                                                                                             // 146\n      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);                                                    // 147\n    } finally {                                                                                                        // 148\n      TopLevelCallbackBookKeeping.release(bookKeeping);                                                                // 149\n    }                                                                                                                  // 150\n  }                                                                                                                    // 151\n};                                                                                                                     // 152\n                                                                                                                       // 153\nmodule.exports = ReactEventListener;                                                                                   // 154\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactInjection.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactInjection.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar DOMProperty = require('./DOMProperty');                                                                            // 13\nvar EventPluginHub = require('./EventPluginHub');                                                                      // 14\nvar EventPluginUtils = require('./EventPluginUtils');                                                                  // 15\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');                                                // 16\nvar ReactEmptyComponent = require('./ReactEmptyComponent');                                                            // 17\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');                                                  // 18\nvar ReactHostComponent = require('./ReactHostComponent');                                                              // 19\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 20\n                                                                                                                       // 21\nvar ReactInjection = {                                                                                                 // 22\n  Component: ReactComponentEnvironment.injection,                                                                      // 23\n  DOMProperty: DOMProperty.injection,                                                                                  // 24\n  EmptyComponent: ReactEmptyComponent.injection,                                                                       // 25\n  EventPluginHub: EventPluginHub.injection,                                                                            // 26\n  EventPluginUtils: EventPluginUtils.injection,                                                                        // 27\n  EventEmitter: ReactBrowserEventEmitter.injection,                                                                    // 28\n  HostComponent: ReactHostComponent.injection,                                                                         // 29\n  Updates: ReactUpdates.injection                                                                                      // 30\n};                                                                                                                     // 31\n                                                                                                                       // 32\nmodule.exports = ReactInjection;                                                                                       // 33\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactReconcileTransaction.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactReconcileTransaction.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _assign = require('object-assign');                                                                                // 13\n                                                                                                                       // 14\nvar CallbackQueue = require('./CallbackQueue');                                                                        // 15\nvar PooledClass = require('./PooledClass');                                                                            // 16\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');                                                  // 17\nvar ReactInputSelection = require('./ReactInputSelection');                                                            // 18\nvar ReactInstrumentation = require('./ReactInstrumentation');                                                          // 19\nvar Transaction = require('./Transaction');                                                                            // 20\nvar ReactUpdateQueue = require('./ReactUpdateQueue');                                                                  // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * Ensures that, when possible, the selection range (currently selected text                                           // 24\n * input) is not disturbed by performing the transaction.                                                              // 25\n */                                                                                                                    // 26\nvar SELECTION_RESTORATION = {                                                                                          // 27\n  /**                                                                                                                  // 28\n   * @return {Selection} Selection information.                                                                        // 29\n   */                                                                                                                  // 30\n  initialize: ReactInputSelection.getSelectionInformation,                                                             // 31\n  /**                                                                                                                  // 32\n   * @param {Selection} sel Selection information returned from `initialize`.                                          // 33\n   */                                                                                                                  // 34\n  close: ReactInputSelection.restoreSelection                                                                          // 35\n};                                                                                                                     // 36\n                                                                                                                       // 37\n/**                                                                                                                    // 38\n * Suppresses events (blur/focus) that could be inadvertently dispatched due to                                        // 39\n * high level DOM manipulations (like temporarily removing a text input from the                                       // 40\n * DOM).                                                                                                               // 41\n */                                                                                                                    // 42\nvar EVENT_SUPPRESSION = {                                                                                              // 43\n  /**                                                                                                                  // 44\n   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before                                         // 45\n   * the reconciliation.                                                                                               // 46\n   */                                                                                                                  // 47\n  initialize: function () {                                                                                            // 48\n    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();                                                       // 49\n    ReactBrowserEventEmitter.setEnabled(false);                                                                        // 50\n    return currentlyEnabled;                                                                                           // 51\n  },                                                                                                                   // 52\n                                                                                                                       // 53\n  /**                                                                                                                  // 54\n   * @param {boolean} previouslyEnabled Enabled status of                                                              // 55\n   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`                                          // 56\n   *   restores the previous value.                                                                                    // 57\n   */                                                                                                                  // 58\n  close: function (previouslyEnabled) {                                                                                // 59\n    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);                                                            // 60\n  }                                                                                                                    // 61\n};                                                                                                                     // 62\n                                                                                                                       // 63\n/**                                                                                                                    // 64\n * Provides a queue for collecting `componentDidMount` and                                                             // 65\n * `componentDidUpdate` callbacks during the transaction.                                                              // 66\n */                                                                                                                    // 67\nvar ON_DOM_READY_QUEUEING = {                                                                                          // 68\n  /**                                                                                                                  // 69\n   * Initializes the internal `onDOMReady` queue.                                                                      // 70\n   */                                                                                                                  // 71\n  initialize: function () {                                                                                            // 72\n    this.reactMountReady.reset();                                                                                      // 73\n  },                                                                                                                   // 74\n                                                                                                                       // 75\n  /**                                                                                                                  // 76\n   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.                                               // 77\n   */                                                                                                                  // 78\n  close: function () {                                                                                                 // 79\n    this.reactMountReady.notifyAll();                                                                                  // 80\n  }                                                                                                                    // 81\n};                                                                                                                     // 82\n                                                                                                                       // 83\n/**                                                                                                                    // 84\n * Executed within the scope of the `Transaction` instance. Consider these as                                          // 85\n * being member methods, but with an implied ordering while being isolated from                                        // 86\n * each other.                                                                                                         // 87\n */                                                                                                                    // 88\nvar TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];                          // 89\n                                                                                                                       // 90\nif (process.env.NODE_ENV !== 'production') {                                                                           // 91\n  TRANSACTION_WRAPPERS.push({                                                                                          // 92\n    initialize: ReactInstrumentation.debugTool.onBeginFlush,                                                           // 93\n    close: ReactInstrumentation.debugTool.onEndFlush                                                                   // 94\n  });                                                                                                                  // 95\n}                                                                                                                      // 96\n                                                                                                                       // 97\n/**                                                                                                                    // 98\n * Currently:                                                                                                          // 99\n * - The order that these are listed in the transaction is critical:                                                   // 100\n * - Suppresses events.                                                                                                // 101\n * - Restores selection range.                                                                                         // 102\n *                                                                                                                     // 103\n * Future:                                                                                                             // 104\n * - Restore document/overflow scroll positions that were unintentionally                                              // 105\n *   modified via DOM insertions above the top viewport boundary.                                                      // 106\n * - Implement/integrate with customized constraint based layout system and keep                                       // 107\n *   track of which dimensions must be remeasured.                                                                     // 108\n *                                                                                                                     // 109\n * @class ReactReconcileTransaction                                                                                    // 110\n */                                                                                                                    // 111\nfunction ReactReconcileTransaction(useCreateElement) {                                                                 // 112\n  this.reinitializeTransaction();                                                                                      // 113\n  // Only server-side rendering really needs this option (see                                                          // 114\n  // `ReactServerRendering`), but server-side uses                                                                     // 115\n  // `ReactServerRenderingTransaction` instead. This option is here so that it's                                       // 116\n  // accessible and defaults to false when `ReactDOMComponent` and                                                     // 117\n  // `ReactDOMTextComponent` checks it in `mountComponent`.`                                                           // 118\n  this.renderToStaticMarkup = false;                                                                                   // 119\n  this.reactMountReady = CallbackQueue.getPooled(null);                                                                // 120\n  this.useCreateElement = useCreateElement;                                                                            // 121\n}                                                                                                                      // 122\n                                                                                                                       // 123\nvar Mixin = {                                                                                                          // 124\n  /**                                                                                                                  // 125\n   * @see Transaction                                                                                                  // 126\n   * @abstract                                                                                                         // 127\n   * @final                                                                                                            // 128\n   * @return {array<object>} List of operation wrap procedures.                                                        // 129\n   *   TODO: convert to array<TransactionWrapper>                                                                      // 130\n   */                                                                                                                  // 131\n  getTransactionWrappers: function () {                                                                                // 132\n    return TRANSACTION_WRAPPERS;                                                                                       // 133\n  },                                                                                                                   // 134\n                                                                                                                       // 135\n  /**                                                                                                                  // 136\n   * @return {object} The queue to collect `onDOMReady` callbacks with.                                                // 137\n   */                                                                                                                  // 138\n  getReactMountReady: function () {                                                                                    // 139\n    return this.reactMountReady;                                                                                       // 140\n  },                                                                                                                   // 141\n                                                                                                                       // 142\n  /**                                                                                                                  // 143\n   * @return {object} The queue to collect React async events.                                                         // 144\n   */                                                                                                                  // 145\n  getUpdateQueue: function () {                                                                                        // 146\n    return ReactUpdateQueue;                                                                                           // 147\n  },                                                                                                                   // 148\n                                                                                                                       // 149\n  /**                                                                                                                  // 150\n   * Save current transaction state -- if the return value from this method is                                         // 151\n   * passed to `rollback`, the transaction will be reset to that state.                                                // 152\n   */                                                                                                                  // 153\n  checkpoint: function () {                                                                                            // 154\n    // reactMountReady is the our only stateful wrapper                                                                // 155\n    return this.reactMountReady.checkpoint();                                                                          // 156\n  },                                                                                                                   // 157\n                                                                                                                       // 158\n  rollback: function (checkpoint) {                                                                                    // 159\n    this.reactMountReady.rollback(checkpoint);                                                                         // 160\n  },                                                                                                                   // 161\n                                                                                                                       // 162\n  /**                                                                                                                  // 163\n   * `PooledClass` looks for this, and will invoke this before allowing this                                           // 164\n   * instance to be reused.                                                                                            // 165\n   */                                                                                                                  // 166\n  destructor: function () {                                                                                            // 167\n    CallbackQueue.release(this.reactMountReady);                                                                       // 168\n    this.reactMountReady = null;                                                                                       // 169\n  }                                                                                                                    // 170\n};                                                                                                                     // 171\n                                                                                                                       // 172\n_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);                                                      // 173\n                                                                                                                       // 174\nPooledClass.addPoolingTo(ReactReconcileTransaction);                                                                   // 175\n                                                                                                                       // 176\nmodule.exports = ReactReconcileTransaction;                                                                            // 177\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactInputSelection.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactInputSelection.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar ReactDOMSelection = require('./ReactDOMSelection');                                                                // 13\n                                                                                                                       // 14\nvar containsNode = require('fbjs/lib/containsNode');                                                                   // 15\nvar focusNode = require('fbjs/lib/focusNode');                                                                         // 16\nvar getActiveElement = require('fbjs/lib/getActiveElement');                                                           // 17\n                                                                                                                       // 18\nfunction isInDocument(node) {                                                                                          // 19\n  return containsNode(document.documentElement, node);                                                                 // 20\n}                                                                                                                      // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * @ReactInputSelection: React input selection module. Based on Selection.js,                                          // 24\n * but modified to be suitable for react and has a couple of bug fixes (doesn't                                        // 25\n * assume buttons have range selections allowed).                                                                      // 26\n * Input selection module for React.                                                                                   // 27\n */                                                                                                                    // 28\nvar ReactInputSelection = {                                                                                            // 29\n  hasSelectionCapabilities: function (elem) {                                                                          // 30\n    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();                                               // 31\n    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');\n  },                                                                                                                   // 33\n                                                                                                                       // 34\n  getSelectionInformation: function () {                                                                               // 35\n    var focusedElem = getActiveElement();                                                                              // 36\n    return {                                                                                                           // 37\n      focusedElem: focusedElem,                                                                                        // 38\n      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null\n    };                                                                                                                 // 40\n  },                                                                                                                   // 41\n                                                                                                                       // 42\n  /**                                                                                                                  // 43\n   * @restoreSelection: If any selection information was potentially lost,                                             // 44\n   * restore it. This is useful when performing operations that could remove dom                                       // 45\n   * nodes and place them back in, resulting in focus being lost.                                                      // 46\n   */                                                                                                                  // 47\n  restoreSelection: function (priorSelectionInformation) {                                                             // 48\n    var curFocusedElem = getActiveElement();                                                                           // 49\n    var priorFocusedElem = priorSelectionInformation.focusedElem;                                                      // 50\n    var priorSelectionRange = priorSelectionInformation.selectionRange;                                                // 51\n    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {                                       // 52\n      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {                                            // 53\n        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);                                       // 54\n      }                                                                                                                // 55\n      focusNode(priorFocusedElem);                                                                                     // 56\n    }                                                                                                                  // 57\n  },                                                                                                                   // 58\n                                                                                                                       // 59\n  /**                                                                                                                  // 60\n   * @getSelection: Gets the selection bounds of a focused textarea, input or                                          // 61\n   * contentEditable node.                                                                                             // 62\n   * -@input: Look up selection bounds of this input                                                                   // 63\n   * -@return {start: selectionStart, end: selectionEnd}                                                               // 64\n   */                                                                                                                  // 65\n  getSelection: function (input) {                                                                                     // 66\n    var selection;                                                                                                     // 67\n                                                                                                                       // 68\n    if ('selectionStart' in input) {                                                                                   // 69\n      // Modern browser with input or textarea.                                                                        // 70\n      selection = {                                                                                                    // 71\n        start: input.selectionStart,                                                                                   // 72\n        end: input.selectionEnd                                                                                        // 73\n      };                                                                                                               // 74\n    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {                     // 75\n      // IE8 input.                                                                                                    // 76\n      var range = document.selection.createRange();                                                                    // 77\n      // There can only be one selection per document in IE, so it must                                                // 78\n      // be in our element.                                                                                            // 79\n      if (range.parentElement() === input) {                                                                           // 80\n        selection = {                                                                                                  // 81\n          start: -range.moveStart('character', -input.value.length),                                                   // 82\n          end: -range.moveEnd('character', -input.value.length)                                                        // 83\n        };                                                                                                             // 84\n      }                                                                                                                // 85\n    } else {                                                                                                           // 86\n      // Content editable or old IE textarea.                                                                          // 87\n      selection = ReactDOMSelection.getOffsets(input);                                                                 // 88\n    }                                                                                                                  // 89\n                                                                                                                       // 90\n    return selection || { start: 0, end: 0 };                                                                          // 91\n  },                                                                                                                   // 92\n                                                                                                                       // 93\n  /**                                                                                                                  // 94\n   * @setSelection: Sets the selection bounds of a textarea or input and focuses                                       // 95\n   * the input.                                                                                                        // 96\n   * -@input     Set selection bounds of this input or textarea                                                        // 97\n   * -@offsets   Object of same form that is returned from get*                                                        // 98\n   */                                                                                                                  // 99\n  setSelection: function (input, offsets) {                                                                            // 100\n    var start = offsets.start;                                                                                         // 101\n    var end = offsets.end;                                                                                             // 102\n    if (end === undefined) {                                                                                           // 103\n      end = start;                                                                                                     // 104\n    }                                                                                                                  // 105\n                                                                                                                       // 106\n    if ('selectionStart' in input) {                                                                                   // 107\n      input.selectionStart = start;                                                                                    // 108\n      input.selectionEnd = Math.min(end, input.value.length);                                                          // 109\n    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {                     // 110\n      var range = input.createTextRange();                                                                             // 111\n      range.collapse(true);                                                                                            // 112\n      range.moveStart('character', start);                                                                             // 113\n      range.moveEnd('character', end - start);                                                                         // 114\n      range.select();                                                                                                  // 115\n    } else {                                                                                                           // 116\n      ReactDOMSelection.setOffsets(input, offsets);                                                                    // 117\n    }                                                                                                                  // 118\n  }                                                                                                                    // 119\n};                                                                                                                     // 120\n                                                                                                                       // 121\nmodule.exports = ReactInputSelection;                                                                                  // 122\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDOMSelection.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactDOMSelection.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 13\n                                                                                                                       // 14\nvar getNodeForCharacterOffset = require('./getNodeForCharacterOffset');                                                // 15\nvar getTextContentAccessor = require('./getTextContentAccessor');                                                      // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * While `isCollapsed` is available on the Selection object and `collapsed`                                            // 19\n * is available on the Range object, IE11 sometimes gets them wrong.                                                   // 20\n * If the anchor/focus nodes and offsets are the same, the range is collapsed.                                         // 21\n */                                                                                                                    // 22\nfunction isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {                                               // 23\n  return anchorNode === focusNode && anchorOffset === focusOffset;                                                     // 24\n}                                                                                                                      // 25\n                                                                                                                       // 26\n/**                                                                                                                    // 27\n * Get the appropriate anchor and focus node/offset pairs for IE.                                                      // 28\n *                                                                                                                     // 29\n * The catch here is that IE's selection API doesn't provide information                                               // 30\n * about whether the selection is forward or backward, so we have to                                                   // 31\n * behave as though it's always forward.                                                                               // 32\n *                                                                                                                     // 33\n * IE text differs from modern selection in that it behaves as though                                                  // 34\n * block elements end with a new line. This means character offsets will                                               // 35\n * differ between the two APIs.                                                                                        // 36\n *                                                                                                                     // 37\n * @param {DOMElement} node                                                                                            // 38\n * @return {object}                                                                                                    // 39\n */                                                                                                                    // 40\nfunction getIEOffsets(node) {                                                                                          // 41\n  var selection = document.selection;                                                                                  // 42\n  var selectedRange = selection.createRange();                                                                         // 43\n  var selectedLength = selectedRange.text.length;                                                                      // 44\n                                                                                                                       // 45\n  // Duplicate selection so we can move range without breaking user selection.                                         // 46\n  var fromStart = selectedRange.duplicate();                                                                           // 47\n  fromStart.moveToElementText(node);                                                                                   // 48\n  fromStart.setEndPoint('EndToStart', selectedRange);                                                                  // 49\n                                                                                                                       // 50\n  var startOffset = fromStart.text.length;                                                                             // 51\n  var endOffset = startOffset + selectedLength;                                                                        // 52\n                                                                                                                       // 53\n  return {                                                                                                             // 54\n    start: startOffset,                                                                                                // 55\n    end: endOffset                                                                                                     // 56\n  };                                                                                                                   // 57\n}                                                                                                                      // 58\n                                                                                                                       // 59\n/**                                                                                                                    // 60\n * @param {DOMElement} node                                                                                            // 61\n * @return {?object}                                                                                                   // 62\n */                                                                                                                    // 63\nfunction getModernOffsets(node) {                                                                                      // 64\n  var selection = window.getSelection && window.getSelection();                                                        // 65\n                                                                                                                       // 66\n  if (!selection || selection.rangeCount === 0) {                                                                      // 67\n    return null;                                                                                                       // 68\n  }                                                                                                                    // 69\n                                                                                                                       // 70\n  var anchorNode = selection.anchorNode;                                                                               // 71\n  var anchorOffset = selection.anchorOffset;                                                                           // 72\n  var focusNode = selection.focusNode;                                                                                 // 73\n  var focusOffset = selection.focusOffset;                                                                             // 74\n                                                                                                                       // 75\n  var currentRange = selection.getRangeAt(0);                                                                          // 76\n                                                                                                                       // 77\n  // In Firefox, range.startContainer and range.endContainer can be \"anonymous                                         // 78\n  // divs\", e.g. the up/down buttons on an <input type=\"number\">. Anonymous                                            // 79\n  // divs do not seem to expose properties, triggering a \"Permission denied                                            // 80\n  // error\" if any of its properties are accessed. The only seemingly possible                                         // 81\n  // way to avoid erroring is to access a property that typically works for                                            // 82\n  // non-anonymous divs and catch any error that may otherwise arise. See                                              // 83\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427                                                               // 84\n  try {                                                                                                                // 85\n    /* eslint-disable no-unused-expressions */                                                                         // 86\n    currentRange.startContainer.nodeType;                                                                              // 87\n    currentRange.endContainer.nodeType;                                                                                // 88\n    /* eslint-enable no-unused-expressions */                                                                          // 89\n  } catch (e) {                                                                                                        // 90\n    return null;                                                                                                       // 91\n  }                                                                                                                    // 92\n                                                                                                                       // 93\n  // If the node and offset values are the same, the selection is collapsed.                                           // 94\n  // `Selection.isCollapsed` is available natively, but IE sometimes gets                                              // 95\n  // this value wrong.                                                                                                 // 96\n  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);\n                                                                                                                       // 98\n  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;                                         // 99\n                                                                                                                       // 100\n  var tempRange = currentRange.cloneRange();                                                                           // 101\n  tempRange.selectNodeContents(node);                                                                                  // 102\n  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);                                             // 103\n                                                                                                                       // 104\n  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);\n                                                                                                                       // 106\n  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;                                                  // 107\n  var end = start + rangeLength;                                                                                       // 108\n                                                                                                                       // 109\n  // Detect whether the selection is backward.                                                                         // 110\n  var detectionRange = document.createRange();                                                                         // 111\n  detectionRange.setStart(anchorNode, anchorOffset);                                                                   // 112\n  detectionRange.setEnd(focusNode, focusOffset);                                                                       // 113\n  var isBackward = detectionRange.collapsed;                                                                           // 114\n                                                                                                                       // 115\n  return {                                                                                                             // 116\n    start: isBackward ? end : start,                                                                                   // 117\n    end: isBackward ? start : end                                                                                      // 118\n  };                                                                                                                   // 119\n}                                                                                                                      // 120\n                                                                                                                       // 121\n/**                                                                                                                    // 122\n * @param {DOMElement|DOMTextNode} node                                                                                // 123\n * @param {object} offsets                                                                                             // 124\n */                                                                                                                    // 125\nfunction setIEOffsets(node, offsets) {                                                                                 // 126\n  var range = document.selection.createRange().duplicate();                                                            // 127\n  var start, end;                                                                                                      // 128\n                                                                                                                       // 129\n  if (offsets.end === undefined) {                                                                                     // 130\n    start = offsets.start;                                                                                             // 131\n    end = start;                                                                                                       // 132\n  } else if (offsets.start > offsets.end) {                                                                            // 133\n    start = offsets.end;                                                                                               // 134\n    end = offsets.start;                                                                                               // 135\n  } else {                                                                                                             // 136\n    start = offsets.start;                                                                                             // 137\n    end = offsets.end;                                                                                                 // 138\n  }                                                                                                                    // 139\n                                                                                                                       // 140\n  range.moveToElementText(node);                                                                                       // 141\n  range.moveStart('character', start);                                                                                 // 142\n  range.setEndPoint('EndToStart', range);                                                                              // 143\n  range.moveEnd('character', end - start);                                                                             // 144\n  range.select();                                                                                                      // 145\n}                                                                                                                      // 146\n                                                                                                                       // 147\n/**                                                                                                                    // 148\n * In modern non-IE browsers, we can support both forward and backward                                                 // 149\n * selections.                                                                                                         // 150\n *                                                                                                                     // 151\n * Note: IE10+ supports the Selection object, but it does not support                                                  // 152\n * the `extend` method, which means that even in modern IE, it's not possible                                          // 153\n * to programmatically create a backward selection. Thus, for all IE                                                   // 154\n * versions, we use the old IE API to create our selections.                                                           // 155\n *                                                                                                                     // 156\n * @param {DOMElement|DOMTextNode} node                                                                                // 157\n * @param {object} offsets                                                                                             // 158\n */                                                                                                                    // 159\nfunction setModernOffsets(node, offsets) {                                                                             // 160\n  if (!window.getSelection) {                                                                                          // 161\n    return;                                                                                                            // 162\n  }                                                                                                                    // 163\n                                                                                                                       // 164\n  var selection = window.getSelection();                                                                               // 165\n  var length = node[getTextContentAccessor()].length;                                                                  // 166\n  var start = Math.min(offsets.start, length);                                                                         // 167\n  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);                                         // 168\n                                                                                                                       // 169\n  // IE 11 uses modern selection, but doesn't support the extend method.                                               // 170\n  // Flip backward selections, so we can set with a single range.                                                      // 171\n  if (!selection.extend && start > end) {                                                                              // 172\n    var temp = end;                                                                                                    // 173\n    end = start;                                                                                                       // 174\n    start = temp;                                                                                                      // 175\n  }                                                                                                                    // 176\n                                                                                                                       // 177\n  var startMarker = getNodeForCharacterOffset(node, start);                                                            // 178\n  var endMarker = getNodeForCharacterOffset(node, end);                                                                // 179\n                                                                                                                       // 180\n  if (startMarker && endMarker) {                                                                                      // 181\n    var range = document.createRange();                                                                                // 182\n    range.setStart(startMarker.node, startMarker.offset);                                                              // 183\n    selection.removeAllRanges();                                                                                       // 184\n                                                                                                                       // 185\n    if (start > end) {                                                                                                 // 186\n      selection.addRange(range);                                                                                       // 187\n      selection.extend(endMarker.node, endMarker.offset);                                                              // 188\n    } else {                                                                                                           // 189\n      range.setEnd(endMarker.node, endMarker.offset);                                                                  // 190\n      selection.addRange(range);                                                                                       // 191\n    }                                                                                                                  // 192\n  }                                                                                                                    // 193\n}                                                                                                                      // 194\n                                                                                                                       // 195\nvar useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);           // 196\n                                                                                                                       // 197\nvar ReactDOMSelection = {                                                                                              // 198\n  /**                                                                                                                  // 199\n   * @param {DOMElement} node                                                                                          // 200\n   */                                                                                                                  // 201\n  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,                                                          // 202\n                                                                                                                       // 203\n  /**                                                                                                                  // 204\n   * @param {DOMElement|DOMTextNode} node                                                                              // 205\n   * @param {object} offsets                                                                                           // 206\n   */                                                                                                                  // 207\n  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets                                                           // 208\n};                                                                                                                     // 209\n                                                                                                                       // 210\nmodule.exports = ReactDOMSelection;                                                                                    // 211\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getNodeForCharacterOffset.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/getNodeForCharacterOffset.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * Given any node return the first leaf node without children.                                                         // 14\n *                                                                                                                     // 15\n * @param {DOMElement|DOMTextNode} node                                                                                // 16\n * @return {DOMElement|DOMTextNode}                                                                                    // 17\n */                                                                                                                    // 18\n                                                                                                                       // 19\nfunction getLeafNode(node) {                                                                                           // 20\n  while (node && node.firstChild) {                                                                                    // 21\n    node = node.firstChild;                                                                                            // 22\n  }                                                                                                                    // 23\n  return node;                                                                                                         // 24\n}                                                                                                                      // 25\n                                                                                                                       // 26\n/**                                                                                                                    // 27\n * Get the next sibling within a container. This will walk up the                                                      // 28\n * DOM if a node's siblings have been exhausted.                                                                       // 29\n *                                                                                                                     // 30\n * @param {DOMElement|DOMTextNode} node                                                                                // 31\n * @return {?DOMElement|DOMTextNode}                                                                                   // 32\n */                                                                                                                    // 33\nfunction getSiblingNode(node) {                                                                                        // 34\n  while (node) {                                                                                                       // 35\n    if (node.nextSibling) {                                                                                            // 36\n      return node.nextSibling;                                                                                         // 37\n    }                                                                                                                  // 38\n    node = node.parentNode;                                                                                            // 39\n  }                                                                                                                    // 40\n}                                                                                                                      // 41\n                                                                                                                       // 42\n/**                                                                                                                    // 43\n * Get object describing the nodes which contain characters at offset.                                                 // 44\n *                                                                                                                     // 45\n * @param {DOMElement|DOMTextNode} root                                                                                // 46\n * @param {number} offset                                                                                              // 47\n * @return {?object}                                                                                                   // 48\n */                                                                                                                    // 49\nfunction getNodeForCharacterOffset(root, offset) {                                                                     // 50\n  var node = getLeafNode(root);                                                                                        // 51\n  var nodeStart = 0;                                                                                                   // 52\n  var nodeEnd = 0;                                                                                                     // 53\n                                                                                                                       // 54\n  while (node) {                                                                                                       // 55\n    if (node.nodeType === 3) {                                                                                         // 56\n      nodeEnd = nodeStart + node.textContent.length;                                                                   // 57\n                                                                                                                       // 58\n      if (nodeStart <= offset && nodeEnd >= offset) {                                                                  // 59\n        return {                                                                                                       // 60\n          node: node,                                                                                                  // 61\n          offset: offset - nodeStart                                                                                   // 62\n        };                                                                                                             // 63\n      }                                                                                                                // 64\n                                                                                                                       // 65\n      nodeStart = nodeEnd;                                                                                             // 66\n    }                                                                                                                  // 67\n                                                                                                                       // 68\n    node = getLeafNode(getSiblingNode(node));                                                                          // 69\n  }                                                                                                                    // 70\n}                                                                                                                      // 71\n                                                                                                                       // 72\nmodule.exports = getNodeForCharacterOffset;                                                                            // 73\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"SVGDOMPropertyConfig.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/SVGDOMPropertyConfig.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar NS = {                                                                                                             // 13\n  xlink: 'http://www.w3.org/1999/xlink',                                                                               // 14\n  xml: 'http://www.w3.org/XML/1998/namespace'                                                                          // 15\n};                                                                                                                     // 16\n                                                                                                                       // 17\n// We use attributes for everything SVG so let's avoid some duplication and run                                        // 18\n// code instead.                                                                                                       // 19\n// The following are all specified in the HTML config already so we exclude here.                                      // 20\n// - class (as className)                                                                                              // 21\n// - color                                                                                                             // 22\n// - height                                                                                                            // 23\n// - id                                                                                                                // 24\n// - lang                                                                                                              // 25\n// - max                                                                                                               // 26\n// - media                                                                                                             // 27\n// - method                                                                                                            // 28\n// - min                                                                                                               // 29\n// - name                                                                                                              // 30\n// - style                                                                                                             // 31\n// - target                                                                                                            // 32\n// - type                                                                                                              // 33\n// - width                                                                                                             // 34\nvar ATTRS = {                                                                                                          // 35\n  accentHeight: 'accent-height',                                                                                       // 36\n  accumulate: 0,                                                                                                       // 37\n  additive: 0,                                                                                                         // 38\n  alignmentBaseline: 'alignment-baseline',                                                                             // 39\n  allowReorder: 'allowReorder',                                                                                        // 40\n  alphabetic: 0,                                                                                                       // 41\n  amplitude: 0,                                                                                                        // 42\n  arabicForm: 'arabic-form',                                                                                           // 43\n  ascent: 0,                                                                                                           // 44\n  attributeName: 'attributeName',                                                                                      // 45\n  attributeType: 'attributeType',                                                                                      // 46\n  autoReverse: 'autoReverse',                                                                                          // 47\n  azimuth: 0,                                                                                                          // 48\n  baseFrequency: 'baseFrequency',                                                                                      // 49\n  baseProfile: 'baseProfile',                                                                                          // 50\n  baselineShift: 'baseline-shift',                                                                                     // 51\n  bbox: 0,                                                                                                             // 52\n  begin: 0,                                                                                                            // 53\n  bias: 0,                                                                                                             // 54\n  by: 0,                                                                                                               // 55\n  calcMode: 'calcMode',                                                                                                // 56\n  capHeight: 'cap-height',                                                                                             // 57\n  clip: 0,                                                                                                             // 58\n  clipPath: 'clip-path',                                                                                               // 59\n  clipRule: 'clip-rule',                                                                                               // 60\n  clipPathUnits: 'clipPathUnits',                                                                                      // 61\n  colorInterpolation: 'color-interpolation',                                                                           // 62\n  colorInterpolationFilters: 'color-interpolation-filters',                                                            // 63\n  colorProfile: 'color-profile',                                                                                       // 64\n  colorRendering: 'color-rendering',                                                                                   // 65\n  contentScriptType: 'contentScriptType',                                                                              // 66\n  contentStyleType: 'contentStyleType',                                                                                // 67\n  cursor: 0,                                                                                                           // 68\n  cx: 0,                                                                                                               // 69\n  cy: 0,                                                                                                               // 70\n  d: 0,                                                                                                                // 71\n  decelerate: 0,                                                                                                       // 72\n  descent: 0,                                                                                                          // 73\n  diffuseConstant: 'diffuseConstant',                                                                                  // 74\n  direction: 0,                                                                                                        // 75\n  display: 0,                                                                                                          // 76\n  divisor: 0,                                                                                                          // 77\n  dominantBaseline: 'dominant-baseline',                                                                               // 78\n  dur: 0,                                                                                                              // 79\n  dx: 0,                                                                                                               // 80\n  dy: 0,                                                                                                               // 81\n  edgeMode: 'edgeMode',                                                                                                // 82\n  elevation: 0,                                                                                                        // 83\n  enableBackground: 'enable-background',                                                                               // 84\n  end: 0,                                                                                                              // 85\n  exponent: 0,                                                                                                         // 86\n  externalResourcesRequired: 'externalResourcesRequired',                                                              // 87\n  fill: 0,                                                                                                             // 88\n  fillOpacity: 'fill-opacity',                                                                                         // 89\n  fillRule: 'fill-rule',                                                                                               // 90\n  filter: 0,                                                                                                           // 91\n  filterRes: 'filterRes',                                                                                              // 92\n  filterUnits: 'filterUnits',                                                                                          // 93\n  floodColor: 'flood-color',                                                                                           // 94\n  floodOpacity: 'flood-opacity',                                                                                       // 95\n  focusable: 0,                                                                                                        // 96\n  fontFamily: 'font-family',                                                                                           // 97\n  fontSize: 'font-size',                                                                                               // 98\n  fontSizeAdjust: 'font-size-adjust',                                                                                  // 99\n  fontStretch: 'font-stretch',                                                                                         // 100\n  fontStyle: 'font-style',                                                                                             // 101\n  fontVariant: 'font-variant',                                                                                         // 102\n  fontWeight: 'font-weight',                                                                                           // 103\n  format: 0,                                                                                                           // 104\n  from: 0,                                                                                                             // 105\n  fx: 0,                                                                                                               // 106\n  fy: 0,                                                                                                               // 107\n  g1: 0,                                                                                                               // 108\n  g2: 0,                                                                                                               // 109\n  glyphName: 'glyph-name',                                                                                             // 110\n  glyphOrientationHorizontal: 'glyph-orientation-horizontal',                                                          // 111\n  glyphOrientationVertical: 'glyph-orientation-vertical',                                                              // 112\n  glyphRef: 'glyphRef',                                                                                                // 113\n  gradientTransform: 'gradientTransform',                                                                              // 114\n  gradientUnits: 'gradientUnits',                                                                                      // 115\n  hanging: 0,                                                                                                          // 116\n  horizAdvX: 'horiz-adv-x',                                                                                            // 117\n  horizOriginX: 'horiz-origin-x',                                                                                      // 118\n  ideographic: 0,                                                                                                      // 119\n  imageRendering: 'image-rendering',                                                                                   // 120\n  'in': 0,                                                                                                             // 121\n  in2: 0,                                                                                                              // 122\n  intercept: 0,                                                                                                        // 123\n  k: 0,                                                                                                                // 124\n  k1: 0,                                                                                                               // 125\n  k2: 0,                                                                                                               // 126\n  k3: 0,                                                                                                               // 127\n  k4: 0,                                                                                                               // 128\n  kernelMatrix: 'kernelMatrix',                                                                                        // 129\n  kernelUnitLength: 'kernelUnitLength',                                                                                // 130\n  kerning: 0,                                                                                                          // 131\n  keyPoints: 'keyPoints',                                                                                              // 132\n  keySplines: 'keySplines',                                                                                            // 133\n  keyTimes: 'keyTimes',                                                                                                // 134\n  lengthAdjust: 'lengthAdjust',                                                                                        // 135\n  letterSpacing: 'letter-spacing',                                                                                     // 136\n  lightingColor: 'lighting-color',                                                                                     // 137\n  limitingConeAngle: 'limitingConeAngle',                                                                              // 138\n  local: 0,                                                                                                            // 139\n  markerEnd: 'marker-end',                                                                                             // 140\n  markerMid: 'marker-mid',                                                                                             // 141\n  markerStart: 'marker-start',                                                                                         // 142\n  markerHeight: 'markerHeight',                                                                                        // 143\n  markerUnits: 'markerUnits',                                                                                          // 144\n  markerWidth: 'markerWidth',                                                                                          // 145\n  mask: 0,                                                                                                             // 146\n  maskContentUnits: 'maskContentUnits',                                                                                // 147\n  maskUnits: 'maskUnits',                                                                                              // 148\n  mathematical: 0,                                                                                                     // 149\n  mode: 0,                                                                                                             // 150\n  numOctaves: 'numOctaves',                                                                                            // 151\n  offset: 0,                                                                                                           // 152\n  opacity: 0,                                                                                                          // 153\n  operator: 0,                                                                                                         // 154\n  order: 0,                                                                                                            // 155\n  orient: 0,                                                                                                           // 156\n  orientation: 0,                                                                                                      // 157\n  origin: 0,                                                                                                           // 158\n  overflow: 0,                                                                                                         // 159\n  overlinePosition: 'overline-position',                                                                               // 160\n  overlineThickness: 'overline-thickness',                                                                             // 161\n  paintOrder: 'paint-order',                                                                                           // 162\n  panose1: 'panose-1',                                                                                                 // 163\n  pathLength: 'pathLength',                                                                                            // 164\n  patternContentUnits: 'patternContentUnits',                                                                          // 165\n  patternTransform: 'patternTransform',                                                                                // 166\n  patternUnits: 'patternUnits',                                                                                        // 167\n  pointerEvents: 'pointer-events',                                                                                     // 168\n  points: 0,                                                                                                           // 169\n  pointsAtX: 'pointsAtX',                                                                                              // 170\n  pointsAtY: 'pointsAtY',                                                                                              // 171\n  pointsAtZ: 'pointsAtZ',                                                                                              // 172\n  preserveAlpha: 'preserveAlpha',                                                                                      // 173\n  preserveAspectRatio: 'preserveAspectRatio',                                                                          // 174\n  primitiveUnits: 'primitiveUnits',                                                                                    // 175\n  r: 0,                                                                                                                // 176\n  radius: 0,                                                                                                           // 177\n  refX: 'refX',                                                                                                        // 178\n  refY: 'refY',                                                                                                        // 179\n  renderingIntent: 'rendering-intent',                                                                                 // 180\n  repeatCount: 'repeatCount',                                                                                          // 181\n  repeatDur: 'repeatDur',                                                                                              // 182\n  requiredExtensions: 'requiredExtensions',                                                                            // 183\n  requiredFeatures: 'requiredFeatures',                                                                                // 184\n  restart: 0,                                                                                                          // 185\n  result: 0,                                                                                                           // 186\n  rotate: 0,                                                                                                           // 187\n  rx: 0,                                                                                                               // 188\n  ry: 0,                                                                                                               // 189\n  scale: 0,                                                                                                            // 190\n  seed: 0,                                                                                                             // 191\n  shapeRendering: 'shape-rendering',                                                                                   // 192\n  slope: 0,                                                                                                            // 193\n  spacing: 0,                                                                                                          // 194\n  specularConstant: 'specularConstant',                                                                                // 195\n  specularExponent: 'specularExponent',                                                                                // 196\n  speed: 0,                                                                                                            // 197\n  spreadMethod: 'spreadMethod',                                                                                        // 198\n  startOffset: 'startOffset',                                                                                          // 199\n  stdDeviation: 'stdDeviation',                                                                                        // 200\n  stemh: 0,                                                                                                            // 201\n  stemv: 0,                                                                                                            // 202\n  stitchTiles: 'stitchTiles',                                                                                          // 203\n  stopColor: 'stop-color',                                                                                             // 204\n  stopOpacity: 'stop-opacity',                                                                                         // 205\n  strikethroughPosition: 'strikethrough-position',                                                                     // 206\n  strikethroughThickness: 'strikethrough-thickness',                                                                   // 207\n  string: 0,                                                                                                           // 208\n  stroke: 0,                                                                                                           // 209\n  strokeDasharray: 'stroke-dasharray',                                                                                 // 210\n  strokeDashoffset: 'stroke-dashoffset',                                                                               // 211\n  strokeLinecap: 'stroke-linecap',                                                                                     // 212\n  strokeLinejoin: 'stroke-linejoin',                                                                                   // 213\n  strokeMiterlimit: 'stroke-miterlimit',                                                                               // 214\n  strokeOpacity: 'stroke-opacity',                                                                                     // 215\n  strokeWidth: 'stroke-width',                                                                                         // 216\n  surfaceScale: 'surfaceScale',                                                                                        // 217\n  systemLanguage: 'systemLanguage',                                                                                    // 218\n  tableValues: 'tableValues',                                                                                          // 219\n  targetX: 'targetX',                                                                                                  // 220\n  targetY: 'targetY',                                                                                                  // 221\n  textAnchor: 'text-anchor',                                                                                           // 222\n  textDecoration: 'text-decoration',                                                                                   // 223\n  textRendering: 'text-rendering',                                                                                     // 224\n  textLength: 'textLength',                                                                                            // 225\n  to: 0,                                                                                                               // 226\n  transform: 0,                                                                                                        // 227\n  u1: 0,                                                                                                               // 228\n  u2: 0,                                                                                                               // 229\n  underlinePosition: 'underline-position',                                                                             // 230\n  underlineThickness: 'underline-thickness',                                                                           // 231\n  unicode: 0,                                                                                                          // 232\n  unicodeBidi: 'unicode-bidi',                                                                                         // 233\n  unicodeRange: 'unicode-range',                                                                                       // 234\n  unitsPerEm: 'units-per-em',                                                                                          // 235\n  vAlphabetic: 'v-alphabetic',                                                                                         // 236\n  vHanging: 'v-hanging',                                                                                               // 237\n  vIdeographic: 'v-ideographic',                                                                                       // 238\n  vMathematical: 'v-mathematical',                                                                                     // 239\n  values: 0,                                                                                                           // 240\n  vectorEffect: 'vector-effect',                                                                                       // 241\n  version: 0,                                                                                                          // 242\n  vertAdvY: 'vert-adv-y',                                                                                              // 243\n  vertOriginX: 'vert-origin-x',                                                                                        // 244\n  vertOriginY: 'vert-origin-y',                                                                                        // 245\n  viewBox: 'viewBox',                                                                                                  // 246\n  viewTarget: 'viewTarget',                                                                                            // 247\n  visibility: 0,                                                                                                       // 248\n  widths: 0,                                                                                                           // 249\n  wordSpacing: 'word-spacing',                                                                                         // 250\n  writingMode: 'writing-mode',                                                                                         // 251\n  x: 0,                                                                                                                // 252\n  xHeight: 'x-height',                                                                                                 // 253\n  x1: 0,                                                                                                               // 254\n  x2: 0,                                                                                                               // 255\n  xChannelSelector: 'xChannelSelector',                                                                                // 256\n  xlinkActuate: 'xlink:actuate',                                                                                       // 257\n  xlinkArcrole: 'xlink:arcrole',                                                                                       // 258\n  xlinkHref: 'xlink:href',                                                                                             // 259\n  xlinkRole: 'xlink:role',                                                                                             // 260\n  xlinkShow: 'xlink:show',                                                                                             // 261\n  xlinkTitle: 'xlink:title',                                                                                           // 262\n  xlinkType: 'xlink:type',                                                                                             // 263\n  xmlBase: 'xml:base',                                                                                                 // 264\n  xmlns: 0,                                                                                                            // 265\n  xmlnsXlink: 'xmlns:xlink',                                                                                           // 266\n  xmlLang: 'xml:lang',                                                                                                 // 267\n  xmlSpace: 'xml:space',                                                                                               // 268\n  y: 0,                                                                                                                // 269\n  y1: 0,                                                                                                               // 270\n  y2: 0,                                                                                                               // 271\n  yChannelSelector: 'yChannelSelector',                                                                                // 272\n  z: 0,                                                                                                                // 273\n  zoomAndPan: 'zoomAndPan'                                                                                             // 274\n};                                                                                                                     // 275\n                                                                                                                       // 276\nvar SVGDOMPropertyConfig = {                                                                                           // 277\n  Properties: {},                                                                                                      // 278\n  DOMAttributeNamespaces: {                                                                                            // 279\n    xlinkActuate: NS.xlink,                                                                                            // 280\n    xlinkArcrole: NS.xlink,                                                                                            // 281\n    xlinkHref: NS.xlink,                                                                                               // 282\n    xlinkRole: NS.xlink,                                                                                               // 283\n    xlinkShow: NS.xlink,                                                                                               // 284\n    xlinkTitle: NS.xlink,                                                                                              // 285\n    xlinkType: NS.xlink,                                                                                               // 286\n    xmlBase: NS.xml,                                                                                                   // 287\n    xmlLang: NS.xml,                                                                                                   // 288\n    xmlSpace: NS.xml                                                                                                   // 289\n  },                                                                                                                   // 290\n  DOMAttributeNames: {}                                                                                                // 291\n};                                                                                                                     // 292\n                                                                                                                       // 293\nObject.keys(ATTRS).forEach(function (key) {                                                                            // 294\n  SVGDOMPropertyConfig.Properties[key] = 0;                                                                            // 295\n  if (ATTRS[key]) {                                                                                                    // 296\n    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];                                                          // 297\n  }                                                                                                                    // 298\n});                                                                                                                    // 299\n                                                                                                                       // 300\nmodule.exports = SVGDOMPropertyConfig;                                                                                 // 301\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"SelectEventPlugin.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/SelectEventPlugin.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar EventPropagators = require('./EventPropagators');                                                                  // 13\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 14\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 15\nvar ReactInputSelection = require('./ReactInputSelection');                                                            // 16\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 17\n                                                                                                                       // 18\nvar getActiveElement = require('fbjs/lib/getActiveElement');                                                           // 19\nvar isTextInputElement = require('./isTextInputElement');                                                              // 20\nvar shallowEqual = require('fbjs/lib/shallowEqual');                                                                   // 21\n                                                                                                                       // 22\nvar skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;\n                                                                                                                       // 24\nvar eventTypes = {                                                                                                     // 25\n  select: {                                                                                                            // 26\n    phasedRegistrationNames: {                                                                                         // 27\n      bubbled: 'onSelect',                                                                                             // 28\n      captured: 'onSelectCapture'                                                                                      // 29\n    },                                                                                                                 // 30\n    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']\n  }                                                                                                                    // 32\n};                                                                                                                     // 33\n                                                                                                                       // 34\nvar activeElement = null;                                                                                              // 35\nvar activeElementInst = null;                                                                                          // 36\nvar lastSelection = null;                                                                                              // 37\nvar mouseDown = false;                                                                                                 // 38\n                                                                                                                       // 39\n// Track whether a listener exists for this plugin. If none exist, we do                                               // 40\n// not extract events. See #3639.                                                                                      // 41\nvar hasListener = false;                                                                                               // 42\n                                                                                                                       // 43\n/**                                                                                                                    // 44\n * Get an object which is a unique representation of the current selection.                                            // 45\n *                                                                                                                     // 46\n * The return value will not be consistent across nodes or browsers, but                                               // 47\n * two identical selections on the same node will return identical objects.                                            // 48\n *                                                                                                                     // 49\n * @param {DOMElement} node                                                                                            // 50\n * @return {object}                                                                                                    // 51\n */                                                                                                                    // 52\nfunction getSelection(node) {                                                                                          // 53\n  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {                                // 54\n    return {                                                                                                           // 55\n      start: node.selectionStart,                                                                                      // 56\n      end: node.selectionEnd                                                                                           // 57\n    };                                                                                                                 // 58\n  } else if (window.getSelection) {                                                                                    // 59\n    var selection = window.getSelection();                                                                             // 60\n    return {                                                                                                           // 61\n      anchorNode: selection.anchorNode,                                                                                // 62\n      anchorOffset: selection.anchorOffset,                                                                            // 63\n      focusNode: selection.focusNode,                                                                                  // 64\n      focusOffset: selection.focusOffset                                                                               // 65\n    };                                                                                                                 // 66\n  } else if (document.selection) {                                                                                     // 67\n    var range = document.selection.createRange();                                                                      // 68\n    return {                                                                                                           // 69\n      parentElement: range.parentElement(),                                                                            // 70\n      text: range.text,                                                                                                // 71\n      top: range.boundingTop,                                                                                          // 72\n      left: range.boundingLeft                                                                                         // 73\n    };                                                                                                                 // 74\n  }                                                                                                                    // 75\n}                                                                                                                      // 76\n                                                                                                                       // 77\n/**                                                                                                                    // 78\n * Poll selection to see whether it's changed.                                                                         // 79\n *                                                                                                                     // 80\n * @param {object} nativeEvent                                                                                         // 81\n * @return {?SyntheticEvent}                                                                                           // 82\n */                                                                                                                    // 83\nfunction constructSelectEvent(nativeEvent, nativeEventTarget) {                                                        // 84\n  // Ensure we have the right element, and that the user is not dragging a                                             // 85\n  // selection (this matches native `select` event behavior). In HTML5, select                                         // 86\n  // fires only on input and textarea thus if there's no focused element we                                            // 87\n  // won't dispatch.                                                                                                   // 88\n  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {                                    // 89\n    return null;                                                                                                       // 90\n  }                                                                                                                    // 91\n                                                                                                                       // 92\n  // Only fire when selection has actually changed.                                                                    // 93\n  var currentSelection = getSelection(activeElement);                                                                  // 94\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {                                              // 95\n    lastSelection = currentSelection;                                                                                  // 96\n                                                                                                                       // 97\n    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);\n                                                                                                                       // 99\n    syntheticEvent.type = 'select';                                                                                    // 100\n    syntheticEvent.target = activeElement;                                                                             // 101\n                                                                                                                       // 102\n    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);                                                     // 103\n                                                                                                                       // 104\n    return syntheticEvent;                                                                                             // 105\n  }                                                                                                                    // 106\n                                                                                                                       // 107\n  return null;                                                                                                         // 108\n}                                                                                                                      // 109\n                                                                                                                       // 110\n/**                                                                                                                    // 111\n * This plugin creates an `onSelect` event that normalizes select events                                               // 112\n * across form elements.                                                                                               // 113\n *                                                                                                                     // 114\n * Supported elements are:                                                                                             // 115\n * - input (see `isTextInputElement`)                                                                                  // 116\n * - textarea                                                                                                          // 117\n * - contentEditable                                                                                                   // 118\n *                                                                                                                     // 119\n * This differs from native browser implementations in the following ways:                                             // 120\n * - Fires on contentEditable fields as well as inputs.                                                                // 121\n * - Fires for collapsed selection.                                                                                    // 122\n * - Fires after user input.                                                                                           // 123\n */                                                                                                                    // 124\nvar SelectEventPlugin = {                                                                                              // 125\n  eventTypes: eventTypes,                                                                                              // 126\n                                                                                                                       // 127\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {                                 // 128\n    if (!hasListener) {                                                                                                // 129\n      return null;                                                                                                     // 130\n    }                                                                                                                  // 131\n                                                                                                                       // 132\n    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;                      // 133\n                                                                                                                       // 134\n    switch (topLevelType) {                                                                                            // 135\n      // Track the input node that has focus.                                                                          // 136\n      case 'topFocus':                                                                                                 // 137\n        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {                                 // 138\n          activeElement = targetNode;                                                                                  // 139\n          activeElementInst = targetInst;                                                                              // 140\n          lastSelection = null;                                                                                        // 141\n        }                                                                                                              // 142\n        break;                                                                                                         // 143\n      case 'topBlur':                                                                                                  // 144\n        activeElement = null;                                                                                          // 145\n        activeElementInst = null;                                                                                      // 146\n        lastSelection = null;                                                                                          // 147\n        break;                                                                                                         // 148\n      // Don't fire the event while the user is dragging. This matches the                                             // 149\n      // semantics of the native select event.                                                                         // 150\n      case 'topMouseDown':                                                                                             // 151\n        mouseDown = true;                                                                                              // 152\n        break;                                                                                                         // 153\n      case 'topContextMenu':                                                                                           // 154\n      case 'topMouseUp':                                                                                               // 155\n        mouseDown = false;                                                                                             // 156\n        return constructSelectEvent(nativeEvent, nativeEventTarget);                                                   // 157\n      // Chrome and IE fire non-standard event when selection is changed (and                                          // 158\n      // sometimes when it hasn't). IE's event fires out of order with respect                                         // 159\n      // to key and input events on deletion, so we discard it.                                                        // 160\n      //                                                                                                               // 161\n      // Firefox doesn't support selectionchange, so check selection status                                            // 162\n      // after each key entry. The selection changes after keydown and before                                          // 163\n      // keyup, but we check on keydown as well in the case of holding down a                                          // 164\n      // key, when multiple keydown events are fired but only one keyup is.                                            // 165\n      // This is also our approach for IE handling, for the reason above.                                              // 166\n      case 'topSelectionChange':                                                                                       // 167\n        if (skipSelectionChangeEvent) {                                                                                // 168\n          break;                                                                                                       // 169\n        }                                                                                                              // 170\n      // falls through                                                                                                 // 171\n      case 'topKeyDown':                                                                                               // 172\n      case 'topKeyUp':                                                                                                 // 173\n        return constructSelectEvent(nativeEvent, nativeEventTarget);                                                   // 174\n    }                                                                                                                  // 175\n                                                                                                                       // 176\n    return null;                                                                                                       // 177\n  },                                                                                                                   // 178\n                                                                                                                       // 179\n  didPutListener: function (inst, registrationName, listener) {                                                        // 180\n    if (registrationName === 'onSelect') {                                                                             // 181\n      hasListener = true;                                                                                              // 182\n    }                                                                                                                  // 183\n  }                                                                                                                    // 184\n};                                                                                                                     // 185\n                                                                                                                       // 186\nmodule.exports = SelectEventPlugin;                                                                                    // 187\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"SimpleEventPlugin.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/SimpleEventPlugin.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar EventListener = require('fbjs/lib/EventListener');                                                                 // 16\nvar EventPropagators = require('./EventPropagators');                                                                  // 17\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 18\nvar SyntheticAnimationEvent = require('./SyntheticAnimationEvent');                                                    // 19\nvar SyntheticClipboardEvent = require('./SyntheticClipboardEvent');                                                    // 20\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 21\nvar SyntheticFocusEvent = require('./SyntheticFocusEvent');                                                            // 22\nvar SyntheticKeyboardEvent = require('./SyntheticKeyboardEvent');                                                      // 23\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');                                                            // 24\nvar SyntheticDragEvent = require('./SyntheticDragEvent');                                                              // 25\nvar SyntheticTouchEvent = require('./SyntheticTouchEvent');                                                            // 26\nvar SyntheticTransitionEvent = require('./SyntheticTransitionEvent');                                                  // 27\nvar SyntheticUIEvent = require('./SyntheticUIEvent');                                                                  // 28\nvar SyntheticWheelEvent = require('./SyntheticWheelEvent');                                                            // 29\n                                                                                                                       // 30\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 31\nvar getEventCharCode = require('./getEventCharCode');                                                                  // 32\nvar invariant = require('fbjs/lib/invariant');                                                                         // 33\n                                                                                                                       // 34\n/**                                                                                                                    // 35\n * Turns                                                                                                               // 36\n * ['abort', ...]                                                                                                      // 37\n * into                                                                                                                // 38\n * eventTypes = {                                                                                                      // 39\n *   'abort': {                                                                                                        // 40\n *     phasedRegistrationNames: {                                                                                      // 41\n *       bubbled: 'onAbort',                                                                                           // 42\n *       captured: 'onAbortCapture',                                                                                   // 43\n *     },                                                                                                              // 44\n *     dependencies: ['topAbort'],                                                                                     // 45\n *   },                                                                                                                // 46\n *   ...                                                                                                               // 47\n * };                                                                                                                  // 48\n * topLevelEventsToDispatchConfig = {                                                                                  // 49\n *   'topAbort': { sameConfig }                                                                                        // 50\n * };                                                                                                                  // 51\n */                                                                                                                    // 52\nvar eventTypes = {};                                                                                                   // 53\nvar topLevelEventsToDispatchConfig = {};                                                                               // 54\n['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {\n  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);                                                      // 56\n  var onEvent = 'on' + capitalizedEvent;                                                                               // 57\n  var topEvent = 'top' + capitalizedEvent;                                                                             // 58\n                                                                                                                       // 59\n  var type = {                                                                                                         // 60\n    phasedRegistrationNames: {                                                                                         // 61\n      bubbled: onEvent,                                                                                                // 62\n      captured: onEvent + 'Capture'                                                                                    // 63\n    },                                                                                                                 // 64\n    dependencies: [topEvent]                                                                                           // 65\n  };                                                                                                                   // 66\n  eventTypes[event] = type;                                                                                            // 67\n  topLevelEventsToDispatchConfig[topEvent] = type;                                                                     // 68\n});                                                                                                                    // 69\n                                                                                                                       // 70\nvar onClickListeners = {};                                                                                             // 71\n                                                                                                                       // 72\nfunction getDictionaryKey(inst) {                                                                                      // 73\n  // Prevents V8 performance issue:                                                                                    // 74\n  // https://github.com/facebook/react/pull/7232                                                                       // 75\n  return '.' + inst._rootNodeID;                                                                                       // 76\n}                                                                                                                      // 77\n                                                                                                                       // 78\nfunction isInteractive(tag) {                                                                                          // 79\n  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';                                // 80\n}                                                                                                                      // 81\n                                                                                                                       // 82\nvar SimpleEventPlugin = {                                                                                              // 83\n  eventTypes: eventTypes,                                                                                              // 84\n                                                                                                                       // 85\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {                                 // 86\n    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];                                                 // 87\n    if (!dispatchConfig) {                                                                                             // 88\n      return null;                                                                                                     // 89\n    }                                                                                                                  // 90\n    var EventConstructor;                                                                                              // 91\n    switch (topLevelType) {                                                                                            // 92\n      case 'topAbort':                                                                                                 // 93\n      case 'topCanPlay':                                                                                               // 94\n      case 'topCanPlayThrough':                                                                                        // 95\n      case 'topDurationChange':                                                                                        // 96\n      case 'topEmptied':                                                                                               // 97\n      case 'topEncrypted':                                                                                             // 98\n      case 'topEnded':                                                                                                 // 99\n      case 'topError':                                                                                                 // 100\n      case 'topInput':                                                                                                 // 101\n      case 'topInvalid':                                                                                               // 102\n      case 'topLoad':                                                                                                  // 103\n      case 'topLoadedData':                                                                                            // 104\n      case 'topLoadedMetadata':                                                                                        // 105\n      case 'topLoadStart':                                                                                             // 106\n      case 'topPause':                                                                                                 // 107\n      case 'topPlay':                                                                                                  // 108\n      case 'topPlaying':                                                                                               // 109\n      case 'topProgress':                                                                                              // 110\n      case 'topRateChange':                                                                                            // 111\n      case 'topReset':                                                                                                 // 112\n      case 'topSeeked':                                                                                                // 113\n      case 'topSeeking':                                                                                               // 114\n      case 'topStalled':                                                                                               // 115\n      case 'topSubmit':                                                                                                // 116\n      case 'topSuspend':                                                                                               // 117\n      case 'topTimeUpdate':                                                                                            // 118\n      case 'topVolumeChange':                                                                                          // 119\n      case 'topWaiting':                                                                                               // 120\n        // HTML Events                                                                                                 // 121\n        // @see http://www.w3.org/TR/html5/index.html#events-0                                                         // 122\n        EventConstructor = SyntheticEvent;                                                                             // 123\n        break;                                                                                                         // 124\n      case 'topKeyPress':                                                                                              // 125\n        // Firefox creates a keypress event for function keys too. This removes                                        // 126\n        // the unwanted keypress events. Enter is however both printable and                                           // 127\n        // non-printable. One would expect Tab to be as well (but it isn't).                                           // 128\n        if (getEventCharCode(nativeEvent) === 0) {                                                                     // 129\n          return null;                                                                                                 // 130\n        }                                                                                                              // 131\n      /* falls through */                                                                                              // 132\n      case 'topKeyDown':                                                                                               // 133\n      case 'topKeyUp':                                                                                                 // 134\n        EventConstructor = SyntheticKeyboardEvent;                                                                     // 135\n        break;                                                                                                         // 136\n      case 'topBlur':                                                                                                  // 137\n      case 'topFocus':                                                                                                 // 138\n        EventConstructor = SyntheticFocusEvent;                                                                        // 139\n        break;                                                                                                         // 140\n      case 'topClick':                                                                                                 // 141\n        // Firefox creates a click event on right mouse clicks. This removes the                                       // 142\n        // unwanted click events.                                                                                      // 143\n        if (nativeEvent.button === 2) {                                                                                // 144\n          return null;                                                                                                 // 145\n        }                                                                                                              // 146\n      /* falls through */                                                                                              // 147\n      case 'topDoubleClick':                                                                                           // 148\n      case 'topMouseDown':                                                                                             // 149\n      case 'topMouseMove':                                                                                             // 150\n      case 'topMouseUp':                                                                                               // 151\n      // TODO: Disabled elements should not respond to mouse events                                                    // 152\n      /* falls through */                                                                                              // 153\n      case 'topMouseOut':                                                                                              // 154\n      case 'topMouseOver':                                                                                             // 155\n      case 'topContextMenu':                                                                                           // 156\n        EventConstructor = SyntheticMouseEvent;                                                                        // 157\n        break;                                                                                                         // 158\n      case 'topDrag':                                                                                                  // 159\n      case 'topDragEnd':                                                                                               // 160\n      case 'topDragEnter':                                                                                             // 161\n      case 'topDragExit':                                                                                              // 162\n      case 'topDragLeave':                                                                                             // 163\n      case 'topDragOver':                                                                                              // 164\n      case 'topDragStart':                                                                                             // 165\n      case 'topDrop':                                                                                                  // 166\n        EventConstructor = SyntheticDragEvent;                                                                         // 167\n        break;                                                                                                         // 168\n      case 'topTouchCancel':                                                                                           // 169\n      case 'topTouchEnd':                                                                                              // 170\n      case 'topTouchMove':                                                                                             // 171\n      case 'topTouchStart':                                                                                            // 172\n        EventConstructor = SyntheticTouchEvent;                                                                        // 173\n        break;                                                                                                         // 174\n      case 'topAnimationEnd':                                                                                          // 175\n      case 'topAnimationIteration':                                                                                    // 176\n      case 'topAnimationStart':                                                                                        // 177\n        EventConstructor = SyntheticAnimationEvent;                                                                    // 178\n        break;                                                                                                         // 179\n      case 'topTransitionEnd':                                                                                         // 180\n        EventConstructor = SyntheticTransitionEvent;                                                                   // 181\n        break;                                                                                                         // 182\n      case 'topScroll':                                                                                                // 183\n        EventConstructor = SyntheticUIEvent;                                                                           // 184\n        break;                                                                                                         // 185\n      case 'topWheel':                                                                                                 // 186\n        EventConstructor = SyntheticWheelEvent;                                                                        // 187\n        break;                                                                                                         // 188\n      case 'topCopy':                                                                                                  // 189\n      case 'topCut':                                                                                                   // 190\n      case 'topPaste':                                                                                                 // 191\n        EventConstructor = SyntheticClipboardEvent;                                                                    // 192\n        break;                                                                                                         // 193\n    }                                                                                                                  // 194\n    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;\n    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);                // 196\n    EventPropagators.accumulateTwoPhaseDispatches(event);                                                              // 197\n    return event;                                                                                                      // 198\n  },                                                                                                                   // 199\n                                                                                                                       // 200\n  didPutListener: function (inst, registrationName, listener) {                                                        // 201\n    // Mobile Safari does not fire properly bubble click events on                                                     // 202\n    // non-interactive elements, which means delegated click listeners do not                                          // 203\n    // fire. The workaround for this bug involves attaching an empty click                                             // 204\n    // listener on the target node.                                                                                    // 205\n    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html                                            // 206\n    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {                                                 // 207\n      var key = getDictionaryKey(inst);                                                                                // 208\n      var node = ReactDOMComponentTree.getNodeFromInstance(inst);                                                      // 209\n      if (!onClickListeners[key]) {                                                                                    // 210\n        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);                                    // 211\n      }                                                                                                                // 212\n    }                                                                                                                  // 213\n  },                                                                                                                   // 214\n                                                                                                                       // 215\n  willDeleteListener: function (inst, registrationName) {                                                              // 216\n    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {                                                 // 217\n      var key = getDictionaryKey(inst);                                                                                // 218\n      onClickListeners[key].remove();                                                                                  // 219\n      delete onClickListeners[key];                                                                                    // 220\n    }                                                                                                                  // 221\n  }                                                                                                                    // 222\n};                                                                                                                     // 223\n                                                                                                                       // 224\nmodule.exports = SimpleEventPlugin;                                                                                    // 225\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"SyntheticAnimationEvent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/SyntheticAnimationEvent.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * @interface Event                                                                                                    // 16\n * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface                                                 // 17\n * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent                                                // 18\n */                                                                                                                    // 19\nvar AnimationEventInterface = {                                                                                        // 20\n  animationName: null,                                                                                                 // 21\n  elapsedTime: null,                                                                                                   // 22\n  pseudoElement: null                                                                                                  // 23\n};                                                                                                                     // 24\n                                                                                                                       // 25\n/**                                                                                                                    // 26\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 27\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 28\n * @param {object} nativeEvent Native browser event.                                                                   // 29\n * @extends {SyntheticEvent}                                                                                           // 30\n */                                                                                                                    // 31\nfunction SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                     // 32\n  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                    // 33\n}                                                                                                                      // 34\n                                                                                                                       // 35\nSyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);                                         // 36\n                                                                                                                       // 37\nmodule.exports = SyntheticAnimationEvent;                                                                              // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"SyntheticClipboardEvent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/SyntheticClipboardEvent.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * @interface Event                                                                                                    // 16\n * @see http://www.w3.org/TR/clipboard-apis/                                                                           // 17\n */                                                                                                                    // 18\nvar ClipboardEventInterface = {                                                                                        // 19\n  clipboardData: function (event) {                                                                                    // 20\n    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;                                      // 21\n  }                                                                                                                    // 22\n};                                                                                                                     // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 26\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 27\n * @param {object} nativeEvent Native browser event.                                                                   // 28\n * @extends {SyntheticUIEvent}                                                                                         // 29\n */                                                                                                                    // 30\nfunction SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                     // 31\n  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                    // 32\n}                                                                                                                      // 33\n                                                                                                                       // 34\nSyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);                                         // 35\n                                                                                                                       // 36\nmodule.exports = SyntheticClipboardEvent;                                                                              // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"SyntheticFocusEvent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/SyntheticFocusEvent.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar SyntheticUIEvent = require('./SyntheticUIEvent');                                                                  // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * @interface FocusEvent                                                                                               // 16\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 17\n */                                                                                                                    // 18\nvar FocusEventInterface = {                                                                                            // 19\n  relatedTarget: null                                                                                                  // 20\n};                                                                                                                     // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 24\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 25\n * @param {object} nativeEvent Native browser event.                                                                   // 26\n * @extends {SyntheticUIEvent}                                                                                         // 27\n */                                                                                                                    // 28\nfunction SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                         // 29\n  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                  // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\nSyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);                                               // 33\n                                                                                                                       // 34\nmodule.exports = SyntheticFocusEvent;                                                                                  // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"SyntheticKeyboardEvent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/SyntheticKeyboardEvent.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar SyntheticUIEvent = require('./SyntheticUIEvent');                                                                  // 13\n                                                                                                                       // 14\nvar getEventCharCode = require('./getEventCharCode');                                                                  // 15\nvar getEventKey = require('./getEventKey');                                                                            // 16\nvar getEventModifierState = require('./getEventModifierState');                                                        // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * @interface KeyboardEvent                                                                                            // 20\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 21\n */                                                                                                                    // 22\nvar KeyboardEventInterface = {                                                                                         // 23\n  key: getEventKey,                                                                                                    // 24\n  location: null,                                                                                                      // 25\n  ctrlKey: null,                                                                                                       // 26\n  shiftKey: null,                                                                                                      // 27\n  altKey: null,                                                                                                        // 28\n  metaKey: null,                                                                                                       // 29\n  repeat: null,                                                                                                        // 30\n  locale: null,                                                                                                        // 31\n  getModifierState: getEventModifierState,                                                                             // 32\n  // Legacy Interface                                                                                                  // 33\n  charCode: function (event) {                                                                                         // 34\n    // `charCode` is the result of a KeyPress event and represents the value of                                        // 35\n    // the actual printable character.                                                                                 // 36\n                                                                                                                       // 37\n    // KeyPress is deprecated, but its replacement is not yet final and not                                            // 38\n    // implemented in any major browser. Only KeyPress has charCode.                                                   // 39\n    if (event.type === 'keypress') {                                                                                   // 40\n      return getEventCharCode(event);                                                                                  // 41\n    }                                                                                                                  // 42\n    return 0;                                                                                                          // 43\n  },                                                                                                                   // 44\n  keyCode: function (event) {                                                                                          // 45\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of                                       // 46\n    // physical keyboard key.                                                                                          // 47\n                                                                                                                       // 48\n    // The actual meaning of the value depends on the users' keyboard layout                                           // 49\n    // which cannot be detected. Assuming that it is a US keyboard layout                                              // 50\n    // provides a surprisingly accurate mapping for US and European users.                                             // 51\n    // Due to this, it is left to the user to implement at this time.                                                  // 52\n    if (event.type === 'keydown' || event.type === 'keyup') {                                                          // 53\n      return event.keyCode;                                                                                            // 54\n    }                                                                                                                  // 55\n    return 0;                                                                                                          // 56\n  },                                                                                                                   // 57\n  which: function (event) {                                                                                            // 58\n    // `which` is an alias for either `keyCode` or `charCode` depending on the                                         // 59\n    // type of the event.                                                                                              // 60\n    if (event.type === 'keypress') {                                                                                   // 61\n      return getEventCharCode(event);                                                                                  // 62\n    }                                                                                                                  // 63\n    if (event.type === 'keydown' || event.type === 'keyup') {                                                          // 64\n      return event.keyCode;                                                                                            // 65\n    }                                                                                                                  // 66\n    return 0;                                                                                                          // 67\n  }                                                                                                                    // 68\n};                                                                                                                     // 69\n                                                                                                                       // 70\n/**                                                                                                                    // 71\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 72\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 73\n * @param {object} nativeEvent Native browser event.                                                                   // 74\n * @extends {SyntheticUIEvent}                                                                                         // 75\n */                                                                                                                    // 76\nfunction SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                      // 77\n  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                  // 78\n}                                                                                                                      // 79\n                                                                                                                       // 80\nSyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);                                         // 81\n                                                                                                                       // 82\nmodule.exports = SyntheticKeyboardEvent;                                                                               // 83\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getEventCharCode.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/getEventCharCode.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * `charCode` represents the actual \"character code\" and is safe to use with                                           // 14\n * `String.fromCharCode`. As such, only keys that correspond to printable                                              // 15\n * characters produce a valid `charCode`, the only exception to this is Enter.                                         // 16\n * The Tab-key is considered non-printable and does not have a `charCode`,                                             // 17\n * presumably because it does not produce a tab-character in browsers.                                                 // 18\n *                                                                                                                     // 19\n * @param {object} nativeEvent Native browser event.                                                                   // 20\n * @return {number} Normalized `charCode` property.                                                                    // 21\n */                                                                                                                    // 22\n                                                                                                                       // 23\nfunction getEventCharCode(nativeEvent) {                                                                               // 24\n  var charCode;                                                                                                        // 25\n  var keyCode = nativeEvent.keyCode;                                                                                   // 26\n                                                                                                                       // 27\n  if ('charCode' in nativeEvent) {                                                                                     // 28\n    charCode = nativeEvent.charCode;                                                                                   // 29\n                                                                                                                       // 30\n    // FF does not set `charCode` for the Enter-key, check against `keyCode`.                                          // 31\n    if (charCode === 0 && keyCode === 13) {                                                                            // 32\n      charCode = 13;                                                                                                   // 33\n    }                                                                                                                  // 34\n  } else {                                                                                                             // 35\n    // IE8 does not implement `charCode`, but `keyCode` has the correct value.                                         // 36\n    charCode = keyCode;                                                                                                // 37\n  }                                                                                                                    // 38\n                                                                                                                       // 39\n  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.                                       // 40\n  // Must not discard the (non-)printable Enter-key.                                                                   // 41\n  if (charCode >= 32 || charCode === 13) {                                                                             // 42\n    return charCode;                                                                                                   // 43\n  }                                                                                                                    // 44\n                                                                                                                       // 45\n  return 0;                                                                                                            // 46\n}                                                                                                                      // 47\n                                                                                                                       // 48\nmodule.exports = getEventCharCode;                                                                                     // 49\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getEventKey.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/getEventKey.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar getEventCharCode = require('./getEventCharCode');                                                                  // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Normalization of deprecated HTML5 `key` values                                                                      // 16\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names                                       // 17\n */                                                                                                                    // 18\nvar normalizeKey = {                                                                                                   // 19\n  Esc: 'Escape',                                                                                                       // 20\n  Spacebar: ' ',                                                                                                       // 21\n  Left: 'ArrowLeft',                                                                                                   // 22\n  Up: 'ArrowUp',                                                                                                       // 23\n  Right: 'ArrowRight',                                                                                                 // 24\n  Down: 'ArrowDown',                                                                                                   // 25\n  Del: 'Delete',                                                                                                       // 26\n  Win: 'OS',                                                                                                           // 27\n  Menu: 'ContextMenu',                                                                                                 // 28\n  Apps: 'ContextMenu',                                                                                                 // 29\n  Scroll: 'ScrollLock',                                                                                                // 30\n  MozPrintableKey: 'Unidentified'                                                                                      // 31\n};                                                                                                                     // 32\n                                                                                                                       // 33\n/**                                                                                                                    // 34\n * Translation from legacy `keyCode` to HTML5 `key`                                                                    // 35\n * Only special keys supported, all others depend on keyboard layout or browser                                        // 36\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names                                       // 37\n */                                                                                                                    // 38\nvar translateToKey = {                                                                                                 // 39\n  8: 'Backspace',                                                                                                      // 40\n  9: 'Tab',                                                                                                            // 41\n  12: 'Clear',                                                                                                         // 42\n  13: 'Enter',                                                                                                         // 43\n  16: 'Shift',                                                                                                         // 44\n  17: 'Control',                                                                                                       // 45\n  18: 'Alt',                                                                                                           // 46\n  19: 'Pause',                                                                                                         // 47\n  20: 'CapsLock',                                                                                                      // 48\n  27: 'Escape',                                                                                                        // 49\n  32: ' ',                                                                                                             // 50\n  33: 'PageUp',                                                                                                        // 51\n  34: 'PageDown',                                                                                                      // 52\n  35: 'End',                                                                                                           // 53\n  36: 'Home',                                                                                                          // 54\n  37: 'ArrowLeft',                                                                                                     // 55\n  38: 'ArrowUp',                                                                                                       // 56\n  39: 'ArrowRight',                                                                                                    // 57\n  40: 'ArrowDown',                                                                                                     // 58\n  45: 'Insert',                                                                                                        // 59\n  46: 'Delete',                                                                                                        // 60\n  112: 'F1',                                                                                                           // 61\n  113: 'F2',                                                                                                           // 62\n  114: 'F3',                                                                                                           // 63\n  115: 'F4',                                                                                                           // 64\n  116: 'F5',                                                                                                           // 65\n  117: 'F6',                                                                                                           // 66\n  118: 'F7',                                                                                                           // 67\n  119: 'F8',                                                                                                           // 68\n  120: 'F9',                                                                                                           // 69\n  121: 'F10',                                                                                                          // 70\n  122: 'F11',                                                                                                          // 71\n  123: 'F12',                                                                                                          // 72\n  144: 'NumLock',                                                                                                      // 73\n  145: 'ScrollLock',                                                                                                   // 74\n  224: 'Meta'                                                                                                          // 75\n};                                                                                                                     // 76\n                                                                                                                       // 77\n/**                                                                                                                    // 78\n * @param {object} nativeEvent Native browser event.                                                                   // 79\n * @return {string} Normalized `key` property.                                                                         // 80\n */                                                                                                                    // 81\nfunction getEventKey(nativeEvent) {                                                                                    // 82\n  if (nativeEvent.key) {                                                                                               // 83\n    // Normalize inconsistent values reported by browsers due to                                                       // 84\n    // implementations of a working draft specification.                                                               // 85\n                                                                                                                       // 86\n    // FireFox implements `key` but returns `MozPrintableKey` for all                                                  // 87\n    // printable characters (normalized to `Unidentified`), ignore it.                                                 // 88\n    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;                                                        // 89\n    if (key !== 'Unidentified') {                                                                                      // 90\n      return key;                                                                                                      // 91\n    }                                                                                                                  // 92\n  }                                                                                                                    // 93\n                                                                                                                       // 94\n  // Browser does not implement `key`, polyfill as much of it as we can.                                               // 95\n  if (nativeEvent.type === 'keypress') {                                                                               // 96\n    var charCode = getEventCharCode(nativeEvent);                                                                      // 97\n                                                                                                                       // 98\n    // The enter-key is technically both printable and non-printable and can                                           // 99\n    // thus be captured by `keypress`, no other non-printable key should.                                              // 100\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);                                                  // 101\n  }                                                                                                                    // 102\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {                                                // 103\n    // While user keyboard layout determines the actual meaning of each                                                // 104\n    // `keyCode` value, almost all function keys have a universal value.                                               // 105\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';                                                      // 106\n  }                                                                                                                    // 107\n  return '';                                                                                                           // 108\n}                                                                                                                      // 109\n                                                                                                                       // 110\nmodule.exports = getEventKey;                                                                                          // 111\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"SyntheticDragEvent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/SyntheticDragEvent.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');                                                            // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * @interface DragEvent                                                                                                // 16\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 17\n */                                                                                                                    // 18\nvar DragEventInterface = {                                                                                             // 19\n  dataTransfer: null                                                                                                   // 20\n};                                                                                                                     // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 24\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 25\n * @param {object} nativeEvent Native browser event.                                                                   // 26\n * @extends {SyntheticUIEvent}                                                                                         // 27\n */                                                                                                                    // 28\nfunction SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                          // 29\n  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);               // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\nSyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);                                              // 33\n                                                                                                                       // 34\nmodule.exports = SyntheticDragEvent;                                                                                   // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"SyntheticTouchEvent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/SyntheticTouchEvent.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar SyntheticUIEvent = require('./SyntheticUIEvent');                                                                  // 13\n                                                                                                                       // 14\nvar getEventModifierState = require('./getEventModifierState');                                                        // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * @interface TouchEvent                                                                                               // 18\n * @see http://www.w3.org/TR/touch-events/                                                                             // 19\n */                                                                                                                    // 20\nvar TouchEventInterface = {                                                                                            // 21\n  touches: null,                                                                                                       // 22\n  targetTouches: null,                                                                                                 // 23\n  changedTouches: null,                                                                                                // 24\n  altKey: null,                                                                                                        // 25\n  metaKey: null,                                                                                                       // 26\n  ctrlKey: null,                                                                                                       // 27\n  shiftKey: null,                                                                                                      // 28\n  getModifierState: getEventModifierState                                                                              // 29\n};                                                                                                                     // 30\n                                                                                                                       // 31\n/**                                                                                                                    // 32\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 33\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 34\n * @param {object} nativeEvent Native browser event.                                                                   // 35\n * @extends {SyntheticUIEvent}                                                                                         // 36\n */                                                                                                                    // 37\nfunction SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                         // 38\n  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                  // 39\n}                                                                                                                      // 40\n                                                                                                                       // 41\nSyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);                                               // 42\n                                                                                                                       // 43\nmodule.exports = SyntheticTouchEvent;                                                                                  // 44\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"SyntheticTransitionEvent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/SyntheticTransitionEvent.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * @interface Event                                                                                                    // 16\n * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-                                     // 17\n * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent                                               // 18\n */                                                                                                                    // 19\nvar TransitionEventInterface = {                                                                                       // 20\n  propertyName: null,                                                                                                  // 21\n  elapsedTime: null,                                                                                                   // 22\n  pseudoElement: null                                                                                                  // 23\n};                                                                                                                     // 24\n                                                                                                                       // 25\n/**                                                                                                                    // 26\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 27\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 28\n * @param {object} nativeEvent Native browser event.                                                                   // 29\n * @extends {SyntheticEvent}                                                                                           // 30\n */                                                                                                                    // 31\nfunction SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                    // 32\n  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                    // 33\n}                                                                                                                      // 34\n                                                                                                                       // 35\nSyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);                                       // 36\n                                                                                                                       // 37\nmodule.exports = SyntheticTransitionEvent;                                                                             // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"SyntheticWheelEvent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/SyntheticWheelEvent.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');                                                            // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * @interface WheelEvent                                                                                               // 16\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 17\n */                                                                                                                    // 18\nvar WheelEventInterface = {                                                                                            // 19\n  deltaX: function (event) {                                                                                           // 20\n    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).\n    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;                                                                   // 22\n  },                                                                                                                   // 23\n  deltaY: function (event) {                                                                                           // 24\n    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).\n    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).\n    'wheelDelta' in event ? -event.wheelDelta : 0;                                                                     // 27\n  },                                                                                                                   // 28\n  deltaZ: null,                                                                                                        // 29\n                                                                                                                       // 30\n  // Browsers without \"deltaMode\" is reporting in raw wheel delta where one                                            // 31\n  // notch on the scroll is always +/- 120, roughly equivalent to pixels.                                              // 32\n  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or                                              // 33\n  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.                                                // 34\n  deltaMode: null                                                                                                      // 35\n};                                                                                                                     // 36\n                                                                                                                       // 37\n/**                                                                                                                    // 38\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 39\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 40\n * @param {object} nativeEvent Native browser event.                                                                   // 41\n * @extends {SyntheticMouseEvent}                                                                                      // 42\n */                                                                                                                    // 43\nfunction SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                         // 44\n  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);               // 45\n}                                                                                                                      // 46\n                                                                                                                       // 47\nSyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);                                            // 48\n                                                                                                                       // 49\nmodule.exports = SyntheticWheelEvent;                                                                                  // 50\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactMount.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactMount.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 13\n                                                                                                                       // 14\nvar DOMLazyTree = require('./DOMLazyTree');                                                                            // 15\nvar DOMProperty = require('./DOMProperty');                                                                            // 16\nvar React = require('react/lib/React');                                                                                // 17\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');                                                  // 18\nvar ReactCurrentOwner = require('react/lib/ReactCurrentOwner');                                                        // 19\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 20\nvar ReactDOMContainerInfo = require('./ReactDOMContainerInfo');                                                        // 21\nvar ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');                                                          // 22\nvar ReactFeatureFlags = require('./ReactFeatureFlags');                                                                // 23\nvar ReactInstanceMap = require('./ReactInstanceMap');                                                                  // 24\nvar ReactInstrumentation = require('./ReactInstrumentation');                                                          // 25\nvar ReactMarkupChecksum = require('./ReactMarkupChecksum');                                                            // 26\nvar ReactReconciler = require('./ReactReconciler');                                                                    // 27\nvar ReactUpdateQueue = require('./ReactUpdateQueue');                                                                  // 28\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 29\n                                                                                                                       // 30\nvar emptyObject = require('fbjs/lib/emptyObject');                                                                     // 31\nvar instantiateReactComponent = require('./instantiateReactComponent');                                                // 32\nvar invariant = require('fbjs/lib/invariant');                                                                         // 33\nvar setInnerHTML = require('./setInnerHTML');                                                                          // 34\nvar shouldUpdateReactComponent = require('./shouldUpdateReactComponent');                                              // 35\nvar warning = require('fbjs/lib/warning');                                                                             // 36\n                                                                                                                       // 37\nvar ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;                                                                         // 38\nvar ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;                                                                  // 39\n                                                                                                                       // 40\nvar ELEMENT_NODE_TYPE = 1;                                                                                             // 41\nvar DOC_NODE_TYPE = 9;                                                                                                 // 42\nvar DOCUMENT_FRAGMENT_NODE_TYPE = 11;                                                                                  // 43\n                                                                                                                       // 44\nvar instancesByReactRootID = {};                                                                                       // 45\n                                                                                                                       // 46\n/**                                                                                                                    // 47\n * Finds the index of the first character                                                                              // 48\n * that's not common between the two given strings.                                                                    // 49\n *                                                                                                                     // 50\n * @return {number} the index of the character where the strings diverge                                               // 51\n */                                                                                                                    // 52\nfunction firstDifferenceIndex(string1, string2) {                                                                      // 53\n  var minLen = Math.min(string1.length, string2.length);                                                               // 54\n  for (var i = 0; i < minLen; i++) {                                                                                   // 55\n    if (string1.charAt(i) !== string2.charAt(i)) {                                                                     // 56\n      return i;                                                                                                        // 57\n    }                                                                                                                  // 58\n  }                                                                                                                    // 59\n  return string1.length === string2.length ? -1 : minLen;                                                              // 60\n}                                                                                                                      // 61\n                                                                                                                       // 62\n/**                                                                                                                    // 63\n * @param {DOMElement|DOMDocument} container DOM element that may contain                                              // 64\n * a React component                                                                                                   // 65\n * @return {?*} DOM element that may have the reactRoot ID, or null.                                                   // 66\n */                                                                                                                    // 67\nfunction getReactRootElementInContainer(container) {                                                                   // 68\n  if (!container) {                                                                                                    // 69\n    return null;                                                                                                       // 70\n  }                                                                                                                    // 71\n                                                                                                                       // 72\n  if (container.nodeType === DOC_NODE_TYPE) {                                                                          // 73\n    return container.documentElement;                                                                                  // 74\n  } else {                                                                                                             // 75\n    return container.firstChild;                                                                                       // 76\n  }                                                                                                                    // 77\n}                                                                                                                      // 78\n                                                                                                                       // 79\nfunction internalGetID(node) {                                                                                         // 80\n  // If node is something like a window, document, or text node, none of                                               // 81\n  // which support attributes or a .getAttribute method, gracefully return                                             // 82\n  // the empty string, as if the attribute were missing.                                                               // 83\n  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';                                                      // 84\n}                                                                                                                      // 85\n                                                                                                                       // 86\n/**                                                                                                                    // 87\n * Mounts this component and inserts it into the DOM.                                                                  // 88\n *                                                                                                                     // 89\n * @param {ReactComponent} componentInstance The instance to mount.                                                    // 90\n * @param {DOMElement} container DOM element to mount into.                                                            // 91\n * @param {ReactReconcileTransaction} transaction                                                                      // 92\n * @param {boolean} shouldReuseMarkup If true, do not insert markup                                                    // 93\n */                                                                                                                    // 94\nfunction mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {                 // 95\n  var markerName;                                                                                                      // 96\n  if (ReactFeatureFlags.logTopLevelRenders) {                                                                          // 97\n    var wrappedElement = wrapperInstance._currentElement.props.child;                                                  // 98\n    var type = wrappedElement.type;                                                                                    // 99\n    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);                  // 100\n    console.time(markerName);                                                                                          // 101\n  }                                                                                                                    // 102\n                                                                                                                       // 103\n  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */\n  );                                                                                                                   // 105\n                                                                                                                       // 106\n  if (markerName) {                                                                                                    // 107\n    console.timeEnd(markerName);                                                                                       // 108\n  }                                                                                                                    // 109\n                                                                                                                       // 110\n  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;                                               // 111\n  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);                  // 112\n}                                                                                                                      // 113\n                                                                                                                       // 114\n/**                                                                                                                    // 115\n * Batched mount.                                                                                                      // 116\n *                                                                                                                     // 117\n * @param {ReactComponent} componentInstance The instance to mount.                                                    // 118\n * @param {DOMElement} container DOM element to mount into.                                                            // 119\n * @param {boolean} shouldReuseMarkup If true, do not insert markup                                                    // 120\n */                                                                                                                    // 121\nfunction batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {                     // 122\n  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(                                                  // 123\n  /* useCreateElement */                                                                                               // 124\n  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);                                                        // 125\n  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);\n  ReactUpdates.ReactReconcileTransaction.release(transaction);                                                         // 127\n}                                                                                                                      // 128\n                                                                                                                       // 129\n/**                                                                                                                    // 130\n * Unmounts a component and removes it from the DOM.                                                                   // 131\n *                                                                                                                     // 132\n * @param {ReactComponent} instance React component instance.                                                          // 133\n * @param {DOMElement} container DOM element to unmount from.                                                          // 134\n * @final                                                                                                              // 135\n * @internal                                                                                                           // 136\n * @see {ReactMount.unmountComponentAtNode}                                                                            // 137\n */                                                                                                                    // 138\nfunction unmountComponentFromNode(instance, container, safely) {                                                       // 139\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 140\n    ReactInstrumentation.debugTool.onBeginFlush();                                                                     // 141\n  }                                                                                                                    // 142\n  ReactReconciler.unmountComponent(instance, safely);                                                                  // 143\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 144\n    ReactInstrumentation.debugTool.onEndFlush();                                                                       // 145\n  }                                                                                                                    // 146\n                                                                                                                       // 147\n  if (container.nodeType === DOC_NODE_TYPE) {                                                                          // 148\n    container = container.documentElement;                                                                             // 149\n  }                                                                                                                    // 150\n                                                                                                                       // 151\n  // http://jsperf.com/emptying-a-node                                                                                 // 152\n  while (container.lastChild) {                                                                                        // 153\n    container.removeChild(container.lastChild);                                                                        // 154\n  }                                                                                                                    // 155\n}                                                                                                                      // 156\n                                                                                                                       // 157\n/**                                                                                                                    // 158\n * True if the supplied DOM node has a direct React-rendered child that is                                             // 159\n * not a React root element. Useful for warning in `render`,                                                           // 160\n * `unmountComponentAtNode`, etc.                                                                                      // 161\n *                                                                                                                     // 162\n * @param {?DOMElement} node The candidate DOM node.                                                                   // 163\n * @return {boolean} True if the DOM element contains a direct child that was                                          // 164\n * rendered by React but is not a root element.                                                                        // 165\n * @internal                                                                                                           // 166\n */                                                                                                                    // 167\nfunction hasNonRootReactChild(container) {                                                                             // 168\n  var rootEl = getReactRootElementInContainer(container);                                                              // 169\n  if (rootEl) {                                                                                                        // 170\n    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);                                                      // 171\n    return !!(inst && inst._hostParent);                                                                               // 172\n  }                                                                                                                    // 173\n}                                                                                                                      // 174\n                                                                                                                       // 175\n/**                                                                                                                    // 176\n * True if the supplied DOM node is a React DOM element and                                                            // 177\n * it has been rendered by another copy of React.                                                                      // 178\n *                                                                                                                     // 179\n * @param {?DOMElement} node The candidate DOM node.                                                                   // 180\n * @return {boolean} True if the DOM has been rendered by another copy of React                                        // 181\n * @internal                                                                                                           // 182\n */                                                                                                                    // 183\nfunction nodeIsRenderedByOtherInstance(container) {                                                                    // 184\n  var rootEl = getReactRootElementInContainer(container);                                                              // 185\n  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));                      // 186\n}                                                                                                                      // 187\n                                                                                                                       // 188\n/**                                                                                                                    // 189\n * True if the supplied DOM node is a valid node element.                                                              // 190\n *                                                                                                                     // 191\n * @param {?DOMElement} node The candidate DOM node.                                                                   // 192\n * @return {boolean} True if the DOM is a valid DOM node.                                                              // 193\n * @internal                                                                                                           // 194\n */                                                                                                                    // 195\nfunction isValidContainer(node) {                                                                                      // 196\n  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));\n}                                                                                                                      // 198\n                                                                                                                       // 199\n/**                                                                                                                    // 200\n * True if the supplied DOM node is a valid React node element.                                                        // 201\n *                                                                                                                     // 202\n * @param {?DOMElement} node The candidate DOM node.                                                                   // 203\n * @return {boolean} True if the DOM is a valid React DOM node.                                                        // 204\n * @internal                                                                                                           // 205\n */                                                                                                                    // 206\nfunction isReactNode(node) {                                                                                           // 207\n  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));                // 208\n}                                                                                                                      // 209\n                                                                                                                       // 210\nfunction getHostRootInstanceInContainer(container) {                                                                   // 211\n  var rootEl = getReactRootElementInContainer(container);                                                              // 212\n  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);                                  // 213\n  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;                                  // 214\n}                                                                                                                      // 215\n                                                                                                                       // 216\nfunction getTopLevelWrapperInContainer(container) {                                                                    // 217\n  var root = getHostRootInstanceInContainer(container);                                                                // 218\n  return root ? root._hostContainerInfo._topLevelWrapper : null;                                                       // 219\n}                                                                                                                      // 220\n                                                                                                                       // 221\n/**                                                                                                                    // 222\n * Temporary (?) hack so that we can store all top-level pending updates on                                            // 223\n * composites instead of having to worry about different types of components                                           // 224\n * here.                                                                                                               // 225\n */                                                                                                                    // 226\nvar topLevelRootCounter = 1;                                                                                           // 227\nvar TopLevelWrapper = function () {                                                                                    // 228\n  this.rootID = topLevelRootCounter++;                                                                                 // 229\n};                                                                                                                     // 230\nTopLevelWrapper.prototype.isReactComponent = {};                                                                       // 231\nif (process.env.NODE_ENV !== 'production') {                                                                           // 232\n  TopLevelWrapper.displayName = 'TopLevelWrapper';                                                                     // 233\n}                                                                                                                      // 234\nTopLevelWrapper.prototype.render = function () {                                                                       // 235\n  return this.props.child;                                                                                             // 236\n};                                                                                                                     // 237\nTopLevelWrapper.isReactTopLevelWrapper = true;                                                                         // 238\n                                                                                                                       // 239\n/**                                                                                                                    // 240\n * Mounting is the process of initializing a React component by creating its                                           // 241\n * representative DOM elements and inserting them into a supplied `container`.                                         // 242\n * Any prior content inside `container` is destroyed in the process.                                                   // 243\n *                                                                                                                     // 244\n *   ReactMount.render(                                                                                                // 245\n *     component,                                                                                                      // 246\n *     document.getElementById('container')                                                                            // 247\n *   );                                                                                                                // 248\n *                                                                                                                     // 249\n *   <div id=\"container\">                   <-- Supplied `container`.                                                  // 250\n *     <div data-reactid=\".3\">              <-- Rendered reactRoot of React                                            // 251\n *       // ...                                 component.                                                             // 252\n *     </div>                                                                                                          // 253\n *   </div>                                                                                                            // 254\n *                                                                                                                     // 255\n * Inside of `container`, the first element rendered is the \"reactRoot\".                                               // 256\n */                                                                                                                    // 257\nvar ReactMount = {                                                                                                     // 258\n  TopLevelWrapper: TopLevelWrapper,                                                                                    // 259\n                                                                                                                       // 260\n  /**                                                                                                                  // 261\n   * Used by devtools. The keys are not important.                                                                     // 262\n   */                                                                                                                  // 263\n  _instancesByReactRootID: instancesByReactRootID,                                                                     // 264\n                                                                                                                       // 265\n  /**                                                                                                                  // 266\n   * This is a hook provided to support rendering React components while                                               // 267\n   * ensuring that the apparent scroll position of its `container` does not                                            // 268\n   * change.                                                                                                           // 269\n   *                                                                                                                   // 270\n   * @param {DOMElement} container The `container` being rendered into.                                                // 271\n   * @param {function} renderCallback This must be called once to do the render.                                       // 272\n   */                                                                                                                  // 273\n  scrollMonitor: function (container, renderCallback) {                                                                // 274\n    renderCallback();                                                                                                  // 275\n  },                                                                                                                   // 276\n                                                                                                                       // 277\n  /**                                                                                                                  // 278\n   * Take a component that's already mounted into the DOM and replace its props                                        // 279\n   * @param {ReactComponent} prevComponent component instance already in the DOM                                       // 280\n   * @param {ReactElement} nextElement component instance to render                                                    // 281\n   * @param {DOMElement} container container to render into                                                            // 282\n   * @param {?function} callback function triggered on completion                                                      // 283\n   */                                                                                                                  // 284\n  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {                      // 285\n    ReactMount.scrollMonitor(container, function () {                                                                  // 286\n      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);                                // 287\n      if (callback) {                                                                                                  // 288\n        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);                                             // 289\n      }                                                                                                                // 290\n    });                                                                                                                // 291\n                                                                                                                       // 292\n    return prevComponent;                                                                                              // 293\n  },                                                                                                                   // 294\n                                                                                                                       // 295\n  /**                                                                                                                  // 296\n   * Render a new component into the DOM. Hooked by hooks!                                                             // 297\n   *                                                                                                                   // 298\n   * @param {ReactElement} nextElement element to render                                                               // 299\n   * @param {DOMElement} container container to render into                                                            // 300\n   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion                                         // 301\n   * @return {ReactComponent} nextComponent                                                                            // 302\n   */                                                                                                                  // 303\n  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {                             // 304\n    // Various parts of our code (such as ReactCompositeComponent's                                                    // 305\n    // _renderValidatedComponent) assume that calls to render aren't nested;                                           // 306\n    // verify that that's the case.                                                                                    // 307\n    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;\n                                                                                                                       // 309\n    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;\n                                                                                                                       // 311\n    ReactBrowserEventEmitter.ensureScrollValueMonitoring();                                                            // 312\n    var componentInstance = instantiateReactComponent(nextElement, false);                                             // 313\n                                                                                                                       // 314\n    // The initial render is synchronous but any updates that happen during                                            // 315\n    // rendering, in componentWillMount or componentDidMount, will be batched                                          // 316\n    // according to the current batching strategy.                                                                     // 317\n                                                                                                                       // 318\n    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);\n                                                                                                                       // 320\n    var wrapperID = componentInstance._instance.rootID;                                                                // 321\n    instancesByReactRootID[wrapperID] = componentInstance;                                                             // 322\n                                                                                                                       // 323\n    return componentInstance;                                                                                          // 324\n  },                                                                                                                   // 325\n                                                                                                                       // 326\n  /**                                                                                                                  // 327\n   * Renders a React component into the DOM in the supplied `container`.                                               // 328\n   *                                                                                                                   // 329\n   * If the React component was previously rendered into `container`, this will                                        // 330\n   * perform an update on it and only mutate the DOM as necessary to reflect the                                       // 331\n   * latest React component.                                                                                           // 332\n   *                                                                                                                   // 333\n   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.                                // 334\n   * @param {ReactElement} nextElement Component element to render.                                                    // 335\n   * @param {DOMElement} container DOM element to render into.                                                         // 336\n   * @param {?function} callback function triggered on completion                                                      // 337\n   * @return {ReactComponent} Component instance rendered in `container`.                                              // 338\n   */                                                                                                                  // 339\n  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {                           // 340\n    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;\n    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);                  // 342\n  },                                                                                                                   // 343\n                                                                                                                       // 344\n  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {                          // 345\n    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');                                                    // 346\n    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? \" Instead of passing a string like 'div', pass \" + \"React.createElement('div') or <div />.\" : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : // Check if it quacks like an element\n    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? \" Instead of passing a string like 'div', pass \" + \"React.createElement('div') or <div />.\" : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;\n                                                                                                                       // 349\n    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;\n                                                                                                                       // 351\n    var nextWrappedElement = React.createElement(TopLevelWrapper, {                                                    // 352\n      child: nextElement                                                                                               // 353\n    });                                                                                                                // 354\n                                                                                                                       // 355\n    var nextContext;                                                                                                   // 356\n    if (parentComponent) {                                                                                             // 357\n      var parentInst = ReactInstanceMap.get(parentComponent);                                                          // 358\n      nextContext = parentInst._processChildContext(parentInst._context);                                              // 359\n    } else {                                                                                                           // 360\n      nextContext = emptyObject;                                                                                       // 361\n    }                                                                                                                  // 362\n                                                                                                                       // 363\n    var prevComponent = getTopLevelWrapperInContainer(container);                                                      // 364\n                                                                                                                       // 365\n    if (prevComponent) {                                                                                               // 366\n      var prevWrappedElement = prevComponent._currentElement;                                                          // 367\n      var prevElement = prevWrappedElement.props.child;                                                                // 368\n      if (shouldUpdateReactComponent(prevElement, nextElement)) {                                                      // 369\n        var publicInst = prevComponent._renderedComponent.getPublicInstance();                                         // 370\n        var updatedCallback = callback && function () {                                                                // 371\n          callback.call(publicInst);                                                                                   // 372\n        };                                                                                                             // 373\n        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);   // 374\n        return publicInst;                                                                                             // 375\n      } else {                                                                                                         // 376\n        ReactMount.unmountComponentAtNode(container);                                                                  // 377\n      }                                                                                                                // 378\n    }                                                                                                                  // 379\n                                                                                                                       // 380\n    var reactRootElement = getReactRootElementInContainer(container);                                                  // 381\n    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);                               // 382\n    var containerHasNonRootReactChild = hasNonRootReactChild(container);                                               // 383\n                                                                                                                       // 384\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 385\n      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;\n                                                                                                                       // 387\n      if (!containerHasReactMarkup || reactRootElement.nextSibling) {                                                  // 388\n        var rootElementSibling = reactRootElement;                                                                     // 389\n        while (rootElementSibling) {                                                                                   // 390\n          if (internalGetID(rootElementSibling)) {                                                                     // 391\n            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;\n            break;                                                                                                     // 393\n          }                                                                                                            // 394\n          rootElementSibling = rootElementSibling.nextSibling;                                                         // 395\n        }                                                                                                              // 396\n      }                                                                                                                // 397\n    }                                                                                                                  // 398\n                                                                                                                       // 399\n    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;               // 400\n    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();\n    if (callback) {                                                                                                    // 402\n      callback.call(component);                                                                                        // 403\n    }                                                                                                                  // 404\n    return component;                                                                                                  // 405\n  },                                                                                                                   // 406\n                                                                                                                       // 407\n  /**                                                                                                                  // 408\n   * Renders a React component into the DOM in the supplied `container`.                                               // 409\n   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render                                      // 410\n   *                                                                                                                   // 411\n   * If the React component was previously rendered into `container`, this will                                        // 412\n   * perform an update on it and only mutate the DOM as necessary to reflect the                                       // 413\n   * latest React component.                                                                                           // 414\n   *                                                                                                                   // 415\n   * @param {ReactElement} nextElement Component element to render.                                                    // 416\n   * @param {DOMElement} container DOM element to render into.                                                         // 417\n   * @param {?function} callback function triggered on completion                                                      // 418\n   * @return {ReactComponent} Component instance rendered in `container`.                                              // 419\n   */                                                                                                                  // 420\n  render: function (nextElement, container, callback) {                                                                // 421\n    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);                             // 422\n  },                                                                                                                   // 423\n                                                                                                                       // 424\n  /**                                                                                                                  // 425\n   * Unmounts and destroys the React component rendered in the `container`.                                            // 426\n   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode                      // 427\n   *                                                                                                                   // 428\n   * @param {DOMElement} container DOM element containing a React component.                                           // 429\n   * @return {boolean} True if a component was found in and unmounted from                                             // 430\n   *                   `container`                                                                                     // 431\n   */                                                                                                                  // 432\n  unmountComponentAtNode: function (container) {                                                                       // 433\n    // Various parts of our code (such as ReactCompositeComponent's                                                    // 434\n    // _renderValidatedComponent) assume that calls to render aren't nested;                                           // 435\n    // verify that that's the case. (Strictly speaking, unmounting won't cause a                                       // 436\n    // render but we still don't expect to be in a render call here.)                                                  // 437\n    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;\n                                                                                                                       // 439\n    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;\n                                                                                                                       // 441\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 442\n      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), \"unmountComponentAtNode(): The node you're attempting to unmount \" + 'was rendered by another copy of React.') : void 0;\n    }                                                                                                                  // 444\n                                                                                                                       // 445\n    var prevComponent = getTopLevelWrapperInContainer(container);                                                      // 446\n    if (!prevComponent) {                                                                                              // 447\n      // Check if the node being unmounted was rendered by React, but isn't a                                          // 448\n      // root node.                                                                                                    // 449\n      var containerHasNonRootReactChild = hasNonRootReactChild(container);                                             // 450\n                                                                                                                       // 451\n      // Check if the container itself is a React root node.                                                           // 452\n      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);                   // 453\n                                                                                                                       // 454\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 455\n        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, \"unmountComponentAtNode(): The node you're attempting to unmount \" + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;\n      }                                                                                                                // 457\n                                                                                                                       // 458\n      return false;                                                                                                    // 459\n    }                                                                                                                  // 460\n    delete instancesByReactRootID[prevComponent._instance.rootID];                                                     // 461\n    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);                            // 462\n    return true;                                                                                                       // 463\n  },                                                                                                                   // 464\n                                                                                                                       // 465\n  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {                        // 466\n    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;\n                                                                                                                       // 468\n    if (shouldReuseMarkup) {                                                                                           // 469\n      var rootElement = getReactRootElementInContainer(container);                                                     // 470\n      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {                                                   // 471\n        ReactDOMComponentTree.precacheNode(instance, rootElement);                                                     // 472\n        return;                                                                                                        // 473\n      } else {                                                                                                         // 474\n        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);                               // 475\n        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);                                           // 476\n                                                                                                                       // 477\n        var rootMarkup = rootElement.outerHTML;                                                                        // 478\n        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);                                    // 479\n                                                                                                                       // 480\n        var normalizedMarkup = markup;                                                                                 // 481\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 482\n          // because rootMarkup is retrieved from the DOM, various normalizations                                      // 483\n          // will have occurred which will not be present in `markup`. Here,                                           // 484\n          // insert markup into a <div> or <iframe> depending on the container                                         // 485\n          // type to perform the same normalizations before comparing.                                                 // 486\n          var normalizer;                                                                                              // 487\n          if (container.nodeType === ELEMENT_NODE_TYPE) {                                                              // 488\n            normalizer = document.createElement('div');                                                                // 489\n            normalizer.innerHTML = markup;                                                                             // 490\n            normalizedMarkup = normalizer.innerHTML;                                                                   // 491\n          } else {                                                                                                     // 492\n            normalizer = document.createElement('iframe');                                                             // 493\n            document.body.appendChild(normalizer);                                                                     // 494\n            normalizer.contentDocument.write(markup);                                                                  // 495\n            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;                                   // 496\n            document.body.removeChild(normalizer);                                                                     // 497\n          }                                                                                                            // 498\n        }                                                                                                              // 499\n                                                                                                                       // 500\n        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);                                            // 501\n        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);\n                                                                                                                       // 503\n        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\\n%s', difference) : _prodInvariant('42', difference) : void 0;\n                                                                                                                       // 505\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 506\n          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\\n%s', difference) : void 0;\n        }                                                                                                              // 508\n      }                                                                                                                // 509\n    }                                                                                                                  // 510\n                                                                                                                       // 511\n    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\\'re trying to render a component to the document but you didn\\'t use server rendering. We can\\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;\n                                                                                                                       // 513\n    if (transaction.useCreateElement) {                                                                                // 514\n      while (container.lastChild) {                                                                                    // 515\n        container.removeChild(container.lastChild);                                                                    // 516\n      }                                                                                                                // 517\n      DOMLazyTree.insertTreeBefore(container, markup, null);                                                           // 518\n    } else {                                                                                                           // 519\n      setInnerHTML(container, markup);                                                                                 // 520\n      ReactDOMComponentTree.precacheNode(instance, container.firstChild);                                              // 521\n    }                                                                                                                  // 522\n                                                                                                                       // 523\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 524\n      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);                                  // 525\n      if (hostNode._debugID !== 0) {                                                                                   // 526\n        ReactInstrumentation.debugTool.onHostOperation({                                                               // 527\n          instanceID: hostNode._debugID,                                                                               // 528\n          type: 'mount',                                                                                               // 529\n          payload: markup.toString()                                                                                   // 530\n        });                                                                                                            // 531\n      }                                                                                                                // 532\n    }                                                                                                                  // 533\n  }                                                                                                                    // 534\n};                                                                                                                     // 535\n                                                                                                                       // 536\nmodule.exports = ReactMount;                                                                                           // 537\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDOMContainerInfo.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactDOMContainerInfo.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar validateDOMNesting = require('./validateDOMNesting');                                                              // 13\n                                                                                                                       // 14\nvar DOC_NODE_TYPE = 9;                                                                                                 // 15\n                                                                                                                       // 16\nfunction ReactDOMContainerInfo(topLevelWrapper, node) {                                                                // 17\n  var info = {                                                                                                         // 18\n    _topLevelWrapper: topLevelWrapper,                                                                                 // 19\n    _idCounter: 1,                                                                                                     // 20\n    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,                         // 21\n    _node: node,                                                                                                       // 22\n    _tag: node ? node.nodeName.toLowerCase() : null,                                                                   // 23\n    _namespaceURI: node ? node.namespaceURI : null                                                                     // 24\n  };                                                                                                                   // 25\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 26\n    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;                  // 27\n  }                                                                                                                    // 28\n  return info;                                                                                                         // 29\n}                                                                                                                      // 30\n                                                                                                                       // 31\nmodule.exports = ReactDOMContainerInfo;                                                                                // 32\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDOMFeatureFlags.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactDOMFeatureFlags.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar ReactDOMFeatureFlags = {                                                                                           // 13\n  useCreateElement: true,                                                                                              // 14\n  useFiber: false                                                                                                      // 15\n};                                                                                                                     // 16\n                                                                                                                       // 17\nmodule.exports = ReactDOMFeatureFlags;                                                                                 // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactMarkupChecksum.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactMarkupChecksum.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar adler32 = require('./adler32');                                                                                    // 13\n                                                                                                                       // 14\nvar TAG_END = /\\/?>/;                                                                                                  // 15\nvar COMMENT_START = /^<\\!\\-\\-/;                                                                                        // 16\n                                                                                                                       // 17\nvar ReactMarkupChecksum = {                                                                                            // 18\n  CHECKSUM_ATTR_NAME: 'data-react-checksum',                                                                           // 19\n                                                                                                                       // 20\n  /**                                                                                                                  // 21\n   * @param {string} markup Markup string                                                                              // 22\n   * @return {string} Markup string with checksum attribute attached                                                   // 23\n   */                                                                                                                  // 24\n  addChecksumToMarkup: function (markup) {                                                                             // 25\n    var checksum = adler32(markup);                                                                                    // 26\n                                                                                                                       // 27\n    // Add checksum (handle both parent tags, comments and self-closing tags)                                          // 28\n    if (COMMENT_START.test(markup)) {                                                                                  // 29\n      return markup;                                                                                                   // 30\n    } else {                                                                                                           // 31\n      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '=\"' + checksum + '\"$&');          // 32\n    }                                                                                                                  // 33\n  },                                                                                                                   // 34\n                                                                                                                       // 35\n  /**                                                                                                                  // 36\n   * @param {string} markup to use                                                                                     // 37\n   * @param {DOMElement} element root React element                                                                    // 38\n   * @returns {boolean} whether or not the markup is the same                                                          // 39\n   */                                                                                                                  // 40\n  canReuseMarkup: function (markup, element) {                                                                         // 41\n    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);                               // 42\n    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);                                             // 43\n    var markupChecksum = adler32(markup);                                                                              // 44\n    return markupChecksum === existingChecksum;                                                                        // 45\n  }                                                                                                                    // 46\n};                                                                                                                     // 47\n                                                                                                                       // 48\nmodule.exports = ReactMarkupChecksum;                                                                                  // 49\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"adler32.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/adler32.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar MOD = 65521;                                                                                                       // 14\n                                                                                                                       // 15\n// adler32 is not cryptographically strong, and is only used to sanity check that                                      // 16\n// markup generated on the server matches the markup generated on the client.                                          // 17\n// This implementation (a modified version of the SheetJS version) has been optimized                                  // 18\n// for our use case, at the expense of conforming to the adler32 specification                                         // 19\n// for non-ascii inputs.                                                                                               // 20\nfunction adler32(data) {                                                                                               // 21\n  var a = 1;                                                                                                           // 22\n  var b = 0;                                                                                                           // 23\n  var i = 0;                                                                                                           // 24\n  var l = data.length;                                                                                                 // 25\n  var m = l & ~0x3;                                                                                                    // 26\n  while (i < m) {                                                                                                      // 27\n    var n = Math.min(i + 4096, m);                                                                                     // 28\n    for (; i < n; i += 4) {                                                                                            // 29\n      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));\n    }                                                                                                                  // 31\n    a %= MOD;                                                                                                          // 32\n    b %= MOD;                                                                                                          // 33\n  }                                                                                                                    // 34\n  for (; i < l; i++) {                                                                                                 // 35\n    b += a += data.charCodeAt(i);                                                                                      // 36\n  }                                                                                                                    // 37\n  a %= MOD;                                                                                                            // 38\n  b %= MOD;                                                                                                            // 39\n  return a | b << 16;                                                                                                  // 40\n}                                                                                                                      // 41\n                                                                                                                       // 42\nmodule.exports = adler32;                                                                                              // 43\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactVersion.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactVersion.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nmodule.exports = '15.6.1';                                                                                             // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"findDOMNode.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/findDOMNode.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 13\n                                                                                                                       // 14\nvar ReactCurrentOwner = require('react/lib/ReactCurrentOwner');                                                        // 15\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 16\nvar ReactInstanceMap = require('./ReactInstanceMap');                                                                  // 17\n                                                                                                                       // 18\nvar getHostComponentFromComposite = require('./getHostComponentFromComposite');                                        // 19\nvar invariant = require('fbjs/lib/invariant');                                                                         // 20\nvar warning = require('fbjs/lib/warning');                                                                             // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * Returns the DOM node rendered by this element.                                                                      // 24\n *                                                                                                                     // 25\n * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode                                   // 26\n *                                                                                                                     // 27\n * @param {ReactComponent|DOMElement} componentOrElement                                                               // 28\n * @return {?DOMElement} The root node of this element.                                                                // 29\n */                                                                                                                    // 30\nfunction findDOMNode(componentOrElement) {                                                                             // 31\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 32\n    var owner = ReactCurrentOwner.current;                                                                             // 33\n    if (owner !== null) {                                                                                              // 34\n      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;\n      owner._warnedAboutRefsInRender = true;                                                                           // 36\n    }                                                                                                                  // 37\n  }                                                                                                                    // 38\n  if (componentOrElement == null) {                                                                                    // 39\n    return null;                                                                                                       // 40\n  }                                                                                                                    // 41\n  if (componentOrElement.nodeType === 1) {                                                                             // 42\n    return componentOrElement;                                                                                         // 43\n  }                                                                                                                    // 44\n                                                                                                                       // 45\n  var inst = ReactInstanceMap.get(componentOrElement);                                                                 // 46\n  if (inst) {                                                                                                          // 47\n    inst = getHostComponentFromComposite(inst);                                                                        // 48\n    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;                                              // 49\n  }                                                                                                                    // 50\n                                                                                                                       // 51\n  if (typeof componentOrElement.render === 'function') {                                                               // 52\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;\n  } else {                                                                                                             // 54\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;\n  }                                                                                                                    // 56\n}                                                                                                                      // 57\n                                                                                                                       // 58\nmodule.exports = findDOMNode;                                                                                          // 59\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getHostComponentFromComposite.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/getHostComponentFromComposite.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar ReactNodeTypes = require('./ReactNodeTypes');                                                                      // 13\n                                                                                                                       // 14\nfunction getHostComponentFromComposite(inst) {                                                                         // 15\n  var type;                                                                                                            // 16\n                                                                                                                       // 17\n  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {                                               // 18\n    inst = inst._renderedComponent;                                                                                    // 19\n  }                                                                                                                    // 20\n                                                                                                                       // 21\n  if (type === ReactNodeTypes.HOST) {                                                                                  // 22\n    return inst._renderedComponent;                                                                                    // 23\n  } else if (type === ReactNodeTypes.EMPTY) {                                                                          // 24\n    return null;                                                                                                       // 25\n  }                                                                                                                    // 26\n}                                                                                                                      // 27\n                                                                                                                       // 28\nmodule.exports = getHostComponentFromComposite;                                                                        // 29\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"renderSubtreeIntoContainer.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/renderSubtreeIntoContainer.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar ReactMount = require('./ReactMount');                                                                              // 13\n                                                                                                                       // 14\nmodule.exports = ReactMount.renderSubtreeIntoContainer;                                                                // 15\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDOMUnknownPropertyHook.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactDOMUnknownPropertyHook.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar DOMProperty = require('./DOMProperty');                                                                            // 13\nvar EventPluginRegistry = require('./EventPluginRegistry');                                                            // 14\nvar ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');                                              // 15\n                                                                                                                       // 16\nvar warning = require('fbjs/lib/warning');                                                                             // 17\n                                                                                                                       // 18\nif (process.env.NODE_ENV !== 'production') {                                                                           // 19\n  var reactProps = {                                                                                                   // 20\n    children: true,                                                                                                    // 21\n    dangerouslySetInnerHTML: true,                                                                                     // 22\n    key: true,                                                                                                         // 23\n    ref: true,                                                                                                         // 24\n                                                                                                                       // 25\n    autoFocus: true,                                                                                                   // 26\n    defaultValue: true,                                                                                                // 27\n    valueLink: true,                                                                                                   // 28\n    defaultChecked: true,                                                                                              // 29\n    checkedLink: true,                                                                                                 // 30\n    innerHTML: true,                                                                                                   // 31\n    suppressContentEditableWarning: true,                                                                              // 32\n    onFocusIn: true,                                                                                                   // 33\n    onFocusOut: true                                                                                                   // 34\n  };                                                                                                                   // 35\n  var warnedProperties = {};                                                                                           // 36\n                                                                                                                       // 37\n  var validateProperty = function (tagName, name, debugID) {                                                           // 38\n    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {                          // 39\n      return true;                                                                                                     // 40\n    }                                                                                                                  // 41\n    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {\n      return true;                                                                                                     // 43\n    }                                                                                                                  // 44\n    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {                                            // 45\n      return true;                                                                                                     // 46\n    }                                                                                                                  // 47\n    warnedProperties[name] = true;                                                                                     // 48\n    var lowerCasedName = name.toLowerCase();                                                                           // 49\n                                                                                                                       // 50\n    // data-* attributes should be lowercase; suggest the lowercase version                                            // 51\n    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;\n                                                                                                                       // 53\n    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;\n                                                                                                                       // 55\n    if (standardName != null) {                                                                                        // 56\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;\n      return true;                                                                                                     // 58\n    } else if (registrationName != null) {                                                                             // 59\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;\n      return true;                                                                                                     // 61\n    } else {                                                                                                           // 62\n      // We were unable to guess which prop the user intended.                                                         // 63\n      // It is likely that the user was just blindly spreading/forwarding props                                        // 64\n      // Components should be careful to only render valid props/attributes.                                           // 65\n      // Warning will be invoked in warnUnknownProperties to allow grouping.                                           // 66\n      return false;                                                                                                    // 67\n    }                                                                                                                  // 68\n  };                                                                                                                   // 69\n}                                                                                                                      // 70\n                                                                                                                       // 71\nvar warnUnknownProperties = function (debugID, element) {                                                              // 72\n  var unknownProps = [];                                                                                               // 73\n  for (var key in element.props) {                                                                                     // 74\n    var isValid = validateProperty(element.type, key, debugID);                                                        // 75\n    if (!isValid) {                                                                                                    // 76\n      unknownProps.push(key);                                                                                          // 77\n    }                                                                                                                  // 78\n  }                                                                                                                    // 79\n                                                                                                                       // 80\n  var unknownPropString = unknownProps.map(function (prop) {                                                           // 81\n    return '`' + prop + '`';                                                                                           // 82\n  }).join(', ');                                                                                                       // 83\n                                                                                                                       // 84\n  if (unknownProps.length === 1) {                                                                                     // 85\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;\n  } else if (unknownProps.length > 1) {                                                                                // 87\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;\n  }                                                                                                                    // 89\n};                                                                                                                     // 90\n                                                                                                                       // 91\nfunction handleElement(debugID, element) {                                                                             // 92\n  if (element == null || typeof element.type !== 'string') {                                                           // 93\n    return;                                                                                                            // 94\n  }                                                                                                                    // 95\n  if (element.type.indexOf('-') >= 0 || element.props.is) {                                                            // 96\n    return;                                                                                                            // 97\n  }                                                                                                                    // 98\n  warnUnknownProperties(debugID, element);                                                                             // 99\n}                                                                                                                      // 100\n                                                                                                                       // 101\nvar ReactDOMUnknownPropertyHook = {                                                                                    // 102\n  onBeforeMountComponent: function (debugID, element) {                                                                // 103\n    handleElement(debugID, element);                                                                                   // 104\n  },                                                                                                                   // 105\n  onBeforeUpdateComponent: function (debugID, element) {                                                               // 106\n    handleElement(debugID, element);                                                                                   // 107\n  }                                                                                                                    // 108\n};                                                                                                                     // 109\n                                                                                                                       // 110\nmodule.exports = ReactDOMUnknownPropertyHook;                                                                          // 111\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDOMNullInputValuePropHook.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactDOMNullInputValuePropHook.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');                                              // 13\n                                                                                                                       // 14\nvar warning = require('fbjs/lib/warning');                                                                             // 15\n                                                                                                                       // 16\nvar didWarnValueNull = false;                                                                                          // 17\n                                                                                                                       // 18\nfunction handleElement(debugID, element) {                                                                             // 19\n  if (element == null) {                                                                                               // 20\n    return;                                                                                                            // 21\n  }                                                                                                                    // 22\n  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {                          // 23\n    return;                                                                                                            // 24\n  }                                                                                                                    // 25\n  if (element.props != null && element.props.value === null && !didWarnValueNull) {                                    // 26\n    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;\n                                                                                                                       // 28\n    didWarnValueNull = true;                                                                                           // 29\n  }                                                                                                                    // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\nvar ReactDOMNullInputValuePropHook = {                                                                                 // 33\n  onBeforeMountComponent: function (debugID, element) {                                                                // 34\n    handleElement(debugID, element);                                                                                   // 35\n  },                                                                                                                   // 36\n  onBeforeUpdateComponent: function (debugID, element) {                                                               // 37\n    handleElement(debugID, element);                                                                                   // 38\n  }                                                                                                                    // 39\n};                                                                                                                     // 40\n                                                                                                                       // 41\nmodule.exports = ReactDOMNullInputValuePropHook;                                                                       // 42\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDOMInvalidARIAHook.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/lib/ReactDOMInvalidARIAHook.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar DOMProperty = require('./DOMProperty');                                                                            // 13\nvar ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');                                              // 14\n                                                                                                                       // 15\nvar warning = require('fbjs/lib/warning');                                                                             // 16\n                                                                                                                       // 17\nvar warnedProperties = {};                                                                                             // 18\nvar rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');                                         // 19\n                                                                                                                       // 20\nfunction validateProperty(tagName, name, debugID) {                                                                    // 21\n  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {                                               // 22\n    return true;                                                                                                       // 23\n  }                                                                                                                    // 24\n                                                                                                                       // 25\n  if (rARIA.test(name)) {                                                                                              // 26\n    var lowerCasedName = name.toLowerCase();                                                                           // 27\n    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;\n                                                                                                                       // 29\n    // If this is an aria-* attribute, but is not listed in the known DOM                                              // 30\n    // DOM properties, then it is an invalid aria-* attribute.                                                         // 31\n    if (standardName == null) {                                                                                        // 32\n      warnedProperties[name] = true;                                                                                   // 33\n      return false;                                                                                                    // 34\n    }                                                                                                                  // 35\n    // aria-* attributes should be lowercase; suggest the lowercase version.                                           // 36\n    if (name !== standardName) {                                                                                       // 37\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;\n      warnedProperties[name] = true;                                                                                   // 39\n      return true;                                                                                                     // 40\n    }                                                                                                                  // 41\n  }                                                                                                                    // 42\n                                                                                                                       // 43\n  return true;                                                                                                         // 44\n}                                                                                                                      // 45\n                                                                                                                       // 46\nfunction warnInvalidARIAProps(debugID, element) {                                                                      // 47\n  var invalidProps = [];                                                                                               // 48\n                                                                                                                       // 49\n  for (var key in element.props) {                                                                                     // 50\n    var isValid = validateProperty(element.type, key, debugID);                                                        // 51\n    if (!isValid) {                                                                                                    // 52\n      invalidProps.push(key);                                                                                          // 53\n    }                                                                                                                  // 54\n  }                                                                                                                    // 55\n                                                                                                                       // 56\n  var unknownPropString = invalidProps.map(function (prop) {                                                           // 57\n    return '`' + prop + '`';                                                                                           // 58\n  }).join(', ');                                                                                                       // 59\n                                                                                                                       // 60\n  if (invalidProps.length === 1) {                                                                                     // 61\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;\n  } else if (invalidProps.length > 1) {                                                                                // 63\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;\n  }                                                                                                                    // 65\n}                                                                                                                      // 66\n                                                                                                                       // 67\nfunction handleElement(debugID, element) {                                                                             // 68\n  if (element == null || typeof element.type !== 'string') {                                                           // 69\n    return;                                                                                                            // 70\n  }                                                                                                                    // 71\n  if (element.type.indexOf('-') >= 0 || element.props.is) {                                                            // 72\n    return;                                                                                                            // 73\n  }                                                                                                                    // 74\n                                                                                                                       // 75\n  warnInvalidARIAProps(debugID, element);                                                                              // 76\n}                                                                                                                      // 77\n                                                                                                                       // 78\nvar ReactDOMInvalidARIAHook = {                                                                                        // 79\n  onBeforeMountComponent: function (debugID, element) {                                                                // 80\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 81\n      handleElement(debugID, element);                                                                                 // 82\n    }                                                                                                                  // 83\n  },                                                                                                                   // 84\n  onBeforeUpdateComponent: function (debugID, element) {                                                               // 85\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 86\n      handleElement(debugID, element);                                                                                 // 87\n    }                                                                                                                  // 88\n  }                                                                                                                    // 89\n};                                                                                                                     // 90\n                                                                                                                       // 91\nmodule.exports = ReactDOMInvalidARIAHook;                                                                              // 92\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"fbjs\":{\"lib\":{\"invariant.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/invariant.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * Use invariant() to assert state which your program assumes to be true.                                              // 14\n *                                                                                                                     // 15\n * Provide sprintf-style format (only %s is supported) and arguments                                                   // 16\n * to provide information about what broke and what you were                                                           // 17\n * expecting.                                                                                                          // 18\n *                                                                                                                     // 19\n * The invariant message will be stripped in production, but the invariant                                             // 20\n * will remain to ensure logic does not differ in production.                                                          // 21\n */                                                                                                                    // 22\n                                                                                                                       // 23\nvar validateFormat = function validateFormat(format) {};                                                               // 24\n                                                                                                                       // 25\nif (process.env.NODE_ENV !== 'production') {                                                                           // 26\n  validateFormat = function validateFormat(format) {                                                                   // 27\n    if (format === undefined) {                                                                                        // 28\n      throw new Error('invariant requires an error message argument');                                                 // 29\n    }                                                                                                                  // 30\n  };                                                                                                                   // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\nfunction invariant(condition, format, a, b, c, d, e, f) {                                                              // 34\n  validateFormat(format);                                                                                              // 35\n                                                                                                                       // 36\n  if (!condition) {                                                                                                    // 37\n    var error;                                                                                                         // 38\n    if (format === undefined) {                                                                                        // 39\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {                                                                                                           // 41\n      var args = [a, b, c, d, e, f];                                                                                   // 42\n      var argIndex = 0;                                                                                                // 43\n      error = new Error(format.replace(/%s/g, function () {                                                            // 44\n        return args[argIndex++];                                                                                       // 45\n      }));                                                                                                             // 46\n      error.name = 'Invariant Violation';                                                                              // 47\n    }                                                                                                                  // 48\n                                                                                                                       // 49\n    error.framesToPop = 1; // we don't care about invariant's own frame                                                // 50\n    throw error;                                                                                                       // 51\n  }                                                                                                                    // 52\n}                                                                                                                      // 53\n                                                                                                                       // 54\nmodule.exports = invariant;                                                                                            // 55\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"warning.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/warning.js                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar emptyFunction = require('./emptyFunction');                                                                        // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Similar to invariant but only logs a warning if the condition is not met.                                           // 16\n * This can be used to log issues in development environments in critical                                              // 17\n * paths. Removing the logging code for production environments will keep the                                          // 18\n * same logic and follow the same code paths.                                                                          // 19\n */                                                                                                                    // 20\n                                                                                                                       // 21\nvar warning = emptyFunction;                                                                                           // 22\n                                                                                                                       // 23\nif (process.env.NODE_ENV !== 'production') {                                                                           // 24\n  var printWarning = function printWarning(format) {                                                                   // 25\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {          // 26\n      args[_key - 1] = arguments[_key];                                                                                // 27\n    }                                                                                                                  // 28\n                                                                                                                       // 29\n    var argIndex = 0;                                                                                                  // 30\n    var message = 'Warning: ' + format.replace(/%s/g, function () {                                                    // 31\n      return args[argIndex++];                                                                                         // 32\n    });                                                                                                                // 33\n    if (typeof console !== 'undefined') {                                                                              // 34\n      console.error(message);                                                                                          // 35\n    }                                                                                                                  // 36\n    try {                                                                                                              // 37\n      // --- Welcome to debugging React ---                                                                            // 38\n      // This error was thrown as a convenience so that you can use this stack                                         // 39\n      // to find the callsite that caused this warning to fire.                                                        // 40\n      throw new Error(message);                                                                                        // 41\n    } catch (x) {}                                                                                                     // 42\n  };                                                                                                                   // 43\n                                                                                                                       // 44\n  warning = function warning(condition, format) {                                                                      // 45\n    if (format === undefined) {                                                                                        // 46\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');               // 47\n    }                                                                                                                  // 48\n                                                                                                                       // 49\n    if (format.indexOf('Failed Composite propType: ') === 0) {                                                         // 50\n      return; // Ignore CompositeComponent proptype check.                                                             // 51\n    }                                                                                                                  // 52\n                                                                                                                       // 53\n    if (!condition) {                                                                                                  // 54\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];                                                                            // 56\n      }                                                                                                                // 57\n                                                                                                                       // 58\n      printWarning.apply(undefined, [format].concat(args));                                                            // 59\n    }                                                                                                                  // 60\n  };                                                                                                                   // 61\n}                                                                                                                      // 62\n                                                                                                                       // 63\nmodule.exports = warning;                                                                                              // 64\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"emptyFunction.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/emptyFunction.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n *                                                                                                                     // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\nfunction makeEmptyFunction(arg) {                                                                                      // 14\n  return function () {                                                                                                 // 15\n    return arg;                                                                                                        // 16\n  };                                                                                                                   // 17\n}                                                                                                                      // 18\n                                                                                                                       // 19\n/**                                                                                                                    // 20\n * This function accepts and discards inputs; it has no side effects. This is                                          // 21\n * primarily useful idiomatically for overridable function endpoints which                                             // 22\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.                                             // 23\n */                                                                                                                    // 24\nvar emptyFunction = function emptyFunction() {};                                                                       // 25\n                                                                                                                       // 26\nemptyFunction.thatReturns = makeEmptyFunction;                                                                         // 27\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);                                                             // 28\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);                                                               // 29\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);                                                               // 30\nemptyFunction.thatReturnsThis = function () {                                                                          // 31\n  return this;                                                                                                         // 32\n};                                                                                                                     // 33\nemptyFunction.thatReturnsArgument = function (arg) {                                                                   // 34\n  return arg;                                                                                                          // 35\n};                                                                                                                     // 36\n                                                                                                                       // 37\nmodule.exports = emptyFunction;                                                                                        // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ExecutionEnvironment.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/ExecutionEnvironment.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);                 // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Simple, lightweight module assisting with the detection and context of                                              // 16\n * Worker. Helps avoid circular dependencies and allows code to reason about                                           // 17\n * whether or not they are in a Worker, even if they never include the main                                            // 18\n * `ReactWorker` dependency.                                                                                           // 19\n */                                                                                                                    // 20\nvar ExecutionEnvironment = {                                                                                           // 21\n                                                                                                                       // 22\n  canUseDOM: canUseDOM,                                                                                                // 23\n                                                                                                                       // 24\n  canUseWorkers: typeof Worker !== 'undefined',                                                                        // 25\n                                                                                                                       // 26\n  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),                                // 27\n                                                                                                                       // 28\n  canUseViewport: canUseDOM && !!window.screen,                                                                        // 29\n                                                                                                                       // 30\n  isInWorker: !canUseDOM // For now, this is true - might change in the future.                                        // 31\n                                                                                                                       // 32\n};                                                                                                                     // 33\n                                                                                                                       // 34\nmodule.exports = ExecutionEnvironment;                                                                                 // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"performanceNow.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/performanceNow.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n * @typechecks                                                                                                         // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\nvar performance = require('./performance');                                                                            // 14\n                                                                                                                       // 15\nvar performanceNow;                                                                                                    // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Detect if we can use `window.performance.now()` and gracefully fallback to                                          // 19\n * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now                                           // 20\n * because of Facebook's testing infrastructure.                                                                       // 21\n */                                                                                                                    // 22\nif (performance.now) {                                                                                                 // 23\n  performanceNow = function performanceNow() {                                                                         // 24\n    return performance.now();                                                                                          // 25\n  };                                                                                                                   // 26\n} else {                                                                                                               // 27\n  performanceNow = function performanceNow() {                                                                         // 28\n    return Date.now();                                                                                                 // 29\n  };                                                                                                                   // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\nmodule.exports = performanceNow;                                                                                       // 33\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"performance.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/performance.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @typechecks                                                                                                         // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ExecutionEnvironment = require('./ExecutionEnvironment');                                                          // 14\n                                                                                                                       // 15\nvar performance;                                                                                                       // 16\n                                                                                                                       // 17\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 18\n  performance = window.performance || window.msPerformance || window.webkitPerformance;                                // 19\n}                                                                                                                      // 20\n                                                                                                                       // 21\nmodule.exports = performance || {};                                                                                    // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"createNodesFromMarkup.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/createNodesFromMarkup.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n * @typechecks                                                                                                         // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\n/*eslint-disable fb-www/unsafe-html*/                                                                                  // 14\n                                                                                                                       // 15\nvar ExecutionEnvironment = require('./ExecutionEnvironment');                                                          // 16\n                                                                                                                       // 17\nvar createArrayFromMixed = require('./createArrayFromMixed');                                                          // 18\nvar getMarkupWrap = require('./getMarkupWrap');                                                                        // 19\nvar invariant = require('./invariant');                                                                                // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n * Dummy container used to render all markup.                                                                          // 23\n */                                                                                                                    // 24\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;                                 // 25\n                                                                                                                       // 26\n/**                                                                                                                    // 27\n * Pattern used by `getNodeName`.                                                                                      // 28\n */                                                                                                                    // 29\nvar nodeNamePattern = /^\\s*<(\\w+)/;                                                                                    // 30\n                                                                                                                       // 31\n/**                                                                                                                    // 32\n * Extracts the `nodeName` of the first element in a string of markup.                                                 // 33\n *                                                                                                                     // 34\n * @param {string} markup String of markup.                                                                            // 35\n * @return {?string} Node name of the supplied markup.                                                                 // 36\n */                                                                                                                    // 37\nfunction getNodeName(markup) {                                                                                         // 38\n  var nodeNameMatch = markup.match(nodeNamePattern);                                                                   // 39\n  return nodeNameMatch && nodeNameMatch[1].toLowerCase();                                                              // 40\n}                                                                                                                      // 41\n                                                                                                                       // 42\n/**                                                                                                                    // 43\n * Creates an array containing the nodes rendered from the supplied markup. The                                        // 44\n * optionally supplied `handleScript` function will be invoked once for each                                           // 45\n * <script> element that is rendered. If no `handleScript` function is supplied,                                       // 46\n * an exception is thrown if any <script> elements are rendered.                                                       // 47\n *                                                                                                                     // 48\n * @param {string} markup A string of valid HTML markup.                                                               // 49\n * @param {?function} handleScript Invoked once for each rendered <script>.                                            // 50\n * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.                                                 // 51\n */                                                                                                                    // 52\nfunction createNodesFromMarkup(markup, handleScript) {                                                                 // 53\n  var node = dummyNode;                                                                                                // 54\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;\n  var nodeName = getNodeName(markup);                                                                                  // 56\n                                                                                                                       // 57\n  var wrap = nodeName && getMarkupWrap(nodeName);                                                                      // 58\n  if (wrap) {                                                                                                          // 59\n    node.innerHTML = wrap[1] + markup + wrap[2];                                                                       // 60\n                                                                                                                       // 61\n    var wrapDepth = wrap[0];                                                                                           // 62\n    while (wrapDepth--) {                                                                                              // 63\n      node = node.lastChild;                                                                                           // 64\n    }                                                                                                                  // 65\n  } else {                                                                                                             // 66\n    node.innerHTML = markup;                                                                                           // 67\n  }                                                                                                                    // 68\n                                                                                                                       // 69\n  var scripts = node.getElementsByTagName('script');                                                                   // 70\n  if (scripts.length) {                                                                                                // 71\n    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;\n    createArrayFromMixed(scripts).forEach(handleScript);                                                               // 73\n  }                                                                                                                    // 74\n                                                                                                                       // 75\n  var nodes = Array.from(node.childNodes);                                                                             // 76\n  while (node.lastChild) {                                                                                             // 77\n    node.removeChild(node.lastChild);                                                                                  // 78\n  }                                                                                                                    // 79\n  return nodes;                                                                                                        // 80\n}                                                                                                                      // 81\n                                                                                                                       // 82\nmodule.exports = createNodesFromMarkup;                                                                                // 83\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"createArrayFromMixed.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/createArrayFromMixed.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n * @typechecks                                                                                                         // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\nvar invariant = require('./invariant');                                                                                // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Convert array-like objects to arrays.                                                                               // 17\n *                                                                                                                     // 18\n * This API assumes the caller knows the contents of the data type. For less                                           // 19\n * well defined inputs use createArrayFromMixed.                                                                       // 20\n *                                                                                                                     // 21\n * @param {object|function|filelist} obj                                                                               // 22\n * @return {array}                                                                                                     // 23\n */                                                                                                                    // 24\nfunction toArray(obj) {                                                                                                // 25\n  var length = obj.length;                                                                                             // 26\n                                                                                                                       // 27\n  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList                                         // 28\n  // in old versions of Safari).                                                                                       // 29\n  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;\n                                                                                                                       // 31\n  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;\n                                                                                                                       // 33\n  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;\n                                                                                                                       // 35\n  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;\n                                                                                                                       // 37\n  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs                                           // 38\n  // without method will throw during the slice call and skip straight to the                                          // 39\n  // fallback.                                                                                                         // 40\n  if (obj.hasOwnProperty) {                                                                                            // 41\n    try {                                                                                                              // 42\n      return Array.prototype.slice.call(obj);                                                                          // 43\n    } catch (e) {                                                                                                      // 44\n      // IE < 9 does not support Array#slice on collections objects                                                    // 45\n    }                                                                                                                  // 46\n  }                                                                                                                    // 47\n                                                                                                                       // 48\n  // Fall back to copying key by key. This assumes all keys have a value,                                              // 49\n  // so will not preserve sparsely populated inputs.                                                                   // 50\n  var ret = Array(length);                                                                                             // 51\n  for (var ii = 0; ii < length; ii++) {                                                                                // 52\n    ret[ii] = obj[ii];                                                                                                 // 53\n  }                                                                                                                    // 54\n  return ret;                                                                                                          // 55\n}                                                                                                                      // 56\n                                                                                                                       // 57\n/**                                                                                                                    // 58\n * Perform a heuristic test to determine if an object is \"array-like\".                                                 // 59\n *                                                                                                                     // 60\n *   A monk asked Joshu, a Zen master, \"Has a dog Buddha nature?\"                                                      // 61\n *   Joshu replied: \"Mu.\"                                                                                              // 62\n *                                                                                                                     // 63\n * This function determines if its argument has \"array nature\": it returns                                             // 64\n * true if the argument is an actual array, an `arguments' object, or an                                               // 65\n * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).                                               // 66\n *                                                                                                                     // 67\n * It will return false for other array-like objects like Filelist.                                                    // 68\n *                                                                                                                     // 69\n * @param {*} obj                                                                                                      // 70\n * @return {boolean}                                                                                                   // 71\n */                                                                                                                    // 72\nfunction hasArrayNature(obj) {                                                                                         // 73\n  return (                                                                                                             // 74\n    // not null/false                                                                                                  // 75\n    !!obj && (                                                                                                         // 76\n    // arrays are objects, NodeLists are functions in Safari                                                           // 77\n    typeof obj == 'object' || typeof obj == 'function') &&                                                             // 78\n    // quacks like an array                                                                                            // 79\n    'length' in obj &&                                                                                                 // 80\n    // not window                                                                                                      // 81\n    !('setInterval' in obj) &&                                                                                         // 82\n    // no DOM node should be considered an array-like                                                                  // 83\n    // a 'select' element has 'length' and 'item' properties on IE8                                                    // 84\n    typeof obj.nodeType != 'number' && (                                                                               // 85\n    // a real array                                                                                                    // 86\n    Array.isArray(obj) ||                                                                                              // 87\n    // arguments                                                                                                       // 88\n    'callee' in obj ||                                                                                                 // 89\n    // HTMLCollection/NodeList                                                                                         // 90\n    'item' in obj)                                                                                                     // 91\n  );                                                                                                                   // 92\n}                                                                                                                      // 93\n                                                                                                                       // 94\n/**                                                                                                                    // 95\n * Ensure that the argument is an array by wrapping it in an array if it is not.                                       // 96\n * Creates a copy of the argument if it is already an array.                                                           // 97\n *                                                                                                                     // 98\n * This is mostly useful idiomatically:                                                                                // 99\n *                                                                                                                     // 100\n *   var createArrayFromMixed = require('createArrayFromMixed');                                                       // 101\n *                                                                                                                     // 102\n *   function takesOneOrMoreThings(things) {                                                                           // 103\n *     things = createArrayFromMixed(things);                                                                          // 104\n *     ...                                                                                                             // 105\n *   }                                                                                                                 // 106\n *                                                                                                                     // 107\n * This allows you to treat `things' as an array, but accept scalars in the API.                                       // 108\n *                                                                                                                     // 109\n * If you need to convert an array-like object, like `arguments`, into an array                                        // 110\n * use toArray instead.                                                                                                // 111\n *                                                                                                                     // 112\n * @param {*} obj                                                                                                      // 113\n * @return {array}                                                                                                     // 114\n */                                                                                                                    // 115\nfunction createArrayFromMixed(obj) {                                                                                   // 116\n  if (!hasArrayNature(obj)) {                                                                                          // 117\n    return [obj];                                                                                                      // 118\n  } else if (Array.isArray(obj)) {                                                                                     // 119\n    return obj.slice();                                                                                                // 120\n  } else {                                                                                                             // 121\n    return toArray(obj);                                                                                               // 122\n  }                                                                                                                    // 123\n}                                                                                                                      // 124\n                                                                                                                       // 125\nmodule.exports = createArrayFromMixed;                                                                                 // 126\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getMarkupWrap.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/getMarkupWrap.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n/*eslint-disable fb-www/unsafe-html */                                                                                 // 13\n                                                                                                                       // 14\nvar ExecutionEnvironment = require('./ExecutionEnvironment');                                                          // 15\n                                                                                                                       // 16\nvar invariant = require('./invariant');                                                                                // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * Dummy container used to detect which wraps are necessary.                                                           // 20\n */                                                                                                                    // 21\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;                                 // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * Some browsers cannot use `innerHTML` to render certain elements standalone,                                         // 25\n * so we wrap them, render the wrapped nodes, then extract the desired node.                                           // 26\n *                                                                                                                     // 27\n * In IE8, certain elements cannot render alone, so wrap all elements ('*').                                           // 28\n */                                                                                                                    // 29\n                                                                                                                       // 30\nvar shouldWrap = {};                                                                                                   // 31\n                                                                                                                       // 32\nvar selectWrap = [1, '<select multiple=\"true\">', '</select>'];                                                         // 33\nvar tableWrap = [1, '<table>', '</table>'];                                                                            // 34\nvar trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];                                                       // 35\n                                                                                                                       // 36\nvar svgWrap = [1, '<svg xmlns=\"http://www.w3.org/2000/svg\">', '</svg>'];                                               // 37\n                                                                                                                       // 38\nvar markupWrap = {                                                                                                     // 39\n  '*': [1, '?<div>', '</div>'],                                                                                        // 40\n                                                                                                                       // 41\n  'area': [1, '<map>', '</map>'],                                                                                      // 42\n  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],                                               // 43\n  'legend': [1, '<fieldset>', '</fieldset>'],                                                                          // 44\n  'param': [1, '<object>', '</object>'],                                                                               // 45\n  'tr': [2, '<table><tbody>', '</tbody></table>'],                                                                     // 46\n                                                                                                                       // 47\n  'optgroup': selectWrap,                                                                                              // 48\n  'option': selectWrap,                                                                                                // 49\n                                                                                                                       // 50\n  'caption': tableWrap,                                                                                                // 51\n  'colgroup': tableWrap,                                                                                               // 52\n  'tbody': tableWrap,                                                                                                  // 53\n  'tfoot': tableWrap,                                                                                                  // 54\n  'thead': tableWrap,                                                                                                  // 55\n                                                                                                                       // 56\n  'td': trWrap,                                                                                                        // 57\n  'th': trWrap                                                                                                         // 58\n};                                                                                                                     // 59\n                                                                                                                       // 60\n// Initialize the SVG elements since we know they'll always need to be wrapped                                         // 61\n// consistently. If they are created inside a <div> they will be initialized in                                        // 62\n// the wrong namespace (and will not display).                                                                         // 63\nvar svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];\nsvgElements.forEach(function (nodeName) {                                                                              // 65\n  markupWrap[nodeName] = svgWrap;                                                                                      // 66\n  shouldWrap[nodeName] = true;                                                                                         // 67\n});                                                                                                                    // 68\n                                                                                                                       // 69\n/**                                                                                                                    // 70\n * Gets the markup wrap configuration for the supplied `nodeName`.                                                     // 71\n *                                                                                                                     // 72\n * NOTE: This lazily detects which wraps are necessary for the current browser.                                        // 73\n *                                                                                                                     // 74\n * @param {string} nodeName Lowercase `nodeName`.                                                                      // 75\n * @return {?array} Markup wrap configuration, if applicable.                                                          // 76\n */                                                                                                                    // 77\nfunction getMarkupWrap(nodeName) {                                                                                     // 78\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;\n  if (!markupWrap.hasOwnProperty(nodeName)) {                                                                          // 80\n    nodeName = '*';                                                                                                    // 81\n  }                                                                                                                    // 82\n  if (!shouldWrap.hasOwnProperty(nodeName)) {                                                                          // 83\n    if (nodeName === '*') {                                                                                            // 84\n      dummyNode.innerHTML = '<link />';                                                                                // 85\n    } else {                                                                                                           // 86\n      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';                                                   // 87\n    }                                                                                                                  // 88\n    shouldWrap[nodeName] = !dummyNode.firstChild;                                                                      // 89\n  }                                                                                                                    // 90\n  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;                                                           // 91\n}                                                                                                                      // 92\n                                                                                                                       // 93\nmodule.exports = getMarkupWrap;                                                                                        // 94\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"focusNode.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/focusNode.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * @param {DOMElement} node input/textarea to focus                                                                    // 14\n */                                                                                                                    // 15\n                                                                                                                       // 16\nfunction focusNode(node) {                                                                                             // 17\n  // IE8 can throw \"Can't move focus to the control because it is invisible,                                           // 18\n  // not enabled, or of a type that does not accept the focus.\" for all kinds of                                       // 19\n  // reasons that are too expensive and fragile to test.                                                               // 20\n  try {                                                                                                                // 21\n    node.focus();                                                                                                      // 22\n  } catch (e) {}                                                                                                       // 23\n}                                                                                                                      // 24\n                                                                                                                       // 25\nmodule.exports = focusNode;                                                                                            // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"camelizeStyleName.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/camelizeStyleName.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @typechecks                                                                                                         // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar camelize = require('./camelize');                                                                                  // 14\n                                                                                                                       // 15\nvar msPattern = /^-ms-/;                                                                                               // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Camelcases a hyphenated CSS property name, for example:                                                             // 19\n *                                                                                                                     // 20\n *   > camelizeStyleName('background-color')                                                                           // 21\n *   < \"backgroundColor\"                                                                                               // 22\n *   > camelizeStyleName('-moz-transition')                                                                            // 23\n *   < \"MozTransition\"                                                                                                 // 24\n *   > camelizeStyleName('-ms-transition')                                                                             // 25\n *   < \"msTransition\"                                                                                                  // 26\n *                                                                                                                     // 27\n * As Andi Smith suggests                                                                                              // 28\n * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix                                        // 29\n * is converted to lowercase `ms`.                                                                                     // 30\n *                                                                                                                     // 31\n * @param {string} string                                                                                              // 32\n * @return {string}                                                                                                    // 33\n */                                                                                                                    // 34\nfunction camelizeStyleName(string) {                                                                                   // 35\n  return camelize(string.replace(msPattern, 'ms-'));                                                                   // 36\n}                                                                                                                      // 37\n                                                                                                                       // 38\nmodule.exports = camelizeStyleName;                                                                                    // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"camelize.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/camelize.js                                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n * @typechecks                                                                                                         // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\nvar _hyphenPattern = /-(.)/g;                                                                                          // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Camelcases a hyphenated string, for example:                                                                        // 17\n *                                                                                                                     // 18\n *   > camelize('background-color')                                                                                    // 19\n *   < \"backgroundColor\"                                                                                               // 20\n *                                                                                                                     // 21\n * @param {string} string                                                                                              // 22\n * @return {string}                                                                                                    // 23\n */                                                                                                                    // 24\nfunction camelize(string) {                                                                                            // 25\n  return string.replace(_hyphenPattern, function (_, character) {                                                      // 26\n    return character.toUpperCase();                                                                                    // 27\n  });                                                                                                                  // 28\n}                                                                                                                      // 29\n                                                                                                                       // 30\nmodule.exports = camelize;                                                                                             // 31\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hyphenateStyleName.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/hyphenateStyleName.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @typechecks                                                                                                         // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar hyphenate = require('./hyphenate');                                                                                // 14\n                                                                                                                       // 15\nvar msPattern = /^ms-/;                                                                                                // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Hyphenates a camelcased CSS property name, for example:                                                             // 19\n *                                                                                                                     // 20\n *   > hyphenateStyleName('backgroundColor')                                                                           // 21\n *   < \"background-color\"                                                                                              // 22\n *   > hyphenateStyleName('MozTransition')                                                                             // 23\n *   < \"-moz-transition\"                                                                                               // 24\n *   > hyphenateStyleName('msTransition')                                                                              // 25\n *   < \"-ms-transition\"                                                                                                // 26\n *                                                                                                                     // 27\n * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix                                         // 28\n * is converted to `-ms-`.                                                                                             // 29\n *                                                                                                                     // 30\n * @param {string} string                                                                                              // 31\n * @return {string}                                                                                                    // 32\n */                                                                                                                    // 33\nfunction hyphenateStyleName(string) {                                                                                  // 34\n  return hyphenate(string).replace(msPattern, '-ms-');                                                                 // 35\n}                                                                                                                      // 36\n                                                                                                                       // 37\nmodule.exports = hyphenateStyleName;                                                                                   // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hyphenate.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/hyphenate.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n * @typechecks                                                                                                         // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\nvar _uppercasePattern = /([A-Z])/g;                                                                                    // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Hyphenates a camelcased string, for example:                                                                        // 17\n *                                                                                                                     // 18\n *   > hyphenate('backgroundColor')                                                                                    // 19\n *   < \"background-color\"                                                                                              // 20\n *                                                                                                                     // 21\n * For CSS style names, use `hyphenateStyleName` instead which works properly                                          // 22\n * with all vendor prefixes, including `ms`.                                                                           // 23\n *                                                                                                                     // 24\n * @param {string} string                                                                                              // 25\n * @return {string}                                                                                                    // 26\n */                                                                                                                    // 27\nfunction hyphenate(string) {                                                                                           // 28\n  return string.replace(_uppercasePattern, '-$1').toLowerCase();                                                       // 29\n}                                                                                                                      // 30\n                                                                                                                       // 31\nmodule.exports = hyphenate;                                                                                            // 32\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"memoizeStringOnly.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/memoizeStringOnly.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Memoizes the return value of a function that accepts one string argument.                                           // 16\n */                                                                                                                    // 17\n                                                                                                                       // 18\nfunction memoizeStringOnly(callback) {                                                                                 // 19\n  var cache = {};                                                                                                      // 20\n  return function (string) {                                                                                           // 21\n    if (!cache.hasOwnProperty(string)) {                                                                               // 22\n      cache[string] = callback.call(this, string);                                                                     // 23\n    }                                                                                                                  // 24\n    return cache[string];                                                                                              // 25\n  };                                                                                                                   // 26\n}                                                                                                                      // 27\n                                                                                                                       // 28\nmodule.exports = memoizeStringOnly;                                                                                    // 29\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"emptyObject.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/emptyObject.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar emptyObject = {};                                                                                                  // 13\n                                                                                                                       // 14\nif (process.env.NODE_ENV !== 'production') {                                                                           // 15\n  Object.freeze(emptyObject);                                                                                          // 16\n}                                                                                                                      // 17\n                                                                                                                       // 18\nmodule.exports = emptyObject;                                                                                          // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"shallowEqual.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/shallowEqual.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @typechecks                                                                                                         // 9\n *                                                                                                                     // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n/*eslint-disable no-self-compare */                                                                                    // 13\n                                                                                                                       // 14\n'use strict';                                                                                                          // 15\n                                                                                                                       // 16\nvar hasOwnProperty = Object.prototype.hasOwnProperty;                                                                  // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * inlined Object.is polyfill to avoid requiring consumers ship their own                                              // 20\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is                          // 21\n */                                                                                                                    // 22\nfunction is(x, y) {                                                                                                    // 23\n  // SameValue algorithm                                                                                               // 24\n  if (x === y) {                                                                                                       // 25\n    // Steps 1-5, 7-10                                                                                                 // 26\n    // Steps 6.b-6.e: +0 != -0                                                                                         // 27\n    // Added the nonzero y check to make Flow happy, but it is redundant                                               // 28\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;                                                                      // 29\n  } else {                                                                                                             // 30\n    // Step 6.a: NaN == NaN                                                                                            // 31\n    return x !== x && y !== y;                                                                                         // 32\n  }                                                                                                                    // 33\n}                                                                                                                      // 34\n                                                                                                                       // 35\n/**                                                                                                                    // 36\n * Performs equality by iterating through keys on an object and returning false                                        // 37\n * when any key has values which are not strictly equal between the arguments.                                         // 38\n * Returns true when the values of all keys are strictly equal.                                                        // 39\n */                                                                                                                    // 40\nfunction shallowEqual(objA, objB) {                                                                                    // 41\n  if (is(objA, objB)) {                                                                                                // 42\n    return true;                                                                                                       // 43\n  }                                                                                                                    // 44\n                                                                                                                       // 45\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {                        // 46\n    return false;                                                                                                      // 47\n  }                                                                                                                    // 48\n                                                                                                                       // 49\n  var keysA = Object.keys(objA);                                                                                       // 50\n  var keysB = Object.keys(objB);                                                                                       // 51\n                                                                                                                       // 52\n  if (keysA.length !== keysB.length) {                                                                                 // 53\n    return false;                                                                                                      // 54\n  }                                                                                                                    // 55\n                                                                                                                       // 56\n  // Test for A's keys different from B.                                                                               // 57\n  for (var i = 0; i < keysA.length; i++) {                                                                             // 58\n    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {                                 // 59\n      return false;                                                                                                    // 60\n    }                                                                                                                  // 61\n  }                                                                                                                    // 62\n                                                                                                                       // 63\n  return true;                                                                                                         // 64\n}                                                                                                                      // 65\n                                                                                                                       // 66\nmodule.exports = shallowEqual;                                                                                         // 67\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"EventListener.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/EventListener.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n * @typechecks                                                                                                         // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\nvar emptyFunction = require('./emptyFunction');                                                                        // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Upstream version of event listener. Does not take into account specific                                             // 17\n * nature of platform.                                                                                                 // 18\n */                                                                                                                    // 19\nvar EventListener = {                                                                                                  // 20\n  /**                                                                                                                  // 21\n   * Listen to DOM events during the bubble phase.                                                                     // 22\n   *                                                                                                                   // 23\n   * @param {DOMEventTarget} target DOM element to register listener on.                                               // 24\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.                                                // 25\n   * @param {function} callback Callback function.                                                                     // 26\n   * @return {object} Object with a `remove` method.                                                                   // 27\n   */                                                                                                                  // 28\n  listen: function listen(target, eventType, callback) {                                                               // 29\n    if (target.addEventListener) {                                                                                     // 30\n      target.addEventListener(eventType, callback, false);                                                             // 31\n      return {                                                                                                         // 32\n        remove: function remove() {                                                                                    // 33\n          target.removeEventListener(eventType, callback, false);                                                      // 34\n        }                                                                                                              // 35\n      };                                                                                                               // 36\n    } else if (target.attachEvent) {                                                                                   // 37\n      target.attachEvent('on' + eventType, callback);                                                                  // 38\n      return {                                                                                                         // 39\n        remove: function remove() {                                                                                    // 40\n          target.detachEvent('on' + eventType, callback);                                                              // 41\n        }                                                                                                              // 42\n      };                                                                                                               // 43\n    }                                                                                                                  // 44\n  },                                                                                                                   // 45\n                                                                                                                       // 46\n  /**                                                                                                                  // 47\n   * Listen to DOM events during the capture phase.                                                                    // 48\n   *                                                                                                                   // 49\n   * @param {DOMEventTarget} target DOM element to register listener on.                                               // 50\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.                                                // 51\n   * @param {function} callback Callback function.                                                                     // 52\n   * @return {object} Object with a `remove` method.                                                                   // 53\n   */                                                                                                                  // 54\n  capture: function capture(target, eventType, callback) {                                                             // 55\n    if (target.addEventListener) {                                                                                     // 56\n      target.addEventListener(eventType, callback, true);                                                              // 57\n      return {                                                                                                         // 58\n        remove: function remove() {                                                                                    // 59\n          target.removeEventListener(eventType, callback, true);                                                       // 60\n        }                                                                                                              // 61\n      };                                                                                                               // 62\n    } else {                                                                                                           // 63\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 64\n        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');\n      }                                                                                                                // 66\n      return {                                                                                                         // 67\n        remove: emptyFunction                                                                                          // 68\n      };                                                                                                               // 69\n    }                                                                                                                  // 70\n  },                                                                                                                   // 71\n                                                                                                                       // 72\n  registerDefault: function registerDefault() {}                                                                       // 73\n};                                                                                                                     // 74\n                                                                                                                       // 75\nmodule.exports = EventListener;                                                                                        // 76\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getUnboundedScrollPosition.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/getUnboundedScrollPosition.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @typechecks                                                                                                         // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Gets the scroll position of the supplied element or window.                                                         // 15\n *                                                                                                                     // 16\n * The return values are unbounded, unlike `getScrollPosition`. This means they                                        // 17\n * may be negative or exceed the element boundaries (which is possible using                                           // 18\n * inertial scrolling).                                                                                                // 19\n *                                                                                                                     // 20\n * @param {DOMWindow|DOMElement} scrollable                                                                            // 21\n * @return {object} Map with `x` and `y` keys.                                                                         // 22\n */                                                                                                                    // 23\n                                                                                                                       // 24\nfunction getUnboundedScrollPosition(scrollable) {                                                                      // 25\n  if (scrollable.Window && scrollable instanceof scrollable.Window) {                                                  // 26\n    return {                                                                                                           // 27\n      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,                                     // 28\n      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop                                       // 29\n    };                                                                                                                 // 30\n  }                                                                                                                    // 31\n  return {                                                                                                             // 32\n    x: scrollable.scrollLeft,                                                                                          // 33\n    y: scrollable.scrollTop                                                                                            // 34\n  };                                                                                                                   // 35\n}                                                                                                                      // 36\n                                                                                                                       // 37\nmodule.exports = getUnboundedScrollPosition;                                                                           // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"containsNode.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/containsNode.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n *                                                                                                                     // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\nvar isTextNode = require('./isTextNode');                                                                              // 14\n                                                                                                                       // 15\n/*eslint-disable no-bitwise */                                                                                         // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Checks if a given DOM node contains or is another DOM node.                                                         // 19\n */                                                                                                                    // 20\nfunction containsNode(outerNode, innerNode) {                                                                          // 21\n  if (!outerNode || !innerNode) {                                                                                      // 22\n    return false;                                                                                                      // 23\n  } else if (outerNode === innerNode) {                                                                                // 24\n    return true;                                                                                                       // 25\n  } else if (isTextNode(outerNode)) {                                                                                  // 26\n    return false;                                                                                                      // 27\n  } else if (isTextNode(innerNode)) {                                                                                  // 28\n    return containsNode(outerNode, innerNode.parentNode);                                                              // 29\n  } else if ('contains' in outerNode) {                                                                                // 30\n    return outerNode.contains(innerNode);                                                                              // 31\n  } else if (outerNode.compareDocumentPosition) {                                                                      // 32\n    return !!(outerNode.compareDocumentPosition(innerNode) & 16);                                                      // 33\n  } else {                                                                                                             // 34\n    return false;                                                                                                      // 35\n  }                                                                                                                    // 36\n}                                                                                                                      // 37\n                                                                                                                       // 38\nmodule.exports = containsNode;                                                                                         // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"isTextNode.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/isTextNode.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n * @typechecks                                                                                                         // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\nvar isNode = require('./isNode');                                                                                      // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * @param {*} object The object to check.                                                                              // 17\n * @return {boolean} Whether or not the object is a DOM text node.                                                     // 18\n */                                                                                                                    // 19\nfunction isTextNode(object) {                                                                                          // 20\n  return isNode(object) && object.nodeType == 3;                                                                       // 21\n}                                                                                                                      // 22\n                                                                                                                       // 23\nmodule.exports = isTextNode;                                                                                           // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"isNode.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/isNode.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n * @typechecks                                                                                                         // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * @param {*} object The object to check.                                                                              // 15\n * @return {boolean} Whether or not the object is a DOM node.                                                          // 16\n */                                                                                                                    // 17\nfunction isNode(object) {                                                                                              // 18\n  var doc = object ? object.ownerDocument || object : document;                                                        // 19\n  var defaultView = doc.defaultView || window;                                                                         // 20\n  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));\n}                                                                                                                      // 22\n                                                                                                                       // 23\nmodule.exports = isNode;                                                                                               // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getActiveElement.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/getActiveElement.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n * @typechecks                                                                                                         // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\n/* eslint-disable fb-www/typeof-undefined */                                                                           // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Same as document.activeElement but wraps in a try-catch block. In IE it is                                          // 17\n * not safe to call document.activeElement if there is nothing focused.                                                // 18\n *                                                                                                                     // 19\n * The activeElement will be null only if the document or document body is not                                         // 20\n * yet defined.                                                                                                        // 21\n *                                                                                                                     // 22\n * @param {?DOMDocument} doc Defaults to current document.                                                             // 23\n * @return {?DOMElement}                                                                                               // 24\n */                                                                                                                    // 25\nfunction getActiveElement(doc) /*?DOMElement*/{                                                                        // 26\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);                                               // 27\n  if (typeof doc === 'undefined') {                                                                                    // 28\n    return null;                                                                                                       // 29\n  }                                                                                                                    // 30\n  try {                                                                                                                // 31\n    return doc.activeElement || doc.body;                                                                              // 32\n  } catch (e) {                                                                                                        // 33\n    return doc.body;                                                                                                   // 34\n  }                                                                                                                    // 35\n}                                                                                                                      // 36\n                                                                                                                       // 37\nmodule.exports = getActiveElement;                                                                                     // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"object-assign\":{\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/object-assign/index.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\nobject-assign                                                                                                          // 2\n(c) Sindre Sorhus                                                                                                      // 3\n@license MIT                                                                                                           // 4\n*/                                                                                                                     // 5\n                                                                                                                       // 6\n'use strict';                                                                                                          // 7\n/* eslint-disable no-unused-vars */                                                                                    // 8\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;                                                              // 9\nvar hasOwnProperty = Object.prototype.hasOwnProperty;                                                                  // 10\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;                                                          // 11\n                                                                                                                       // 12\nfunction toObject(val) {                                                                                               // 13\n\tif (val === null || val === undefined) {                                                                              // 14\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');                                        // 15\n\t}                                                                                                                     // 16\n                                                                                                                       // 17\n\treturn Object(val);                                                                                                   // 18\n}                                                                                                                      // 19\n                                                                                                                       // 20\nfunction shouldUseNative() {                                                                                           // 21\n\ttry {                                                                                                                 // 22\n\t\tif (!Object.assign) {                                                                                                // 23\n\t\t\treturn false;                                                                                                       // 24\n\t\t}                                                                                                                    // 25\n                                                                                                                       // 26\n\t\t// Detect buggy property enumeration order in older V8 versions.                                                     // 27\n                                                                                                                       // 28\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118                                                              // 29\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers                                               // 30\n\t\ttest1[5] = 'de';                                                                                                     // 31\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {                                                                  // 32\n\t\t\treturn false;                                                                                                       // 33\n\t\t}                                                                                                                    // 34\n                                                                                                                       // 35\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056                                                              // 36\n\t\tvar test2 = {};                                                                                                      // 37\n\t\tfor (var i = 0; i < 10; i++) {                                                                                       // 38\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;                                                                            // 39\n\t\t}                                                                                                                    // 40\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {                                                    // 41\n\t\t\treturn test2[n];                                                                                                    // 42\n\t\t});                                                                                                                  // 43\n\t\tif (order2.join('') !== '0123456789') {                                                                              // 44\n\t\t\treturn false;                                                                                                       // 45\n\t\t}                                                                                                                    // 46\n                                                                                                                       // 47\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056                                                              // 48\n\t\tvar test3 = {};                                                                                                      // 49\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {                                                         // 50\n\t\t\ttest3[letter] = letter;                                                                                             // 51\n\t\t});                                                                                                                  // 52\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==                                                               // 53\n\t\t\t\t'abcdefghijklmnopqrst') {                                                                                          // 54\n\t\t\treturn false;                                                                                                       // 55\n\t\t}                                                                                                                    // 56\n                                                                                                                       // 57\n\t\treturn true;                                                                                                         // 58\n\t} catch (err) {                                                                                                       // 59\n\t\t// We don't expect any of the above to throw, but better to be safe.                                                 // 60\n\t\treturn false;                                                                                                        // 61\n\t}                                                                                                                     // 62\n}                                                                                                                      // 63\n                                                                                                                       // 64\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {                                       // 65\n\tvar from;                                                                                                             // 66\n\tvar to = toObject(target);                                                                                            // 67\n\tvar symbols;                                                                                                          // 68\n                                                                                                                       // 69\n\tfor (var s = 1; s < arguments.length; s++) {                                                                          // 70\n\t\tfrom = Object(arguments[s]);                                                                                         // 71\n                                                                                                                       // 72\n\t\tfor (var key in from) {                                                                                              // 73\n\t\t\tif (hasOwnProperty.call(from, key)) {                                                                               // 74\n\t\t\t\tto[key] = from[key];                                                                                               // 75\n\t\t\t}                                                                                                                   // 76\n\t\t}                                                                                                                    // 77\n                                                                                                                       // 78\n\t\tif (getOwnPropertySymbols) {                                                                                         // 79\n\t\t\tsymbols = getOwnPropertySymbols(from);                                                                              // 80\n\t\t\tfor (var i = 0; i < symbols.length; i++) {                                                                          // 81\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {                                                                     // 82\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];                                                                                // 83\n\t\t\t\t}                                                                                                                  // 84\n\t\t\t}                                                                                                                   // 85\n\t\t}                                                                                                                    // 86\n\t}                                                                                                                     // 87\n                                                                                                                       // 88\n\treturn to;                                                                                                            // 89\n};                                                                                                                     // 90\n                                                                                                                       // 91\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"prop-types\":{\"factory.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/prop-types/factory.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n'use strict';                                                                                                          // 10\n                                                                                                                       // 11\n// React 15.5 references this module, and assumes PropTypes are still callable in production.                          // 12\n// Therefore we re-export development-only version with all the PropTypes checks here.                                 // 13\n// However if one is migrating to the `prop-types` npm library, they will go through the                               // 14\n// `index.js` entry point, and it will branch depending on the environment.                                            // 15\nvar factory = require('./factoryWithTypeCheckers');                                                                    // 16\nmodule.exports = function(isValidElement) {                                                                            // 17\n  // It is still allowed in 15.5.                                                                                      // 18\n  var throwOnDirectAccess = false;                                                                                     // 19\n  return factory(isValidElement, throwOnDirectAccess);                                                                 // 20\n};                                                                                                                     // 21\n                                                                                                                       // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"factoryWithTypeCheckers.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/prop-types/factoryWithTypeCheckers.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n'use strict';                                                                                                          // 10\n                                                                                                                       // 11\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 12\nvar invariant = require('fbjs/lib/invariant');                                                                         // 13\nvar warning = require('fbjs/lib/warning');                                                                             // 14\n                                                                                                                       // 15\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');                                                      // 16\nvar checkPropTypes = require('./checkPropTypes');                                                                      // 17\n                                                                                                                       // 18\nmodule.exports = function(isValidElement, throwOnDirectAccess) {                                                       // 19\n  /* global Symbol */                                                                                                  // 20\n  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;                                               // 21\n  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.                                                      // 22\n                                                                                                                       // 23\n  /**                                                                                                                  // 24\n   * Returns the iterator method function contained on the iterable object.                                            // 25\n   *                                                                                                                   // 26\n   * Be sure to invoke the function with the iterable as context:                                                      // 27\n   *                                                                                                                   // 28\n   *     var iteratorFn = getIteratorFn(myIterable);                                                                   // 29\n   *     if (iteratorFn) {                                                                                             // 30\n   *       var iterator = iteratorFn.call(myIterable);                                                                 // 31\n   *       ...                                                                                                         // 32\n   *     }                                                                                                             // 33\n   *                                                                                                                   // 34\n   * @param {?object} maybeIterable                                                                                    // 35\n   * @return {?function}                                                                                               // 36\n   */                                                                                                                  // 37\n  function getIteratorFn(maybeIterable) {                                                                              // 38\n    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n    if (typeof iteratorFn === 'function') {                                                                            // 40\n      return iteratorFn;                                                                                               // 41\n    }                                                                                                                  // 42\n  }                                                                                                                    // 43\n                                                                                                                       // 44\n  /**                                                                                                                  // 45\n   * Collection of methods that allow declaration and validation of props that are                                     // 46\n   * supplied to React components. Example usage:                                                                      // 47\n   *                                                                                                                   // 48\n   *   var Props = require('ReactPropTypes');                                                                          // 49\n   *   var MyArticle = React.createClass({                                                                             // 50\n   *     propTypes: {                                                                                                  // 51\n   *       // An optional string prop named \"description\".                                                             // 52\n   *       description: Props.string,                                                                                  // 53\n   *                                                                                                                   // 54\n   *       // A required enum prop named \"category\".                                                                   // 55\n   *       category: Props.oneOf(['News','Photos']).isRequired,                                                        // 56\n   *                                                                                                                   // 57\n   *       // A prop named \"dialog\" that requires an instance of Dialog.                                               // 58\n   *       dialog: Props.instanceOf(Dialog).isRequired                                                                 // 59\n   *     },                                                                                                            // 60\n   *     render: function() { ... }                                                                                    // 61\n   *   });                                                                                                             // 62\n   *                                                                                                                   // 63\n   * A more formal specification of how these methods are used:                                                        // 64\n   *                                                                                                                   // 65\n   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)                                       // 66\n   *   decl := ReactPropTypes.{type}(.isRequired)?                                                                     // 67\n   *                                                                                                                   // 68\n   * Each and every declaration produces a function with the same signature. This                                      // 69\n   * allows the creation of custom validation functions. For example:                                                  // 70\n   *                                                                                                                   // 71\n   *  var MyLink = React.createClass({                                                                                 // 72\n   *    propTypes: {                                                                                                   // 73\n   *      // An optional string or URI prop named \"href\".                                                              // 74\n   *      href: function(props, propName, componentName) {                                                             // 75\n   *        var propValue = props[propName];                                                                           // 76\n   *        if (propValue != null && typeof propValue !== 'string' &&                                                  // 77\n   *            !(propValue instanceof URI)) {                                                                         // 78\n   *          return new Error(                                                                                        // 79\n   *            'Expected a string or an URI for ' + propName + ' in ' +                                               // 80\n   *            componentName                                                                                          // 81\n   *          );                                                                                                       // 82\n   *        }                                                                                                          // 83\n   *      }                                                                                                            // 84\n   *    },                                                                                                             // 85\n   *    render: function() {...}                                                                                       // 86\n   *  });                                                                                                              // 87\n   *                                                                                                                   // 88\n   * @internal                                                                                                         // 89\n   */                                                                                                                  // 90\n                                                                                                                       // 91\n  var ANONYMOUS = '<<anonymous>>';                                                                                     // 92\n                                                                                                                       // 93\n  // Important!                                                                                                        // 94\n  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.                                // 95\n  var ReactPropTypes = {                                                                                               // 96\n    array: createPrimitiveTypeChecker('array'),                                                                        // 97\n    bool: createPrimitiveTypeChecker('boolean'),                                                                       // 98\n    func: createPrimitiveTypeChecker('function'),                                                                      // 99\n    number: createPrimitiveTypeChecker('number'),                                                                      // 100\n    object: createPrimitiveTypeChecker('object'),                                                                      // 101\n    string: createPrimitiveTypeChecker('string'),                                                                      // 102\n    symbol: createPrimitiveTypeChecker('symbol'),                                                                      // 103\n                                                                                                                       // 104\n    any: createAnyTypeChecker(),                                                                                       // 105\n    arrayOf: createArrayOfTypeChecker,                                                                                 // 106\n    element: createElementTypeChecker(),                                                                               // 107\n    instanceOf: createInstanceTypeChecker,                                                                             // 108\n    node: createNodeChecker(),                                                                                         // 109\n    objectOf: createObjectOfTypeChecker,                                                                               // 110\n    oneOf: createEnumTypeChecker,                                                                                      // 111\n    oneOfType: createUnionTypeChecker,                                                                                 // 112\n    shape: createShapeTypeChecker                                                                                      // 113\n  };                                                                                                                   // 114\n                                                                                                                       // 115\n  /**                                                                                                                  // 116\n   * inlined Object.is polyfill to avoid requiring consumers ship their own                                            // 117\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is                        // 118\n   */                                                                                                                  // 119\n  /*eslint-disable no-self-compare*/                                                                                   // 120\n  function is(x, y) {                                                                                                  // 121\n    // SameValue algorithm                                                                                             // 122\n    if (x === y) {                                                                                                     // 123\n      // Steps 1-5, 7-10                                                                                               // 124\n      // Steps 6.b-6.e: +0 != -0                                                                                       // 125\n      return x !== 0 || 1 / x === 1 / y;                                                                               // 126\n    } else {                                                                                                           // 127\n      // Step 6.a: NaN == NaN                                                                                          // 128\n      return x !== x && y !== y;                                                                                       // 129\n    }                                                                                                                  // 130\n  }                                                                                                                    // 131\n  /*eslint-enable no-self-compare*/                                                                                    // 132\n                                                                                                                       // 133\n  /**                                                                                                                  // 134\n   * We use an Error-like object for backward compatibility as people may call                                         // 135\n   * PropTypes directly and inspect their output. However, we don't use real                                           // 136\n   * Errors anymore. We don't inspect their stack anyway, and creating them                                            // 137\n   * is prohibitively expensive if they are created too often, such as what                                            // 138\n   * happens in oneOfType() for any type before the one that matched.                                                  // 139\n   */                                                                                                                  // 140\n  function PropTypeError(message) {                                                                                    // 141\n    this.message = message;                                                                                            // 142\n    this.stack = '';                                                                                                   // 143\n  }                                                                                                                    // 144\n  // Make `instanceof Error` still work for returned errors.                                                           // 145\n  PropTypeError.prototype = Error.prototype;                                                                           // 146\n                                                                                                                       // 147\n  function createChainableTypeChecker(validate) {                                                                      // 148\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 149\n      var manualPropTypeCallCache = {};                                                                                // 150\n      var manualPropTypeWarningCount = 0;                                                                              // 151\n    }                                                                                                                  // 152\n    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {                   // 153\n      componentName = componentName || ANONYMOUS;                                                                      // 154\n      propFullName = propFullName || propName;                                                                         // 155\n                                                                                                                       // 156\n      if (secret !== ReactPropTypesSecret) {                                                                           // 157\n        if (throwOnDirectAccess) {                                                                                     // 158\n          // New behavior only for users of `prop-types` package                                                       // 159\n          invariant(                                                                                                   // 160\n            false,                                                                                                     // 161\n            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +                   // 162\n            'Use `PropTypes.checkPropTypes()` to call them. ' +                                                        // 163\n            'Read more at http://fb.me/use-check-prop-types'                                                           // 164\n          );                                                                                                           // 165\n        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {                          // 166\n          // Old behavior for people using React.PropTypes                                                             // 167\n          var cacheKey = componentName + ':' + propName;                                                               // 168\n          if (                                                                                                         // 169\n            !manualPropTypeCallCache[cacheKey] &&                                                                      // 170\n            // Avoid spamming the console because they are often not actionable except for lib authors                 // 171\n            manualPropTypeWarningCount < 3                                                                             // 172\n          ) {                                                                                                          // 173\n            warning(                                                                                                   // 174\n              false,                                                                                                   // 175\n              'You are manually calling a React.PropTypes validation ' +                                               // 176\n              'function for the `%s` prop on `%s`. This is deprecated ' +                                              // 177\n              'and will throw in the standalone `prop-types` package. ' +                                              // 178\n              'You may be seeing this warning due to a third-party PropTypes ' +                                       // 179\n              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',                        // 180\n              propFullName,                                                                                            // 181\n              componentName                                                                                            // 182\n            );                                                                                                         // 183\n            manualPropTypeCallCache[cacheKey] = true;                                                                  // 184\n            manualPropTypeWarningCount++;                                                                              // 185\n          }                                                                                                            // 186\n        }                                                                                                              // 187\n      }                                                                                                                // 188\n      if (props[propName] == null) {                                                                                   // 189\n        if (isRequired) {                                                                                              // 190\n          if (props[propName] === null) {                                                                              // 191\n            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n          }                                                                                                            // 193\n          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n        }                                                                                                              // 195\n        return null;                                                                                                   // 196\n      } else {                                                                                                         // 197\n        return validate(props, propName, componentName, location, propFullName);                                       // 198\n      }                                                                                                                // 199\n    }                                                                                                                  // 200\n                                                                                                                       // 201\n    var chainedCheckType = checkType.bind(null, false);                                                                // 202\n    chainedCheckType.isRequired = checkType.bind(null, true);                                                          // 203\n                                                                                                                       // 204\n    return chainedCheckType;                                                                                           // 205\n  }                                                                                                                    // 206\n                                                                                                                       // 207\n  function createPrimitiveTypeChecker(expectedType) {                                                                  // 208\n    function validate(props, propName, componentName, location, propFullName, secret) {                                // 209\n      var propValue = props[propName];                                                                                 // 210\n      var propType = getPropType(propValue);                                                                           // 211\n      if (propType !== expectedType) {                                                                                 // 212\n        // `propValue` being instance of, say, date/regexp, pass the 'object'                                          // 213\n        // check, but we can offer a more precise error message here rather than                                       // 214\n        // 'of type `object`'.                                                                                         // 215\n        var preciseType = getPreciseType(propValue);                                                                   // 216\n                                                                                                                       // 217\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n      }                                                                                                                // 219\n      return null;                                                                                                     // 220\n    }                                                                                                                  // 221\n    return createChainableTypeChecker(validate);                                                                       // 222\n  }                                                                                                                    // 223\n                                                                                                                       // 224\n  function createAnyTypeChecker() {                                                                                    // 225\n    return createChainableTypeChecker(emptyFunction.thatReturnsNull);                                                  // 226\n  }                                                                                                                    // 227\n                                                                                                                       // 228\n  function createArrayOfTypeChecker(typeChecker) {                                                                     // 229\n    function validate(props, propName, componentName, location, propFullName) {                                        // 230\n      if (typeof typeChecker !== 'function') {                                                                         // 231\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n      }                                                                                                                // 233\n      var propValue = props[propName];                                                                                 // 234\n      if (!Array.isArray(propValue)) {                                                                                 // 235\n        var propType = getPropType(propValue);                                                                         // 236\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n      }                                                                                                                // 238\n      for (var i = 0; i < propValue.length; i++) {                                                                     // 239\n        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n        if (error instanceof Error) {                                                                                  // 241\n          return error;                                                                                                // 242\n        }                                                                                                              // 243\n      }                                                                                                                // 244\n      return null;                                                                                                     // 245\n    }                                                                                                                  // 246\n    return createChainableTypeChecker(validate);                                                                       // 247\n  }                                                                                                                    // 248\n                                                                                                                       // 249\n  function createElementTypeChecker() {                                                                                // 250\n    function validate(props, propName, componentName, location, propFullName) {                                        // 251\n      var propValue = props[propName];                                                                                 // 252\n      if (!isValidElement(propValue)) {                                                                                // 253\n        var propType = getPropType(propValue);                                                                         // 254\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n      }                                                                                                                // 256\n      return null;                                                                                                     // 257\n    }                                                                                                                  // 258\n    return createChainableTypeChecker(validate);                                                                       // 259\n  }                                                                                                                    // 260\n                                                                                                                       // 261\n  function createInstanceTypeChecker(expectedClass) {                                                                  // 262\n    function validate(props, propName, componentName, location, propFullName) {                                        // 263\n      if (!(props[propName] instanceof expectedClass)) {                                                               // 264\n        var expectedClassName = expectedClass.name || ANONYMOUS;                                                       // 265\n        var actualClassName = getClassName(props[propName]);                                                           // 266\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n      }                                                                                                                // 268\n      return null;                                                                                                     // 269\n    }                                                                                                                  // 270\n    return createChainableTypeChecker(validate);                                                                       // 271\n  }                                                                                                                    // 272\n                                                                                                                       // 273\n  function createEnumTypeChecker(expectedValues) {                                                                     // 274\n    if (!Array.isArray(expectedValues)) {                                                                              // 275\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;\n      return emptyFunction.thatReturnsNull;                                                                            // 277\n    }                                                                                                                  // 278\n                                                                                                                       // 279\n    function validate(props, propName, componentName, location, propFullName) {                                        // 280\n      var propValue = props[propName];                                                                                 // 281\n      for (var i = 0; i < expectedValues.length; i++) {                                                                // 282\n        if (is(propValue, expectedValues[i])) {                                                                        // 283\n          return null;                                                                                                 // 284\n        }                                                                                                              // 285\n      }                                                                                                                // 286\n                                                                                                                       // 287\n      var valuesString = JSON.stringify(expectedValues);                                                               // 288\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n    }                                                                                                                  // 290\n    return createChainableTypeChecker(validate);                                                                       // 291\n  }                                                                                                                    // 292\n                                                                                                                       // 293\n  function createObjectOfTypeChecker(typeChecker) {                                                                    // 294\n    function validate(props, propName, componentName, location, propFullName) {                                        // 295\n      if (typeof typeChecker !== 'function') {                                                                         // 296\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n      }                                                                                                                // 298\n      var propValue = props[propName];                                                                                 // 299\n      var propType = getPropType(propValue);                                                                           // 300\n      if (propType !== 'object') {                                                                                     // 301\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n      }                                                                                                                // 303\n      for (var key in propValue) {                                                                                     // 304\n        if (propValue.hasOwnProperty(key)) {                                                                           // 305\n          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n          if (error instanceof Error) {                                                                                // 307\n            return error;                                                                                              // 308\n          }                                                                                                            // 309\n        }                                                                                                              // 310\n      }                                                                                                                // 311\n      return null;                                                                                                     // 312\n    }                                                                                                                  // 313\n    return createChainableTypeChecker(validate);                                                                       // 314\n  }                                                                                                                    // 315\n                                                                                                                       // 316\n  function createUnionTypeChecker(arrayOfTypeCheckers) {                                                               // 317\n    if (!Array.isArray(arrayOfTypeCheckers)) {                                                                         // 318\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;\n      return emptyFunction.thatReturnsNull;                                                                            // 320\n    }                                                                                                                  // 321\n                                                                                                                       // 322\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {                                                             // 323\n      var checker = arrayOfTypeCheckers[i];                                                                            // 324\n      if (typeof checker !== 'function') {                                                                             // 325\n        warning(                                                                                                       // 326\n          false,                                                                                                       // 327\n          'Invalid argument supplid to oneOfType. Expected an array of check functions, but ' +                        // 328\n          'received %s at index %s.',                                                                                  // 329\n          getPostfixForTypeWarning(checker),                                                                           // 330\n          i                                                                                                            // 331\n        );                                                                                                             // 332\n        return emptyFunction.thatReturnsNull;                                                                          // 333\n      }                                                                                                                // 334\n    }                                                                                                                  // 335\n                                                                                                                       // 336\n    function validate(props, propName, componentName, location, propFullName) {                                        // 337\n      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {                                                           // 338\n        var checker = arrayOfTypeCheckers[i];                                                                          // 339\n        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {           // 340\n          return null;                                                                                                 // 341\n        }                                                                                                              // 342\n      }                                                                                                                // 343\n                                                                                                                       // 344\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n    }                                                                                                                  // 346\n    return createChainableTypeChecker(validate);                                                                       // 347\n  }                                                                                                                    // 348\n                                                                                                                       // 349\n  function createNodeChecker() {                                                                                       // 350\n    function validate(props, propName, componentName, location, propFullName) {                                        // 351\n      if (!isNode(props[propName])) {                                                                                  // 352\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n      }                                                                                                                // 354\n      return null;                                                                                                     // 355\n    }                                                                                                                  // 356\n    return createChainableTypeChecker(validate);                                                                       // 357\n  }                                                                                                                    // 358\n                                                                                                                       // 359\n  function createShapeTypeChecker(shapeTypes) {                                                                        // 360\n    function validate(props, propName, componentName, location, propFullName) {                                        // 361\n      var propValue = props[propName];                                                                                 // 362\n      var propType = getPropType(propValue);                                                                           // 363\n      if (propType !== 'object') {                                                                                     // 364\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }                                                                                                                // 366\n      for (var key in shapeTypes) {                                                                                    // 367\n        var checker = shapeTypes[key];                                                                                 // 368\n        if (!checker) {                                                                                                // 369\n          continue;                                                                                                    // 370\n        }                                                                                                              // 371\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);  // 372\n        if (error) {                                                                                                   // 373\n          return error;                                                                                                // 374\n        }                                                                                                              // 375\n      }                                                                                                                // 376\n      return null;                                                                                                     // 377\n    }                                                                                                                  // 378\n    return createChainableTypeChecker(validate);                                                                       // 379\n  }                                                                                                                    // 380\n                                                                                                                       // 381\n  function isNode(propValue) {                                                                                         // 382\n    switch (typeof propValue) {                                                                                        // 383\n      case 'number':                                                                                                   // 384\n      case 'string':                                                                                                   // 385\n      case 'undefined':                                                                                                // 386\n        return true;                                                                                                   // 387\n      case 'boolean':                                                                                                  // 388\n        return !propValue;                                                                                             // 389\n      case 'object':                                                                                                   // 390\n        if (Array.isArray(propValue)) {                                                                                // 391\n          return propValue.every(isNode);                                                                              // 392\n        }                                                                                                              // 393\n        if (propValue === null || isValidElement(propValue)) {                                                         // 394\n          return true;                                                                                                 // 395\n        }                                                                                                              // 396\n                                                                                                                       // 397\n        var iteratorFn = getIteratorFn(propValue);                                                                     // 398\n        if (iteratorFn) {                                                                                              // 399\n          var iterator = iteratorFn.call(propValue);                                                                   // 400\n          var step;                                                                                                    // 401\n          if (iteratorFn !== propValue.entries) {                                                                      // 402\n            while (!(step = iterator.next()).done) {                                                                   // 403\n              if (!isNode(step.value)) {                                                                               // 404\n                return false;                                                                                          // 405\n              }                                                                                                        // 406\n            }                                                                                                          // 407\n          } else {                                                                                                     // 408\n            // Iterator will provide entry [k,v] tuples rather than values.                                            // 409\n            while (!(step = iterator.next()).done) {                                                                   // 410\n              var entry = step.value;                                                                                  // 411\n              if (entry) {                                                                                             // 412\n                if (!isNode(entry[1])) {                                                                               // 413\n                  return false;                                                                                        // 414\n                }                                                                                                      // 415\n              }                                                                                                        // 416\n            }                                                                                                          // 417\n          }                                                                                                            // 418\n        } else {                                                                                                       // 419\n          return false;                                                                                                // 420\n        }                                                                                                              // 421\n                                                                                                                       // 422\n        return true;                                                                                                   // 423\n      default:                                                                                                         // 424\n        return false;                                                                                                  // 425\n    }                                                                                                                  // 426\n  }                                                                                                                    // 427\n                                                                                                                       // 428\n  function isSymbol(propType, propValue) {                                                                             // 429\n    // Native Symbol.                                                                                                  // 430\n    if (propType === 'symbol') {                                                                                       // 431\n      return true;                                                                                                     // 432\n    }                                                                                                                  // 433\n                                                                                                                       // 434\n    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'                                                           // 435\n    if (propValue['@@toStringTag'] === 'Symbol') {                                                                     // 436\n      return true;                                                                                                     // 437\n    }                                                                                                                  // 438\n                                                                                                                       // 439\n    // Fallback for non-spec compliant Symbols which are polyfilled.                                                   // 440\n    if (typeof Symbol === 'function' && propValue instanceof Symbol) {                                                 // 441\n      return true;                                                                                                     // 442\n    }                                                                                                                  // 443\n                                                                                                                       // 444\n    return false;                                                                                                      // 445\n  }                                                                                                                    // 446\n                                                                                                                       // 447\n  // Equivalent of `typeof` but with special handling for array and regexp.                                            // 448\n  function getPropType(propValue) {                                                                                    // 449\n    var propType = typeof propValue;                                                                                   // 450\n    if (Array.isArray(propValue)) {                                                                                    // 451\n      return 'array';                                                                                                  // 452\n    }                                                                                                                  // 453\n    if (propValue instanceof RegExp) {                                                                                 // 454\n      // Old webkits (at least until Android 4.0) return 'function' rather than                                        // 455\n      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/                                         // 456\n      // passes PropTypes.object.                                                                                      // 457\n      return 'object';                                                                                                 // 458\n    }                                                                                                                  // 459\n    if (isSymbol(propType, propValue)) {                                                                               // 460\n      return 'symbol';                                                                                                 // 461\n    }                                                                                                                  // 462\n    return propType;                                                                                                   // 463\n  }                                                                                                                    // 464\n                                                                                                                       // 465\n  // This handles more types than `getPropType`. Only used for error messages.                                         // 466\n  // See `createPrimitiveTypeChecker`.                                                                                 // 467\n  function getPreciseType(propValue) {                                                                                 // 468\n    if (typeof propValue === 'undefined' || propValue === null) {                                                      // 469\n      return '' + propValue;                                                                                           // 470\n    }                                                                                                                  // 471\n    var propType = getPropType(propValue);                                                                             // 472\n    if (propType === 'object') {                                                                                       // 473\n      if (propValue instanceof Date) {                                                                                 // 474\n        return 'date';                                                                                                 // 475\n      } else if (propValue instanceof RegExp) {                                                                        // 476\n        return 'regexp';                                                                                               // 477\n      }                                                                                                                // 478\n    }                                                                                                                  // 479\n    return propType;                                                                                                   // 480\n  }                                                                                                                    // 481\n                                                                                                                       // 482\n  // Returns a string that is postfixed to a warning about an invalid type.                                            // 483\n  // For example, \"undefined\" or \"of type array\"                                                                       // 484\n  function getPostfixForTypeWarning(value) {                                                                           // 485\n    var type = getPreciseType(value);                                                                                  // 486\n    switch (type) {                                                                                                    // 487\n      case 'array':                                                                                                    // 488\n      case 'object':                                                                                                   // 489\n        return 'an ' + type;                                                                                           // 490\n      case 'boolean':                                                                                                  // 491\n      case 'date':                                                                                                     // 492\n      case 'regexp':                                                                                                   // 493\n        return 'a ' + type;                                                                                            // 494\n      default:                                                                                                         // 495\n        return type;                                                                                                   // 496\n    }                                                                                                                  // 497\n  }                                                                                                                    // 498\n                                                                                                                       // 499\n  // Returns class name of the object, if any.                                                                         // 500\n  function getClassName(propValue) {                                                                                   // 501\n    if (!propValue.constructor || !propValue.constructor.name) {                                                       // 502\n      return ANONYMOUS;                                                                                                // 503\n    }                                                                                                                  // 504\n    return propValue.constructor.name;                                                                                 // 505\n  }                                                                                                                    // 506\n                                                                                                                       // 507\n  ReactPropTypes.checkPropTypes = checkPropTypes;                                                                      // 508\n  ReactPropTypes.PropTypes = ReactPropTypes;                                                                           // 509\n                                                                                                                       // 510\n  return ReactPropTypes;                                                                                               // 511\n};                                                                                                                     // 512\n                                                                                                                       // 513\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"ReactPropTypesSecret.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/prop-types/lib/ReactPropTypesSecret.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n'use strict';                                                                                                          // 10\n                                                                                                                       // 11\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';                                             // 12\n                                                                                                                       // 13\nmodule.exports = ReactPropTypesSecret;                                                                                 // 14\n                                                                                                                       // 15\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"checkPropTypes.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/prop-types/checkPropTypes.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n'use strict';                                                                                                          // 10\n                                                                                                                       // 11\nif (process.env.NODE_ENV !== 'production') {                                                                           // 12\n  var invariant = require('fbjs/lib/invariant');                                                                       // 13\n  var warning = require('fbjs/lib/warning');                                                                           // 14\n  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');                                                    // 15\n  var loggedTypeFailures = {};                                                                                         // 16\n}                                                                                                                      // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * Assert that the values match with the type specs.                                                                   // 20\n * Error messages are memorized and will only be shown once.                                                           // 21\n *                                                                                                                     // 22\n * @param {object} typeSpecs Map of name to a ReactPropType                                                            // 23\n * @param {object} values Runtime values that need to be type-checked                                                  // 24\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"                                                    // 25\n * @param {string} componentName Name of the component for error messages.                                             // 26\n * @param {?Function} getStack Returns the component stack.                                                            // 27\n * @private                                                                                                            // 28\n */                                                                                                                    // 29\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {                                        // 30\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 31\n    for (var typeSpecName in typeSpecs) {                                                                              // 32\n      if (typeSpecs.hasOwnProperty(typeSpecName)) {                                                                    // 33\n        var error;                                                                                                     // 34\n        // Prop type validation may throw. In case they do, we don't want to                                           // 35\n        // fail the render phase where it didn't fail before. So we log it.                                            // 36\n        // After these have been cleaned up, we'll let them throw.                                                     // 37\n        try {                                                                                                          // 38\n          // This is intentionally an invariant that gets caught. It's the same                                        // 39\n          // behavior as without this statement except with a better message.                                          // 40\n          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);  // 42\n        } catch (ex) {                                                                                                 // 43\n          error = ex;                                                                                                  // 44\n        }                                                                                                              // 45\n        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {                                        // 47\n          // Only monitor this failure once because there tends to be a lot of the                                     // 48\n          // same error.                                                                                               // 49\n          loggedTypeFailures[error.message] = true;                                                                    // 50\n                                                                                                                       // 51\n          var stack = getStack ? getStack() : '';                                                                      // 52\n                                                                                                                       // 53\n          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');                 // 54\n        }                                                                                                              // 55\n      }                                                                                                                // 56\n    }                                                                                                                  // 57\n  }                                                                                                                    // 58\n}                                                                                                                      // 59\n                                                                                                                       // 60\nmodule.exports = checkPropTypes;                                                                                       // 61\n                                                                                                                       // 62\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"meteor-node-stubs\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/package.json                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"meteor-node-stubs\";                                                                                    // 1\nexports.version = \"0.2.11\";                                                                                            // 2\nexports.main = \"index.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/index.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar map = require(\"./map.json\");                                                                                       // 1\nvar meteorAliases = {};                                                                                                // 2\n                                                                                                                       // 3\nObject.keys(map).forEach(function (id) {                                                                               // 4\n  if (typeof map[id] === \"string\") {                                                                                   // 5\n    var aliasParts = module.id.split(\"/\");                                                                             // 6\n    aliasParts.pop();                                                                                                  // 7\n    aliasParts.push(\"node_modules\", map[id]);                                                                          // 8\n    exports[id] = meteorAliases[id + \".js\"] =                                                                          // 9\n      aliasParts.join(\"/\");                                                                                            // 10\n  } else {                                                                                                             // 11\n    exports[id] = map[id];                                                                                             // 12\n    meteorAliases[id + \".js\"] = function(){};                                                                          // 13\n  }                                                                                                                    // 14\n});                                                                                                                    // 15\n                                                                                                                       // 16\nif (typeof meteorInstall === \"function\") {                                                                             // 17\n  meteorInstall({                                                                                                      // 18\n    // Install the aliases into a node_modules directory one level up from                                             // 19\n    // the root directory, so that they do not clutter the namespace                                                   // 20\n    // available to apps and packages.                                                                                 // 21\n    \"..\": {                                                                                                            // 22\n      node_modules: meteorAliases                                                                                      // 23\n    }                                                                                                                  // 24\n  });                                                                                                                  // 25\n}                                                                                                                      // 26\n                                                                                                                       // 27\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"map.json\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/map.json                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {                                                                                                     // 1\n  \"assert\": \"assert/\",                                                                                                 // 2\n  \"buffer\": \"buffer/\",                                                                                                 // 3\n  \"child_process\": null,                                                                                               // 4\n  \"cluster\": null,                                                                                                     // 5\n  \"console\": \"console-browserify\",                                                                                     // 6\n  \"constants\": \"constants-browserify\",                                                                                 // 7\n  \"crypto\": \"../wrappers/crypto.js\",                                                                                   // 8\n  \"dgram\": null,                                                                                                       // 9\n  \"dns\": null,                                                                                                         // 10\n  \"domain\": \"domain-browser\",                                                                                          // 11\n  \"events\": \"events/\",                                                                                                 // 12\n  \"fs\": null,                                                                                                          // 13\n  \"http\": \"http-browserify\",                                                                                           // 14\n  \"https\": \"https-browserify\",                                                                                         // 15\n  \"module\": \"../wrappers/module.js\",                                                                                   // 16\n  \"net\": null,                                                                                                         // 17\n  \"os\": \"os-browserify/browser.js\",                                                                                    // 18\n  \"path\": \"path-browserify\",                                                                                           // 19\n  \"process\": \"process/browser.js\",                                                                                     // 20\n  \"punycode\": \"punycode/\",                                                                                             // 21\n  \"querystring\": \"querystring-es3/\",                                                                                   // 22\n  \"readline\": null,                                                                                                    // 23\n  \"repl\": null,                                                                                                        // 24\n  \"stream\": \"stream-browserify\",                                                                                       // 25\n  \"_stream_duplex\": \"readable-stream/duplex.js\",                                                                       // 26\n  \"_stream_passthrough\": \"readable-stream/passthrough.js\",                                                             // 27\n  \"_stream_readable\": \"readable-stream/readable.js\",                                                                   // 28\n  \"_stream_transform\": \"readable-stream/transform.js\",                                                                 // 29\n  \"_stream_writable\": \"readable-stream/writable.js\",                                                                   // 30\n  \"string_decoder\": \"string_decoder/\",                                                                                 // 31\n  \"sys\": \"util/util.js\",                                                                                               // 32\n  \"timers\": \"timers-browserify\",                                                                                       // 33\n  \"tls\": null,                                                                                                         // 34\n  \"tty\": \"tty-browserify\",                                                                                             // 35\n  \"url\": \"url/\",                                                                                                       // 36\n  \"util\": \"util/util.js\",                                                                                              // 37\n  \"vm\": \"vm-browserify\",                                                                                               // 38\n  \"zlib\": \"browserify-zlib\"                                                                                            // 39\n};                                                                                                                     // 40\n                                                                                                                       // 41\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"deps\":{\"domain.js\":function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/deps/domain.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire(\"domain-browser\");                                                                                             // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"node_modules\":{\"domain-browser\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/domain-browser/package.json                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"domain-browser\";                                                                                       // 1\nexports.version = \"1.1.7\";                                                                                             // 2\nexports.main = \"./index.js\";                                                                                           // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/domain-browser/index.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// This file should be ES5 compatible                                                                                  // 1\n/* eslint prefer-spread:0, no-var:0, prefer-reflect:0, no-magic-numbers:0 */                                           // 2\n'use strict'                                                                                                           // 3\nmodule.exports = (function () {                                                                                        // 4\n\t// Import Events                                                                                                      // 5\n\tvar events = require('events')                                                                                        // 6\n                                                                                                                       // 7\n\t// Export Domain                                                                                                      // 8\n\tvar domain = {}                                                                                                       // 9\n\tdomain.createDomain = domain.create = function () {                                                                   // 10\n\t\tvar d = new events.EventEmitter()                                                                                    // 11\n                                                                                                                       // 12\n\t\tfunction emitError (e) {                                                                                             // 13\n\t\t\td.emit('error', e)                                                                                                  // 14\n\t\t}                                                                                                                    // 15\n                                                                                                                       // 16\n\t\td.add = function (emitter) {                                                                                         // 17\n\t\t\temitter.on('error', emitError)                                                                                      // 18\n\t\t}                                                                                                                    // 19\n\t\td.remove = function (emitter) {                                                                                      // 20\n\t\t\temitter.removeListener('error', emitError)                                                                          // 21\n\t\t}                                                                                                                    // 22\n\t\td.bind = function (fn) {                                                                                             // 23\n\t\t\treturn function () {                                                                                                // 24\n\t\t\t\tvar args = Array.prototype.slice.call(arguments)                                                                   // 25\n\t\t\t\ttry {                                                                                                              // 26\n\t\t\t\t\tfn.apply(null, args)                                                                                              // 27\n\t\t\t\t}                                                                                                                  // 28\n\t\t\t\tcatch (err) {                                                                                                      // 29\n\t\t\t\t\temitError(err)                                                                                                    // 30\n\t\t\t\t}                                                                                                                  // 31\n\t\t\t}                                                                                                                   // 32\n\t\t}                                                                                                                    // 33\n\t\td.intercept = function (fn) {                                                                                        // 34\n\t\t\treturn function (err) {                                                                                             // 35\n\t\t\t\tif ( err ) {                                                                                                       // 36\n\t\t\t\t\temitError(err)                                                                                                    // 37\n\t\t\t\t}                                                                                                                  // 38\n\t\t\t\telse {                                                                                                             // 39\n\t\t\t\t\tvar args = Array.prototype.slice.call(arguments, 1)                                                               // 40\n\t\t\t\t\ttry {                                                                                                             // 41\n\t\t\t\t\t\tfn.apply(null, args)                                                                                             // 42\n\t\t\t\t\t}                                                                                                                 // 43\n\t\t\t\t\tcatch (err) {                                                                                                     // 44\n\t\t\t\t\t\temitError(err)                                                                                                   // 45\n\t\t\t\t\t}                                                                                                                 // 46\n\t\t\t\t}                                                                                                                  // 47\n\t\t\t}                                                                                                                   // 48\n\t\t}                                                                                                                    // 49\n\t\td.run = function (fn) {                                                                                              // 50\n\t\t\ttry {                                                                                                               // 51\n\t\t\t\tfn()                                                                                                               // 52\n\t\t\t}                                                                                                                   // 53\n\t\t\tcatch (err) {                                                                                                       // 54\n\t\t\t\temitError(err)                                                                                                     // 55\n\t\t\t}                                                                                                                   // 56\n\t\t\treturn this                                                                                                         // 57\n\t\t}                                                                                                                    // 58\n\t\td.dispose = function () {                                                                                            // 59\n\t\t\tthis.removeAllListeners()                                                                                           // 60\n\t\t\treturn this                                                                                                         // 61\n\t\t}                                                                                                                    // 62\n\t\td.enter = d.exit = function () {                                                                                     // 63\n\t\t\treturn this                                                                                                         // 64\n\t\t}                                                                                                                    // 65\n\t\treturn d                                                                                                             // 66\n\t}                                                                                                                     // 67\n\treturn domain                                                                                                         // 68\n}).call(this)                                                                                                          // 69\n                                                                                                                       // 70\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"events\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/events/package.json                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"events\";                                                                                               // 1\nexports.version = \"1.1.1\";                                                                                             // 2\nexports.main = \"./events.js\";                                                                                          // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"events.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/events/events.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Copyright Joyent, Inc. and other Node contributors.                                                                 // 1\n//                                                                                                                     // 2\n// Permission is hereby granted, free of charge, to any person obtaining a                                             // 3\n// copy of this software and associated documentation files (the                                                       // 4\n// \"Software\"), to deal in the Software without restriction, including                                                 // 5\n// without limitation the rights to use, copy, modify, merge, publish,                                                 // 6\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 7\n// persons to whom the Software is furnished to do so, subject to the                                                  // 8\n// following conditions:                                                                                               // 9\n//                                                                                                                     // 10\n// The above copyright notice and this permission notice shall be included                                             // 11\n// in all copies or substantial portions of the Software.                                                              // 12\n//                                                                                                                     // 13\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 14\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 15\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 16\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 17\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 18\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 19\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 20\n                                                                                                                       // 21\nfunction EventEmitter() {                                                                                              // 22\n  this._events = this._events || {};                                                                                   // 23\n  this._maxListeners = this._maxListeners || undefined;                                                                // 24\n}                                                                                                                      // 25\nmodule.exports = EventEmitter;                                                                                         // 26\n                                                                                                                       // 27\n// Backwards-compat with node 0.10.x                                                                                   // 28\nEventEmitter.EventEmitter = EventEmitter;                                                                              // 29\n                                                                                                                       // 30\nEventEmitter.prototype._events = undefined;                                                                            // 31\nEventEmitter.prototype._maxListeners = undefined;                                                                      // 32\n                                                                                                                       // 33\n// By default EventEmitters will print a warning if more than 10 listeners are                                         // 34\n// added to it. This is a useful default which helps finding memory leaks.                                             // 35\nEventEmitter.defaultMaxListeners = 10;                                                                                 // 36\n                                                                                                                       // 37\n// Obviously not all Emitters should be limited to 10. This function allows                                            // 38\n// that to be increased. Set to zero for unlimited.                                                                    // 39\nEventEmitter.prototype.setMaxListeners = function(n) {                                                                 // 40\n  if (!isNumber(n) || n < 0 || isNaN(n))                                                                               // 41\n    throw TypeError('n must be a positive number');                                                                    // 42\n  this._maxListeners = n;                                                                                              // 43\n  return this;                                                                                                         // 44\n};                                                                                                                     // 45\n                                                                                                                       // 46\nEventEmitter.prototype.emit = function(type) {                                                                         // 47\n  var er, handler, len, args, i, listeners;                                                                            // 48\n                                                                                                                       // 49\n  if (!this._events)                                                                                                   // 50\n    this._events = {};                                                                                                 // 51\n                                                                                                                       // 52\n  // If there is no 'error' event listener then throw.                                                                 // 53\n  if (type === 'error') {                                                                                              // 54\n    if (!this._events.error ||                                                                                         // 55\n        (isObject(this._events.error) && !this._events.error.length)) {                                                // 56\n      er = arguments[1];                                                                                               // 57\n      if (er instanceof Error) {                                                                                       // 58\n        throw er; // Unhandled 'error' event                                                                           // 59\n      } else {                                                                                                         // 60\n        // At least give some kind of context to the user                                                              // 61\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');                                      // 62\n        err.context = er;                                                                                              // 63\n        throw err;                                                                                                     // 64\n      }                                                                                                                // 65\n    }                                                                                                                  // 66\n  }                                                                                                                    // 67\n                                                                                                                       // 68\n  handler = this._events[type];                                                                                        // 69\n                                                                                                                       // 70\n  if (isUndefined(handler))                                                                                            // 71\n    return false;                                                                                                      // 72\n                                                                                                                       // 73\n  if (isFunction(handler)) {                                                                                           // 74\n    switch (arguments.length) {                                                                                        // 75\n      // fast cases                                                                                                    // 76\n      case 1:                                                                                                          // 77\n        handler.call(this);                                                                                            // 78\n        break;                                                                                                         // 79\n      case 2:                                                                                                          // 80\n        handler.call(this, arguments[1]);                                                                              // 81\n        break;                                                                                                         // 82\n      case 3:                                                                                                          // 83\n        handler.call(this, arguments[1], arguments[2]);                                                                // 84\n        break;                                                                                                         // 85\n      // slower                                                                                                        // 86\n      default:                                                                                                         // 87\n        args = Array.prototype.slice.call(arguments, 1);                                                               // 88\n        handler.apply(this, args);                                                                                     // 89\n    }                                                                                                                  // 90\n  } else if (isObject(handler)) {                                                                                      // 91\n    args = Array.prototype.slice.call(arguments, 1);                                                                   // 92\n    listeners = handler.slice();                                                                                       // 93\n    len = listeners.length;                                                                                            // 94\n    for (i = 0; i < len; i++)                                                                                          // 95\n      listeners[i].apply(this, args);                                                                                  // 96\n  }                                                                                                                    // 97\n                                                                                                                       // 98\n  return true;                                                                                                         // 99\n};                                                                                                                     // 100\n                                                                                                                       // 101\nEventEmitter.prototype.addListener = function(type, listener) {                                                        // 102\n  var m;                                                                                                               // 103\n                                                                                                                       // 104\n  if (!isFunction(listener))                                                                                           // 105\n    throw TypeError('listener must be a function');                                                                    // 106\n                                                                                                                       // 107\n  if (!this._events)                                                                                                   // 108\n    this._events = {};                                                                                                 // 109\n                                                                                                                       // 110\n  // To avoid recursion in the case that type === \"newListener\"! Before                                                // 111\n  // adding it to the listeners, first emit \"newListener\".                                                             // 112\n  if (this._events.newListener)                                                                                        // 113\n    this.emit('newListener', type,                                                                                     // 114\n              isFunction(listener.listener) ?                                                                          // 115\n              listener.listener : listener);                                                                           // 116\n                                                                                                                       // 117\n  if (!this._events[type])                                                                                             // 118\n    // Optimize the case of one listener. Don't need the extra array object.                                           // 119\n    this._events[type] = listener;                                                                                     // 120\n  else if (isObject(this._events[type]))                                                                               // 121\n    // If we've already got an array, just append.                                                                     // 122\n    this._events[type].push(listener);                                                                                 // 123\n  else                                                                                                                 // 124\n    // Adding the second element, need to change to array.                                                             // 125\n    this._events[type] = [this._events[type], listener];                                                               // 126\n                                                                                                                       // 127\n  // Check for listener leak                                                                                           // 128\n  if (isObject(this._events[type]) && !this._events[type].warned) {                                                    // 129\n    if (!isUndefined(this._maxListeners)) {                                                                            // 130\n      m = this._maxListeners;                                                                                          // 131\n    } else {                                                                                                           // 132\n      m = EventEmitter.defaultMaxListeners;                                                                            // 133\n    }                                                                                                                  // 134\n                                                                                                                       // 135\n    if (m && m > 0 && this._events[type].length > m) {                                                                 // 136\n      this._events[type].warned = true;                                                                                // 137\n      console.error('(node) warning: possible EventEmitter memory ' +                                                  // 138\n                    'leak detected. %d listeners added. ' +                                                            // 139\n                    'Use emitter.setMaxListeners() to increase limit.',                                                // 140\n                    this._events[type].length);                                                                        // 141\n      if (typeof console.trace === 'function') {                                                                       // 142\n        // not supported in IE 10                                                                                      // 143\n        console.trace();                                                                                               // 144\n      }                                                                                                                // 145\n    }                                                                                                                  // 146\n  }                                                                                                                    // 147\n                                                                                                                       // 148\n  return this;                                                                                                         // 149\n};                                                                                                                     // 150\n                                                                                                                       // 151\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;                                                        // 152\n                                                                                                                       // 153\nEventEmitter.prototype.once = function(type, listener) {                                                               // 154\n  if (!isFunction(listener))                                                                                           // 155\n    throw TypeError('listener must be a function');                                                                    // 156\n                                                                                                                       // 157\n  var fired = false;                                                                                                   // 158\n                                                                                                                       // 159\n  function g() {                                                                                                       // 160\n    this.removeListener(type, g);                                                                                      // 161\n                                                                                                                       // 162\n    if (!fired) {                                                                                                      // 163\n      fired = true;                                                                                                    // 164\n      listener.apply(this, arguments);                                                                                 // 165\n    }                                                                                                                  // 166\n  }                                                                                                                    // 167\n                                                                                                                       // 168\n  g.listener = listener;                                                                                               // 169\n  this.on(type, g);                                                                                                    // 170\n                                                                                                                       // 171\n  return this;                                                                                                         // 172\n};                                                                                                                     // 173\n                                                                                                                       // 174\n// emits a 'removeListener' event iff the listener was removed                                                         // 175\nEventEmitter.prototype.removeListener = function(type, listener) {                                                     // 176\n  var list, position, length, i;                                                                                       // 177\n                                                                                                                       // 178\n  if (!isFunction(listener))                                                                                           // 179\n    throw TypeError('listener must be a function');                                                                    // 180\n                                                                                                                       // 181\n  if (!this._events || !this._events[type])                                                                            // 182\n    return this;                                                                                                       // 183\n                                                                                                                       // 184\n  list = this._events[type];                                                                                           // 185\n  length = list.length;                                                                                                // 186\n  position = -1;                                                                                                       // 187\n                                                                                                                       // 188\n  if (list === listener ||                                                                                             // 189\n      (isFunction(list.listener) && list.listener === listener)) {                                                     // 190\n    delete this._events[type];                                                                                         // 191\n    if (this._events.removeListener)                                                                                   // 192\n      this.emit('removeListener', type, listener);                                                                     // 193\n                                                                                                                       // 194\n  } else if (isObject(list)) {                                                                                         // 195\n    for (i = length; i-- > 0;) {                                                                                       // 196\n      if (list[i] === listener ||                                                                                      // 197\n          (list[i].listener && list[i].listener === listener)) {                                                       // 198\n        position = i;                                                                                                  // 199\n        break;                                                                                                         // 200\n      }                                                                                                                // 201\n    }                                                                                                                  // 202\n                                                                                                                       // 203\n    if (position < 0)                                                                                                  // 204\n      return this;                                                                                                     // 205\n                                                                                                                       // 206\n    if (list.length === 1) {                                                                                           // 207\n      list.length = 0;                                                                                                 // 208\n      delete this._events[type];                                                                                       // 209\n    } else {                                                                                                           // 210\n      list.splice(position, 1);                                                                                        // 211\n    }                                                                                                                  // 212\n                                                                                                                       // 213\n    if (this._events.removeListener)                                                                                   // 214\n      this.emit('removeListener', type, listener);                                                                     // 215\n  }                                                                                                                    // 216\n                                                                                                                       // 217\n  return this;                                                                                                         // 218\n};                                                                                                                     // 219\n                                                                                                                       // 220\nEventEmitter.prototype.removeAllListeners = function(type) {                                                           // 221\n  var key, listeners;                                                                                                  // 222\n                                                                                                                       // 223\n  if (!this._events)                                                                                                   // 224\n    return this;                                                                                                       // 225\n                                                                                                                       // 226\n  // not listening for removeListener, no need to emit                                                                 // 227\n  if (!this._events.removeListener) {                                                                                  // 228\n    if (arguments.length === 0)                                                                                        // 229\n      this._events = {};                                                                                               // 230\n    else if (this._events[type])                                                                                       // 231\n      delete this._events[type];                                                                                       // 232\n    return this;                                                                                                       // 233\n  }                                                                                                                    // 234\n                                                                                                                       // 235\n  // emit removeListener for all listeners on all events                                                               // 236\n  if (arguments.length === 0) {                                                                                        // 237\n    for (key in this._events) {                                                                                        // 238\n      if (key === 'removeListener') continue;                                                                          // 239\n      this.removeAllListeners(key);                                                                                    // 240\n    }                                                                                                                  // 241\n    this.removeAllListeners('removeListener');                                                                         // 242\n    this._events = {};                                                                                                 // 243\n    return this;                                                                                                       // 244\n  }                                                                                                                    // 245\n                                                                                                                       // 246\n  listeners = this._events[type];                                                                                      // 247\n                                                                                                                       // 248\n  if (isFunction(listeners)) {                                                                                         // 249\n    this.removeListener(type, listeners);                                                                              // 250\n  } else if (listeners) {                                                                                              // 251\n    // LIFO order                                                                                                      // 252\n    while (listeners.length)                                                                                           // 253\n      this.removeListener(type, listeners[listeners.length - 1]);                                                      // 254\n  }                                                                                                                    // 255\n  delete this._events[type];                                                                                           // 256\n                                                                                                                       // 257\n  return this;                                                                                                         // 258\n};                                                                                                                     // 259\n                                                                                                                       // 260\nEventEmitter.prototype.listeners = function(type) {                                                                    // 261\n  var ret;                                                                                                             // 262\n  if (!this._events || !this._events[type])                                                                            // 263\n    ret = [];                                                                                                          // 264\n  else if (isFunction(this._events[type]))                                                                             // 265\n    ret = [this._events[type]];                                                                                        // 266\n  else                                                                                                                 // 267\n    ret = this._events[type].slice();                                                                                  // 268\n  return ret;                                                                                                          // 269\n};                                                                                                                     // 270\n                                                                                                                       // 271\nEventEmitter.prototype.listenerCount = function(type) {                                                                // 272\n  if (this._events) {                                                                                                  // 273\n    var evlistener = this._events[type];                                                                               // 274\n                                                                                                                       // 275\n    if (isFunction(evlistener))                                                                                        // 276\n      return 1;                                                                                                        // 277\n    else if (evlistener)                                                                                               // 278\n      return evlistener.length;                                                                                        // 279\n  }                                                                                                                    // 280\n  return 0;                                                                                                            // 281\n};                                                                                                                     // 282\n                                                                                                                       // 283\nEventEmitter.listenerCount = function(emitter, type) {                                                                 // 284\n  return emitter.listenerCount(type);                                                                                  // 285\n};                                                                                                                     // 286\n                                                                                                                       // 287\nfunction isFunction(arg) {                                                                                             // 288\n  return typeof arg === 'function';                                                                                    // 289\n}                                                                                                                      // 290\n                                                                                                                       // 291\nfunction isNumber(arg) {                                                                                               // 292\n  return typeof arg === 'number';                                                                                      // 293\n}                                                                                                                      // 294\n                                                                                                                       // 295\nfunction isObject(arg) {                                                                                               // 296\n  return typeof arg === 'object' && arg !== null;                                                                      // 297\n}                                                                                                                      // 298\n                                                                                                                       // 299\nfunction isUndefined(arg) {                                                                                            // 300\n  return arg === void 0;                                                                                               // 301\n}                                                                                                                      // 302\n                                                                                                                       // 303\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"process\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/process/package.json                                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"process\";                                                                                              // 1\nexports.version = \"0.5.2\";                                                                                             // 2\nexports.browser = \"./browser.js\";                                                                                      // 3\nexports.main = \"./index.js\";                                                                                           // 4\n                                                                                                                       // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"browser.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/process/browser.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// shim for using process in browser                                                                                   // 1\n                                                                                                                       // 2\nvar process = module.exports = {};                                                                                     // 3\n                                                                                                                       // 4\nprocess.nextTick = (function () {                                                                                      // 5\n    var canSetImmediate = typeof window !== 'undefined'                                                                // 6\n    && window.setImmediate;                                                                                            // 7\n    var canPost = typeof window !== 'undefined'                                                                        // 8\n    && window.postMessage && window.addEventListener                                                                   // 9\n    ;                                                                                                                  // 10\n                                                                                                                       // 11\n    if (canSetImmediate) {                                                                                             // 12\n        return function (f) { return window.setImmediate(f) };                                                         // 13\n    }                                                                                                                  // 14\n                                                                                                                       // 15\n    if (canPost) {                                                                                                     // 16\n        var queue = [];                                                                                                // 17\n        window.addEventListener('message', function (ev) {                                                             // 18\n            var source = ev.source;                                                                                    // 19\n            if ((source === window || source === null) && ev.data === 'process-tick') {                                // 20\n                ev.stopPropagation();                                                                                  // 21\n                if (queue.length > 0) {                                                                                // 22\n                    var fn = queue.shift();                                                                            // 23\n                    fn();                                                                                              // 24\n                }                                                                                                      // 25\n            }                                                                                                          // 26\n        }, true);                                                                                                      // 27\n                                                                                                                       // 28\n        return function nextTick(fn) {                                                                                 // 29\n            queue.push(fn);                                                                                            // 30\n            window.postMessage('process-tick', '*');                                                                   // 31\n        };                                                                                                             // 32\n    }                                                                                                                  // 33\n                                                                                                                       // 34\n    return function nextTick(fn) {                                                                                     // 35\n        setTimeout(fn, 0);                                                                                             // 36\n    };                                                                                                                 // 37\n})();                                                                                                                  // 38\n                                                                                                                       // 39\nprocess.title = 'browser';                                                                                             // 40\nprocess.browser = true;                                                                                                // 41\nprocess.env = {};                                                                                                      // 42\nprocess.argv = [];                                                                                                     // 43\n                                                                                                                       // 44\nprocess.binding = function (name) {                                                                                    // 45\n    throw new Error('process.binding is not supported');                                                               // 46\n}                                                                                                                      // 47\n                                                                                                                       // 48\n// TODO(shtylman)                                                                                                      // 49\nprocess.cwd = function () { return '/' };                                                                              // 50\nprocess.chdir = function (dir) {                                                                                       // 51\n    throw new Error('process.chdir is not supported');                                                                 // 52\n};                                                                                                                     // 53\n                                                                                                                       // 54\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"./node_modules/meteor/modules/client.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.modules = exports, {\n  meteorInstall: meteorInstall\n});\n\n})();\n","servePath":"/packages/modules.js"}]