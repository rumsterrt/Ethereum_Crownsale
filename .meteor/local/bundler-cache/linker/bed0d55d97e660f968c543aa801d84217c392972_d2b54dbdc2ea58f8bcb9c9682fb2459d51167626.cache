[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar HTTP = Package.http.HTTP;\nvar HTTPInternals = Package.http.HTTPInternals;\nvar Web3 = Package['ethereum:web3'].Web3;\nvar BigNumber = Package['ethereum:web3'].BigNumber;\n\n/* Package-scope variables */\nvar LocalStore, Tracker, EthTools, optionalLength, options;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ethereum_tools/ethtools.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**\nTemplate Controllers\n\n@module Packages\n*/\n\n\n/**\nHelper functions for ethereum dapps\n\n@class [packages] ethereum:tools\n@constructor\n*/\n\nvar isMeteorPackage = true;\n\n// setup LocalStore if not available\nif(typeof LocalStore === 'undefined') {\n    isMeteorPackage = false;\n    LocalStore = {\n        get: function(){},\n        set: function(){}\n    };\n}\n\n// stup Tracker if not available\nif(typeof Tracker === 'undefined')\n    Tracker = {\n        Dependency: function(){\n            return {\n                depend: function(){},\n                changed: function(){}\n            }\n        }\n    };\n\nvar dependency = new Tracker.Dependency;\n\n/**\nCheck for supported currencies\n\n@method supportedCurrencies\n@param {String} unit\n@return {String}\n*/\nvar supportedCurrencies = function(unit){\n    return (unit === 'usd' ||\n           unit === 'eur' ||\n           unit === 'btc' ||\n           unit === 'gbp' ||\n           unit === 'brl');\n};\n\n/**\nGets the ether unit if not set from localstorage\n\n@method getUnit\n@param {String} unit\n@return {String}\n*/\nvar getUnit = function(unit){\n    if(!_.isString(unit)) {\n        unit = LocalStore.get('dapp_etherUnit');\n\n        if(!unit) {\n            unit = 'ether';\n            LocalStore.set('dapp_etherUnit', unit);\n        }\n    }\n\n    return unit;\n};\n\n\n\n/**\nHelper functions for ethereum dapps\n\n@class EthTools\n@constructor\n*/\n\nEthTools = {\n    lang: 'en'\n};\n\nif(isMeteorPackage) {\n\n    /**\n    Sets the default unit used by all EthTools functions, if no unit is provided.\n\n        EthTools.setUnit('ether')\n\n    @method setUnit\n    @param {String} unit the unit like 'ether', or 'eur'\n    @param {Boolean}\n    **/\n    EthTools.setUnit = function(unit){\n        if(supportedCurrencies(unit)) {\n            LocalStore.set('dapp_etherUnit', unit);\n            return true;\n        } else {\n            try {\n                web3.toWei(1, unit);\n                LocalStore.set('dapp_etherUnit', unit);\n                return true;\n            } catch(e) {\n                return false;\n            }\n        }\n    };\n\n    /**\n    Get the default unit used by all EthTools functions, if no unit is provided.\n\n        EthTools.getUnit()\n\n    @method getUnit\n    @return {String} unit the unit like 'ether', or 'eur'\n    **/\n    EthTools.getUnit = function(){\n        return LocalStore.get('dapp_etherUnit');\n    };\n}\n\n/**\nSets the locale to display numbers in different formats.\n\n    EthTools.setLocale('de')\n\n@method language\n@param {String} lang the locale like \"de\" or \"de-DE\"\n**/\nEthTools.setLocale = function(lang){\n    var lang = lang.substr(0,2).toLowerCase();\n    // numeral.language(lang);\n    EthTools.lang = lang;\n\n    dependency.changed();\n\n    return lang;\n};\n\n/**\nFormats a given number\n\n    EthTools.formatNumber(10000, \"0.0[000]\")\n\n@method formatNumber\n@param {Number|String|BigNumber} number the number to format\n@param {String} format           the format string e.g. \"0,0.0[000]\" see http://numeraljs.com for more.\n@return {String} The formated time\n**/\nEthTools.formatNumber = function(number, format){\n    var length = optionalLength = 0;\n    dependency.depend();\n\n    if(!_.isFinite(number) && !(number instanceof BigNumber))\n        number = 0;\n\n    if(format instanceof Spacebars.kw)\n        format = null;\n\n    if(_.isString(number))\n        number = new BigNumber(number, 10);\n    if(_.isFinite(number) && !_.isObject(number))\n        number = new BigNumber(number);\n\n    options = (EthTools.lang === 'en')\n        ?   { decimalSeparator: '.',\n              groupSeparator: ',',\n              groupSize: 3\n            }\n        :   { decimalSeparator: ',',\n              groupSeparator: ' ',\n              groupSize: 3\n            };\n    BigNumber.config({ FORMAT: options });\n\n\n    // get segment positions (0,0. | 0 | [0])\n    if(format && ~format.indexOf('.')) {\n        var decimalPos = format.indexOf('.');\n        if(~format.indexOf('[')) {\n            length = format.substr(decimalPos, format.indexOf('[') - decimalPos).replace(/[\\.\\[\\]]/g,'').length;\n            optionalLength = format.substr(format.indexOf('[')).replace(/[\\[\\]]/g,'').length;\n        } else {\n            length = format.substr(decimalPos).replace(/[\\.\\[\\]]/g,'').length;\n            optionalLength = 0;\n        }\n    }\n    var fullLength = length + optionalLength;\n    number = number.toFormat(fullLength ? fullLength : undefined);\n\n    // if segements are detected, rebuild the number string\n    if(fullLength) {\n        var beforeDecimal = number.substr(0, number.indexOf(options.decimalSeparator) + 1);\n        var afterDecimal = number.replace(beforeDecimal, '').substr(0, length);\n        var afterDecimalOptional = number.replace(beforeDecimal, '').substr(length, optionalLength).replace(/0*$/,'');\n        beforeDecimal = beforeDecimal.replace(options.decimalSeparator, '');\n\n        return (!afterDecimal && !afterDecimalOptional)\n            ? beforeDecimal\n            : beforeDecimal + options.decimalSeparator + afterDecimal + afterDecimalOptional;\n\n    // otherwise simply return the formated number\n    } else {\n        return number;\n    }\n};\n\n/**\nFormats a number of wei to a balance.\n\n    EthTools.formatBalance(myNumber, \"0,0.0[0000] unit\")\n\n@method (formatBalance)\n@param {String} number\n@param {String} format       the format string\n@return {String} The formatted number\n**/\nEthTools.formatBalance = function(number, format, unit){\n    dependency.depend();\n\n    if(!_.isFinite(number) && !(number instanceof BigNumber))\n        number = 0;\n\n    if(format instanceof Spacebars.kw)\n        format = null;\n\n    format = format || '0,0.[00000000]';\n\n    unit = getUnit(unit);\n\n    if(typeof EthTools.ticker !== 'undefined' && supportedCurrencies(unit)) {\n        var ticker = EthTools.ticker.findOne(unit, {fields: {price: 1}});\n\n        // convert first to ether\n        number = web3.fromWei(number, 'ether');\n\n        // then times the currency\n        if(ticker) {\n            number = (number instanceof BigNumber || _.isObject(number))\n                ? number.times(ticker.price)\n                : new BigNumber(String(number), 10).times(ticker.price);\n\n        } else {\n            number = '0';\n        }\n\n    } else {\n        number = web3.fromWei(number, unit.toLowerCase());\n    }\n\n    var isUppercase = (format.indexOf('UNIT') !== -1);\n\n    var cleanedFormat = format.replace(/ *unit */i,'').replace(/ +/,'');\n    var format = format.replace(cleanedFormat, '__format__');\n\n    if(format.toLowerCase().indexOf('unit') !== -1) {\n        return format.replace('__format__', EthTools.formatNumber(number, cleanedFormat)).replace(/unit/i, (isUppercase ? unit.toUpperCase() : unit));\n    } else\n        return EthTools.formatNumber(number, cleanedFormat);\n};\n\n\n/**\nFormats any of the supported currency to ethereum wei.\n\n    EthTools.toWei(myNumber, unit)\n\n@method (toWei)\n@param {String} number\n@return {String} unit\n**/\nEthTools.toWei = function(number, unit){\n\n    if(!_.isFinite(number) && !(number instanceof BigNumber))\n        return number;\n\n    unit = getUnit(unit);\n\n    if(typeof EthTools.ticker !== 'undefined' && supportedCurrencies(unit)) {\n        var ticker = EthTools.ticker.findOne(unit, {fields: {price: 1}});\n\n        // convert first to ether\n        number = web3.toWei(number, 'ether');\n\n        // then times the currency\n        if(ticker) {\n            number = (number instanceof BigNumber || _.isObject(number))\n                ? number.dividedBy(ticker.price)\n                : new BigNumber(String(number), 10).dividedBy(ticker.price);\n\n            // make sure the number is flat\n            number = number.round(0).toString(10);\n        } else {\n            number = '0';\n        }\n\n    } else {\n        number = web3.toWei(number, unit.toLowerCase());\n\n    }\n\n    return number;\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ethereum_tools/ticker.js                                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Price ticker\nEthTools.ticker = new Mongo.Collection('ethereum_price_ticker', {connection: null});\nif(Meteor.isClient)\n    new PersistentMinimongo(EthTools.ticker);\n\nEthTools.ticker.start = function(options){\n    options = options || {};\n    if (!options.currencies){\n        options.currencies = ['BTC', 'USD', 'EUR'];\n    }\n    var url = 'https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=' + options.currencies.join(',');\n    if (options.extraParams) {\n        url += '&extraParams='+ options.extraParams;\n    }\n\n    var updatePrice = function(e, res){\n\n        if(!e && res && res.statusCode === 200) {\n            var content = JSON.parse(res.content);\n\n            if(content){\n                _.each(content, function(price, key){\n                    var name = key.toLowerCase();\n\n                    // make sure its a number and nothing else!\n                    if(_.isFinite(price)) {\n                        EthTools.ticker.upsert(name, {$set: {\n                            price: String(price),\n                            timestamp: null\n                        }});\n                    }\n\n                });\n            }\n        } else {\n            console.warn('Can not connect to https://mini-api.cryptocompare.com to get price ticker data, please check your internet connection.');\n        }\n    };\n\n    // update right away\n    HTTP.get(url, updatePrice);\n\n    // update prices\n    Meteor.setInterval(function(){\n        HTTP.get(url, updatePrice);\n    }, 1000 * 30);\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['ethereum:tools'] = {}, {\n  EthTools: EthTools\n});\n\n})();\n","servePath":"/packages/ethereum_tools.js"}]