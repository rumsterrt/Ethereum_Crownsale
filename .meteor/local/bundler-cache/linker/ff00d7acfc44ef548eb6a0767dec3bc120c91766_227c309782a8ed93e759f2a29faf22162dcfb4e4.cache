[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar EJSON = Package.ejson.EJSON;\n\n/* Package-scope variables */\nvar LocalStore;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////\n//                                                                            //\n// packages/frozeman_storage/LocalStore.js                                    //\n//                                                                            //\n////////////////////////////////////////////////////////////////////////////////\n                                                                              //\n                                                                              // 1\n/**                                                                           // 2\nThe LocalStore singleton.                                                     // 3\n                                                                              // 4\n@class TemplateStore                                                          // 5\n@constructor                                                                  // 6\n**/                                                                           // 7\nLocalStore = {                                                                // 8\n    /**                                                                       // 9\n    This object stores all keys and their values.                             // 10\n                                                                              // 11\n    @property keys                                                            // 12\n    @type Object                                                              // 13\n    @default {}                                                               // 14\n    @example                                                                  // 15\n                                                                              // 16\n        {                                                                     // 17\n            name->myProperty: \"myValue\",                                      // 18\n            ...                                                               // 19\n        }                                                                     // 20\n                                                                              // 21\n    **/                                                                       // 22\n    keys: {},                                                                 // 23\n                                                                              // 24\n                                                                              // 25\n    /**                                                                       // 26\n    Keeps the dependencies for the keys in the store.                         // 27\n                                                                              // 28\n    @property deps                                                            // 29\n    @type Object                                                              // 30\n    @default {}                                                               // 31\n    @example                                                                  // 32\n                                                                              // 33\n        {                                                                     // 34\n            name->myProperty: new Tracker.Dependency,                         // 35\n            ...                                                               // 36\n        }                                                                     // 37\n                                                                              // 38\n    **/                                                                       // 39\n    deps: {},                                                                 // 40\n                                                                              // 41\n    // METHODS                                                                // 42\n                                                                              // 43\n    // PRIVATE                                                                // 44\n    /**                                                                       // 45\n    Creates at least ones a `Tracker.Dependency` object to a key.             // 46\n                                                                              // 47\n    @method _ensureDeps                                                       // 48\n    @private                                                                  // 49\n    @param {String} key     the name of the key to add a dependecy tracker to\n    @return undefined                                                         // 51\n    **/                                                                       // 52\n    _ensureDeps: function (key) {                                             // 53\n        if (!this.deps[key]){                                                 // 54\n            this.deps[key] = new Tracker.Dependency;                          // 55\n        }                                                                     // 56\n    },                                                                        // 57\n\tset: function(key, value, options, callback){                                // 58\n                                                                              // 59\n        this._ensureDeps(key);                                                // 60\n                                                                              // 61\n\t\t// USE CHROME STORAGE                                                       // 62\n\t\tif(typeof chrome !== 'undefined' && chrome.storage) {                       // 63\n\t\t\tvar item = {};                                                             // 64\n\t\t\titem[key] = value;                                                         // 65\n                                                                              // 66\n\t\t\t// set                                                                     // 67\n\t\t\tchrome.storage.local.set(item, function(){                                 // 68\n                                                                              // 69\n\t\t\t\t// re-run reactive functions                                              // 70\n\t\t\t\tif(!options || options.reactive !== false)                                // 71\n\t                this.deps[key].changed();                                    // 72\n                                                                              // 73\n\t            // run callbacks                                                 // 74\n\t\t\t\tif(_.isFunction(callback))                                                // 75\n\t\t\t\t\tcallback();                                                              // 76\n\t\t\t});                                                                        // 77\n                                                                              // 78\n                                                                              // 79\n\t\t// USE LOCALSTORAGE                                                         // 80\n\t\t} else {                                                                    // 81\n\t\t\t// stringify                                                               // 82\n\t\t\tif(_.isObject(value))                                                      // 83\n\t\t\t\tvalue = EJSON.stringify(value);                                           // 84\n                                                                              // 85\n\t\t\t// set                                                                     // 86\n            // use try to prevent warnings from low cache storages            // 87\n            try {                                                             // 88\n    \t\t\tlocalStorage.setItem(key, value);                                      // 89\n            } catch(e) {                                                      // 90\n                                                                              // 91\n            }                                                                 // 92\n                                                                              // 93\n\t\t\t// re-run reactive functions                                               // 94\n\t\t\tif(!options || options.reactive !== false)                                 // 95\n                this.deps[key].changed();                                     // 96\n                                                                              // 97\n\t\t\t// run callbacks                                                           // 98\n\t\t\tif(_.isFunction(callback))                                                 // 99\n\t\t\t\tcallback();                                                               // 100\n\t\t}                                                                           // 101\n\t},                                                                           // 102\n\tget: function(key, options, callback){                                       // 103\n                                                                              // 104\n        this._ensureDeps(key);                                                // 105\n                                                                              // 106\n                                                                              // 107\n        // DEPEND REACTIVE FUNCTIONS                                          // 108\n\t\tif(!options || options.reactive !== false)                                  // 109\n            this.deps[key].depend();                                          // 110\n                                                                              // 111\n                                                                              // 112\n\t\t// use chrome storage                                                       // 113\n\t\tif(typeof chrome !== 'undefined' && chrome.storage) {                       // 114\n                                                                              // 115\n\t\t\t// get                                                                     // 116\n\t\t\tchrome.storage.local.get(key, callback);                                   // 117\n                                                                              // 118\n                                                                              // 119\n\t\t// USE LOCALSTORAGE                                                         // 120\n\t\t} else {                                                                    // 121\n\t\t\t// get                                                                     // 122\n\t\t\tvar value = localStorage.getItem(key),                                     // 123\n\t\t\t\tretunValue = value;                                                       // 124\n                                                                              // 125\n\t\t\t// try to parse                                                            // 126\n            if(value && _.isString(value)) {                                  // 127\n            \ttry {                                                            // 128\n\t                retunValue = EJSON.parse(value);                             // 129\n            \t} catch(error){                                                  // 130\n            \t\tretunValue = value;                                             // 131\n            \t}                                                                // 132\n            }                                                                 // 133\n                                                                              // 134\n            return retunValue;                                                // 135\n\t\t}                                                                           // 136\n                                                                              // 137\n\t}                                                                            // 138\n}                                                                             // 139\n////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['frozeman:storage'] = {}, {\n  LocalStore: LocalStore\n});\n\n})();\n","servePath":"/packages/frozeman_storage.js"}]